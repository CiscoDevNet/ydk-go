// This module contains a collection of YANG definitions
// for Cisco IOS-XR bundlemgr package operational data.
// 
// This module contains definitions
// for the following management objects:
//   lacp-bundles: LACP bundle data
//   bundle-information: bundle information
//   lacp-data: lacp data
//   bundles: bundles
//   lacp-bundle-members: lacp bundle members
//   bundles-adjacency: bundles adjacency
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package bundlemgr_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package bundlemgr_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper lacp-bundles}", reflect.TypeOf(LacpBundles{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:lacp-bundles", reflect.TypeOf(LacpBundles{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper bundle-information}", reflect.TypeOf(BundleInformation{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:bundle-information", reflect.TypeOf(BundleInformation{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper lacp-data}", reflect.TypeOf(LacpData{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:lacp-data", reflect.TypeOf(LacpData{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper bundles}", reflect.TypeOf(Bundles{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:bundles", reflect.TypeOf(Bundles{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper lacp-bundle-members}", reflect.TypeOf(LacpBundleMembers{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members", reflect.TypeOf(LacpBundleMembers{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper bundles-adjacency}", reflect.TypeOf(BundlesAdjacency{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:bundles-adjacency", reflect.TypeOf(BundlesAdjacency{}))
}

// BmdMlacpMbrStateEnum represents State of an mLACP device
type BmdMlacpMbrStateEnum string

const (
    // Member info NAK'd
    BmdMlacpMbrStateEnum_mbr_state_nak BmdMlacpMbrStateEnum = "mbr-state-nak"

    // No member state TLV received
    BmdMlacpMbrStateEnum_mbr_state_unknown BmdMlacpMbrStateEnum = "mbr-state-unknown"

    // Member is up
    BmdMlacpMbrStateEnum_mbr_state_up BmdMlacpMbrStateEnum = "mbr-state-up"

    // Member is down
    BmdMlacpMbrStateEnum_mbr_state_down BmdMlacpMbrStateEnum = "mbr-state-down"

    // Member is admin down
    BmdMlacpMbrStateEnum_mbr_state_admin_down BmdMlacpMbrStateEnum = "mbr-state-admin-down"

    // Member state TLV reported test
    BmdMlacpMbrStateEnum_mbr_state_test BmdMlacpMbrStateEnum = "mbr-state-test"

    // Member state TLV reported error
    BmdMlacpMbrStateEnum_mbr_state_error BmdMlacpMbrStateEnum = "mbr-state-error"
)

// BmdMlacpBdlStateEnum represents State of an mLACP device
type BmdMlacpBdlStateEnum string

const (
    // Bundle info NAK'd
    BmdMlacpBdlStateEnum_bdl_state_nak BmdMlacpBdlStateEnum = "bdl-state-nak"

    // No bundle state TLV received
    BmdMlacpBdlStateEnum_bdl_state_unknown BmdMlacpBdlStateEnum = "bdl-state-unknown"

    // No bundle config TLV with sync bit set received
    BmdMlacpBdlStateEnum_bdl_state_no_sync BmdMlacpBdlStateEnum = "bdl-state-no-sync"

    // Revertive delay timer running
    BmdMlacpBdlStateEnum_bdl_state_rec_delay BmdMlacpBdlStateEnum = "bdl-state-rec-delay"

    // Bundle is up
    BmdMlacpBdlStateEnum_bdl_state_up BmdMlacpBdlStateEnum = "bdl-state-up"

    // Bundle is down
    BmdMlacpBdlStateEnum_bdl_state_down BmdMlacpBdlStateEnum = "bdl-state-down"

    // Bundle is admin down
    BmdMlacpBdlStateEnum_bdl_state_admin_down BmdMlacpBdlStateEnum = "bdl-state-admin-down"

    // Bundle state TLV reported test
    BmdMlacpBdlStateEnum_bdl_state_test BmdMlacpBdlStateEnum = "bdl-state-test"

    // Bundle state TLV reported error
    BmdMlacpBdlStateEnum_bdl_state_error BmdMlacpBdlStateEnum = "bdl-state-error"
)

// BmdMlacpNodeSyncEnum represents Synchronization states of an mLACP device
type BmdMlacpNodeSyncEnum string

const (
    // Sync requested of device
    BmdMlacpNodeSyncEnum_node_sync_req BmdMlacpNodeSyncEnum = "node-sync-req"

    // Sync performed by device
    BmdMlacpNodeSyncEnum_node_sync_done BmdMlacpNodeSyncEnum = "node-sync-done"

    // Sync in progress from device
    BmdMlacpNodeSyncEnum_node_sync_start BmdMlacpNodeSyncEnum = "node-sync-start"

    // Initial sync pending from device
    BmdMlacpNodeSyncEnum_node_sync_init BmdMlacpNodeSyncEnum = "node-sync-init"

    // Sync not required for singleton groups
    BmdMlacpNodeSyncEnum_node_sync_singleton BmdMlacpNodeSyncEnum = "node-sync-singleton"
)

// BmdMlacpNodeStateEnum represents State of an mLACP device
type BmdMlacpNodeStateEnum string

const (
    // Missing some mLACP IG config
    BmdMlacpNodeStateEnum_node_state_incomplete BmdMlacpNodeStateEnum = "node-state-incomplete"

    // Connection rejected by peer
    BmdMlacpNodeStateEnum_node_state_conn_rejected BmdMlacpNodeStateEnum = "node-state-conn-rejected"

    // Connect timer running
    BmdMlacpNodeStateEnum_node_state_connect_sent BmdMlacpNodeStateEnum = "node-state-connect-sent"

    // Missing some ICCP IG config
    BmdMlacpNodeStateEnum_node_state_unconfigured BmdMlacpNodeStateEnum = "node-state-unconfigured"

    // ICCP declared peer node unreachable
    BmdMlacpNodeStateEnum_node_state_unreachable BmdMlacpNodeStateEnum = "node-state-unreachable"

    // ICCP declared peer node down
    BmdMlacpNodeStateEnum_node_state_iccp_down BmdMlacpNodeStateEnum = "node-state-iccp-down"

    // System info NAK'd
    BmdMlacpNodeStateEnum_node_state_nak BmdMlacpNodeStateEnum = "node-state-nak"

    // No system state TLV received
    BmdMlacpNodeStateEnum_node_state_unknown BmdMlacpNodeStateEnum = "node-state-unknown"

    // System state TLV reported down
    BmdMlacpNodeStateEnum_node_state_mlacp_down BmdMlacpNodeStateEnum = "node-state-mlacp-down"

    // System state TLV reported admin down
    BmdMlacpNodeStateEnum_node_state_admin_down BmdMlacpNodeStateEnum = "node-state-admin-down"

    // System is isolated from core network
    BmdMlacpNodeStateEnum_node_state_pe_isolated BmdMlacpNodeStateEnum = "node-state-pe-isolated"

    // System state TLV reported error
    BmdMlacpNodeStateEnum_node_state_error BmdMlacpNodeStateEnum = "node-state-error"

    // System state TLV reported test
    BmdMlacpNodeStateEnum_node_state_test BmdMlacpNodeStateEnum = "node-state-test"

    // System is up
    BmdMlacpNodeStateEnum_node_state_up BmdMlacpNodeStateEnum = "node-state-up"
)

// LacpChurnstates represents Lacp churnstates
type LacpChurnstates string

const (
    // The port is synchronized correctly
    LacpChurnstates_no_churn LacpChurnstates = "no-churn"

    // The port is OutOfSync and the churn timer has
    // expired
    LacpChurnstates_churn LacpChurnstates = "churn"

    // The port is OutOfSync but the churn timer has
    // not expired
    LacpChurnstates_churn_monitor LacpChurnstates = "churn-monitor"
)

// Rxstates represents Rxstates
type Rxstates string

const (
    // current rx
    Rxstates_current_rx Rxstates = "current-rx"

    // expired
    Rxstates_expired Rxstates = "expired"

    // defaulted
    Rxstates_defaulted Rxstates = "defaulted"

    // initialize
    Rxstates_initialize Rxstates = "initialize"

    // lacp disabled
    Rxstates_lacp_disabled Rxstates = "lacp-disabled"

    // port disabled
    Rxstates_port_disabled Rxstates = "port-disabled"
)

// LacpPeriodState represents Lacp period state
type LacpPeriodState string

const (
    // Packets are being sent using a long period
    LacpPeriodState_period_s_low LacpPeriodState = "period-s-low"

    // Packets are being sent using a short period
    LacpPeriodState_period_fast LacpPeriodState = "period-fast"

    // Packets are not being sent
    LacpPeriodState_period_none LacpPeriodState = "period-none"
)

// LacpSelState represents Lacp sel state
type LacpSelState string

const (
    // The link is Unselected
    LacpSelState_unselected LacpSelState = "unselected"

    // The link is Standby
    LacpSelState_standby LacpSelState = "standby"

    // The link is Selected
    LacpSelState_selected LacpSelState = "selected"
)

// BmdBagEventRgItem represents Description of an event for a RG
type BmdBagEventRgItem string

const (
    // RG structure created
    BmdBagEventRgItem_bmd_event_rg_idb_create BmdBagEventRgItem = "bmd-event-rg-idb-create"

    // RG configured by user
    BmdBagEventRgItem_bmd_event_rg_configured BmdBagEventRgItem = "bmd-event-rg-configured"

    // User changed the configuration
    BmdBagEventRgItem_bmd_event_rg_user_config BmdBagEventRgItem = "bmd-event-rg-user-config"

    // Connection to peer
    BmdBagEventRgItem_bmd_event_rg_connect_ion BmdBagEventRgItem = "bmd-event-rg-connect-ion"

    // Data received
    BmdBagEventRgItem_bmd_event_rg_data BmdBagEventRgItem = "bmd-event-rg-data"

    // Sync performed
    BmdBagEventRgItem_bmd_event_rg_sync BmdBagEventRgItem = "bmd-event-rg-sync"

    // First retry
    BmdBagEventRgItem_bmd_event_rg_first_retry BmdBagEventRgItem = "bmd-event-rg-first-retry"

    // Last error
    BmdBagEventRgItem_bmd_event_rg_error BmdBagEventRgItem = "bmd-event-rg-error"

    // mLACP TLV received
    BmdBagEventRgItem_bmd_event_rg_mlacp_tlv BmdBagEventRgItem = "bmd-event-rg-mlacp-tlv"

    // ICCP event received
    BmdBagEventRgItem_bmd_event_rg_iccp_event BmdBagEventRgItem = "bmd-event-rg-iccp-event"

    // Number of RG events
    BmdBagEventRgItem_bmd_event_rg_count BmdBagEventRgItem = "bmd-event-rg-count"
)

// BmdBagEventBdlItem represents Description of an event for a bundle
type BmdBagEventBdlItem string

const (
    // Bundle structure created
    BmdBagEventBdlItem_bmd_event_bdl_idb_create BmdBagEventBdlItem = "bmd-event-bdl-idb-create"

    // Bundle configured by user
    BmdBagEventBdlItem_bmd_event_bdl_configured BmdBagEventBdlItem = "bmd-event-bdl-configured"

    // Bundle's IM state changed
    BmdBagEventBdlItem_bmd_event_bdl_im_state BmdBagEventBdlItem = "bmd-event-bdl-im-state"

    // Member added to the bundle
    BmdBagEventBdlItem_bmd_event_bdl_mbr_added BmdBagEventBdlItem = "bmd-event-bdl-mbr-added"

    // Member removed from the bundle
    BmdBagEventBdlItem_bmd_event_bdl_mbr_deleted BmdBagEventBdlItem = "bmd-event-bdl-mbr-deleted"

    // Bundle's MAC address changed
    BmdBagEventBdlItem_bmd_event_bdl_mac_addr BmdBagEventBdlItem = "bmd-event-bdl-mac-addr"

    // First retry
    BmdBagEventBdlItem_bmd_event_bdl_first_retry BmdBagEventBdlItem = "bmd-event-bdl-first-retry"

    // User changed the configuration
    BmdBagEventBdlItem_bmd_event_bdl_user_config BmdBagEventBdlItem = "bmd-event-bdl-user-config"

    // Last error
    BmdBagEventBdlItem_bmd_event_bdl_error BmdBagEventBdlItem = "bmd-event-bdl-error"

    // mLACP TLV received
    BmdBagEventBdlItem_bmd_event_bdl_mlacp_tlv BmdBagEventBdlItem = "bmd-event-bdl-mlacp-tlv"

    // redundancy role change
    BmdBagEventBdlItem_bmd_event_bdl_redundancy_role BmdBagEventBdlItem = "bmd-event-bdl-redundancy-role"

    // BFD state change
    BmdBagEventBdlItem_bdl_bfd_state_change BmdBagEventBdlItem = "bdl-bfd-state-change"

    // Inter-chassis link mode changed
    BmdBagEventBdlItem_bmd_event_bdl_icl BmdBagEventBdlItem = "bmd-event-bdl-icl"

    // Number of bundle events
    BmdBagEventBdlItem_bmd_event_bdl_count BmdBagEventBdlItem = "bmd-event-bdl-count"
)

// BmdBagEventData represents Type of additional info for an event
type BmdBagEventData string

const (
    // No additional data
    BmdBagEventData_bmd_bag_evt_data_none BmdBagEventData = "bmd-bag-evt-data-none"

    // Additional data is an error code
    BmdBagEventData_bmd_bag_evt_data_error BmdBagEventData = "bmd-bag-evt-data-error"

    // Additional data is a string
    BmdBagEventData_bmd_bag_evt_data_string BmdBagEventData = "bmd-bag-evt-data-string"
)

// BmdBagEventMbrItem represents Description of an event for a member
type BmdBagEventMbrItem string

const (
    // Member structure created
    BmdBagEventMbrItem_bmd_event_mbr_idb_create BmdBagEventMbrItem = "bmd-event-mbr-idb-create"

    // Added to bundle
    BmdBagEventMbrItem_bmd_event_mbr_bdl_add BmdBagEventMbrItem = "bmd-event-mbr-bdl-add"

    // Member's IM state changed
    BmdBagEventMbrItem_bmd_event_mbr_im_state BmdBagEventMbrItem = "bmd-event-mbr-im-state"

    // Sel logic state changed
    BmdBagEventMbrItem_bmd_event_mbr_sel_logic BmdBagEventMbrItem = "bmd-event-mbr-sel-logic"

    // Mux state changed
    BmdBagEventMbrItem_bmd_event_mbr_mux BmdBagEventMbrItem = "bmd-event-mbr-mux"

    // BFD state changed
    BmdBagEventMbrItem_bmd_event_mbr_bfd BmdBagEventMbrItem = "bmd-event-mbr-bfd"

    // Expired
    BmdBagEventMbrItem_bmd_event_mbr_expired BmdBagEventMbrItem = "bmd-event-mbr-expired"

    // Defaulted
    BmdBagEventMbrItem_bmd_event_mbr_defaulted BmdBagEventMbrItem = "bmd-event-mbr-defaulted"

    // First retry
    BmdBagEventMbrItem_bmd_event_mbr_first_retry BmdBagEventMbrItem = "bmd-event-mbr-first-retry"

    // Message from BML
    BmdBagEventMbrItem_bmd_event_mbr_msg BmdBagEventMbrItem = "bmd-event-mbr-msg"

    // Last error
    BmdBagEventMbrItem_bmd_event_mbr_error BmdBagEventMbrItem = "bmd-event-mbr-error"

    // mLACP TLV received
    BmdBagEventMbrItem_bmd_event_mbr_mlacp_tlv BmdBagEventMbrItem = "bmd-event-mbr-mlacp-tlv"

    // redundancy role change
    BmdBagEventMbrItem_bmd_event_mbr_redundancy_role BmdBagEventMbrItem = "bmd-event-mbr-redundancy-role"

    // Number of member events
    BmdBagEventMbrItem_bmd_event_mbr_count BmdBagEventMbrItem = "bmd-event-mbr-count"
)

// BmdBagTarget represents Scope of information
type BmdBagTarget string

const (
    // Information for a member
    BmdBagTarget_bm_bag_target_mbr BmdBagTarget = "bm-bag-target-mbr"

    // Information for a bundle
    BmdBagTarget_bm_bag_target_bdl BmdBagTarget = "bm-bag-target-bdl"

    // Information for a node
    BmdBagTarget_bm_bag_target_node BmdBagTarget = "bm-bag-target-node"

    // Information for an RG
    BmdBagTarget_bm_bag_target_rg BmdBagTarget = "bm-bag-target-rg"
)

// BmdSwitchReason represents Bmd switch reason
type BmdSwitchReason string

const (
    // Switch is permitted
    BmdSwitchReason_bm_switch_reason_none BmdSwitchReason = "bm-switch-reason-none"

    // Switch has no effect
    BmdSwitchReason_bm_switch_reason_noop BmdSwitchReason = "bm-switch-reason-noop"

    // mLACP not configured
    BmdSwitchReason_bm_switch_reason_not_mlacp BmdSwitchReason = "bm-switch-reason-not-mlacp"

    // Brute-force or revertive switchover is in
    // effect
    BmdSwitchReason_bm_switch_reason_revertive BmdSwitchReason = "bm-switch-reason-revertive"

    // Would-be active bundle is not ready
    BmdSwitchReason_bm_switch_reason_bdl_down BmdSwitchReason = "bm-switch-reason-bdl-down"

    // Recovery delay in effect, applications may not
    // be fully synced
    BmdSwitchReason_bm_switch_reason_recovery BmdSwitchReason = "bm-switch-reason-recovery"

    // Preceding switch action not viable
    BmdSwitchReason_bm_switch_reason_preceding_error BmdSwitchReason = "bm-switch-reason-preceding-error"

    // Switch actions are scheduled incorrectly
    BmdSwitchReason_bm_switch_reason_wrong_order BmdSwitchReason = "bm-switch-reason-wrong-order"

    // The ICCP group is operating in singleton mode
    BmdSwitchReason_bm_switch_reason_singleton BmdSwitchReason = "bm-switch-reason-singleton"
)

// BmdBagMlacpSchActionItem represents Description of scheduled actions for a bundle
type BmdBagMlacpSchActionItem string

const (
    // mLACP Switchover scheduled
    BmdBagMlacpSchActionItem_switchover BmdBagMlacpSchActionItem = "switchover"

    // mLACP Switchback scheduled
    BmdBagMlacpSchActionItem_switchback BmdBagMlacpSchActionItem = "switchback"
)

// BmdMemberTypeEnum represents Bmd member type enum
type BmdMemberTypeEnum string

const (
    // Member has been configured on the local device
    BmdMemberTypeEnum_bmd_mbr_local BmdMemberTypeEnum = "bmd-mbr-local"

    // Member has been configured on an mLACP peer
    // device
    BmdMemberTypeEnum_bmd_mbr_foreign BmdMemberTypeEnum = "bmd-mbr-foreign"

    // Member's type is unknown
    BmdMemberTypeEnum_bmd_mbr_unknown BmdMemberTypeEnum = "bmd-mbr-unknown"
)

// BmMuxreason represents Bm muxreason
type BmMuxreason string

const (
    // Selection logic has not yet been run for the
    // bundle this link is a member of
    BmMuxreason_bm_mux_reason_no_reason BmMuxreason = "bm-mux-reason-no-reason"

    // Link is down
    BmMuxreason_bm_mux_reason_link_down BmMuxreason = "bm-mux-reason-link-down"

    // Link is being removed from the bundle
    BmMuxreason_bm_mux_reason_link_deleted BmMuxreason = "bm-mux-reason-link-deleted"

    // Link has wrong duplexity
    BmMuxreason_bm_mux_reason_duplex BmMuxreason = "bm-mux-reason-duplex"

    // Link has wrong bandwidth
    BmMuxreason_bm_mux_reason_bandwidth BmMuxreason = "bm-mux-reason-bandwidth"

    // Link is a loopback interface
    BmMuxreason_bm_mux_reason_loop_back BmMuxreason = "bm-mux-reason-loop-back"

    // Link has wrong activity type
    BmMuxreason_bm_mux_reason_activity_type BmMuxreason = "bm-mux-reason-activity-type"

    // Link's bundle already has maximum number of
    // members allowed
    BmMuxreason_bm_mux_reason_link_limit BmMuxreason = "bm-mux-reason-link-limit"

    // Link is attached to a shared medium
    BmMuxreason_bm_mux_reason_shared BmMuxreason = "bm-mux-reason-shared"

    // Link has wrong LAG ID
    BmMuxreason_bm_mux_reason_lagid BmMuxreason = "bm-mux-reason-lagid"

    // Link's bundle does not exist
    BmMuxreason_bm_mux_reason_no_bundle BmMuxreason = "bm-mux-reason-no-bundle"

    // Link's bundle has no primary link
    BmMuxreason_bm_mux_reason_no_primary BmMuxreason = "bm-mux-reason-no-primary"

    // Link's bundle is shut down
    BmMuxreason_bm_mux_reason_bundle_down BmMuxreason = "bm-mux-reason-bundle-down"

    // Link is marked individual by partner
    BmMuxreason_bm_mux_reason_individual BmMuxreason = "bm-mux-reason-individual"

    // Link is Defaulted, suggesting it is not
    // receiving LACPDUs from the peer
    BmMuxreason_bm_mux_reason_defaulted BmMuxreason = "bm-mux-reason-defaulted"

    // Link is in InSync state
    BmMuxreason_bm_mux_reason_in_sync BmMuxreason = "bm-mux-reason-in-sync"

    // Link is in Collecting state
    BmMuxreason_bm_mux_reason_collecting BmMuxreason = "bm-mux-reason-collecting"

    // Link exceeds maximum active limit
    BmMuxreason_bm_mux_reason_active_link_limit BmMuxreason = "bm-mux-reason-active-link-limit"

    // Link is in Distributing state
    BmMuxreason_bm_mux_reason_distributing BmMuxreason = "bm-mux-reason-distributing"

    // Enumeration maximum value
    BmMuxreason_bm_mux_reason_count BmMuxreason = "bm-mux-reason-count"
)

// BmdMemberState represents Bmd member state
type BmdMemberState string

const (
    // Member is configured
    BmdMemberState_bmd_mbr_state_configured BmdMemberState = "bmd-mbr-state-configured"

    // Member is standby
    BmdMemberState_bmd_mbr_state_standby BmdMemberState = "bmd-mbr-state-standby"

    // Member is hot standby
    BmdMemberState_bmd_mbr_state_hot_standby BmdMemberState = "bmd-mbr-state-hot-standby"

    // Member is negotiating
    BmdMemberState_bmd_mbr_state_negotiating BmdMemberState = "bmd-mbr-state-negotiating"

    // Member has a BFD session running
    BmdMemberState_bmd_mbr_state_bfd_running BmdMemberState = "bmd-mbr-state-bfd-running"

    // Member is active
    BmdMemberState_bmd_mbr_state_active BmdMemberState = "bmd-mbr-state-active"
)

// BmSeverity represents Severity of the member state reason
type BmSeverity string

const (
    // OK
    BmSeverity_ok BmSeverity = "ok"

    // Information
    BmSeverity_information BmSeverity = "information"

    // Misconfiguration
    BmSeverity_misconfiguration BmSeverity = "misconfiguration"

    // Warning
    BmSeverity_warning BmSeverity = "warning"

    // Error
    BmSeverity_error BmSeverity = "error"
)

// BmStateReasonTarget represents Scope of the state reason
type BmStateReasonTarget string

const (
    // Member applicable reason
    BmStateReasonTarget_member_reason BmStateReasonTarget = "member-reason"

    // Bundle applicable reason
    BmStateReasonTarget_bundle_reason BmStateReasonTarget = "bundle-reason"
)

// BmMbrStateReason represents Bm mbr state reason
type BmMbrStateReason string

const (
    // Reason unavailable (diagnostics error)
    BmMbrStateReason_bm_mbr_state_reason_unknown BmMbrStateReason = "bm-mbr-state-reason-unknown"

    // Link cannot be used (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_unselectable_unknown BmMbrStateReason = "bm-mbr-state-reason-unselectable-unknown"

    // Link is down
    BmMbrStateReason_bm_mbr_state_reason_link_down BmMbrStateReason = "bm-mbr-state-reason-link-down"

    // Link is being removed from the bundle
    BmMbrStateReason_bm_mbr_state_reason_link_deleting BmMbrStateReason = "bm-mbr-state-reason-link-deleting"

    // Link is in the process of being created
    BmMbrStateReason_bm_mbr_state_reason_creating BmMbrStateReason = "bm-mbr-state-reason-creating"

    // Bundle is in the process of being created
    BmMbrStateReason_bm_mbr_state_reason_bundle_creating BmMbrStateReason = "bm-mbr-state-reason-bundle-creating"

    // Bundle is in the process of being deleted
    BmMbrStateReason_bm_mbr_state_reason_bundle_deleting BmMbrStateReason = "bm-mbr-state-reason-bundle-deleting"

    // Bundle has been shut down
    BmMbrStateReason_bm_mbr_state_reason_bundle_admin_down BmMbrStateReason = "bm-mbr-state-reason-bundle-admin-down"

    // Bundle is in the process of being replicated to
    // this location
    BmMbrStateReason_bm_mbr_state_reason_replicating BmMbrStateReason = "bm-mbr-state-reason-replicating"

    // Incompatible with other links in the bundle
    // (bandwidth out of range)
    BmMbrStateReason_bm_mbr_state_reason_bandwidth BmMbrStateReason = "bm-mbr-state-reason-bandwidth"

    // Loopback: Actor and Partner have the same
    // System ID and Key
    BmMbrStateReason_bm_mbr_state_reason_loop_back BmMbrStateReason = "bm-mbr-state-reason-loop-back"

    // Incompatible with other links in the bundle
    // (LACP vs non-LACP)
    BmMbrStateReason_bm_mbr_state_reason_activity_type BmMbrStateReason = "bm-mbr-state-reason-activity-type"

    // Bundle shutdown is configured for the bundle
    BmMbrStateReason_bm_mbr_state_reason_bundle_shutdown BmMbrStateReason = "bm-mbr-state-reason-bundle-shutdown"

    // Not enough links available to meet
    // minimum-active threshold
    BmMbrStateReason_bm_mbr_state_reason_min_selected BmMbrStateReason = "bm-mbr-state-reason-min-selected"

    // Link is Standby due to maximum-active links
    // configuration
    BmMbrStateReason_bm_mbr_state_reason_max_selected BmMbrStateReason = "bm-mbr-state-reason-max-selected"

    // Bundle has too many member links configured
    BmMbrStateReason_bm_mbr_state_reason_link_limit BmMbrStateReason = "bm-mbr-state-reason-link-limit"

    // Bundle has reached maximum supported number of
    // active links
    BmMbrStateReason_bm_mbr_state_reason_active_limit BmMbrStateReason = "bm-mbr-state-reason-active-limit"

    // Link is Standby (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_standby_unknown BmMbrStateReason = "bm-mbr-state-reason-standby-unknown"

    // Link is Expired; LACPDUs are not being received
    // from the partner
    BmMbrStateReason_bm_mbr_state_reason_expired BmMbrStateReason = "bm-mbr-state-reason-expired"

    // Link is Defaulted; LACPDUs are not being
    // received from the partner
    BmMbrStateReason_bm_mbr_state_reason_defaulted BmMbrStateReason = "bm-mbr-state-reason-defaulted"

    // Link is Not Aggregatable (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_act_or_not_agg BmMbrStateReason = "bm-mbr-state-reason-act-or-not-agg"

    // Partner has marked the link as Not Aggregatable
    BmMbrStateReason_bm_mbr_state_reason_partner_not_agg BmMbrStateReason = "bm-mbr-state-reason-partner-not-agg"

    // Partner System ID/Key do not match that of the
    // Selected links
    BmMbrStateReason_bm_mbr_state_reason_lagid BmMbrStateReason = "bm-mbr-state-reason-lagid"

    // Bundle interface is not present in
    // configuration
    BmMbrStateReason_bm_mbr_state_reason_bundle_not_cfgd BmMbrStateReason = "bm-mbr-state-reason-bundle-not-cfgd"

    // Wait-while timer is running
    BmMbrStateReason_bm_mbr_state_reason_bundle_not_ready BmMbrStateReason = "bm-mbr-state-reason-bundle-not-ready"

    // Partner has not echoed the correct parameters
    // for this link
    BmMbrStateReason_bm_mbr_state_reason_partner_ood BmMbrStateReason = "bm-mbr-state-reason-partner-ood"

    // Partner is not Synchronized (Waiting, Standby,
    // or LAG ID mismatch)
    BmMbrStateReason_bm_mbr_state_reason_partner_not_in_sync BmMbrStateReason = "bm-mbr-state-reason-partner-not-in-sync"

    // Partner is not Synchronized (Waiting, not
    // Selected, or out-of-date)
    BmMbrStateReason_bm_mbr_state_reason_foreign_partner_oos BmMbrStateReason = "bm-mbr-state-reason-foreign-partner-oos"

    // Link is Attached and has not gone Collecting
    // (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_attach_unknown BmMbrStateReason = "bm-mbr-state-reason-attach-unknown"

    // Partner has not advertized that it is
    // Collecting
    BmMbrStateReason_bm_mbr_state_reason_partner_not_collecting BmMbrStateReason = "bm-mbr-state-reason-partner-not-collecting"

    // Link is Collecting and has not gone
    // Distributing (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_collect_unknown BmMbrStateReason = "bm-mbr-state-reason-collect-unknown"

    // Link is marked as Standby by mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_standby_foreign BmMbrStateReason = "bm-mbr-state-reason-standby-foreign"

    // Link is waiting for BFD session to start
    BmMbrStateReason_bm_mbr_state_reason_bfd_starting BmMbrStateReason = "bm-mbr-state-reason-bfd-starting"

    // BFD state of this link is Down
    BmMbrStateReason_bm_mbr_state_reason_bfd_down BmMbrStateReason = "bm-mbr-state-reason-bfd-down"

    // BFD session is unconfigured on the remote end
    BmMbrStateReason_bm_mbr_state_reason_bfd_nbr_unconfig BmMbrStateReason = "bm-mbr-state-reason-bfd-nbr-unconfig"

    // Link is not operational as a result of mLACP
    // negotiations
    BmMbrStateReason_bm_mbr_state_reason_mlacp BmMbrStateReason = "bm-mbr-state-reason-mlacp"

    // ICCP group is isolated from the core network
    BmMbrStateReason_bm_mbr_state_reason_pe_isolated BmMbrStateReason = "bm-mbr-state-reason-pe-isolated"

    // Forced switchover to the mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_forced_switchover BmMbrStateReason = "bm-mbr-state-reason-forced-switchover"

    // Link is error disabled (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_errdis_unknown BmMbrStateReason = "bm-mbr-state-reason-errdis-unknown"

    // Waiting for member state information from mLACP
    // peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_mbr_state_info BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-mbr-state-info"

    // Link is Active
    BmMbrStateReason_bm_mbr_state_reason_active BmMbrStateReason = "bm-mbr-state-reason-active"

    // Waiting for bundle state information from mLACP
    // peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_state_info BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-bdl-state-info"

    // Waiting for bundle configuration information
    // from mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_config_info BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-bdl-config-info"

    // Waiting for bundle to complete initial
    // synchronization with mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_sync BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-bdl-sync"

    // mLACP bundle does not have a peer device
    BmMbrStateReason_bm_mbr_state_reason_mlacp_bdl_has_no_peer BmMbrStateReason = "bm-mbr-state-reason-mlacp-bdl-has-no-peer"

    // Link is being ignored due to an inconsistency
    // with mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_nak BmMbrStateReason = "bm-mbr-state-reason-mlacp-nak"

    // ICCP transport is unavailable
    BmMbrStateReason_bm_mbr_state_reason_mlacp_transport_unavailable BmMbrStateReason = "bm-mbr-state-reason-mlacp-transport-unavailable"

    // ICCP Group is not fully configured
    BmMbrStateReason_bm_mbr_state_reason_mlacp_not_configured BmMbrStateReason = "bm-mbr-state-reason-mlacp-not-configured"

    // mLACP recovery delay timer is running
    BmMbrStateReason_bm_mbr_state_reason_recovery_timer BmMbrStateReason = "bm-mbr-state-reason-recovery-timer"

    // mLACP peer is active
    BmMbrStateReason_bm_mbr_state_reason_mlacp_standby BmMbrStateReason = "bm-mbr-state-reason-mlacp-standby"

    // mLACP peer has more links/bandwidth available
    BmMbrStateReason_bm_mbr_state_reason_maximized_out BmMbrStateReason = "bm-mbr-state-reason-maximized-out"

    // mLACP peer has one or more links Selected
    BmMbrStateReason_bm_mbr_state_reason_mlacp_peer_selected BmMbrStateReason = "bm-mbr-state-reason-mlacp-peer-selected"

    // mLACP bundle does not have a peer device
    // (connect timer running)
    BmMbrStateReason_bm_mbr_state_reason_mlacp_connect_timer_running BmMbrStateReason = "bm-mbr-state-reason-mlacp-connect-timer-running"

    // Bundle is not configured to run mLACP
    BmMbrStateReason_bm_mbr_state_reason_bundle_not_mlacp BmMbrStateReason = "bm-mbr-state-reason-bundle-not-mlacp"

    // Bundle has too many working links configured
    // (more than the maximum-active limit)
    BmMbrStateReason_bm_mbr_state_reason_no_lon BmMbrStateReason = "bm-mbr-state-reason-no-lon"

    // Additional bandwidth from link would exceed
    // load balancing capabilities
    BmMbrStateReason_bm_mbr_state_reason_cumul_rel_bw_limit BmMbrStateReason = "bm-mbr-state-reason-cumul-rel-bw-limit"

    // No MAC address available for the bundle
    BmMbrStateReason_bm_mbr_state_reason_no_mac BmMbrStateReason = "bm-mbr-state-reason-no-mac"

    // No system ID available for use by this bundle
    BmMbrStateReason_bm_mbr_state_reason_no_system_id BmMbrStateReason = "bm-mbr-state-reason-no-system-id"

    // Link is shutdown
    BmMbrStateReason_bm_mbr_state_reason_link_shutdown BmMbrStateReason = "bm-mbr-state-reason-link-shutdown"

    // Non-LACP link in mLACP bundle
    BmMbrStateReason_bm_mbr_state_reason_activity_mlacp BmMbrStateReason = "bm-mbr-state-reason-activity-mlacp"

    // LACP link in inter-chassis bundle
    BmMbrStateReason_bm_mbr_state_reason_activity_iccp BmMbrStateReason = "bm-mbr-state-reason-activity-iccp"

    // Parent bundle is both inter-chassis and
    // configured for mLACP
    BmMbrStateReason_bm_mbr_state_reason_bundle_icpe_mlacp BmMbrStateReason = "bm-mbr-state-reason-bundle-icpe-mlacp"

    // Too many bundle members in system; no link
    // number available
    BmMbrStateReason_bm_mbr_state_reason_no_link_num BmMbrStateReason = "bm-mbr-state-reason-no-link-num"

    // mLACP peer has a higher priority link
    BmMbrStateReason_bm_mbr_state_reason_standby_peer_higher_prio BmMbrStateReason = "bm-mbr-state-reason-standby-peer-higher-prio"

    // Link is in standby redundancy state
    BmMbrStateReason_bm_mbr_state_reason_red_state_standby BmMbrStateReason = "bm-mbr-state-reason-red-state-standby"

    // One or more links in the bundle are in standby
    // redundancy state
    BmMbrStateReason_bm_mbr_state_reason_other_red_state_standby BmMbrStateReason = "bm-mbr-state-reason-other-red-state-standby"

    // Holding down temporary to avoid churn after
    // restart
    BmMbrStateReason_bm_mbr_state_reason_hold_ing BmMbrStateReason = "bm-mbr-state-reason-hold-ing"

    // Bundle has been error-disabled
    BmMbrStateReason_bm_mbr_state_reason_bundle_error_disabled BmMbrStateReason = "bm-mbr-state-reason-bundle-error-disabled"

    // Bundle has been disabled by EFD
    BmMbrStateReason_bm_mbr_state_reason_bundle_efd_disabled BmMbrStateReason = "bm-mbr-state-reason-bundle-efd-disabled"

    // Singleton ICCP group is isolated from the core
    // network
    BmMbrStateReason_bm_mbr_state_reason_singleton_pe_isolated BmMbrStateReason = "bm-mbr-state-reason-singleton-pe-isolated"

    // Link is waiting for BFDv6 session to start
    BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_starting BmMbrStateReason = "bm-mbr-state-reason-bfd-ipv6-starting"

    // BFDv6 state of this link is Down
    BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_down BmMbrStateReason = "bm-mbr-state-reason-bfd-ipv6-down"

    // BFDv6 session is unconfigured on the remote end
    BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_nbr_unconfig BmMbrStateReason = "bm-mbr-state-reason-bfd-ipv6-nbr-unconfig"

    // LACP delay timer is running
    BmMbrStateReason_bm_mbr_state_reason_timer_running BmMbrStateReason = "bm-mbr-state-reason-timer-running"

    // Client has configured the bundle state Down
    BmMbrStateReason_bm_mbr_state_reason_client_bundle_ctrl BmMbrStateReason = "bm-mbr-state-reason-client-bundle-ctrl"

    // Enumeration maximum value
    BmMbrStateReason_bm_mbr_state_reason_count BmMbrStateReason = "bm-mbr-state-reason-count"
)

// BmMuxstate represents Bm muxstate
type BmMuxstate string

const (
    // Port is not attached to a bundle
    BmMuxstate_detached BmMuxstate = "detached"

    // Port has chosen bundle and is waiting to join
    BmMuxstate_waiting BmMuxstate = "waiting"

    // Port is attached to the bundle but not active
    BmMuxstate_attached BmMuxstate = "attached"

    // Port is ready to receive data
    BmMuxstate_collecting BmMuxstate = "collecting"

    // Port is distributing data
    BmMuxstate_distributing BmMuxstate = "distributing"

    // Port is active and can send and receive data
    BmMuxstate_collecting_distributing BmMuxstate = "collecting-distributing"
)

// BmdMlacpSwitchover represents Bmd mlacp switchover
type BmdMlacpSwitchover string

const (
    // Non-revertive switchover type
    BmdMlacpSwitchover_bmd_mlacp_switchover_nonrevertive BmdMlacpSwitchover = "bmd-mlacp-switchover-nonrevertive"

    // Brute force switchover type
    BmdMlacpSwitchover_bmd_mlacp_switchover_brute_force BmdMlacpSwitchover = "bmd-mlacp-switchover-brute-force"

    // Revertive switchover type
    BmdMlacpSwitchover_bmd_mlacp_switchover_revertive BmdMlacpSwitchover = "bmd-mlacp-switchover-revertive"

    // Number of switchover types
    BmdMlacpSwitchover_bmd_mlacp_switchover_count BmdMlacpSwitchover = "bmd-mlacp-switchover-count"
)

// BmFeatureStatus represents Bm feature status
type BmFeatureStatus string

const (
    // No configuration is applied for a feature
    BmFeatureStatus_bm_feature_not_configured BmFeatureStatus = "bm-feature-not-configured"

    // The feature is currently not operational
    BmFeatureStatus_bm_feature_not_operational BmFeatureStatus = "bm-feature-not-operational"

    // The feature is currently operational
    BmFeatureStatus_bm_feature_operational BmFeatureStatus = "bm-feature-operational"
)

// BmBdlMacSource represents Bm bdl mac source
type BmBdlMacSource string

const (
    // The MAC is currently unknown
    BmBdlMacSource_bm_bdl_mac_source_unknown BmBdlMacSource = "bm-bdl-mac-source-unknown"

    // The MAC was allocated from the chassis pool
    BmBdlMacSource_bm_bdl_mac_source_chassis BmBdlMacSource = "bm-bdl-mac-source-chassis"

    // The MAC was configured by the user
    BmBdlMacSource_bm_bdl_mac_source_configured BmBdlMacSource = "bm-bdl-mac-source-configured"

    // The MAC belongs to a member
    BmBdlMacSource_bm_bdl_mac_source_member BmBdlMacSource = "bm-bdl-mac-source-member"

    // The MAC has come from the peer device
    BmBdlMacSource_bm_bdl_mac_source_peer BmBdlMacSource = "bm-bdl-mac-source-peer"
)

// BmBdlState represents Bm bdl state
type BmBdlState string

const (
    // The bundle has been configured Down
    BmBdlState_bm_bdl_state_admin_down BmBdlState = "bm-bdl-state-admin-down"

    // The bundle is Down
    BmBdlState_bm_bdl_state_down BmBdlState = "bm-bdl-state-down"

    // The bundle is controlled by CLIENT Down
    BmBdlState_bm_bdl_state_client_down BmBdlState = "bm-bdl-state-client-down"

    // The bundle is Down on the partner device
    BmBdlState_bm_bdl_state_ptnr_down BmBdlState = "bm-bdl-state-ptnr-down"

    // Bundle shutdown has been configured
    BmBdlState_bm_bdl_state_bundle_shutdown BmBdlState = "bm-bdl-state-bundle-shutdown"

    // The bundle cannot contact the core
    BmBdlState_bm_bdl_state_pe_isolated BmBdlState = "bm-bdl-state-pe-isolated"

    // The state is disputed by a peer device
    BmBdlState_bm_bdl_state_nak BmBdlState = "bm-bdl-state-nak"

    // The bundle is Up
    BmBdlState_bm_bdl_state_up_active BmBdlState = "bm-bdl-state-up-active"

    // The bundle is Up, but is mLACP standby
    BmBdlState_bm_bdl_state_mlacp_hot_standby BmBdlState = "bm-bdl-state-mlacp-hot-standby"

    // The bundle is mLACP standby, but will not
    // eliminate traffic loss
    BmBdlState_bm_bdl_state_mlacp_cold_standby BmBdlState = "bm-bdl-state-mlacp-cold-standby"

    // The bundle state has not been determined
    BmBdlState_bm_bdl_state_unknown BmBdlState = "bm-bdl-state-unknown"

    // The bundle is standby, but will not eliminate
    // traffic loss
    BmBdlState_bm_bdl_state_cold_standby BmBdlState = "bm-bdl-state-cold-standby"

    // The bundle has been error-disabled
    BmBdlState_bm_bdl_state_error_disabled BmBdlState = "bm-bdl-state-error-disabled"

    // The bundle has been disabled by EFD
    BmBdlState_bm_bdl_state_efd_disabled BmBdlState = "bm-bdl-state-efd-disabled"
)

// BmAfId represents Bm af id
type BmAfId string

const (
    // IPv4 AFI
    BmAfId_bm_af_id_ipv4 BmAfId = "bm-af-id-ipv4"

    // IPv6 AFI
    BmAfId_bm_af_id_ipv6 BmAfId = "bm-af-id-ipv6"
)

// BmdBfdBdlState represents Bmd bfd bdl state
type BmdBfdBdlState string

const (
    // BFD is down on the bundle
    BmdBfdBdlState_bmd_bfd_bdl_down BmdBfdBdlState = "bmd-bfd-bdl-down"

    // BFD has just started on a bundle, and the state
    // has not been determined
    BmdBfdBdlState_bmd_bfd_bdl_unknown BmdBfdBdlState = "bmd-bfd-bdl-unknown"

    // BFD is up on the bundle
    BmdBfdBdlState_bmd_bfd_bdl_up BmdBfdBdlState = "bmd-bfd-bdl-up"

    // Number of BFD states on a bundle
    BmdBfdBdlState_bmd_bfd_bdl_count BmdBfdBdlState = "bmd-bfd-bdl-count"
)

// BmWhichSystem represents Bm which system
type BmWhichSystem string

const (
    // Actor
    BmWhichSystem_bm_which_system_actr BmWhichSystem = "bm-which-system-actr"

    // Partner
    BmWhichSystem_bm_which_system_ptnr BmWhichSystem = "bm-which-system-ptnr"
)

// BundleMedia1 represents Bundle media1
type BundleMedia1 string

const (
    // Ethernet
    BundleMedia1_ethernet BundleMedia1 = "ethernet"

    // POS
    BundleMedia1_pos BundleMedia1 = "pos"
)

// LoadBalance represents Load balance
type LoadBalance string

const (
    // Default
    LoadBalance_default_ LoadBalance = "default"

    // Auto
    LoadBalance_auto LoadBalance = "auto"

    // Value
    LoadBalance_value LoadBalance = "value"

    // Source IP
    LoadBalance_source_ip LoadBalance = "source-ip"

    // Destination IP
    LoadBalance_destination_ip LoadBalance = "destination-ip"

    // Unknown
    LoadBalance_unknown LoadBalance = "unknown"
)

// BundleMedia represents Bundle media
type BundleMedia string

const (
    // bundle media ethernet
    BundleMedia_bundle_media_ethernet BundleMedia = "bundle-media-ethernet"

    // bundle media pos
    BundleMedia_bundle_media_pos BundleMedia = "bundle-media-pos"

    // bundle media count
    BundleMedia_bundle_media_count BundleMedia = "bundle-media-count"
)

// BundleMlacpMode represents Bundle mlacp mode
type BundleMlacpMode string

const (
    // bundle mlacp mode standby
    BundleMlacpMode_bundle_mlacp_mode_standby BundleMlacpMode = "bundle-mlacp-mode-standby"

    // bundle mlacp mode active
    BundleMlacpMode_bundle_mlacp_mode_active BundleMlacpMode = "bundle-mlacp-mode-active"

    // bundle mlacp mode count
    BundleMlacpMode_bundle_mlacp_mode_count BundleMlacpMode = "bundle-mlacp-mode-count"
)

// LacpBundles
// LACP bundle data
type LacpBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACP bundle data.
    Bundles LacpBundles_Bundles
}

func (lacpBundles *LacpBundles) GetEntityData() *types.CommonEntityData {
    lacpBundles.EntityData.YFilter = lacpBundles.YFilter
    lacpBundles.EntityData.YangName = "lacp-bundles"
    lacpBundles.EntityData.BundleName = "cisco_ios_xr"
    lacpBundles.EntityData.ParentYangName = "Cisco-IOS-XR-bundlemgr-oper"
    lacpBundles.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-oper:lacp-bundles"
    lacpBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundles.EntityData.Children = make(map[string]types.YChild)
    lacpBundles.EntityData.Children["bundles"] = types.YChild{"Bundles", &lacpBundles.Bundles}
    lacpBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpBundles.EntityData)
}

// LacpBundles_Bundles
// LACP bundle data
type LacpBundles_Bundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACP Bundle interface. The type is slice of LacpBundles_Bundles_Bundle.
    Bundle []LacpBundles_Bundles_Bundle
}

func (bundles *LacpBundles_Bundles) GetEntityData() *types.CommonEntityData {
    bundles.EntityData.YFilter = bundles.YFilter
    bundles.EntityData.YangName = "bundles"
    bundles.EntityData.BundleName = "cisco_ios_xr"
    bundles.EntityData.ParentYangName = "lacp-bundles"
    bundles.EntityData.SegmentPath = "bundles"
    bundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundles.EntityData.Children = make(map[string]types.YChild)
    bundles.EntityData.Children["bundle"] = types.YChild{"Bundle", nil}
    for i := range bundles.Bundle {
        bundles.EntityData.Children[types.GetSegmentPath(&bundles.Bundle[i])] = types.YChild{"Bundle", &bundles.Bundle[i]}
    }
    bundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundles.EntityData)
}

// LacpBundles_Bundles_Bundle
// LACP Bundle interface
type LacpBundles_Bundles_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. LACP Bundle interface. The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for each Bundle.
    Data LacpBundles_Bundles_Bundle_Data

    // LACP Member interface.
    Members LacpBundles_Bundles_Bundle_Members
}

func (bundle *LacpBundles_Bundles_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "bundles"
    bundle.EntityData.SegmentPath = "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["data"] = types.YChild{"Data", &bundle.Data}
    bundle.EntityData.Children["members"] = types.YChild{"Members", &bundle.Members}
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", bundle.BundleInterface}
    return &(bundle.EntityData)
}

// LacpBundles_Bundles_Bundle_Data
// Data for each Bundle
type LacpBundles_Bundles_Bundle_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData LacpBundles_Bundles_Bundle_Data_ActorBundleData

    // System ID for the bundle.
    BundleSystemId LacpBundles_Bundles_Bundle_Data_BundleSystemId
}

func (data *LacpBundles_Bundles_Bundle_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Children["actor-bundle-data"] = types.YChild{"ActorBundleData", &data.ActorBundleData}
    data.EntityData.Children["bundle-system-id"] = types.YChild{"BundleSystemId", &data.BundleSystemId}
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", data.ActorOperationalKey}
    data.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", data.PartnerSystemPriority}
    data.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", data.PartnerSystemMacAddress}
    data.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", data.PartnerOperationalKey}
    return &(data.EntityData)
}

// LacpBundles_Bundles_Bundle_Data_ActorBundleData
// Basic bundle information
type LacpBundles_Bundles_Bundle_Data_ActorBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig.
    BfdConfig []LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig
}

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetEntityData() *types.CommonEntityData {
    actorBundleData.EntityData.YFilter = actorBundleData.YFilter
    actorBundleData.EntityData.YangName = "actor-bundle-data"
    actorBundleData.EntityData.BundleName = "cisco_ios_xr"
    actorBundleData.EntityData.ParentYangName = "data"
    actorBundleData.EntityData.SegmentPath = "actor-bundle-data"
    actorBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorBundleData.EntityData.Children = make(map[string]types.YChild)
    actorBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &actorBundleData.MacAddress}
    actorBundleData.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range actorBundleData.BfdConfig {
        actorBundleData.EntityData.Children[types.GetSegmentPath(&actorBundleData.BfdConfig[i])] = types.YChild{"BfdConfig", &actorBundleData.BfdConfig[i]}
    }
    actorBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    actorBundleData.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", actorBundleData.BundleInterfaceName}
    actorBundleData.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", actorBundleData.AvailableBandwidth}
    actorBundleData.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", actorBundleData.EffectiveBandwidth}
    actorBundleData.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", actorBundleData.ConfiguredBandwidth}
    actorBundleData.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", actorBundleData.MinimumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", actorBundleData.MaximumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", actorBundleData.MaximumActiveLinksSource}
    actorBundleData.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", actorBundleData.MinimumBandwidth}
    actorBundleData.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", actorBundleData.PrimaryMember}
    actorBundleData.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", actorBundleData.BundleStatus}
    actorBundleData.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", actorBundleData.ActiveMemberCount}
    actorBundleData.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", actorBundleData.StandbyMemberCount}
    actorBundleData.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", actorBundleData.ConfiguredMemberCount}
    actorBundleData.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", actorBundleData.MacSource}
    actorBundleData.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", actorBundleData.MacSourceMember}
    actorBundleData.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", actorBundleData.InterChassis}
    actorBundleData.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", actorBundleData.IsActive}
    actorBundleData.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", actorBundleData.LacpStatus}
    actorBundleData.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", actorBundleData.MlacpStatus}
    actorBundleData.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", actorBundleData.Ipv4BfdStatus}
    actorBundleData.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", actorBundleData.LinkOrderStatus}
    actorBundleData.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", actorBundleData.Ipv6BfdStatus}
    actorBundleData.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", actorBundleData.LoadBalanceHashType}
    actorBundleData.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", actorBundleData.LoadBalanceLocalityThreshold}
    actorBundleData.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", actorBundleData.SuppressionTimer}
    actorBundleData.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", actorBundleData.WaitWhileTimer}
    actorBundleData.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", actorBundleData.CollectorMaxDelay}
    actorBundleData.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", actorBundleData.CiscoExtensions}
    actorBundleData.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", actorBundleData.LacpNonrevertive}
    actorBundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", actorBundleData.IccpGroupId}
    actorBundleData.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", actorBundleData.ActiveForeignMemberCount}
    actorBundleData.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", actorBundleData.ConfiguredForeignMemberCount}
    actorBundleData.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", actorBundleData.SwitchoverType}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", actorBundleData.MaximizeThresholdValueLinks}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", actorBundleData.MaximizeThresholdValueBandWidth}
    actorBundleData.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", actorBundleData.MlacpMode}
    actorBundleData.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", actorBundleData.RecoveryDelay}
    actorBundleData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", actorBundleData.Singleton}
    return &(actorBundleData.EntityData)
}

// LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress
// MAC address of this member
type LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "actor-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "actor-bundle-data"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// LacpBundles_Bundles_Bundle_Data_BundleSystemId
// System ID for the bundle
type LacpBundles_Bundles_Bundle_Data_BundleSystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetEntityData() *types.CommonEntityData {
    bundleSystemId.EntityData.YFilter = bundleSystemId.YFilter
    bundleSystemId.EntityData.YangName = "bundle-system-id"
    bundleSystemId.EntityData.BundleName = "cisco_ios_xr"
    bundleSystemId.EntityData.ParentYangName = "data"
    bundleSystemId.EntityData.SegmentPath = "bundle-system-id"
    bundleSystemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleSystemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleSystemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleSystemId.EntityData.Children = make(map[string]types.YChild)
    bundleSystemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &bundleSystemId.SystemMacAddr}
    bundleSystemId.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleSystemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", bundleSystemId.SystemPrio}
    return &(bundleSystemId.EntityData)
}

// LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "bundle-system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// LacpBundles_Bundles_Bundle_Members
// LACP Member interface
type LacpBundles_Bundles_Bundle_Members struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member information. The type is slice of
    // LacpBundles_Bundles_Bundle_Members_Member.
    Member []LacpBundles_Bundles_Bundle_Members_Member
}

func (members *LacpBundles_Bundles_Bundle_Members) GetEntityData() *types.CommonEntityData {
    members.EntityData.YFilter = members.YFilter
    members.EntityData.YangName = "members"
    members.EntityData.BundleName = "cisco_ios_xr"
    members.EntityData.ParentYangName = "bundle"
    members.EntityData.SegmentPath = "members"
    members.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    members.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    members.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    members.EntityData.Children = make(map[string]types.YChild)
    members.EntityData.Children["member"] = types.YChild{"Member", nil}
    for i := range members.Member {
        members.EntityData.Children[types.GetSegmentPath(&members.Member[i])] = types.YChild{"Member", &members.Member[i]}
    }
    members.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(members.EntityData)
}

// LacpBundles_Bundles_Bundle_Members_Member
// Member information
type LacpBundles_Bundles_Bundle_Members_Member struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    MemberInterface interface{}

    // Member's interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters LacpBundles_Bundles_Bundle_Members_Member_Counters

    // Lacp data about member link.
    LinkData LacpBundles_Bundles_Bundle_Members_Member_LinkData

    // Mux state machine data.
    MemberMuxData LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress LacpBundles_Bundles_Bundle_Members_Member_MacAddress
}

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetEntityData() *types.CommonEntityData {
    member.EntityData.YFilter = member.YFilter
    member.EntityData.YangName = "member"
    member.EntityData.BundleName = "cisco_ios_xr"
    member.EntityData.ParentYangName = "members"
    member.EntityData.SegmentPath = "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
    member.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    member.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    member.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    member.EntityData.Children = make(map[string]types.YChild)
    member.EntityData.Children["counters"] = types.YChild{"Counters", &member.Counters}
    member.EntityData.Children["link-data"] = types.YChild{"LinkData", &member.LinkData}
    member.EntityData.Children["member-mux-data"] = types.YChild{"MemberMuxData", &member.MemberMuxData}
    member.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &member.MacAddress}
    member.EntityData.Leafs = make(map[string]types.YLeaf)
    member.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", member.MemberInterface}
    member.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", member.InterfaceName}
    member.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", member.PortPriority}
    member.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", member.PortNumber}
    member.EntityData.Leafs["underlying-link-id"] = types.YLeaf{"UnderlyingLinkId", member.UnderlyingLinkId}
    member.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", member.LinkOrderNumber}
    member.EntityData.Leafs["iccp-node"] = types.YLeaf{"IccpNode", member.IccpNode}
    member.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", member.Bandwidth}
    member.EntityData.Leafs["lacp-enabled"] = types.YLeaf{"LacpEnabled", member.LacpEnabled}
    member.EntityData.Leafs["member-type"] = types.YLeaf{"MemberType", member.MemberType}
    member.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", member.MemberName}
    return &(member.EntityData)
}

// LacpBundles_Bundles_Bundle_Members_Member_Counters
// Counters data about member link
type LacpBundles_Bundles_Bundle_Members_Member_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "member"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["lacpd-us-received"] = types.YLeaf{"LacpdUsReceived", counters.LacpdUsReceived}
    counters.EntityData.Leafs["lacpd-us-transmitted"] = types.YLeaf{"LacpdUsTransmitted", counters.LacpdUsTransmitted}
    counters.EntityData.Leafs["marker-packets-received"] = types.YLeaf{"MarkerPacketsReceived", counters.MarkerPacketsReceived}
    counters.EntityData.Leafs["marker-responses-transmitted"] = types.YLeaf{"MarkerResponsesTransmitted", counters.MarkerResponsesTransmitted}
    counters.EntityData.Leafs["illegal-packets-received"] = types.YLeaf{"IllegalPacketsReceived", counters.IllegalPacketsReceived}
    counters.EntityData.Leafs["excess-lacpd-us-received"] = types.YLeaf{"ExcessLacpdUsReceived", counters.ExcessLacpdUsReceived}
    counters.EntityData.Leafs["excess-marker-packets-received"] = types.YLeaf{"ExcessMarkerPacketsReceived", counters.ExcessMarkerPacketsReceived}
    counters.EntityData.Leafs["defaulted"] = types.YLeaf{"Defaulted", counters.Defaulted}
    counters.EntityData.Leafs["expired"] = types.YLeaf{"Expired", counters.Expired}
    counters.EntityData.Leafs["last-cleared-sec"] = types.YLeaf{"LastClearedSec", counters.LastClearedSec}
    counters.EntityData.Leafs["last-cleared-nsec"] = types.YLeaf{"LastClearedNsec", counters.LastClearedNsec}
    return &(counters.EntityData)
}

// LacpBundles_Bundles_Bundle_Members_Member_LinkData
// Lacp data about member link
type LacpBundles_Bundles_Bundle_Members_Member_LinkData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetEntityData() *types.CommonEntityData {
    linkData.EntityData.YFilter = linkData.YFilter
    linkData.EntityData.YangName = "link-data"
    linkData.EntityData.BundleName = "cisco_ios_xr"
    linkData.EntityData.ParentYangName = "member"
    linkData.EntityData.SegmentPath = "link-data"
    linkData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkData.EntityData.Children = make(map[string]types.YChild)
    linkData.EntityData.Leafs = make(map[string]types.YLeaf)
    linkData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", linkData.InterfaceHandle}
    linkData.EntityData.Leafs["actor-system-priority"] = types.YLeaf{"ActorSystemPriority", linkData.ActorSystemPriority}
    linkData.EntityData.Leafs["actor-system-mac-address"] = types.YLeaf{"ActorSystemMacAddress", linkData.ActorSystemMacAddress}
    linkData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", linkData.ActorOperationalKey}
    linkData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", linkData.PartnerSystemPriority}
    linkData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", linkData.PartnerSystemMacAddress}
    linkData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", linkData.PartnerOperationalKey}
    linkData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", linkData.SelectedAggregatorId}
    linkData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", linkData.AttachedAggregatorId}
    linkData.EntityData.Leafs["actor-port-id"] = types.YLeaf{"ActorPortId", linkData.ActorPortId}
    linkData.EntityData.Leafs["actor-port-priority"] = types.YLeaf{"ActorPortPriority", linkData.ActorPortPriority}
    linkData.EntityData.Leafs["partner-port-id"] = types.YLeaf{"PartnerPortId", linkData.PartnerPortId}
    linkData.EntityData.Leafs["partner-port-priority"] = types.YLeaf{"PartnerPortPriority", linkData.PartnerPortPriority}
    linkData.EntityData.Leafs["actor-port-state"] = types.YLeaf{"ActorPortState", linkData.ActorPortState}
    linkData.EntityData.Leafs["partner-port-state"] = types.YLeaf{"PartnerPortState", linkData.PartnerPortState}
    return &(linkData.EntityData)
}

// LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData
// Mux state machine data
type LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetEntityData() *types.CommonEntityData {
    memberMuxData.EntityData.YFilter = memberMuxData.YFilter
    memberMuxData.EntityData.YangName = "member-mux-data"
    memberMuxData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxData.EntityData.ParentYangName = "member"
    memberMuxData.EntityData.SegmentPath = "member-mux-data"
    memberMuxData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxData.EntityData.Children = make(map[string]types.YChild)
    memberMuxData.EntityData.Children["member-mux-state-reason-data"] = types.YChild{"MemberMuxStateReasonData", &memberMuxData.MemberMuxStateReasonData}
    memberMuxData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberMuxData.MuxState}
    memberMuxData.EntityData.Leafs["error"] = types.YLeaf{"Error", memberMuxData.Error}
    memberMuxData.EntityData.Leafs["member-mux-state-reason"] = types.YLeaf{"MemberMuxStateReason", memberMuxData.MemberMuxStateReason}
    memberMuxData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", memberMuxData.MemberState}
    memberMuxData.EntityData.Leafs["mux-state-reason"] = types.YLeaf{"MuxStateReason", memberMuxData.MuxStateReason}
    return &(memberMuxData.EntityData)
}

// LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetEntityData() *types.CommonEntityData {
    memberMuxStateReasonData.EntityData.YFilter = memberMuxStateReasonData.YFilter
    memberMuxStateReasonData.EntityData.YangName = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxStateReasonData.EntityData.ParentYangName = "member-mux-data"
    memberMuxStateReasonData.EntityData.SegmentPath = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxStateReasonData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxStateReasonData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxStateReasonData.EntityData.Children = make(map[string]types.YChild)
    memberMuxStateReasonData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxStateReasonData.EntityData.Leafs["reason-type"] = types.YLeaf{"ReasonType", memberMuxStateReasonData.ReasonType}
    memberMuxStateReasonData.EntityData.Leafs["severity"] = types.YLeaf{"Severity", memberMuxStateReasonData.Severity}
    return &(memberMuxStateReasonData.EntityData)
}

// LacpBundles_Bundles_Bundle_Members_Member_MacAddress
// MAC address of this member (deprecated)
type LacpBundles_Bundles_Bundle_Members_Member_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "member"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation
// bundle information
type BundleInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BFD counters information for bundles and members.
    BfdCounters BundleInformation_BfdCounters

    // Scheduled actions on a bundle.
    ScheduledActions BundleInformation_ScheduledActions

    // Generic information for bundles and members.
    Bundle BundleInformation_Bundle

    // Bundle ICCP events information for bundles and members.
    EventsRg BundleInformation_EventsRg

    // LACP information for bundles and members.
    Lacp BundleInformation_Lacp

    // Bundle specific counters of mLACP events.
    MlacpBundleCounters BundleInformation_MlacpBundleCounters

    // Information for bundles and members that are in the protect database.
    Protect BundleInformation_Protect

    // mLACP Information for Interchassis Groups and bundles.
    MlacpBrief BundleInformation_MlacpBrief

    // mLACP Information for Interchassis Groups and bundles.
    Mlacp BundleInformation_Mlacp

    // Information about allocated MAC addresses that are not in use.
    MacAllocation BundleInformation_MacAllocation

    // Events information for bundles and members.
    Events BundleInformation_Events

    // Bundle events information for bundles and members.
    EventsBdl BundleInformation_EventsBdl

    // Bundle interfaces with common bundle information.
    BundleBriefs BundleInformation_BundleBriefs

    // Bundle member events information for bundles and members.
    EventsMbr BundleInformation_EventsMbr

    // ICCP Group specific counters of mLACP events.
    MlacpIccpGroupCounters BundleInformation_MlacpIccpGroupCounters

    // System Identifiers for the local system and all ICCP Groups.
    SystemId BundleInformation_SystemId

    // Member specific counters of mLACP events.
    MlacpMemberCounters BundleInformation_MlacpMemberCounters
}

func (bundleInformation *BundleInformation) GetEntityData() *types.CommonEntityData {
    bundleInformation.EntityData.YFilter = bundleInformation.YFilter
    bundleInformation.EntityData.YangName = "bundle-information"
    bundleInformation.EntityData.BundleName = "cisco_ios_xr"
    bundleInformation.EntityData.ParentYangName = "Cisco-IOS-XR-bundlemgr-oper"
    bundleInformation.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-oper:bundle-information"
    bundleInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleInformation.EntityData.Children = make(map[string]types.YChild)
    bundleInformation.EntityData.Children["bfd-counters"] = types.YChild{"BfdCounters", &bundleInformation.BfdCounters}
    bundleInformation.EntityData.Children["scheduled-actions"] = types.YChild{"ScheduledActions", &bundleInformation.ScheduledActions}
    bundleInformation.EntityData.Children["bundle"] = types.YChild{"Bundle", &bundleInformation.Bundle}
    bundleInformation.EntityData.Children["events-rg"] = types.YChild{"EventsRg", &bundleInformation.EventsRg}
    bundleInformation.EntityData.Children["lacp"] = types.YChild{"Lacp", &bundleInformation.Lacp}
    bundleInformation.EntityData.Children["mlacp-bundle-counters"] = types.YChild{"MlacpBundleCounters", &bundleInformation.MlacpBundleCounters}
    bundleInformation.EntityData.Children["protect"] = types.YChild{"Protect", &bundleInformation.Protect}
    bundleInformation.EntityData.Children["mlacp-brief"] = types.YChild{"MlacpBrief", &bundleInformation.MlacpBrief}
    bundleInformation.EntityData.Children["mlacp"] = types.YChild{"Mlacp", &bundleInformation.Mlacp}
    bundleInformation.EntityData.Children["mac-allocation"] = types.YChild{"MacAllocation", &bundleInformation.MacAllocation}
    bundleInformation.EntityData.Children["events"] = types.YChild{"Events", &bundleInformation.Events}
    bundleInformation.EntityData.Children["events-bdl"] = types.YChild{"EventsBdl", &bundleInformation.EventsBdl}
    bundleInformation.EntityData.Children["bundle-briefs"] = types.YChild{"BundleBriefs", &bundleInformation.BundleBriefs}
    bundleInformation.EntityData.Children["events-mbr"] = types.YChild{"EventsMbr", &bundleInformation.EventsMbr}
    bundleInformation.EntityData.Children["mlacp-iccp-group-counters"] = types.YChild{"MlacpIccpGroupCounters", &bundleInformation.MlacpIccpGroupCounters}
    bundleInformation.EntityData.Children["system-id"] = types.YChild{"SystemId", &bundleInformation.SystemId}
    bundleInformation.EntityData.Children["mlacp-member-counters"] = types.YChild{"MlacpMemberCounters", &bundleInformation.MlacpMemberCounters}
    bundleInformation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleInformation.EntityData)
}

// BundleInformation_BfdCounters
// BFD counters information for bundles and members
type BundleInformation_BfdCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interfaces with BFD counters information.
    BfdCountersBundles BundleInformation_BfdCounters_BfdCountersBundles

    // Member interfaces with BFD counters information.
    BfdCountersMembers BundleInformation_BfdCounters_BfdCountersMembers
}

func (bfdCounters *BundleInformation_BfdCounters) GetEntityData() *types.CommonEntityData {
    bfdCounters.EntityData.YFilter = bfdCounters.YFilter
    bfdCounters.EntityData.YangName = "bfd-counters"
    bfdCounters.EntityData.BundleName = "cisco_ios_xr"
    bfdCounters.EntityData.ParentYangName = "bundle-information"
    bfdCounters.EntityData.SegmentPath = "bfd-counters"
    bfdCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCounters.EntityData.Children = make(map[string]types.YChild)
    bfdCounters.EntityData.Children["bfd-counters-bundles"] = types.YChild{"BfdCountersBundles", &bfdCounters.BfdCountersBundles}
    bfdCounters.EntityData.Children["bfd-counters-members"] = types.YChild{"BfdCountersMembers", &bfdCounters.BfdCountersMembers}
    bfdCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bfdCounters.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles
// Bundle interfaces with BFD counters information
type BundleInformation_BfdCounters_BfdCountersBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle.
    BfdCountersBundle []BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle
}

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetEntityData() *types.CommonEntityData {
    bfdCountersBundles.EntityData.YFilter = bfdCountersBundles.YFilter
    bfdCountersBundles.EntityData.YangName = "bfd-counters-bundles"
    bfdCountersBundles.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersBundles.EntityData.ParentYangName = "bfd-counters"
    bfdCountersBundles.EntityData.SegmentPath = "bfd-counters-bundles"
    bfdCountersBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersBundles.EntityData.Children = make(map[string]types.YChild)
    bfdCountersBundles.EntityData.Children["bfd-counters-bundle"] = types.YChild{"BfdCountersBundle", nil}
    for i := range bfdCountersBundles.BfdCountersBundle {
        bfdCountersBundles.EntityData.Children[types.GetSegmentPath(&bfdCountersBundles.BfdCountersBundle[i])] = types.YChild{"BfdCountersBundle", &bfdCountersBundles.BfdCountersBundle[i]}
    }
    bfdCountersBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bfdCountersBundles.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle
// Bundle interface
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item and all its members.
    BfdCountersBundleDescendant BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant

    // Children of bundle with BFD counters information.
    BfdCountersBundleChildrenMembers BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers

    // Data for this item.
    BfdCountersBundleItem BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem
}

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetEntityData() *types.CommonEntityData {
    bfdCountersBundle.EntityData.YFilter = bfdCountersBundle.YFilter
    bfdCountersBundle.EntityData.YangName = "bfd-counters-bundle"
    bfdCountersBundle.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersBundle.EntityData.ParentYangName = "bfd-counters-bundles"
    bfdCountersBundle.EntityData.SegmentPath = "bfd-counters-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bfdCountersBundle.BundleInterface) + "']"
    bfdCountersBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersBundle.EntityData.Children = make(map[string]types.YChild)
    bfdCountersBundle.EntityData.Children["bfd-counters-bundle-descendant"] = types.YChild{"BfdCountersBundleDescendant", &bfdCountersBundle.BfdCountersBundleDescendant}
    bfdCountersBundle.EntityData.Children["bfd-counters-bundle-children-members"] = types.YChild{"BfdCountersBundleChildrenMembers", &bfdCountersBundle.BfdCountersBundleChildrenMembers}
    bfdCountersBundle.EntityData.Children["bfd-counters-bundle-item"] = types.YChild{"BfdCountersBundleItem", &bfdCountersBundle.BfdCountersBundleItem}
    bfdCountersBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdCountersBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", bfdCountersBundle.BundleInterface}
    return &(bfdCountersBundle.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant
// Data for this item and all its members
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the bundle this information is for.
    BundleName BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName

    // BFD event counters. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter.
    BfdCounter []BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter
}

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetEntityData() *types.CommonEntityData {
    bfdCountersBundleDescendant.EntityData.YFilter = bfdCountersBundleDescendant.YFilter
    bfdCountersBundleDescendant.EntityData.YangName = "bfd-counters-bundle-descendant"
    bfdCountersBundleDescendant.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersBundleDescendant.EntityData.ParentYangName = "bfd-counters-bundle"
    bfdCountersBundleDescendant.EntityData.SegmentPath = "bfd-counters-bundle-descendant"
    bfdCountersBundleDescendant.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersBundleDescendant.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersBundleDescendant.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersBundleDescendant.EntityData.Children = make(map[string]types.YChild)
    bfdCountersBundleDescendant.EntityData.Children["bundle-name"] = types.YChild{"BundleName", &bfdCountersBundleDescendant.BundleName}
    bfdCountersBundleDescendant.EntityData.Children["bfd-counter"] = types.YChild{"BfdCounter", nil}
    for i := range bfdCountersBundleDescendant.BfdCounter {
        bfdCountersBundleDescendant.EntityData.Children[types.GetSegmentPath(&bfdCountersBundleDescendant.BfdCounter[i])] = types.YChild{"BfdCounter", &bfdCountersBundleDescendant.BfdCounter[i]}
    }
    bfdCountersBundleDescendant.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bfdCountersBundleDescendant.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName
// Name of the bundle this information is for
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of item. The type is string.
    ItemName interface{}
}

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetEntityData() *types.CommonEntityData {
    bundleName.EntityData.YFilter = bundleName.YFilter
    bundleName.EntityData.YangName = "bundle-name"
    bundleName.EntityData.BundleName = "cisco_ios_xr"
    bundleName.EntityData.ParentYangName = "bfd-counters-bundle-descendant"
    bundleName.EntityData.SegmentPath = "bundle-name"
    bundleName.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleName.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleName.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleName.EntityData.Children = make(map[string]types.YChild)
    bundleName.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleName.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", bundleName.ItemName}
    return &(bundleName.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter
// BFD event counters
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the member this information is for. The type is string.
    MemberName interface{}

    // Timestamp when counters were last cleared (deprecated). The type is
    // interface{} with range: 0..18446744073709551615.
    LastTimeCleared interface{}

    // Number of times member state changed to starting. The type is interface{}
    // with range: 0..4294967295.
    Starting interface{}

    // Number of times member state changed to up. The type is interface{} with
    // range: 0..4294967295.
    Up interface{}

    // Number of times member state changed to down. The type is interface{} with
    // range: 0..4294967295.
    Down interface{}

    // Number of times member state changed to neighbor unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfigured interface{}

    // Number of timeouts waiting for BFD to start. The type is interface{} with
    // range: 0..4294967295.
    StartTimeouts interface{}

    // Number of timeouts waiting for neighbor to become unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfiguredTimeouts interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}
}

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetEntityData() *types.CommonEntityData {
    bfdCounter.EntityData.YFilter = bfdCounter.YFilter
    bfdCounter.EntityData.YangName = "bfd-counter"
    bfdCounter.EntityData.BundleName = "cisco_ios_xr"
    bfdCounter.EntityData.ParentYangName = "bfd-counters-bundle-descendant"
    bfdCounter.EntityData.SegmentPath = "bfd-counter"
    bfdCounter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCounter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCounter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCounter.EntityData.Children = make(map[string]types.YChild)
    bfdCounter.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdCounter.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", bfdCounter.MemberName}
    bfdCounter.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", bfdCounter.LastTimeCleared}
    bfdCounter.EntityData.Leafs["starting"] = types.YLeaf{"Starting", bfdCounter.Starting}
    bfdCounter.EntityData.Leafs["up"] = types.YLeaf{"Up", bfdCounter.Up}
    bfdCounter.EntityData.Leafs["down"] = types.YLeaf{"Down", bfdCounter.Down}
    bfdCounter.EntityData.Leafs["neighbor-unconfigured"] = types.YLeaf{"NeighborUnconfigured", bfdCounter.NeighborUnconfigured}
    bfdCounter.EntityData.Leafs["start-timeouts"] = types.YLeaf{"StartTimeouts", bfdCounter.StartTimeouts}
    bfdCounter.EntityData.Leafs["neighbor-unconfigured-timeouts"] = types.YLeaf{"NeighborUnconfiguredTimeouts", bfdCounter.NeighborUnconfiguredTimeouts}
    bfdCounter.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", bfdCounter.TimeSinceCleared}
    return &(bfdCounter.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers
// Children of bundle with BFD counters
// information
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle member item with BFD counters information. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember.
    BfdCountersBundleChildrenMember []BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember
}

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetEntityData() *types.CommonEntityData {
    bfdCountersBundleChildrenMembers.EntityData.YFilter = bfdCountersBundleChildrenMembers.YFilter
    bfdCountersBundleChildrenMembers.EntityData.YangName = "bfd-counters-bundle-children-members"
    bfdCountersBundleChildrenMembers.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersBundleChildrenMembers.EntityData.ParentYangName = "bfd-counters-bundle"
    bfdCountersBundleChildrenMembers.EntityData.SegmentPath = "bfd-counters-bundle-children-members"
    bfdCountersBundleChildrenMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersBundleChildrenMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersBundleChildrenMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersBundleChildrenMembers.EntityData.Children = make(map[string]types.YChild)
    bfdCountersBundleChildrenMembers.EntityData.Children["bfd-counters-bundle-children-member"] = types.YChild{"BfdCountersBundleChildrenMember", nil}
    for i := range bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember {
        bfdCountersBundleChildrenMembers.EntityData.Children[types.GetSegmentPath(&bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember[i])] = types.YChild{"BfdCountersBundleChildrenMember", &bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember[i]}
    }
    bfdCountersBundleChildrenMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bfdCountersBundleChildrenMembers.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember
// Bundle member item with BFD counters
// information
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name of the member this information is for. The type is string.
    MemberName interface{}

    // Timestamp when counters were last cleared (deprecated). The type is
    // interface{} with range: 0..18446744073709551615.
    LastTimeCleared interface{}

    // Number of times member state changed to starting. The type is interface{}
    // with range: 0..4294967295.
    Starting interface{}

    // Number of times member state changed to up. The type is interface{} with
    // range: 0..4294967295.
    Up interface{}

    // Number of times member state changed to down. The type is interface{} with
    // range: 0..4294967295.
    Down interface{}

    // Number of times member state changed to neighbor unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfigured interface{}

    // Number of timeouts waiting for BFD to start. The type is interface{} with
    // range: 0..4294967295.
    StartTimeouts interface{}

    // Number of timeouts waiting for neighbor to become unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfiguredTimeouts interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}
}

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetEntityData() *types.CommonEntityData {
    bfdCountersBundleChildrenMember.EntityData.YFilter = bfdCountersBundleChildrenMember.YFilter
    bfdCountersBundleChildrenMember.EntityData.YangName = "bfd-counters-bundle-children-member"
    bfdCountersBundleChildrenMember.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersBundleChildrenMember.EntityData.ParentYangName = "bfd-counters-bundle-children-members"
    bfdCountersBundleChildrenMember.EntityData.SegmentPath = "bfd-counters-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", bfdCountersBundleChildrenMember.MemberInterface) + "']"
    bfdCountersBundleChildrenMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersBundleChildrenMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersBundleChildrenMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersBundleChildrenMember.EntityData.Children = make(map[string]types.YChild)
    bfdCountersBundleChildrenMember.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdCountersBundleChildrenMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", bfdCountersBundleChildrenMember.MemberInterface}
    bfdCountersBundleChildrenMember.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", bfdCountersBundleChildrenMember.MemberName}
    bfdCountersBundleChildrenMember.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", bfdCountersBundleChildrenMember.LastTimeCleared}
    bfdCountersBundleChildrenMember.EntityData.Leafs["starting"] = types.YLeaf{"Starting", bfdCountersBundleChildrenMember.Starting}
    bfdCountersBundleChildrenMember.EntityData.Leafs["up"] = types.YLeaf{"Up", bfdCountersBundleChildrenMember.Up}
    bfdCountersBundleChildrenMember.EntityData.Leafs["down"] = types.YLeaf{"Down", bfdCountersBundleChildrenMember.Down}
    bfdCountersBundleChildrenMember.EntityData.Leafs["neighbor-unconfigured"] = types.YLeaf{"NeighborUnconfigured", bfdCountersBundleChildrenMember.NeighborUnconfigured}
    bfdCountersBundleChildrenMember.EntityData.Leafs["start-timeouts"] = types.YLeaf{"StartTimeouts", bfdCountersBundleChildrenMember.StartTimeouts}
    bfdCountersBundleChildrenMember.EntityData.Leafs["neighbor-unconfigured-timeouts"] = types.YLeaf{"NeighborUnconfiguredTimeouts", bfdCountersBundleChildrenMember.NeighborUnconfiguredTimeouts}
    bfdCountersBundleChildrenMember.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", bfdCountersBundleChildrenMember.TimeSinceCleared}
    return &(bfdCountersBundleChildrenMember.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem
// Data for this item
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of item. The type is string.
    ItemName interface{}
}

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetEntityData() *types.CommonEntityData {
    bfdCountersBundleItem.EntityData.YFilter = bfdCountersBundleItem.YFilter
    bfdCountersBundleItem.EntityData.YangName = "bfd-counters-bundle-item"
    bfdCountersBundleItem.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersBundleItem.EntityData.ParentYangName = "bfd-counters-bundle"
    bfdCountersBundleItem.EntityData.SegmentPath = "bfd-counters-bundle-item"
    bfdCountersBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersBundleItem.EntityData.Children = make(map[string]types.YChild)
    bfdCountersBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdCountersBundleItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", bfdCountersBundleItem.ItemName}
    return &(bfdCountersBundleItem.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersMembers
// Member interfaces with BFD counters information
type BundleInformation_BfdCounters_BfdCountersMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember.
    BfdCountersMember []BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember
}

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetEntityData() *types.CommonEntityData {
    bfdCountersMembers.EntityData.YFilter = bfdCountersMembers.YFilter
    bfdCountersMembers.EntityData.YangName = "bfd-counters-members"
    bfdCountersMembers.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersMembers.EntityData.ParentYangName = "bfd-counters"
    bfdCountersMembers.EntityData.SegmentPath = "bfd-counters-members"
    bfdCountersMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersMembers.EntityData.Children = make(map[string]types.YChild)
    bfdCountersMembers.EntityData.Children["bfd-counters-member"] = types.YChild{"BfdCountersMember", nil}
    for i := range bfdCountersMembers.BfdCountersMember {
        bfdCountersMembers.EntityData.Children[types.GetSegmentPath(&bfdCountersMembers.BfdCountersMember[i])] = types.YChild{"BfdCountersMember", &bfdCountersMembers.BfdCountersMember[i]}
    }
    bfdCountersMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bfdCountersMembers.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember
// Member interface
type BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    BfdCountersMemberItem BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem
}

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetEntityData() *types.CommonEntityData {
    bfdCountersMember.EntityData.YFilter = bfdCountersMember.YFilter
    bfdCountersMember.EntityData.YangName = "bfd-counters-member"
    bfdCountersMember.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersMember.EntityData.ParentYangName = "bfd-counters-members"
    bfdCountersMember.EntityData.SegmentPath = "bfd-counters-member" + "[member-interface='" + fmt.Sprintf("%v", bfdCountersMember.MemberInterface) + "']"
    bfdCountersMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersMember.EntityData.Children = make(map[string]types.YChild)
    bfdCountersMember.EntityData.Children["bfd-counters-member-item"] = types.YChild{"BfdCountersMemberItem", &bfdCountersMember.BfdCountersMemberItem}
    bfdCountersMember.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdCountersMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", bfdCountersMember.MemberInterface}
    return &(bfdCountersMember.EntityData)
}

// BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem
// Data for this item
type BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the member this information is for. The type is string.
    MemberName interface{}

    // Timestamp when counters were last cleared (deprecated). The type is
    // interface{} with range: 0..18446744073709551615.
    LastTimeCleared interface{}

    // Number of times member state changed to starting. The type is interface{}
    // with range: 0..4294967295.
    Starting interface{}

    // Number of times member state changed to up. The type is interface{} with
    // range: 0..4294967295.
    Up interface{}

    // Number of times member state changed to down. The type is interface{} with
    // range: 0..4294967295.
    Down interface{}

    // Number of times member state changed to neighbor unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfigured interface{}

    // Number of timeouts waiting for BFD to start. The type is interface{} with
    // range: 0..4294967295.
    StartTimeouts interface{}

    // Number of timeouts waiting for neighbor to become unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfiguredTimeouts interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}
}

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetEntityData() *types.CommonEntityData {
    bfdCountersMemberItem.EntityData.YFilter = bfdCountersMemberItem.YFilter
    bfdCountersMemberItem.EntityData.YangName = "bfd-counters-member-item"
    bfdCountersMemberItem.EntityData.BundleName = "cisco_ios_xr"
    bfdCountersMemberItem.EntityData.ParentYangName = "bfd-counters-member"
    bfdCountersMemberItem.EntityData.SegmentPath = "bfd-counters-member-item"
    bfdCountersMemberItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdCountersMemberItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdCountersMemberItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdCountersMemberItem.EntityData.Children = make(map[string]types.YChild)
    bfdCountersMemberItem.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdCountersMemberItem.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", bfdCountersMemberItem.MemberName}
    bfdCountersMemberItem.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", bfdCountersMemberItem.LastTimeCleared}
    bfdCountersMemberItem.EntityData.Leafs["starting"] = types.YLeaf{"Starting", bfdCountersMemberItem.Starting}
    bfdCountersMemberItem.EntityData.Leafs["up"] = types.YLeaf{"Up", bfdCountersMemberItem.Up}
    bfdCountersMemberItem.EntityData.Leafs["down"] = types.YLeaf{"Down", bfdCountersMemberItem.Down}
    bfdCountersMemberItem.EntityData.Leafs["neighbor-unconfigured"] = types.YLeaf{"NeighborUnconfigured", bfdCountersMemberItem.NeighborUnconfigured}
    bfdCountersMemberItem.EntityData.Leafs["start-timeouts"] = types.YLeaf{"StartTimeouts", bfdCountersMemberItem.StartTimeouts}
    bfdCountersMemberItem.EntityData.Leafs["neighbor-unconfigured-timeouts"] = types.YLeaf{"NeighborUnconfiguredTimeouts", bfdCountersMemberItem.NeighborUnconfiguredTimeouts}
    bfdCountersMemberItem.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", bfdCountersMemberItem.TimeSinceCleared}
    return &(bfdCountersMemberItem.EntityData)
}

// BundleInformation_ScheduledActions
// Scheduled actions on a bundle
type BundleInformation_ScheduledActions struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundles with actions scheduled.
    ScheduledActionsBundles BundleInformation_ScheduledActions_ScheduledActionsBundles
}

func (scheduledActions *BundleInformation_ScheduledActions) GetEntityData() *types.CommonEntityData {
    scheduledActions.EntityData.YFilter = scheduledActions.YFilter
    scheduledActions.EntityData.YangName = "scheduled-actions"
    scheduledActions.EntityData.BundleName = "cisco_ios_xr"
    scheduledActions.EntityData.ParentYangName = "bundle-information"
    scheduledActions.EntityData.SegmentPath = "scheduled-actions"
    scheduledActions.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    scheduledActions.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    scheduledActions.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    scheduledActions.EntityData.Children = make(map[string]types.YChild)
    scheduledActions.EntityData.Children["scheduled-actions-bundles"] = types.YChild{"ScheduledActionsBundles", &scheduledActions.ScheduledActionsBundles}
    scheduledActions.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(scheduledActions.EntityData)
}

// BundleInformation_ScheduledActions_ScheduledActionsBundles
// Bundles with actions scheduled
type BundleInformation_ScheduledActions_ScheduledActionsBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle.
    ScheduledActionsBundle []BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle
}

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetEntityData() *types.CommonEntityData {
    scheduledActionsBundles.EntityData.YFilter = scheduledActionsBundles.YFilter
    scheduledActionsBundles.EntityData.YangName = "scheduled-actions-bundles"
    scheduledActionsBundles.EntityData.BundleName = "cisco_ios_xr"
    scheduledActionsBundles.EntityData.ParentYangName = "scheduled-actions"
    scheduledActionsBundles.EntityData.SegmentPath = "scheduled-actions-bundles"
    scheduledActionsBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    scheduledActionsBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    scheduledActionsBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    scheduledActionsBundles.EntityData.Children = make(map[string]types.YChild)
    scheduledActionsBundles.EntityData.Children["scheduled-actions-bundle"] = types.YChild{"ScheduledActionsBundle", nil}
    for i := range scheduledActionsBundles.ScheduledActionsBundle {
        scheduledActionsBundles.EntityData.Children[types.GetSegmentPath(&scheduledActionsBundles.ScheduledActionsBundle[i])] = types.YChild{"ScheduledActionsBundle", &scheduledActionsBundles.ScheduledActionsBundle[i]}
    }
    scheduledActionsBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(scheduledActionsBundles.EntityData)
}

// BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle
// Bundle interface
type BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    ScheduledActionsBundleItem BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem
}

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetEntityData() *types.CommonEntityData {
    scheduledActionsBundle.EntityData.YFilter = scheduledActionsBundle.YFilter
    scheduledActionsBundle.EntityData.YangName = "scheduled-actions-bundle"
    scheduledActionsBundle.EntityData.BundleName = "cisco_ios_xr"
    scheduledActionsBundle.EntityData.ParentYangName = "scheduled-actions-bundles"
    scheduledActionsBundle.EntityData.SegmentPath = "scheduled-actions-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", scheduledActionsBundle.BundleInterface) + "']"
    scheduledActionsBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    scheduledActionsBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    scheduledActionsBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    scheduledActionsBundle.EntityData.Children = make(map[string]types.YChild)
    scheduledActionsBundle.EntityData.Children["scheduled-actions-bundle-item"] = types.YChild{"ScheduledActionsBundleItem", &scheduledActionsBundle.ScheduledActionsBundleItem}
    scheduledActionsBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    scheduledActionsBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", scheduledActionsBundle.BundleInterface}
    return &(scheduledActionsBundle.EntityData)
}

// BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem
// Data for this item
type BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // Scheduled actions. The type is slice of
    // BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction.
    ScheduledAction []BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction
}

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetEntityData() *types.CommonEntityData {
    scheduledActionsBundleItem.EntityData.YFilter = scheduledActionsBundleItem.YFilter
    scheduledActionsBundleItem.EntityData.YangName = "scheduled-actions-bundle-item"
    scheduledActionsBundleItem.EntityData.BundleName = "cisco_ios_xr"
    scheduledActionsBundleItem.EntityData.ParentYangName = "scheduled-actions-bundle"
    scheduledActionsBundleItem.EntityData.SegmentPath = "scheduled-actions-bundle-item"
    scheduledActionsBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    scheduledActionsBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    scheduledActionsBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    scheduledActionsBundleItem.EntityData.Children = make(map[string]types.YChild)
    scheduledActionsBundleItem.EntityData.Children["scheduled-action"] = types.YChild{"ScheduledAction", nil}
    for i := range scheduledActionsBundleItem.ScheduledAction {
        scheduledActionsBundleItem.EntityData.Children[types.GetSegmentPath(&scheduledActionsBundleItem.ScheduledAction[i])] = types.YChild{"ScheduledAction", &scheduledActionsBundleItem.ScheduledAction[i]}
    }
    scheduledActionsBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    scheduledActionsBundleItem.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", scheduledActionsBundleItem.BundleName}
    return &(scheduledActionsBundleItem.EntityData)
}

// BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction
// Scheduled actions
type BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of mLACP scheduled action for a bundle. The type is
    // BmdBagMlacpSchActionItem.
    MlacpAction interface{}

    // Seconds left before action. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    TimeRemaining interface{}

    // Details whether the switch action is viable. The type is BmdSwitchReason.
    ActionState interface{}
}

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetEntityData() *types.CommonEntityData {
    scheduledAction.EntityData.YFilter = scheduledAction.YFilter
    scheduledAction.EntityData.YangName = "scheduled-action"
    scheduledAction.EntityData.BundleName = "cisco_ios_xr"
    scheduledAction.EntityData.ParentYangName = "scheduled-actions-bundle-item"
    scheduledAction.EntityData.SegmentPath = "scheduled-action"
    scheduledAction.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    scheduledAction.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    scheduledAction.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    scheduledAction.EntityData.Children = make(map[string]types.YChild)
    scheduledAction.EntityData.Leafs = make(map[string]types.YLeaf)
    scheduledAction.EntityData.Leafs["mlacp-action"] = types.YLeaf{"MlacpAction", scheduledAction.MlacpAction}
    scheduledAction.EntityData.Leafs["time-remaining"] = types.YLeaf{"TimeRemaining", scheduledAction.TimeRemaining}
    scheduledAction.EntityData.Leafs["action-state"] = types.YLeaf{"ActionState", scheduledAction.ActionState}
    return &(scheduledAction.EntityData)
}

// BundleInformation_Bundle
// Generic information for bundles and members
type BundleInformation_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interfaces with common bundle information.
    BundleBundles BundleInformation_Bundle_BundleBundles

    // Member interfaces with common bundle information.
    BundleMembers BundleInformation_Bundle_BundleMembers
}

func (bundle *BundleInformation_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "bundle-information"
    bundle.EntityData.SegmentPath = "bundle"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["bundle-bundles"] = types.YChild{"BundleBundles", &bundle.BundleBundles}
    bundle.EntityData.Children["bundle-members"] = types.YChild{"BundleMembers", &bundle.BundleMembers}
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundle.EntityData)
}

// BundleInformation_Bundle_BundleBundles
// Bundle interfaces with common bundle
// information
type BundleInformation_Bundle_BundleBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle.
    BundleBundle []BundleInformation_Bundle_BundleBundles_BundleBundle
}

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetEntityData() *types.CommonEntityData {
    bundleBundles.EntityData.YFilter = bundleBundles.YFilter
    bundleBundles.EntityData.YangName = "bundle-bundles"
    bundleBundles.EntityData.BundleName = "cisco_ios_xr"
    bundleBundles.EntityData.ParentYangName = "bundle"
    bundleBundles.EntityData.SegmentPath = "bundle-bundles"
    bundleBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBundles.EntityData.Children = make(map[string]types.YChild)
    bundleBundles.EntityData.Children["bundle-bundle"] = types.YChild{"BundleBundle", nil}
    for i := range bundleBundles.BundleBundle {
        bundleBundles.EntityData.Children[types.GetSegmentPath(&bundleBundles.BundleBundle[i])] = types.YChild{"BundleBundle", &bundleBundles.BundleBundle[i]}
    }
    bundleBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleBundles.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle
// Bundle interface
type BundleInformation_Bundle_BundleBundles_BundleBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item and all its members.
    BundleBundleDescendant BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant

    // Children of bundle with common bundle information.
    BundleBundleChildrenMembers BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers

    // Data for this item.
    BundleBundleItem BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem
}

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetEntityData() *types.CommonEntityData {
    bundleBundle.EntityData.YFilter = bundleBundle.YFilter
    bundleBundle.EntityData.YangName = "bundle-bundle"
    bundleBundle.EntityData.BundleName = "cisco_ios_xr"
    bundleBundle.EntityData.ParentYangName = "bundle-bundles"
    bundleBundle.EntityData.SegmentPath = "bundle-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundleBundle.BundleInterface) + "']"
    bundleBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBundle.EntityData.Children = make(map[string]types.YChild)
    bundleBundle.EntityData.Children["bundle-bundle-descendant"] = types.YChild{"BundleBundleDescendant", &bundleBundle.BundleBundleDescendant}
    bundleBundle.EntityData.Children["bundle-bundle-children-members"] = types.YChild{"BundleBundleChildrenMembers", &bundleBundle.BundleBundleChildrenMembers}
    bundleBundle.EntityData.Children["bundle-bundle-item"] = types.YChild{"BundleBundleItem", &bundleBundle.BundleBundleItem}
    bundleBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", bundleBundle.BundleInterface}
    return &(bundleBundle.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant
// Data for this item and all its members
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData

    // Member information. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData.
    MemberData []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData
}

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetEntityData() *types.CommonEntityData {
    bundleBundleDescendant.EntityData.YFilter = bundleBundleDescendant.YFilter
    bundleBundleDescendant.EntityData.YangName = "bundle-bundle-descendant"
    bundleBundleDescendant.EntityData.BundleName = "cisco_ios_xr"
    bundleBundleDescendant.EntityData.ParentYangName = "bundle-bundle"
    bundleBundleDescendant.EntityData.SegmentPath = "bundle-bundle-descendant"
    bundleBundleDescendant.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBundleDescendant.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBundleDescendant.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBundleDescendant.EntityData.Children = make(map[string]types.YChild)
    bundleBundleDescendant.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &bundleBundleDescendant.BundleData}
    bundleBundleDescendant.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range bundleBundleDescendant.MemberData {
        bundleBundleDescendant.EntityData.Children[types.GetSegmentPath(&bundleBundleDescendant.MemberData[i])] = types.YChild{"MemberData", &bundleBundleDescendant.MemberData[i]}
    }
    bundleBundleDescendant.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleBundleDescendant.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData
// Bundle information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig.
    BfdConfig []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig
}

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "bundle-bundle-descendant"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &bundleData.MacAddress}
    bundleData.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range bundleData.BfdConfig {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.BfdConfig[i])] = types.YChild{"BfdConfig", &bundleData.BfdConfig[i]}
    }
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", bundleData.BundleInterfaceName}
    bundleData.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", bundleData.AvailableBandwidth}
    bundleData.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", bundleData.EffectiveBandwidth}
    bundleData.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", bundleData.ConfiguredBandwidth}
    bundleData.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", bundleData.MinimumActiveLinks}
    bundleData.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", bundleData.MaximumActiveLinks}
    bundleData.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", bundleData.MaximumActiveLinksSource}
    bundleData.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", bundleData.MinimumBandwidth}
    bundleData.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", bundleData.PrimaryMember}
    bundleData.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bundleData.BundleStatus}
    bundleData.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", bundleData.ActiveMemberCount}
    bundleData.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", bundleData.StandbyMemberCount}
    bundleData.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", bundleData.ConfiguredMemberCount}
    bundleData.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", bundleData.MacSource}
    bundleData.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", bundleData.MacSourceMember}
    bundleData.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", bundleData.InterChassis}
    bundleData.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", bundleData.IsActive}
    bundleData.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", bundleData.LacpStatus}
    bundleData.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", bundleData.MlacpStatus}
    bundleData.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", bundleData.Ipv4BfdStatus}
    bundleData.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", bundleData.LinkOrderStatus}
    bundleData.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", bundleData.Ipv6BfdStatus}
    bundleData.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", bundleData.LoadBalanceHashType}
    bundleData.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", bundleData.LoadBalanceLocalityThreshold}
    bundleData.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", bundleData.SuppressionTimer}
    bundleData.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", bundleData.WaitWhileTimer}
    bundleData.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", bundleData.CollectorMaxDelay}
    bundleData.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", bundleData.CiscoExtensions}
    bundleData.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", bundleData.LacpNonrevertive}
    bundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleData.IccpGroupId}
    bundleData.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", bundleData.ActiveForeignMemberCount}
    bundleData.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", bundleData.ConfiguredForeignMemberCount}
    bundleData.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", bundleData.SwitchoverType}
    bundleData.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", bundleData.MaximizeThresholdValueLinks}
    bundleData.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", bundleData.MaximizeThresholdValueBandWidth}
    bundleData.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", bundleData.MlacpMode}
    bundleData.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", bundleData.RecoveryDelay}
    bundleData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", bundleData.Singleton}
    return &(bundleData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress
// MAC address of this member
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "bundle-data"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData
// Member information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress
}

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "bundle-bundle-descendant"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["counters"] = types.YChild{"Counters", &memberData.Counters}
    memberData.EntityData.Children["link-data"] = types.YChild{"LinkData", &memberData.LinkData}
    memberData.EntityData.Children["member-mux-data"] = types.YChild{"MemberMuxData", &memberData.MemberMuxData}
    memberData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &memberData.MacAddress}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", memberData.InterfaceName}
    memberData.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", memberData.PortPriority}
    memberData.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", memberData.PortNumber}
    memberData.EntityData.Leafs["underlying-link-id"] = types.YLeaf{"UnderlyingLinkId", memberData.UnderlyingLinkId}
    memberData.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", memberData.LinkOrderNumber}
    memberData.EntityData.Leafs["iccp-node"] = types.YLeaf{"IccpNode", memberData.IccpNode}
    memberData.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", memberData.Bandwidth}
    memberData.EntityData.Leafs["lacp-enabled"] = types.YLeaf{"LacpEnabled", memberData.LacpEnabled}
    memberData.EntityData.Leafs["member-type"] = types.YLeaf{"MemberType", memberData.MemberType}
    memberData.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", memberData.MemberName}
    return &(memberData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "member-data"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["lacpd-us-received"] = types.YLeaf{"LacpdUsReceived", counters.LacpdUsReceived}
    counters.EntityData.Leafs["lacpd-us-transmitted"] = types.YLeaf{"LacpdUsTransmitted", counters.LacpdUsTransmitted}
    counters.EntityData.Leafs["marker-packets-received"] = types.YLeaf{"MarkerPacketsReceived", counters.MarkerPacketsReceived}
    counters.EntityData.Leafs["marker-responses-transmitted"] = types.YLeaf{"MarkerResponsesTransmitted", counters.MarkerResponsesTransmitted}
    counters.EntityData.Leafs["illegal-packets-received"] = types.YLeaf{"IllegalPacketsReceived", counters.IllegalPacketsReceived}
    counters.EntityData.Leafs["excess-lacpd-us-received"] = types.YLeaf{"ExcessLacpdUsReceived", counters.ExcessLacpdUsReceived}
    counters.EntityData.Leafs["excess-marker-packets-received"] = types.YLeaf{"ExcessMarkerPacketsReceived", counters.ExcessMarkerPacketsReceived}
    counters.EntityData.Leafs["defaulted"] = types.YLeaf{"Defaulted", counters.Defaulted}
    counters.EntityData.Leafs["expired"] = types.YLeaf{"Expired", counters.Expired}
    counters.EntityData.Leafs["last-cleared-sec"] = types.YLeaf{"LastClearedSec", counters.LastClearedSec}
    counters.EntityData.Leafs["last-cleared-nsec"] = types.YLeaf{"LastClearedNsec", counters.LastClearedNsec}
    return &(counters.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetEntityData() *types.CommonEntityData {
    linkData.EntityData.YFilter = linkData.YFilter
    linkData.EntityData.YangName = "link-data"
    linkData.EntityData.BundleName = "cisco_ios_xr"
    linkData.EntityData.ParentYangName = "member-data"
    linkData.EntityData.SegmentPath = "link-data"
    linkData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkData.EntityData.Children = make(map[string]types.YChild)
    linkData.EntityData.Leafs = make(map[string]types.YLeaf)
    linkData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", linkData.InterfaceHandle}
    linkData.EntityData.Leafs["actor-system-priority"] = types.YLeaf{"ActorSystemPriority", linkData.ActorSystemPriority}
    linkData.EntityData.Leafs["actor-system-mac-address"] = types.YLeaf{"ActorSystemMacAddress", linkData.ActorSystemMacAddress}
    linkData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", linkData.ActorOperationalKey}
    linkData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", linkData.PartnerSystemPriority}
    linkData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", linkData.PartnerSystemMacAddress}
    linkData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", linkData.PartnerOperationalKey}
    linkData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", linkData.SelectedAggregatorId}
    linkData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", linkData.AttachedAggregatorId}
    linkData.EntityData.Leafs["actor-port-id"] = types.YLeaf{"ActorPortId", linkData.ActorPortId}
    linkData.EntityData.Leafs["actor-port-priority"] = types.YLeaf{"ActorPortPriority", linkData.ActorPortPriority}
    linkData.EntityData.Leafs["partner-port-id"] = types.YLeaf{"PartnerPortId", linkData.PartnerPortId}
    linkData.EntityData.Leafs["partner-port-priority"] = types.YLeaf{"PartnerPortPriority", linkData.PartnerPortPriority}
    linkData.EntityData.Leafs["actor-port-state"] = types.YLeaf{"ActorPortState", linkData.ActorPortState}
    linkData.EntityData.Leafs["partner-port-state"] = types.YLeaf{"PartnerPortState", linkData.PartnerPortState}
    return &(linkData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetEntityData() *types.CommonEntityData {
    memberMuxData.EntityData.YFilter = memberMuxData.YFilter
    memberMuxData.EntityData.YangName = "member-mux-data"
    memberMuxData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxData.EntityData.ParentYangName = "member-data"
    memberMuxData.EntityData.SegmentPath = "member-mux-data"
    memberMuxData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxData.EntityData.Children = make(map[string]types.YChild)
    memberMuxData.EntityData.Children["member-mux-state-reason-data"] = types.YChild{"MemberMuxStateReasonData", &memberMuxData.MemberMuxStateReasonData}
    memberMuxData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberMuxData.MuxState}
    memberMuxData.EntityData.Leafs["error"] = types.YLeaf{"Error", memberMuxData.Error}
    memberMuxData.EntityData.Leafs["member-mux-state-reason"] = types.YLeaf{"MemberMuxStateReason", memberMuxData.MemberMuxStateReason}
    memberMuxData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", memberMuxData.MemberState}
    memberMuxData.EntityData.Leafs["mux-state-reason"] = types.YLeaf{"MuxStateReason", memberMuxData.MuxStateReason}
    return &(memberMuxData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetEntityData() *types.CommonEntityData {
    memberMuxStateReasonData.EntityData.YFilter = memberMuxStateReasonData.YFilter
    memberMuxStateReasonData.EntityData.YangName = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxStateReasonData.EntityData.ParentYangName = "member-mux-data"
    memberMuxStateReasonData.EntityData.SegmentPath = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxStateReasonData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxStateReasonData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxStateReasonData.EntityData.Children = make(map[string]types.YChild)
    memberMuxStateReasonData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxStateReasonData.EntityData.Leafs["reason-type"] = types.YLeaf{"ReasonType", memberMuxStateReasonData.ReasonType}
    memberMuxStateReasonData.EntityData.Leafs["severity"] = types.YLeaf{"Severity", memberMuxStateReasonData.Severity}
    return &(memberMuxStateReasonData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "member-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers
// Children of bundle with common bundle
// information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle member item with common bundle information. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember.
    BundleBundleChildrenMember []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember
}

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetEntityData() *types.CommonEntityData {
    bundleBundleChildrenMembers.EntityData.YFilter = bundleBundleChildrenMembers.YFilter
    bundleBundleChildrenMembers.EntityData.YangName = "bundle-bundle-children-members"
    bundleBundleChildrenMembers.EntityData.BundleName = "cisco_ios_xr"
    bundleBundleChildrenMembers.EntityData.ParentYangName = "bundle-bundle"
    bundleBundleChildrenMembers.EntityData.SegmentPath = "bundle-bundle-children-members"
    bundleBundleChildrenMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBundleChildrenMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBundleChildrenMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBundleChildrenMembers.EntityData.Children = make(map[string]types.YChild)
    bundleBundleChildrenMembers.EntityData.Children["bundle-bundle-children-member"] = types.YChild{"BundleBundleChildrenMember", nil}
    for i := range bundleBundleChildrenMembers.BundleBundleChildrenMember {
        bundleBundleChildrenMembers.EntityData.Children[types.GetSegmentPath(&bundleBundleChildrenMembers.BundleBundleChildrenMember[i])] = types.YChild{"BundleBundleChildrenMember", &bundleBundleChildrenMembers.BundleBundleChildrenMember[i]}
    }
    bundleBundleChildrenMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleBundleChildrenMembers.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember
// Bundle member item with common bundle
// information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Member's interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress
}

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetEntityData() *types.CommonEntityData {
    bundleBundleChildrenMember.EntityData.YFilter = bundleBundleChildrenMember.YFilter
    bundleBundleChildrenMember.EntityData.YangName = "bundle-bundle-children-member"
    bundleBundleChildrenMember.EntityData.BundleName = "cisco_ios_xr"
    bundleBundleChildrenMember.EntityData.ParentYangName = "bundle-bundle-children-members"
    bundleBundleChildrenMember.EntityData.SegmentPath = "bundle-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", bundleBundleChildrenMember.MemberInterface) + "']"
    bundleBundleChildrenMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBundleChildrenMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBundleChildrenMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBundleChildrenMember.EntityData.Children = make(map[string]types.YChild)
    bundleBundleChildrenMember.EntityData.Children["counters"] = types.YChild{"Counters", &bundleBundleChildrenMember.Counters}
    bundleBundleChildrenMember.EntityData.Children["link-data"] = types.YChild{"LinkData", &bundleBundleChildrenMember.LinkData}
    bundleBundleChildrenMember.EntityData.Children["member-mux-data"] = types.YChild{"MemberMuxData", &bundleBundleChildrenMember.MemberMuxData}
    bundleBundleChildrenMember.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &bundleBundleChildrenMember.MacAddress}
    bundleBundleChildrenMember.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleBundleChildrenMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", bundleBundleChildrenMember.MemberInterface}
    bundleBundleChildrenMember.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", bundleBundleChildrenMember.InterfaceName}
    bundleBundleChildrenMember.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", bundleBundleChildrenMember.PortPriority}
    bundleBundleChildrenMember.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", bundleBundleChildrenMember.PortNumber}
    bundleBundleChildrenMember.EntityData.Leafs["underlying-link-id"] = types.YLeaf{"UnderlyingLinkId", bundleBundleChildrenMember.UnderlyingLinkId}
    bundleBundleChildrenMember.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", bundleBundleChildrenMember.LinkOrderNumber}
    bundleBundleChildrenMember.EntityData.Leafs["iccp-node"] = types.YLeaf{"IccpNode", bundleBundleChildrenMember.IccpNode}
    bundleBundleChildrenMember.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", bundleBundleChildrenMember.Bandwidth}
    bundleBundleChildrenMember.EntityData.Leafs["lacp-enabled"] = types.YLeaf{"LacpEnabled", bundleBundleChildrenMember.LacpEnabled}
    bundleBundleChildrenMember.EntityData.Leafs["member-type"] = types.YLeaf{"MemberType", bundleBundleChildrenMember.MemberType}
    bundleBundleChildrenMember.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", bundleBundleChildrenMember.MemberName}
    return &(bundleBundleChildrenMember.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "bundle-bundle-children-member"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["lacpd-us-received"] = types.YLeaf{"LacpdUsReceived", counters.LacpdUsReceived}
    counters.EntityData.Leafs["lacpd-us-transmitted"] = types.YLeaf{"LacpdUsTransmitted", counters.LacpdUsTransmitted}
    counters.EntityData.Leafs["marker-packets-received"] = types.YLeaf{"MarkerPacketsReceived", counters.MarkerPacketsReceived}
    counters.EntityData.Leafs["marker-responses-transmitted"] = types.YLeaf{"MarkerResponsesTransmitted", counters.MarkerResponsesTransmitted}
    counters.EntityData.Leafs["illegal-packets-received"] = types.YLeaf{"IllegalPacketsReceived", counters.IllegalPacketsReceived}
    counters.EntityData.Leafs["excess-lacpd-us-received"] = types.YLeaf{"ExcessLacpdUsReceived", counters.ExcessLacpdUsReceived}
    counters.EntityData.Leafs["excess-marker-packets-received"] = types.YLeaf{"ExcessMarkerPacketsReceived", counters.ExcessMarkerPacketsReceived}
    counters.EntityData.Leafs["defaulted"] = types.YLeaf{"Defaulted", counters.Defaulted}
    counters.EntityData.Leafs["expired"] = types.YLeaf{"Expired", counters.Expired}
    counters.EntityData.Leafs["last-cleared-sec"] = types.YLeaf{"LastClearedSec", counters.LastClearedSec}
    counters.EntityData.Leafs["last-cleared-nsec"] = types.YLeaf{"LastClearedNsec", counters.LastClearedNsec}
    return &(counters.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetEntityData() *types.CommonEntityData {
    linkData.EntityData.YFilter = linkData.YFilter
    linkData.EntityData.YangName = "link-data"
    linkData.EntityData.BundleName = "cisco_ios_xr"
    linkData.EntityData.ParentYangName = "bundle-bundle-children-member"
    linkData.EntityData.SegmentPath = "link-data"
    linkData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkData.EntityData.Children = make(map[string]types.YChild)
    linkData.EntityData.Leafs = make(map[string]types.YLeaf)
    linkData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", linkData.InterfaceHandle}
    linkData.EntityData.Leafs["actor-system-priority"] = types.YLeaf{"ActorSystemPriority", linkData.ActorSystemPriority}
    linkData.EntityData.Leafs["actor-system-mac-address"] = types.YLeaf{"ActorSystemMacAddress", linkData.ActorSystemMacAddress}
    linkData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", linkData.ActorOperationalKey}
    linkData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", linkData.PartnerSystemPriority}
    linkData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", linkData.PartnerSystemMacAddress}
    linkData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", linkData.PartnerOperationalKey}
    linkData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", linkData.SelectedAggregatorId}
    linkData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", linkData.AttachedAggregatorId}
    linkData.EntityData.Leafs["actor-port-id"] = types.YLeaf{"ActorPortId", linkData.ActorPortId}
    linkData.EntityData.Leafs["actor-port-priority"] = types.YLeaf{"ActorPortPriority", linkData.ActorPortPriority}
    linkData.EntityData.Leafs["partner-port-id"] = types.YLeaf{"PartnerPortId", linkData.PartnerPortId}
    linkData.EntityData.Leafs["partner-port-priority"] = types.YLeaf{"PartnerPortPriority", linkData.PartnerPortPriority}
    linkData.EntityData.Leafs["actor-port-state"] = types.YLeaf{"ActorPortState", linkData.ActorPortState}
    linkData.EntityData.Leafs["partner-port-state"] = types.YLeaf{"PartnerPortState", linkData.PartnerPortState}
    return &(linkData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetEntityData() *types.CommonEntityData {
    memberMuxData.EntityData.YFilter = memberMuxData.YFilter
    memberMuxData.EntityData.YangName = "member-mux-data"
    memberMuxData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxData.EntityData.ParentYangName = "bundle-bundle-children-member"
    memberMuxData.EntityData.SegmentPath = "member-mux-data"
    memberMuxData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxData.EntityData.Children = make(map[string]types.YChild)
    memberMuxData.EntityData.Children["member-mux-state-reason-data"] = types.YChild{"MemberMuxStateReasonData", &memberMuxData.MemberMuxStateReasonData}
    memberMuxData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberMuxData.MuxState}
    memberMuxData.EntityData.Leafs["error"] = types.YLeaf{"Error", memberMuxData.Error}
    memberMuxData.EntityData.Leafs["member-mux-state-reason"] = types.YLeaf{"MemberMuxStateReason", memberMuxData.MemberMuxStateReason}
    memberMuxData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", memberMuxData.MemberState}
    memberMuxData.EntityData.Leafs["mux-state-reason"] = types.YLeaf{"MuxStateReason", memberMuxData.MuxStateReason}
    return &(memberMuxData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetEntityData() *types.CommonEntityData {
    memberMuxStateReasonData.EntityData.YFilter = memberMuxStateReasonData.YFilter
    memberMuxStateReasonData.EntityData.YangName = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxStateReasonData.EntityData.ParentYangName = "member-mux-data"
    memberMuxStateReasonData.EntityData.SegmentPath = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxStateReasonData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxStateReasonData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxStateReasonData.EntityData.Children = make(map[string]types.YChild)
    memberMuxStateReasonData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxStateReasonData.EntityData.Leafs["reason-type"] = types.YLeaf{"ReasonType", memberMuxStateReasonData.ReasonType}
    memberMuxStateReasonData.EntityData.Leafs["severity"] = types.YLeaf{"Severity", memberMuxStateReasonData.Severity}
    return &(memberMuxStateReasonData.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "bundle-bundle-children-member"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem
// Data for this item
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig.
    BfdConfig []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig
}

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetEntityData() *types.CommonEntityData {
    bundleBundleItem.EntityData.YFilter = bundleBundleItem.YFilter
    bundleBundleItem.EntityData.YangName = "bundle-bundle-item"
    bundleBundleItem.EntityData.BundleName = "cisco_ios_xr"
    bundleBundleItem.EntityData.ParentYangName = "bundle-bundle"
    bundleBundleItem.EntityData.SegmentPath = "bundle-bundle-item"
    bundleBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBundleItem.EntityData.Children = make(map[string]types.YChild)
    bundleBundleItem.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &bundleBundleItem.MacAddress}
    bundleBundleItem.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range bundleBundleItem.BfdConfig {
        bundleBundleItem.EntityData.Children[types.GetSegmentPath(&bundleBundleItem.BfdConfig[i])] = types.YChild{"BfdConfig", &bundleBundleItem.BfdConfig[i]}
    }
    bundleBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleBundleItem.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", bundleBundleItem.BundleInterfaceName}
    bundleBundleItem.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", bundleBundleItem.AvailableBandwidth}
    bundleBundleItem.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", bundleBundleItem.EffectiveBandwidth}
    bundleBundleItem.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", bundleBundleItem.ConfiguredBandwidth}
    bundleBundleItem.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", bundleBundleItem.MinimumActiveLinks}
    bundleBundleItem.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", bundleBundleItem.MaximumActiveLinks}
    bundleBundleItem.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", bundleBundleItem.MaximumActiveLinksSource}
    bundleBundleItem.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", bundleBundleItem.MinimumBandwidth}
    bundleBundleItem.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", bundleBundleItem.PrimaryMember}
    bundleBundleItem.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bundleBundleItem.BundleStatus}
    bundleBundleItem.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", bundleBundleItem.ActiveMemberCount}
    bundleBundleItem.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", bundleBundleItem.StandbyMemberCount}
    bundleBundleItem.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", bundleBundleItem.ConfiguredMemberCount}
    bundleBundleItem.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", bundleBundleItem.MacSource}
    bundleBundleItem.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", bundleBundleItem.MacSourceMember}
    bundleBundleItem.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", bundleBundleItem.InterChassis}
    bundleBundleItem.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", bundleBundleItem.IsActive}
    bundleBundleItem.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", bundleBundleItem.LacpStatus}
    bundleBundleItem.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", bundleBundleItem.MlacpStatus}
    bundleBundleItem.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", bundleBundleItem.Ipv4BfdStatus}
    bundleBundleItem.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", bundleBundleItem.LinkOrderStatus}
    bundleBundleItem.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", bundleBundleItem.Ipv6BfdStatus}
    bundleBundleItem.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", bundleBundleItem.LoadBalanceHashType}
    bundleBundleItem.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", bundleBundleItem.LoadBalanceLocalityThreshold}
    bundleBundleItem.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", bundleBundleItem.SuppressionTimer}
    bundleBundleItem.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", bundleBundleItem.WaitWhileTimer}
    bundleBundleItem.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", bundleBundleItem.CollectorMaxDelay}
    bundleBundleItem.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", bundleBundleItem.CiscoExtensions}
    bundleBundleItem.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", bundleBundleItem.LacpNonrevertive}
    bundleBundleItem.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleBundleItem.IccpGroupId}
    bundleBundleItem.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", bundleBundleItem.ActiveForeignMemberCount}
    bundleBundleItem.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", bundleBundleItem.ConfiguredForeignMemberCount}
    bundleBundleItem.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", bundleBundleItem.SwitchoverType}
    bundleBundleItem.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", bundleBundleItem.MaximizeThresholdValueLinks}
    bundleBundleItem.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", bundleBundleItem.MaximizeThresholdValueBandWidth}
    bundleBundleItem.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", bundleBundleItem.MlacpMode}
    bundleBundleItem.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", bundleBundleItem.RecoveryDelay}
    bundleBundleItem.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", bundleBundleItem.Singleton}
    return &(bundleBundleItem.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress
// MAC address of this member
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "bundle-bundle-item"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "bundle-bundle-item"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// BundleInformation_Bundle_BundleMembers
// Member interfaces with common bundle
// information
type BundleInformation_Bundle_BundleMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_Bundle_BundleMembers_BundleMember.
    BundleMember []BundleInformation_Bundle_BundleMembers_BundleMember
}

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetEntityData() *types.CommonEntityData {
    bundleMembers.EntityData.YFilter = bundleMembers.YFilter
    bundleMembers.EntityData.YangName = "bundle-members"
    bundleMembers.EntityData.BundleName = "cisco_ios_xr"
    bundleMembers.EntityData.ParentYangName = "bundle"
    bundleMembers.EntityData.SegmentPath = "bundle-members"
    bundleMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleMembers.EntityData.Children = make(map[string]types.YChild)
    bundleMembers.EntityData.Children["bundle-member"] = types.YChild{"BundleMember", nil}
    for i := range bundleMembers.BundleMember {
        bundleMembers.EntityData.Children[types.GetSegmentPath(&bundleMembers.BundleMember[i])] = types.YChild{"BundleMember", &bundleMembers.BundleMember[i]}
    }
    bundleMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleMembers.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember
// Member interface
type BundleInformation_Bundle_BundleMembers_BundleMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    BundleMemberAncestor BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor

    // Data for this item.
    BundleMemberItem BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem
}

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetEntityData() *types.CommonEntityData {
    bundleMember.EntityData.YFilter = bundleMember.YFilter
    bundleMember.EntityData.YangName = "bundle-member"
    bundleMember.EntityData.BundleName = "cisco_ios_xr"
    bundleMember.EntityData.ParentYangName = "bundle-members"
    bundleMember.EntityData.SegmentPath = "bundle-member" + "[member-interface='" + fmt.Sprintf("%v", bundleMember.MemberInterface) + "']"
    bundleMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleMember.EntityData.Children = make(map[string]types.YChild)
    bundleMember.EntityData.Children["bundle-member-ancestor"] = types.YChild{"BundleMemberAncestor", &bundleMember.BundleMemberAncestor}
    bundleMember.EntityData.Children["bundle-member-item"] = types.YChild{"BundleMemberItem", &bundleMember.BundleMemberItem}
    bundleMember.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", bundleMember.MemberInterface}
    return &(bundleMember.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData

    // Member information. The type is slice of
    // BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData.
    MemberData []BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData
}

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetEntityData() *types.CommonEntityData {
    bundleMemberAncestor.EntityData.YFilter = bundleMemberAncestor.YFilter
    bundleMemberAncestor.EntityData.YangName = "bundle-member-ancestor"
    bundleMemberAncestor.EntityData.BundleName = "cisco_ios_xr"
    bundleMemberAncestor.EntityData.ParentYangName = "bundle-member"
    bundleMemberAncestor.EntityData.SegmentPath = "bundle-member-ancestor"
    bundleMemberAncestor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleMemberAncestor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleMemberAncestor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleMemberAncestor.EntityData.Children = make(map[string]types.YChild)
    bundleMemberAncestor.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &bundleMemberAncestor.BundleData}
    bundleMemberAncestor.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range bundleMemberAncestor.MemberData {
        bundleMemberAncestor.EntityData.Children[types.GetSegmentPath(&bundleMemberAncestor.MemberData[i])] = types.YChild{"MemberData", &bundleMemberAncestor.MemberData[i]}
    }
    bundleMemberAncestor.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleMemberAncestor.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData
// Bundle information
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig.
    BfdConfig []BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig
}

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "bundle-member-ancestor"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &bundleData.MacAddress}
    bundleData.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range bundleData.BfdConfig {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.BfdConfig[i])] = types.YChild{"BfdConfig", &bundleData.BfdConfig[i]}
    }
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", bundleData.BundleInterfaceName}
    bundleData.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", bundleData.AvailableBandwidth}
    bundleData.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", bundleData.EffectiveBandwidth}
    bundleData.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", bundleData.ConfiguredBandwidth}
    bundleData.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", bundleData.MinimumActiveLinks}
    bundleData.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", bundleData.MaximumActiveLinks}
    bundleData.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", bundleData.MaximumActiveLinksSource}
    bundleData.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", bundleData.MinimumBandwidth}
    bundleData.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", bundleData.PrimaryMember}
    bundleData.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bundleData.BundleStatus}
    bundleData.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", bundleData.ActiveMemberCount}
    bundleData.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", bundleData.StandbyMemberCount}
    bundleData.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", bundleData.ConfiguredMemberCount}
    bundleData.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", bundleData.MacSource}
    bundleData.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", bundleData.MacSourceMember}
    bundleData.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", bundleData.InterChassis}
    bundleData.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", bundleData.IsActive}
    bundleData.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", bundleData.LacpStatus}
    bundleData.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", bundleData.MlacpStatus}
    bundleData.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", bundleData.Ipv4BfdStatus}
    bundleData.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", bundleData.LinkOrderStatus}
    bundleData.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", bundleData.Ipv6BfdStatus}
    bundleData.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", bundleData.LoadBalanceHashType}
    bundleData.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", bundleData.LoadBalanceLocalityThreshold}
    bundleData.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", bundleData.SuppressionTimer}
    bundleData.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", bundleData.WaitWhileTimer}
    bundleData.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", bundleData.CollectorMaxDelay}
    bundleData.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", bundleData.CiscoExtensions}
    bundleData.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", bundleData.LacpNonrevertive}
    bundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleData.IccpGroupId}
    bundleData.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", bundleData.ActiveForeignMemberCount}
    bundleData.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", bundleData.ConfiguredForeignMemberCount}
    bundleData.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", bundleData.SwitchoverType}
    bundleData.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", bundleData.MaximizeThresholdValueLinks}
    bundleData.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", bundleData.MaximizeThresholdValueBandWidth}
    bundleData.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", bundleData.MlacpMode}
    bundleData.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", bundleData.RecoveryDelay}
    bundleData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", bundleData.Singleton}
    return &(bundleData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress
// MAC address of this member
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "bundle-data"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData
// Member information
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress
}

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "bundle-member-ancestor"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["counters"] = types.YChild{"Counters", &memberData.Counters}
    memberData.EntityData.Children["link-data"] = types.YChild{"LinkData", &memberData.LinkData}
    memberData.EntityData.Children["member-mux-data"] = types.YChild{"MemberMuxData", &memberData.MemberMuxData}
    memberData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &memberData.MacAddress}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", memberData.InterfaceName}
    memberData.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", memberData.PortPriority}
    memberData.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", memberData.PortNumber}
    memberData.EntityData.Leafs["underlying-link-id"] = types.YLeaf{"UnderlyingLinkId", memberData.UnderlyingLinkId}
    memberData.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", memberData.LinkOrderNumber}
    memberData.EntityData.Leafs["iccp-node"] = types.YLeaf{"IccpNode", memberData.IccpNode}
    memberData.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", memberData.Bandwidth}
    memberData.EntityData.Leafs["lacp-enabled"] = types.YLeaf{"LacpEnabled", memberData.LacpEnabled}
    memberData.EntityData.Leafs["member-type"] = types.YLeaf{"MemberType", memberData.MemberType}
    memberData.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", memberData.MemberName}
    return &(memberData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "member-data"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["lacpd-us-received"] = types.YLeaf{"LacpdUsReceived", counters.LacpdUsReceived}
    counters.EntityData.Leafs["lacpd-us-transmitted"] = types.YLeaf{"LacpdUsTransmitted", counters.LacpdUsTransmitted}
    counters.EntityData.Leafs["marker-packets-received"] = types.YLeaf{"MarkerPacketsReceived", counters.MarkerPacketsReceived}
    counters.EntityData.Leafs["marker-responses-transmitted"] = types.YLeaf{"MarkerResponsesTransmitted", counters.MarkerResponsesTransmitted}
    counters.EntityData.Leafs["illegal-packets-received"] = types.YLeaf{"IllegalPacketsReceived", counters.IllegalPacketsReceived}
    counters.EntityData.Leafs["excess-lacpd-us-received"] = types.YLeaf{"ExcessLacpdUsReceived", counters.ExcessLacpdUsReceived}
    counters.EntityData.Leafs["excess-marker-packets-received"] = types.YLeaf{"ExcessMarkerPacketsReceived", counters.ExcessMarkerPacketsReceived}
    counters.EntityData.Leafs["defaulted"] = types.YLeaf{"Defaulted", counters.Defaulted}
    counters.EntityData.Leafs["expired"] = types.YLeaf{"Expired", counters.Expired}
    counters.EntityData.Leafs["last-cleared-sec"] = types.YLeaf{"LastClearedSec", counters.LastClearedSec}
    counters.EntityData.Leafs["last-cleared-nsec"] = types.YLeaf{"LastClearedNsec", counters.LastClearedNsec}
    return &(counters.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetEntityData() *types.CommonEntityData {
    linkData.EntityData.YFilter = linkData.YFilter
    linkData.EntityData.YangName = "link-data"
    linkData.EntityData.BundleName = "cisco_ios_xr"
    linkData.EntityData.ParentYangName = "member-data"
    linkData.EntityData.SegmentPath = "link-data"
    linkData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkData.EntityData.Children = make(map[string]types.YChild)
    linkData.EntityData.Leafs = make(map[string]types.YLeaf)
    linkData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", linkData.InterfaceHandle}
    linkData.EntityData.Leafs["actor-system-priority"] = types.YLeaf{"ActorSystemPriority", linkData.ActorSystemPriority}
    linkData.EntityData.Leafs["actor-system-mac-address"] = types.YLeaf{"ActorSystemMacAddress", linkData.ActorSystemMacAddress}
    linkData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", linkData.ActorOperationalKey}
    linkData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", linkData.PartnerSystemPriority}
    linkData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", linkData.PartnerSystemMacAddress}
    linkData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", linkData.PartnerOperationalKey}
    linkData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", linkData.SelectedAggregatorId}
    linkData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", linkData.AttachedAggregatorId}
    linkData.EntityData.Leafs["actor-port-id"] = types.YLeaf{"ActorPortId", linkData.ActorPortId}
    linkData.EntityData.Leafs["actor-port-priority"] = types.YLeaf{"ActorPortPriority", linkData.ActorPortPriority}
    linkData.EntityData.Leafs["partner-port-id"] = types.YLeaf{"PartnerPortId", linkData.PartnerPortId}
    linkData.EntityData.Leafs["partner-port-priority"] = types.YLeaf{"PartnerPortPriority", linkData.PartnerPortPriority}
    linkData.EntityData.Leafs["actor-port-state"] = types.YLeaf{"ActorPortState", linkData.ActorPortState}
    linkData.EntityData.Leafs["partner-port-state"] = types.YLeaf{"PartnerPortState", linkData.PartnerPortState}
    return &(linkData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetEntityData() *types.CommonEntityData {
    memberMuxData.EntityData.YFilter = memberMuxData.YFilter
    memberMuxData.EntityData.YangName = "member-mux-data"
    memberMuxData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxData.EntityData.ParentYangName = "member-data"
    memberMuxData.EntityData.SegmentPath = "member-mux-data"
    memberMuxData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxData.EntityData.Children = make(map[string]types.YChild)
    memberMuxData.EntityData.Children["member-mux-state-reason-data"] = types.YChild{"MemberMuxStateReasonData", &memberMuxData.MemberMuxStateReasonData}
    memberMuxData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberMuxData.MuxState}
    memberMuxData.EntityData.Leafs["error"] = types.YLeaf{"Error", memberMuxData.Error}
    memberMuxData.EntityData.Leafs["member-mux-state-reason"] = types.YLeaf{"MemberMuxStateReason", memberMuxData.MemberMuxStateReason}
    memberMuxData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", memberMuxData.MemberState}
    memberMuxData.EntityData.Leafs["mux-state-reason"] = types.YLeaf{"MuxStateReason", memberMuxData.MuxStateReason}
    return &(memberMuxData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetEntityData() *types.CommonEntityData {
    memberMuxStateReasonData.EntityData.YFilter = memberMuxStateReasonData.YFilter
    memberMuxStateReasonData.EntityData.YangName = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxStateReasonData.EntityData.ParentYangName = "member-mux-data"
    memberMuxStateReasonData.EntityData.SegmentPath = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxStateReasonData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxStateReasonData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxStateReasonData.EntityData.Children = make(map[string]types.YChild)
    memberMuxStateReasonData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxStateReasonData.EntityData.Leafs["reason-type"] = types.YLeaf{"ReasonType", memberMuxStateReasonData.ReasonType}
    memberMuxStateReasonData.EntityData.Leafs["severity"] = types.YLeaf{"Severity", memberMuxStateReasonData.Severity}
    return &(memberMuxStateReasonData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "member-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem
// Data for this item
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress
}

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetEntityData() *types.CommonEntityData {
    bundleMemberItem.EntityData.YFilter = bundleMemberItem.YFilter
    bundleMemberItem.EntityData.YangName = "bundle-member-item"
    bundleMemberItem.EntityData.BundleName = "cisco_ios_xr"
    bundleMemberItem.EntityData.ParentYangName = "bundle-member"
    bundleMemberItem.EntityData.SegmentPath = "bundle-member-item"
    bundleMemberItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleMemberItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleMemberItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleMemberItem.EntityData.Children = make(map[string]types.YChild)
    bundleMemberItem.EntityData.Children["counters"] = types.YChild{"Counters", &bundleMemberItem.Counters}
    bundleMemberItem.EntityData.Children["link-data"] = types.YChild{"LinkData", &bundleMemberItem.LinkData}
    bundleMemberItem.EntityData.Children["member-mux-data"] = types.YChild{"MemberMuxData", &bundleMemberItem.MemberMuxData}
    bundleMemberItem.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &bundleMemberItem.MacAddress}
    bundleMemberItem.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleMemberItem.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", bundleMemberItem.InterfaceName}
    bundleMemberItem.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", bundleMemberItem.PortPriority}
    bundleMemberItem.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", bundleMemberItem.PortNumber}
    bundleMemberItem.EntityData.Leafs["underlying-link-id"] = types.YLeaf{"UnderlyingLinkId", bundleMemberItem.UnderlyingLinkId}
    bundleMemberItem.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", bundleMemberItem.LinkOrderNumber}
    bundleMemberItem.EntityData.Leafs["iccp-node"] = types.YLeaf{"IccpNode", bundleMemberItem.IccpNode}
    bundleMemberItem.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", bundleMemberItem.Bandwidth}
    bundleMemberItem.EntityData.Leafs["lacp-enabled"] = types.YLeaf{"LacpEnabled", bundleMemberItem.LacpEnabled}
    bundleMemberItem.EntityData.Leafs["member-type"] = types.YLeaf{"MemberType", bundleMemberItem.MemberType}
    bundleMemberItem.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", bundleMemberItem.MemberName}
    return &(bundleMemberItem.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "bundle-member-item"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["lacpd-us-received"] = types.YLeaf{"LacpdUsReceived", counters.LacpdUsReceived}
    counters.EntityData.Leafs["lacpd-us-transmitted"] = types.YLeaf{"LacpdUsTransmitted", counters.LacpdUsTransmitted}
    counters.EntityData.Leafs["marker-packets-received"] = types.YLeaf{"MarkerPacketsReceived", counters.MarkerPacketsReceived}
    counters.EntityData.Leafs["marker-responses-transmitted"] = types.YLeaf{"MarkerResponsesTransmitted", counters.MarkerResponsesTransmitted}
    counters.EntityData.Leafs["illegal-packets-received"] = types.YLeaf{"IllegalPacketsReceived", counters.IllegalPacketsReceived}
    counters.EntityData.Leafs["excess-lacpd-us-received"] = types.YLeaf{"ExcessLacpdUsReceived", counters.ExcessLacpdUsReceived}
    counters.EntityData.Leafs["excess-marker-packets-received"] = types.YLeaf{"ExcessMarkerPacketsReceived", counters.ExcessMarkerPacketsReceived}
    counters.EntityData.Leafs["defaulted"] = types.YLeaf{"Defaulted", counters.Defaulted}
    counters.EntityData.Leafs["expired"] = types.YLeaf{"Expired", counters.Expired}
    counters.EntityData.Leafs["last-cleared-sec"] = types.YLeaf{"LastClearedSec", counters.LastClearedSec}
    counters.EntityData.Leafs["last-cleared-nsec"] = types.YLeaf{"LastClearedNsec", counters.LastClearedNsec}
    return &(counters.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetEntityData() *types.CommonEntityData {
    linkData.EntityData.YFilter = linkData.YFilter
    linkData.EntityData.YangName = "link-data"
    linkData.EntityData.BundleName = "cisco_ios_xr"
    linkData.EntityData.ParentYangName = "bundle-member-item"
    linkData.EntityData.SegmentPath = "link-data"
    linkData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkData.EntityData.Children = make(map[string]types.YChild)
    linkData.EntityData.Leafs = make(map[string]types.YLeaf)
    linkData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", linkData.InterfaceHandle}
    linkData.EntityData.Leafs["actor-system-priority"] = types.YLeaf{"ActorSystemPriority", linkData.ActorSystemPriority}
    linkData.EntityData.Leafs["actor-system-mac-address"] = types.YLeaf{"ActorSystemMacAddress", linkData.ActorSystemMacAddress}
    linkData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", linkData.ActorOperationalKey}
    linkData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", linkData.PartnerSystemPriority}
    linkData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", linkData.PartnerSystemMacAddress}
    linkData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", linkData.PartnerOperationalKey}
    linkData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", linkData.SelectedAggregatorId}
    linkData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", linkData.AttachedAggregatorId}
    linkData.EntityData.Leafs["actor-port-id"] = types.YLeaf{"ActorPortId", linkData.ActorPortId}
    linkData.EntityData.Leafs["actor-port-priority"] = types.YLeaf{"ActorPortPriority", linkData.ActorPortPriority}
    linkData.EntityData.Leafs["partner-port-id"] = types.YLeaf{"PartnerPortId", linkData.PartnerPortId}
    linkData.EntityData.Leafs["partner-port-priority"] = types.YLeaf{"PartnerPortPriority", linkData.PartnerPortPriority}
    linkData.EntityData.Leafs["actor-port-state"] = types.YLeaf{"ActorPortState", linkData.ActorPortState}
    linkData.EntityData.Leafs["partner-port-state"] = types.YLeaf{"PartnerPortState", linkData.PartnerPortState}
    return &(linkData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetEntityData() *types.CommonEntityData {
    memberMuxData.EntityData.YFilter = memberMuxData.YFilter
    memberMuxData.EntityData.YangName = "member-mux-data"
    memberMuxData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxData.EntityData.ParentYangName = "bundle-member-item"
    memberMuxData.EntityData.SegmentPath = "member-mux-data"
    memberMuxData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxData.EntityData.Children = make(map[string]types.YChild)
    memberMuxData.EntityData.Children["member-mux-state-reason-data"] = types.YChild{"MemberMuxStateReasonData", &memberMuxData.MemberMuxStateReasonData}
    memberMuxData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberMuxData.MuxState}
    memberMuxData.EntityData.Leafs["error"] = types.YLeaf{"Error", memberMuxData.Error}
    memberMuxData.EntityData.Leafs["member-mux-state-reason"] = types.YLeaf{"MemberMuxStateReason", memberMuxData.MemberMuxStateReason}
    memberMuxData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", memberMuxData.MemberState}
    memberMuxData.EntityData.Leafs["mux-state-reason"] = types.YLeaf{"MuxStateReason", memberMuxData.MuxStateReason}
    return &(memberMuxData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetEntityData() *types.CommonEntityData {
    memberMuxStateReasonData.EntityData.YFilter = memberMuxStateReasonData.YFilter
    memberMuxStateReasonData.EntityData.YangName = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxStateReasonData.EntityData.ParentYangName = "member-mux-data"
    memberMuxStateReasonData.EntityData.SegmentPath = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxStateReasonData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxStateReasonData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxStateReasonData.EntityData.Children = make(map[string]types.YChild)
    memberMuxStateReasonData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxStateReasonData.EntityData.Leafs["reason-type"] = types.YLeaf{"ReasonType", memberMuxStateReasonData.ReasonType}
    memberMuxStateReasonData.EntityData.Leafs["severity"] = types.YLeaf{"Severity", memberMuxStateReasonData.Severity}
    return &(memberMuxStateReasonData.EntityData)
}

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "bundle-member-item"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_EventsRg
// Bundle ICCP events information for bundles and
// members
type BundleInformation_EventsRg struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle Member interfaces with ICCP events information.
    EventsRgMembers BundleInformation_EventsRg_EventsRgMembers

    // ICCP events for all ICCP Groups.
    EventsRgIccpGroups BundleInformation_EventsRg_EventsRgIccpGroups

    // Bundle interfaces with ICCP events information.
    EventsRgBundles BundleInformation_EventsRg_EventsRgBundles
}

func (eventsRg *BundleInformation_EventsRg) GetEntityData() *types.CommonEntityData {
    eventsRg.EntityData.YFilter = eventsRg.YFilter
    eventsRg.EntityData.YangName = "events-rg"
    eventsRg.EntityData.BundleName = "cisco_ios_xr"
    eventsRg.EntityData.ParentYangName = "bundle-information"
    eventsRg.EntityData.SegmentPath = "events-rg"
    eventsRg.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRg.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRg.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRg.EntityData.Children = make(map[string]types.YChild)
    eventsRg.EntityData.Children["events-rg-members"] = types.YChild{"EventsRgMembers", &eventsRg.EventsRgMembers}
    eventsRg.EntityData.Children["events-rg-iccp-groups"] = types.YChild{"EventsRgIccpGroups", &eventsRg.EventsRgIccpGroups}
    eventsRg.EntityData.Children["events-rg-bundles"] = types.YChild{"EventsRgBundles", &eventsRg.EventsRgBundles}
    eventsRg.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsRg.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers
// Bundle Member interfaces with ICCP events
// information
type BundleInformation_EventsRg_EventsRgMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_EventsRg_EventsRgMembers_EventsRgMember.
    EventsRgMember []BundleInformation_EventsRg_EventsRgMembers_EventsRgMember
}

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetEntityData() *types.CommonEntityData {
    eventsRgMembers.EntityData.YFilter = eventsRgMembers.YFilter
    eventsRgMembers.EntityData.YangName = "events-rg-members"
    eventsRgMembers.EntityData.BundleName = "cisco_ios_xr"
    eventsRgMembers.EntityData.ParentYangName = "events-rg"
    eventsRgMembers.EntityData.SegmentPath = "events-rg-members"
    eventsRgMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgMembers.EntityData.Children = make(map[string]types.YChild)
    eventsRgMembers.EntityData.Children["events-rg-member"] = types.YChild{"EventsRgMember", nil}
    for i := range eventsRgMembers.EventsRgMember {
        eventsRgMembers.EntityData.Children[types.GetSegmentPath(&eventsRgMembers.EventsRgMember[i])] = types.YChild{"EventsRgMember", &eventsRgMembers.EventsRgMember[i]}
    }
    eventsRgMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsRgMembers.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember
// Member interface
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    EventsRgMemberAncestor BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor
}

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetEntityData() *types.CommonEntityData {
    eventsRgMember.EntityData.YFilter = eventsRgMember.YFilter
    eventsRgMember.EntityData.YangName = "events-rg-member"
    eventsRgMember.EntityData.BundleName = "cisco_ios_xr"
    eventsRgMember.EntityData.ParentYangName = "events-rg-members"
    eventsRgMember.EntityData.SegmentPath = "events-rg-member" + "[member-interface='" + fmt.Sprintf("%v", eventsRgMember.MemberInterface) + "']"
    eventsRgMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgMember.EntityData.Children = make(map[string]types.YChild)
    eventsRgMember.EntityData.Children["events-rg-member-ancestor"] = types.YChild{"EventsRgMemberAncestor", &eventsRgMember.EventsRgMemberAncestor}
    eventsRgMember.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsRgMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", eventsRgMember.MemberInterface}
    return &(eventsRgMember.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items.
    Items []BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items
}

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetEntityData() *types.CommonEntityData {
    eventsRgMemberAncestor.EntityData.YFilter = eventsRgMemberAncestor.YFilter
    eventsRgMemberAncestor.EntityData.YangName = "events-rg-member-ancestor"
    eventsRgMemberAncestor.EntityData.BundleName = "cisco_ios_xr"
    eventsRgMemberAncestor.EntityData.ParentYangName = "events-rg-member"
    eventsRgMemberAncestor.EntityData.SegmentPath = "events-rg-member-ancestor"
    eventsRgMemberAncestor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgMemberAncestor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgMemberAncestor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgMemberAncestor.EntityData.Children = make(map[string]types.YChild)
    eventsRgMemberAncestor.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsRgMemberAncestor.Items {
        eventsRgMemberAncestor.EntityData.Children[types.GetSegmentPath(&eventsRgMemberAncestor.Items[i])] = types.YChild{"Items", &eventsRgMemberAncestor.Items[i]}
    }
    eventsRgMemberAncestor.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsRgMemberAncestor.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsRgMemberAncestor.ItemName}
    return &(eventsRgMemberAncestor.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items
// Event items
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-rg-member-ancestor"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups
// ICCP events for all ICCP Groups
type BundleInformation_EventsRg_EventsRgIccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup.
    EventsRgIccpGroup []BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup
}

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetEntityData() *types.CommonEntityData {
    eventsRgIccpGroups.EntityData.YFilter = eventsRgIccpGroups.YFilter
    eventsRgIccpGroups.EntityData.YangName = "events-rg-iccp-groups"
    eventsRgIccpGroups.EntityData.BundleName = "cisco_ios_xr"
    eventsRgIccpGroups.EntityData.ParentYangName = "events-rg"
    eventsRgIccpGroups.EntityData.SegmentPath = "events-rg-iccp-groups"
    eventsRgIccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgIccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgIccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgIccpGroups.EntityData.Children = make(map[string]types.YChild)
    eventsRgIccpGroups.EntityData.Children["events-rg-iccp-group"] = types.YChild{"EventsRgIccpGroup", nil}
    for i := range eventsRgIccpGroups.EventsRgIccpGroup {
        eventsRgIccpGroups.EntityData.Children[types.GetSegmentPath(&eventsRgIccpGroups.EventsRgIccpGroup[i])] = types.YChild{"EventsRgIccpGroup", &eventsRgIccpGroups.EventsRgIccpGroup[i]}
    }
    eventsRgIccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsRgIccpGroups.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup
// ICCP Group ID
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    EventsRgBundleItemIccpGroup BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup
}

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetEntityData() *types.CommonEntityData {
    eventsRgIccpGroup.EntityData.YFilter = eventsRgIccpGroup.YFilter
    eventsRgIccpGroup.EntityData.YangName = "events-rg-iccp-group"
    eventsRgIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    eventsRgIccpGroup.EntityData.ParentYangName = "events-rg-iccp-groups"
    eventsRgIccpGroup.EntityData.SegmentPath = "events-rg-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", eventsRgIccpGroup.IccpGroup) + "']"
    eventsRgIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgIccpGroup.EntityData.Children = make(map[string]types.YChild)
    eventsRgIccpGroup.EntityData.Children["events-rg-bundle-item-iccp-group"] = types.YChild{"EventsRgBundleItemIccpGroup", &eventsRgIccpGroup.EventsRgBundleItemIccpGroup}
    eventsRgIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsRgIccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", eventsRgIccpGroup.IccpGroup}
    return &(eventsRgIccpGroup.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup
// Data for this item
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items.
    Items []BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items
}

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetEntityData() *types.CommonEntityData {
    eventsRgBundleItemIccpGroup.EntityData.YFilter = eventsRgBundleItemIccpGroup.YFilter
    eventsRgBundleItemIccpGroup.EntityData.YangName = "events-rg-bundle-item-iccp-group"
    eventsRgBundleItemIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    eventsRgBundleItemIccpGroup.EntityData.ParentYangName = "events-rg-iccp-group"
    eventsRgBundleItemIccpGroup.EntityData.SegmentPath = "events-rg-bundle-item-iccp-group"
    eventsRgBundleItemIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgBundleItemIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgBundleItemIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgBundleItemIccpGroup.EntityData.Children = make(map[string]types.YChild)
    eventsRgBundleItemIccpGroup.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsRgBundleItemIccpGroup.Items {
        eventsRgBundleItemIccpGroup.EntityData.Children[types.GetSegmentPath(&eventsRgBundleItemIccpGroup.Items[i])] = types.YChild{"Items", &eventsRgBundleItemIccpGroup.Items[i]}
    }
    eventsRgBundleItemIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsRgBundleItemIccpGroup.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsRgBundleItemIccpGroup.ItemName}
    return &(eventsRgBundleItemIccpGroup.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items
// Event items
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo
}

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-rg-bundle-item-iccp-group"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles
// Bundle interfaces with ICCP events information
type BundleInformation_EventsRg_EventsRgBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle.
    EventsRgBundle []BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle
}

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetEntityData() *types.CommonEntityData {
    eventsRgBundles.EntityData.YFilter = eventsRgBundles.YFilter
    eventsRgBundles.EntityData.YangName = "events-rg-bundles"
    eventsRgBundles.EntityData.BundleName = "cisco_ios_xr"
    eventsRgBundles.EntityData.ParentYangName = "events-rg"
    eventsRgBundles.EntityData.SegmentPath = "events-rg-bundles"
    eventsRgBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgBundles.EntityData.Children = make(map[string]types.YChild)
    eventsRgBundles.EntityData.Children["events-rg-bundle"] = types.YChild{"EventsRgBundle", nil}
    for i := range eventsRgBundles.EventsRgBundle {
        eventsRgBundles.EntityData.Children[types.GetSegmentPath(&eventsRgBundles.EventsRgBundle[i])] = types.YChild{"EventsRgBundle", &eventsRgBundles.EventsRgBundle[i]}
    }
    eventsRgBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsRgBundles.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle
// Bundle interface
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item and its parent bundle.
    EventsRgBundleAncestor BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor
}

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetEntityData() *types.CommonEntityData {
    eventsRgBundle.EntityData.YFilter = eventsRgBundle.YFilter
    eventsRgBundle.EntityData.YangName = "events-rg-bundle"
    eventsRgBundle.EntityData.BundleName = "cisco_ios_xr"
    eventsRgBundle.EntityData.ParentYangName = "events-rg-bundles"
    eventsRgBundle.EntityData.SegmentPath = "events-rg-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsRgBundle.BundleInterface) + "']"
    eventsRgBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgBundle.EntityData.Children = make(map[string]types.YChild)
    eventsRgBundle.EntityData.Children["events-rg-bundle-ancestor"] = types.YChild{"EventsRgBundleAncestor", &eventsRgBundle.EventsRgBundleAncestor}
    eventsRgBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsRgBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", eventsRgBundle.BundleInterface}
    return &(eventsRgBundle.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor
// Data for this item and its parent bundle
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items.
    Items []BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items
}

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetEntityData() *types.CommonEntityData {
    eventsRgBundleAncestor.EntityData.YFilter = eventsRgBundleAncestor.YFilter
    eventsRgBundleAncestor.EntityData.YangName = "events-rg-bundle-ancestor"
    eventsRgBundleAncestor.EntityData.BundleName = "cisco_ios_xr"
    eventsRgBundleAncestor.EntityData.ParentYangName = "events-rg-bundle"
    eventsRgBundleAncestor.EntityData.SegmentPath = "events-rg-bundle-ancestor"
    eventsRgBundleAncestor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsRgBundleAncestor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsRgBundleAncestor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsRgBundleAncestor.EntityData.Children = make(map[string]types.YChild)
    eventsRgBundleAncestor.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsRgBundleAncestor.Items {
        eventsRgBundleAncestor.EntityData.Children[types.GetSegmentPath(&eventsRgBundleAncestor.Items[i])] = types.YChild{"Items", &eventsRgBundleAncestor.Items[i]}
    }
    eventsRgBundleAncestor.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsRgBundleAncestor.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsRgBundleAncestor.ItemName}
    return &(eventsRgBundleAncestor.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items
// Event items
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-rg-bundle-ancestor"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Lacp
// LACP information for bundles and members
type BundleInformation_Lacp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interfaces with LACP information.
    LacpBundles BundleInformation_Lacp_LacpBundles

    // Member interfaces with LACP information.
    LacpMembers BundleInformation_Lacp_LacpMembers
}

func (lacp *BundleInformation_Lacp) GetEntityData() *types.CommonEntityData {
    lacp.EntityData.YFilter = lacp.YFilter
    lacp.EntityData.YangName = "lacp"
    lacp.EntityData.BundleName = "cisco_ios_xr"
    lacp.EntityData.ParentYangName = "bundle-information"
    lacp.EntityData.SegmentPath = "lacp"
    lacp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacp.EntityData.Children = make(map[string]types.YChild)
    lacp.EntityData.Children["lacp-bundles"] = types.YChild{"LacpBundles", &lacp.LacpBundles}
    lacp.EntityData.Children["lacp-members"] = types.YChild{"LacpMembers", &lacp.LacpMembers}
    lacp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacp.EntityData)
}

// BundleInformation_Lacp_LacpBundles
// Bundle interfaces with LACP information
type BundleInformation_Lacp_LacpBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle.
    LacpBundle []BundleInformation_Lacp_LacpBundles_LacpBundle
}

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetEntityData() *types.CommonEntityData {
    lacpBundles.EntityData.YFilter = lacpBundles.YFilter
    lacpBundles.EntityData.YangName = "lacp-bundles"
    lacpBundles.EntityData.BundleName = "cisco_ios_xr"
    lacpBundles.EntityData.ParentYangName = "lacp"
    lacpBundles.EntityData.SegmentPath = "lacp-bundles"
    lacpBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundles.EntityData.Children = make(map[string]types.YChild)
    lacpBundles.EntityData.Children["lacp-bundle"] = types.YChild{"LacpBundle", nil}
    for i := range lacpBundles.LacpBundle {
        lacpBundles.EntityData.Children[types.GetSegmentPath(&lacpBundles.LacpBundle[i])] = types.YChild{"LacpBundle", &lacpBundles.LacpBundle[i]}
    }
    lacpBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpBundles.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle
// Bundle interface
type BundleInformation_Lacp_LacpBundles_LacpBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    LacpBundleItem BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem

    // Data for this item and all its members.
    LacpBundleDescendant BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant

    // Children of bundle with LACP information.
    LacpBundleChildrenMembers BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers
}

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetEntityData() *types.CommonEntityData {
    lacpBundle.EntityData.YFilter = lacpBundle.YFilter
    lacpBundle.EntityData.YangName = "lacp-bundle"
    lacpBundle.EntityData.BundleName = "cisco_ios_xr"
    lacpBundle.EntityData.ParentYangName = "lacp-bundles"
    lacpBundle.EntityData.SegmentPath = "lacp-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", lacpBundle.BundleInterface) + "']"
    lacpBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundle.EntityData.Children = make(map[string]types.YChild)
    lacpBundle.EntityData.Children["lacp-bundle-item"] = types.YChild{"LacpBundleItem", &lacpBundle.LacpBundleItem}
    lacpBundle.EntityData.Children["lacp-bundle-descendant"] = types.YChild{"LacpBundleDescendant", &lacpBundle.LacpBundleDescendant}
    lacpBundle.EntityData.Children["lacp-bundle-children-members"] = types.YChild{"LacpBundleChildrenMembers", &lacpBundle.LacpBundleChildrenMembers}
    lacpBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    lacpBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", lacpBundle.BundleInterface}
    return &(lacpBundle.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem
// Data for this item
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData

    // System ID for the bundle.
    BundleSystemId BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId
}

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetEntityData() *types.CommonEntityData {
    lacpBundleItem.EntityData.YFilter = lacpBundleItem.YFilter
    lacpBundleItem.EntityData.YangName = "lacp-bundle-item"
    lacpBundleItem.EntityData.BundleName = "cisco_ios_xr"
    lacpBundleItem.EntityData.ParentYangName = "lacp-bundle"
    lacpBundleItem.EntityData.SegmentPath = "lacp-bundle-item"
    lacpBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundleItem.EntityData.Children = make(map[string]types.YChild)
    lacpBundleItem.EntityData.Children["actor-bundle-data"] = types.YChild{"ActorBundleData", &lacpBundleItem.ActorBundleData}
    lacpBundleItem.EntityData.Children["bundle-system-id"] = types.YChild{"BundleSystemId", &lacpBundleItem.BundleSystemId}
    lacpBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    lacpBundleItem.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", lacpBundleItem.ActorOperationalKey}
    lacpBundleItem.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", lacpBundleItem.PartnerSystemPriority}
    lacpBundleItem.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", lacpBundleItem.PartnerSystemMacAddress}
    lacpBundleItem.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", lacpBundleItem.PartnerOperationalKey}
    return &(lacpBundleItem.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData
// Basic bundle information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig.
    BfdConfig []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetEntityData() *types.CommonEntityData {
    actorBundleData.EntityData.YFilter = actorBundleData.YFilter
    actorBundleData.EntityData.YangName = "actor-bundle-data"
    actorBundleData.EntityData.BundleName = "cisco_ios_xr"
    actorBundleData.EntityData.ParentYangName = "lacp-bundle-item"
    actorBundleData.EntityData.SegmentPath = "actor-bundle-data"
    actorBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorBundleData.EntityData.Children = make(map[string]types.YChild)
    actorBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &actorBundleData.MacAddress}
    actorBundleData.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range actorBundleData.BfdConfig {
        actorBundleData.EntityData.Children[types.GetSegmentPath(&actorBundleData.BfdConfig[i])] = types.YChild{"BfdConfig", &actorBundleData.BfdConfig[i]}
    }
    actorBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    actorBundleData.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", actorBundleData.BundleInterfaceName}
    actorBundleData.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", actorBundleData.AvailableBandwidth}
    actorBundleData.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", actorBundleData.EffectiveBandwidth}
    actorBundleData.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", actorBundleData.ConfiguredBandwidth}
    actorBundleData.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", actorBundleData.MinimumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", actorBundleData.MaximumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", actorBundleData.MaximumActiveLinksSource}
    actorBundleData.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", actorBundleData.MinimumBandwidth}
    actorBundleData.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", actorBundleData.PrimaryMember}
    actorBundleData.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", actorBundleData.BundleStatus}
    actorBundleData.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", actorBundleData.ActiveMemberCount}
    actorBundleData.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", actorBundleData.StandbyMemberCount}
    actorBundleData.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", actorBundleData.ConfiguredMemberCount}
    actorBundleData.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", actorBundleData.MacSource}
    actorBundleData.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", actorBundleData.MacSourceMember}
    actorBundleData.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", actorBundleData.InterChassis}
    actorBundleData.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", actorBundleData.IsActive}
    actorBundleData.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", actorBundleData.LacpStatus}
    actorBundleData.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", actorBundleData.MlacpStatus}
    actorBundleData.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", actorBundleData.Ipv4BfdStatus}
    actorBundleData.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", actorBundleData.LinkOrderStatus}
    actorBundleData.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", actorBundleData.Ipv6BfdStatus}
    actorBundleData.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", actorBundleData.LoadBalanceHashType}
    actorBundleData.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", actorBundleData.LoadBalanceLocalityThreshold}
    actorBundleData.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", actorBundleData.SuppressionTimer}
    actorBundleData.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", actorBundleData.WaitWhileTimer}
    actorBundleData.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", actorBundleData.CollectorMaxDelay}
    actorBundleData.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", actorBundleData.CiscoExtensions}
    actorBundleData.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", actorBundleData.LacpNonrevertive}
    actorBundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", actorBundleData.IccpGroupId}
    actorBundleData.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", actorBundleData.ActiveForeignMemberCount}
    actorBundleData.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", actorBundleData.ConfiguredForeignMemberCount}
    actorBundleData.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", actorBundleData.SwitchoverType}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", actorBundleData.MaximizeThresholdValueLinks}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", actorBundleData.MaximizeThresholdValueBandWidth}
    actorBundleData.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", actorBundleData.MlacpMode}
    actorBundleData.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", actorBundleData.RecoveryDelay}
    actorBundleData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", actorBundleData.Singleton}
    return &(actorBundleData.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress
// MAC address of this member
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "actor-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "actor-bundle-data"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId
// System ID for the bundle
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetEntityData() *types.CommonEntityData {
    bundleSystemId.EntityData.YFilter = bundleSystemId.YFilter
    bundleSystemId.EntityData.YangName = "bundle-system-id"
    bundleSystemId.EntityData.BundleName = "cisco_ios_xr"
    bundleSystemId.EntityData.ParentYangName = "lacp-bundle-item"
    bundleSystemId.EntityData.SegmentPath = "bundle-system-id"
    bundleSystemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleSystemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleSystemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleSystemId.EntityData.Children = make(map[string]types.YChild)
    bundleSystemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &bundleSystemId.SystemMacAddr}
    bundleSystemId.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleSystemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", bundleSystemId.SystemPrio}
    return &(bundleSystemId.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "bundle-system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant
// Data for this item and all its members
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData

    // Member information. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData.
    MemberData []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData
}

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetEntityData() *types.CommonEntityData {
    lacpBundleDescendant.EntityData.YFilter = lacpBundleDescendant.YFilter
    lacpBundleDescendant.EntityData.YangName = "lacp-bundle-descendant"
    lacpBundleDescendant.EntityData.BundleName = "cisco_ios_xr"
    lacpBundleDescendant.EntityData.ParentYangName = "lacp-bundle"
    lacpBundleDescendant.EntityData.SegmentPath = "lacp-bundle-descendant"
    lacpBundleDescendant.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundleDescendant.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundleDescendant.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundleDescendant.EntityData.Children = make(map[string]types.YChild)
    lacpBundleDescendant.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &lacpBundleDescendant.BundleData}
    lacpBundleDescendant.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range lacpBundleDescendant.MemberData {
        lacpBundleDescendant.EntityData.Children[types.GetSegmentPath(&lacpBundleDescendant.MemberData[i])] = types.YChild{"MemberData", &lacpBundleDescendant.MemberData[i]}
    }
    lacpBundleDescendant.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpBundleDescendant.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData
// Bundle information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData

    // System ID for the bundle.
    BundleSystemId BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId
}

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "lacp-bundle-descendant"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["actor-bundle-data"] = types.YChild{"ActorBundleData", &bundleData.ActorBundleData}
    bundleData.EntityData.Children["bundle-system-id"] = types.YChild{"BundleSystemId", &bundleData.BundleSystemId}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", bundleData.ActorOperationalKey}
    bundleData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", bundleData.PartnerSystemPriority}
    bundleData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", bundleData.PartnerSystemMacAddress}
    bundleData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", bundleData.PartnerOperationalKey}
    return &(bundleData.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData
// Basic bundle information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig.
    BfdConfig []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetEntityData() *types.CommonEntityData {
    actorBundleData.EntityData.YFilter = actorBundleData.YFilter
    actorBundleData.EntityData.YangName = "actor-bundle-data"
    actorBundleData.EntityData.BundleName = "cisco_ios_xr"
    actorBundleData.EntityData.ParentYangName = "bundle-data"
    actorBundleData.EntityData.SegmentPath = "actor-bundle-data"
    actorBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorBundleData.EntityData.Children = make(map[string]types.YChild)
    actorBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &actorBundleData.MacAddress}
    actorBundleData.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range actorBundleData.BfdConfig {
        actorBundleData.EntityData.Children[types.GetSegmentPath(&actorBundleData.BfdConfig[i])] = types.YChild{"BfdConfig", &actorBundleData.BfdConfig[i]}
    }
    actorBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    actorBundleData.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", actorBundleData.BundleInterfaceName}
    actorBundleData.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", actorBundleData.AvailableBandwidth}
    actorBundleData.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", actorBundleData.EffectiveBandwidth}
    actorBundleData.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", actorBundleData.ConfiguredBandwidth}
    actorBundleData.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", actorBundleData.MinimumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", actorBundleData.MaximumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", actorBundleData.MaximumActiveLinksSource}
    actorBundleData.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", actorBundleData.MinimumBandwidth}
    actorBundleData.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", actorBundleData.PrimaryMember}
    actorBundleData.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", actorBundleData.BundleStatus}
    actorBundleData.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", actorBundleData.ActiveMemberCount}
    actorBundleData.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", actorBundleData.StandbyMemberCount}
    actorBundleData.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", actorBundleData.ConfiguredMemberCount}
    actorBundleData.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", actorBundleData.MacSource}
    actorBundleData.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", actorBundleData.MacSourceMember}
    actorBundleData.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", actorBundleData.InterChassis}
    actorBundleData.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", actorBundleData.IsActive}
    actorBundleData.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", actorBundleData.LacpStatus}
    actorBundleData.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", actorBundleData.MlacpStatus}
    actorBundleData.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", actorBundleData.Ipv4BfdStatus}
    actorBundleData.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", actorBundleData.LinkOrderStatus}
    actorBundleData.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", actorBundleData.Ipv6BfdStatus}
    actorBundleData.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", actorBundleData.LoadBalanceHashType}
    actorBundleData.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", actorBundleData.LoadBalanceLocalityThreshold}
    actorBundleData.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", actorBundleData.SuppressionTimer}
    actorBundleData.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", actorBundleData.WaitWhileTimer}
    actorBundleData.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", actorBundleData.CollectorMaxDelay}
    actorBundleData.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", actorBundleData.CiscoExtensions}
    actorBundleData.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", actorBundleData.LacpNonrevertive}
    actorBundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", actorBundleData.IccpGroupId}
    actorBundleData.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", actorBundleData.ActiveForeignMemberCount}
    actorBundleData.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", actorBundleData.ConfiguredForeignMemberCount}
    actorBundleData.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", actorBundleData.SwitchoverType}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", actorBundleData.MaximizeThresholdValueLinks}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", actorBundleData.MaximizeThresholdValueBandWidth}
    actorBundleData.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", actorBundleData.MlacpMode}
    actorBundleData.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", actorBundleData.RecoveryDelay}
    actorBundleData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", actorBundleData.Singleton}
    return &(actorBundleData.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress
// MAC address of this member
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "actor-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "actor-bundle-data"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId
// System ID for the bundle
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetEntityData() *types.CommonEntityData {
    bundleSystemId.EntityData.YFilter = bundleSystemId.YFilter
    bundleSystemId.EntityData.YangName = "bundle-system-id"
    bundleSystemId.EntityData.BundleName = "cisco_ios_xr"
    bundleSystemId.EntityData.ParentYangName = "bundle-data"
    bundleSystemId.EntityData.SegmentPath = "bundle-system-id"
    bundleSystemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleSystemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleSystemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleSystemId.EntityData.Children = make(map[string]types.YChild)
    bundleSystemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &bundleSystemId.SystemMacAddr}
    bundleSystemId.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleSystemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", bundleSystemId.SystemPrio}
    return &(bundleSystemId.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "bundle-system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData
// Member information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo
}

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "lacp-bundle-descendant"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["actor-info"] = types.YChild{"ActorInfo", &memberData.ActorInfo}
    memberData.EntityData.Children["partner-info"] = types.YChild{"PartnerInfo", &memberData.PartnerInfo}
    memberData.EntityData.Children["additional-info"] = types.YChild{"AdditionalInfo", &memberData.AdditionalInfo}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", memberData.SelectedAggregatorId}
    memberData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", memberData.AttachedAggregatorId}
    memberData.EntityData.Leafs["selection-state"] = types.YLeaf{"SelectionState", memberData.SelectionState}
    memberData.EntityData.Leafs["period-state"] = types.YLeaf{"PeriodState", memberData.PeriodState}
    memberData.EntityData.Leafs["receive-machine-state"] = types.YLeaf{"ReceiveMachineState", memberData.ReceiveMachineState}
    memberData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberData.MuxState}
    memberData.EntityData.Leafs["actor-churn-state"] = types.YLeaf{"ActorChurnState", memberData.ActorChurnState}
    memberData.EntityData.Leafs["partner-churn-state"] = types.YLeaf{"PartnerChurnState", memberData.PartnerChurnState}
    memberData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", memberData.IccpGroupId}
    return &(memberData.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetEntityData() *types.CommonEntityData {
    actorInfo.EntityData.YFilter = actorInfo.YFilter
    actorInfo.EntityData.YangName = "actor-info"
    actorInfo.EntityData.BundleName = "cisco_ios_xr"
    actorInfo.EntityData.ParentYangName = "member-data"
    actorInfo.EntityData.SegmentPath = "actor-info"
    actorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorInfo.EntityData.Children = make(map[string]types.YChild)
    actorInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &actorInfo.PortInfo}
    actorInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    actorInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", actorInfo.TxPeriod}
    return &(actorInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "actor-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetEntityData() *types.CommonEntityData {
    partnerInfo.EntityData.YFilter = partnerInfo.YFilter
    partnerInfo.EntityData.YangName = "partner-info"
    partnerInfo.EntityData.BundleName = "cisco_ios_xr"
    partnerInfo.EntityData.ParentYangName = "member-data"
    partnerInfo.EntityData.SegmentPath = "partner-info"
    partnerInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    partnerInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    partnerInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    partnerInfo.EntityData.Children = make(map[string]types.YChild)
    partnerInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &partnerInfo.PortInfo}
    partnerInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    partnerInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", partnerInfo.TxPeriod}
    return &(partnerInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "partner-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetEntityData() *types.CommonEntityData {
    additionalInfo.EntityData.YFilter = additionalInfo.YFilter
    additionalInfo.EntityData.YangName = "additional-info"
    additionalInfo.EntityData.BundleName = "cisco_ios_xr"
    additionalInfo.EntityData.ParentYangName = "member-data"
    additionalInfo.EntityData.SegmentPath = "additional-info"
    additionalInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    additionalInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    additionalInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    additionalInfo.EntityData.Children = make(map[string]types.YChild)
    additionalInfo.EntityData.Children["local"] = types.YChild{"Local", &additionalInfo.Local}
    additionalInfo.EntityData.Children["foreign"] = types.YChild{"Foreign", &additionalInfo.Foreign}
    additionalInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    additionalInfo.EntityData.Leafs["mbr-type"] = types.YLeaf{"MbrType", additionalInfo.MbrType}
    return &(additionalInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "additional-info"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = make(map[string]types.YChild)
    local.EntityData.Leafs = make(map[string]types.YLeaf)
    local.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", local.InterfaceHandle}
    return &(local.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetEntityData() *types.CommonEntityData {
    foreign.EntityData.YFilter = foreign.YFilter
    foreign.EntityData.YangName = "foreign"
    foreign.EntityData.BundleName = "cisco_ios_xr"
    foreign.EntityData.ParentYangName = "additional-info"
    foreign.EntityData.SegmentPath = "foreign"
    foreign.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreign.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreign.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreign.EntityData.Children = make(map[string]types.YChild)
    foreign.EntityData.Leafs = make(map[string]types.YLeaf)
    foreign.EntityData.Leafs["peer-address"] = types.YLeaf{"PeerAddress", foreign.PeerAddress}
    foreign.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", foreign.MemberName}
    return &(foreign.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers
// Children of bundle with LACP information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle member item with LACP information. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember.
    LacpBundleChildrenMember []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember
}

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetEntityData() *types.CommonEntityData {
    lacpBundleChildrenMembers.EntityData.YFilter = lacpBundleChildrenMembers.YFilter
    lacpBundleChildrenMembers.EntityData.YangName = "lacp-bundle-children-members"
    lacpBundleChildrenMembers.EntityData.BundleName = "cisco_ios_xr"
    lacpBundleChildrenMembers.EntityData.ParentYangName = "lacp-bundle"
    lacpBundleChildrenMembers.EntityData.SegmentPath = "lacp-bundle-children-members"
    lacpBundleChildrenMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundleChildrenMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundleChildrenMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundleChildrenMembers.EntityData.Children = make(map[string]types.YChild)
    lacpBundleChildrenMembers.EntityData.Children["lacp-bundle-children-member"] = types.YChild{"LacpBundleChildrenMember", nil}
    for i := range lacpBundleChildrenMembers.LacpBundleChildrenMember {
        lacpBundleChildrenMembers.EntityData.Children[types.GetSegmentPath(&lacpBundleChildrenMembers.LacpBundleChildrenMember[i])] = types.YChild{"LacpBundleChildrenMember", &lacpBundleChildrenMembers.LacpBundleChildrenMember[i]}
    }
    lacpBundleChildrenMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpBundleChildrenMembers.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember
// Bundle member item with LACP information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo
}

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetEntityData() *types.CommonEntityData {
    lacpBundleChildrenMember.EntityData.YFilter = lacpBundleChildrenMember.YFilter
    lacpBundleChildrenMember.EntityData.YangName = "lacp-bundle-children-member"
    lacpBundleChildrenMember.EntityData.BundleName = "cisco_ios_xr"
    lacpBundleChildrenMember.EntityData.ParentYangName = "lacp-bundle-children-members"
    lacpBundleChildrenMember.EntityData.SegmentPath = "lacp-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", lacpBundleChildrenMember.MemberInterface) + "']"
    lacpBundleChildrenMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundleChildrenMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundleChildrenMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundleChildrenMember.EntityData.Children = make(map[string]types.YChild)
    lacpBundleChildrenMember.EntityData.Children["actor-info"] = types.YChild{"ActorInfo", &lacpBundleChildrenMember.ActorInfo}
    lacpBundleChildrenMember.EntityData.Children["partner-info"] = types.YChild{"PartnerInfo", &lacpBundleChildrenMember.PartnerInfo}
    lacpBundleChildrenMember.EntityData.Children["additional-info"] = types.YChild{"AdditionalInfo", &lacpBundleChildrenMember.AdditionalInfo}
    lacpBundleChildrenMember.EntityData.Leafs = make(map[string]types.YLeaf)
    lacpBundleChildrenMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", lacpBundleChildrenMember.MemberInterface}
    lacpBundleChildrenMember.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", lacpBundleChildrenMember.SelectedAggregatorId}
    lacpBundleChildrenMember.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", lacpBundleChildrenMember.AttachedAggregatorId}
    lacpBundleChildrenMember.EntityData.Leafs["selection-state"] = types.YLeaf{"SelectionState", lacpBundleChildrenMember.SelectionState}
    lacpBundleChildrenMember.EntityData.Leafs["period-state"] = types.YLeaf{"PeriodState", lacpBundleChildrenMember.PeriodState}
    lacpBundleChildrenMember.EntityData.Leafs["receive-machine-state"] = types.YLeaf{"ReceiveMachineState", lacpBundleChildrenMember.ReceiveMachineState}
    lacpBundleChildrenMember.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", lacpBundleChildrenMember.MuxState}
    lacpBundleChildrenMember.EntityData.Leafs["actor-churn-state"] = types.YLeaf{"ActorChurnState", lacpBundleChildrenMember.ActorChurnState}
    lacpBundleChildrenMember.EntityData.Leafs["partner-churn-state"] = types.YLeaf{"PartnerChurnState", lacpBundleChildrenMember.PartnerChurnState}
    lacpBundleChildrenMember.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", lacpBundleChildrenMember.IccpGroupId}
    return &(lacpBundleChildrenMember.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetEntityData() *types.CommonEntityData {
    actorInfo.EntityData.YFilter = actorInfo.YFilter
    actorInfo.EntityData.YangName = "actor-info"
    actorInfo.EntityData.BundleName = "cisco_ios_xr"
    actorInfo.EntityData.ParentYangName = "lacp-bundle-children-member"
    actorInfo.EntityData.SegmentPath = "actor-info"
    actorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorInfo.EntityData.Children = make(map[string]types.YChild)
    actorInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &actorInfo.PortInfo}
    actorInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    actorInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", actorInfo.TxPeriod}
    return &(actorInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "actor-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetEntityData() *types.CommonEntityData {
    partnerInfo.EntityData.YFilter = partnerInfo.YFilter
    partnerInfo.EntityData.YangName = "partner-info"
    partnerInfo.EntityData.BundleName = "cisco_ios_xr"
    partnerInfo.EntityData.ParentYangName = "lacp-bundle-children-member"
    partnerInfo.EntityData.SegmentPath = "partner-info"
    partnerInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    partnerInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    partnerInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    partnerInfo.EntityData.Children = make(map[string]types.YChild)
    partnerInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &partnerInfo.PortInfo}
    partnerInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    partnerInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", partnerInfo.TxPeriod}
    return &(partnerInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "partner-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetEntityData() *types.CommonEntityData {
    additionalInfo.EntityData.YFilter = additionalInfo.YFilter
    additionalInfo.EntityData.YangName = "additional-info"
    additionalInfo.EntityData.BundleName = "cisco_ios_xr"
    additionalInfo.EntityData.ParentYangName = "lacp-bundle-children-member"
    additionalInfo.EntityData.SegmentPath = "additional-info"
    additionalInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    additionalInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    additionalInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    additionalInfo.EntityData.Children = make(map[string]types.YChild)
    additionalInfo.EntityData.Children["local"] = types.YChild{"Local", &additionalInfo.Local}
    additionalInfo.EntityData.Children["foreign"] = types.YChild{"Foreign", &additionalInfo.Foreign}
    additionalInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    additionalInfo.EntityData.Leafs["mbr-type"] = types.YLeaf{"MbrType", additionalInfo.MbrType}
    return &(additionalInfo.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "additional-info"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = make(map[string]types.YChild)
    local.EntityData.Leafs = make(map[string]types.YLeaf)
    local.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", local.InterfaceHandle}
    return &(local.EntityData)
}

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetEntityData() *types.CommonEntityData {
    foreign.EntityData.YFilter = foreign.YFilter
    foreign.EntityData.YangName = "foreign"
    foreign.EntityData.BundleName = "cisco_ios_xr"
    foreign.EntityData.ParentYangName = "additional-info"
    foreign.EntityData.SegmentPath = "foreign"
    foreign.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreign.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreign.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreign.EntityData.Children = make(map[string]types.YChild)
    foreign.EntityData.Leafs = make(map[string]types.YLeaf)
    foreign.EntityData.Leafs["peer-address"] = types.YLeaf{"PeerAddress", foreign.PeerAddress}
    foreign.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", foreign.MemberName}
    return &(foreign.EntityData)
}

// BundleInformation_Lacp_LacpMembers
// Member interfaces with LACP information
type BundleInformation_Lacp_LacpMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_Lacp_LacpMembers_LacpMember.
    LacpMember []BundleInformation_Lacp_LacpMembers_LacpMember
}

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetEntityData() *types.CommonEntityData {
    lacpMembers.EntityData.YFilter = lacpMembers.YFilter
    lacpMembers.EntityData.YangName = "lacp-members"
    lacpMembers.EntityData.BundleName = "cisco_ios_xr"
    lacpMembers.EntityData.ParentYangName = "lacp"
    lacpMembers.EntityData.SegmentPath = "lacp-members"
    lacpMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpMembers.EntityData.Children = make(map[string]types.YChild)
    lacpMembers.EntityData.Children["lacp-member"] = types.YChild{"LacpMember", nil}
    for i := range lacpMembers.LacpMember {
        lacpMembers.EntityData.Children[types.GetSegmentPath(&lacpMembers.LacpMember[i])] = types.YChild{"LacpMember", &lacpMembers.LacpMember[i]}
    }
    lacpMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpMembers.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember
// Member interface
type BundleInformation_Lacp_LacpMembers_LacpMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    LacpMemberAncestor BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor

    // Data for this item.
    LacpMemberItem BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem
}

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetEntityData() *types.CommonEntityData {
    lacpMember.EntityData.YFilter = lacpMember.YFilter
    lacpMember.EntityData.YangName = "lacp-member"
    lacpMember.EntityData.BundleName = "cisco_ios_xr"
    lacpMember.EntityData.ParentYangName = "lacp-members"
    lacpMember.EntityData.SegmentPath = "lacp-member" + "[member-interface='" + fmt.Sprintf("%v", lacpMember.MemberInterface) + "']"
    lacpMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpMember.EntityData.Children = make(map[string]types.YChild)
    lacpMember.EntityData.Children["lacp-member-ancestor"] = types.YChild{"LacpMemberAncestor", &lacpMember.LacpMemberAncestor}
    lacpMember.EntityData.Children["lacp-member-item"] = types.YChild{"LacpMemberItem", &lacpMember.LacpMemberItem}
    lacpMember.EntityData.Leafs = make(map[string]types.YLeaf)
    lacpMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", lacpMember.MemberInterface}
    return &(lacpMember.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData

    // Member information. The type is slice of
    // BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData.
    MemberData []BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData
}

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetEntityData() *types.CommonEntityData {
    lacpMemberAncestor.EntityData.YFilter = lacpMemberAncestor.YFilter
    lacpMemberAncestor.EntityData.YangName = "lacp-member-ancestor"
    lacpMemberAncestor.EntityData.BundleName = "cisco_ios_xr"
    lacpMemberAncestor.EntityData.ParentYangName = "lacp-member"
    lacpMemberAncestor.EntityData.SegmentPath = "lacp-member-ancestor"
    lacpMemberAncestor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpMemberAncestor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpMemberAncestor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpMemberAncestor.EntityData.Children = make(map[string]types.YChild)
    lacpMemberAncestor.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &lacpMemberAncestor.BundleData}
    lacpMemberAncestor.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range lacpMemberAncestor.MemberData {
        lacpMemberAncestor.EntityData.Children[types.GetSegmentPath(&lacpMemberAncestor.MemberData[i])] = types.YChild{"MemberData", &lacpMemberAncestor.MemberData[i]}
    }
    lacpMemberAncestor.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpMemberAncestor.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData
// Bundle information
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData

    // System ID for the bundle.
    BundleSystemId BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId
}

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "lacp-member-ancestor"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["actor-bundle-data"] = types.YChild{"ActorBundleData", &bundleData.ActorBundleData}
    bundleData.EntityData.Children["bundle-system-id"] = types.YChild{"BundleSystemId", &bundleData.BundleSystemId}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", bundleData.ActorOperationalKey}
    bundleData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", bundleData.PartnerSystemPriority}
    bundleData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", bundleData.PartnerSystemMacAddress}
    bundleData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", bundleData.PartnerOperationalKey}
    return &(bundleData.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData
// Basic bundle information
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig.
    BfdConfig []BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig
}

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetEntityData() *types.CommonEntityData {
    actorBundleData.EntityData.YFilter = actorBundleData.YFilter
    actorBundleData.EntityData.YangName = "actor-bundle-data"
    actorBundleData.EntityData.BundleName = "cisco_ios_xr"
    actorBundleData.EntityData.ParentYangName = "bundle-data"
    actorBundleData.EntityData.SegmentPath = "actor-bundle-data"
    actorBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorBundleData.EntityData.Children = make(map[string]types.YChild)
    actorBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &actorBundleData.MacAddress}
    actorBundleData.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range actorBundleData.BfdConfig {
        actorBundleData.EntityData.Children[types.GetSegmentPath(&actorBundleData.BfdConfig[i])] = types.YChild{"BfdConfig", &actorBundleData.BfdConfig[i]}
    }
    actorBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    actorBundleData.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", actorBundleData.BundleInterfaceName}
    actorBundleData.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", actorBundleData.AvailableBandwidth}
    actorBundleData.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", actorBundleData.EffectiveBandwidth}
    actorBundleData.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", actorBundleData.ConfiguredBandwidth}
    actorBundleData.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", actorBundleData.MinimumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", actorBundleData.MaximumActiveLinks}
    actorBundleData.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", actorBundleData.MaximumActiveLinksSource}
    actorBundleData.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", actorBundleData.MinimumBandwidth}
    actorBundleData.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", actorBundleData.PrimaryMember}
    actorBundleData.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", actorBundleData.BundleStatus}
    actorBundleData.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", actorBundleData.ActiveMemberCount}
    actorBundleData.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", actorBundleData.StandbyMemberCount}
    actorBundleData.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", actorBundleData.ConfiguredMemberCount}
    actorBundleData.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", actorBundleData.MacSource}
    actorBundleData.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", actorBundleData.MacSourceMember}
    actorBundleData.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", actorBundleData.InterChassis}
    actorBundleData.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", actorBundleData.IsActive}
    actorBundleData.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", actorBundleData.LacpStatus}
    actorBundleData.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", actorBundleData.MlacpStatus}
    actorBundleData.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", actorBundleData.Ipv4BfdStatus}
    actorBundleData.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", actorBundleData.LinkOrderStatus}
    actorBundleData.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", actorBundleData.Ipv6BfdStatus}
    actorBundleData.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", actorBundleData.LoadBalanceHashType}
    actorBundleData.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", actorBundleData.LoadBalanceLocalityThreshold}
    actorBundleData.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", actorBundleData.SuppressionTimer}
    actorBundleData.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", actorBundleData.WaitWhileTimer}
    actorBundleData.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", actorBundleData.CollectorMaxDelay}
    actorBundleData.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", actorBundleData.CiscoExtensions}
    actorBundleData.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", actorBundleData.LacpNonrevertive}
    actorBundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", actorBundleData.IccpGroupId}
    actorBundleData.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", actorBundleData.ActiveForeignMemberCount}
    actorBundleData.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", actorBundleData.ConfiguredForeignMemberCount}
    actorBundleData.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", actorBundleData.SwitchoverType}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", actorBundleData.MaximizeThresholdValueLinks}
    actorBundleData.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", actorBundleData.MaximizeThresholdValueBandWidth}
    actorBundleData.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", actorBundleData.MlacpMode}
    actorBundleData.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", actorBundleData.RecoveryDelay}
    actorBundleData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", actorBundleData.Singleton}
    return &(actorBundleData.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress
// MAC address of this member
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "actor-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "actor-bundle-data"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId
// System ID for the bundle
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetEntityData() *types.CommonEntityData {
    bundleSystemId.EntityData.YFilter = bundleSystemId.YFilter
    bundleSystemId.EntityData.YangName = "bundle-system-id"
    bundleSystemId.EntityData.BundleName = "cisco_ios_xr"
    bundleSystemId.EntityData.ParentYangName = "bundle-data"
    bundleSystemId.EntityData.SegmentPath = "bundle-system-id"
    bundleSystemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleSystemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleSystemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleSystemId.EntityData.Children = make(map[string]types.YChild)
    bundleSystemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &bundleSystemId.SystemMacAddr}
    bundleSystemId.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleSystemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", bundleSystemId.SystemPrio}
    return &(bundleSystemId.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "bundle-system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData
// Member information
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo
}

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "lacp-member-ancestor"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["actor-info"] = types.YChild{"ActorInfo", &memberData.ActorInfo}
    memberData.EntityData.Children["partner-info"] = types.YChild{"PartnerInfo", &memberData.PartnerInfo}
    memberData.EntityData.Children["additional-info"] = types.YChild{"AdditionalInfo", &memberData.AdditionalInfo}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", memberData.SelectedAggregatorId}
    memberData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", memberData.AttachedAggregatorId}
    memberData.EntityData.Leafs["selection-state"] = types.YLeaf{"SelectionState", memberData.SelectionState}
    memberData.EntityData.Leafs["period-state"] = types.YLeaf{"PeriodState", memberData.PeriodState}
    memberData.EntityData.Leafs["receive-machine-state"] = types.YLeaf{"ReceiveMachineState", memberData.ReceiveMachineState}
    memberData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberData.MuxState}
    memberData.EntityData.Leafs["actor-churn-state"] = types.YLeaf{"ActorChurnState", memberData.ActorChurnState}
    memberData.EntityData.Leafs["partner-churn-state"] = types.YLeaf{"PartnerChurnState", memberData.PartnerChurnState}
    memberData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", memberData.IccpGroupId}
    return &(memberData.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetEntityData() *types.CommonEntityData {
    actorInfo.EntityData.YFilter = actorInfo.YFilter
    actorInfo.EntityData.YangName = "actor-info"
    actorInfo.EntityData.BundleName = "cisco_ios_xr"
    actorInfo.EntityData.ParentYangName = "member-data"
    actorInfo.EntityData.SegmentPath = "actor-info"
    actorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorInfo.EntityData.Children = make(map[string]types.YChild)
    actorInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &actorInfo.PortInfo}
    actorInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    actorInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", actorInfo.TxPeriod}
    return &(actorInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "actor-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetEntityData() *types.CommonEntityData {
    partnerInfo.EntityData.YFilter = partnerInfo.YFilter
    partnerInfo.EntityData.YangName = "partner-info"
    partnerInfo.EntityData.BundleName = "cisco_ios_xr"
    partnerInfo.EntityData.ParentYangName = "member-data"
    partnerInfo.EntityData.SegmentPath = "partner-info"
    partnerInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    partnerInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    partnerInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    partnerInfo.EntityData.Children = make(map[string]types.YChild)
    partnerInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &partnerInfo.PortInfo}
    partnerInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    partnerInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", partnerInfo.TxPeriod}
    return &(partnerInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "partner-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetEntityData() *types.CommonEntityData {
    additionalInfo.EntityData.YFilter = additionalInfo.YFilter
    additionalInfo.EntityData.YangName = "additional-info"
    additionalInfo.EntityData.BundleName = "cisco_ios_xr"
    additionalInfo.EntityData.ParentYangName = "member-data"
    additionalInfo.EntityData.SegmentPath = "additional-info"
    additionalInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    additionalInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    additionalInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    additionalInfo.EntityData.Children = make(map[string]types.YChild)
    additionalInfo.EntityData.Children["local"] = types.YChild{"Local", &additionalInfo.Local}
    additionalInfo.EntityData.Children["foreign"] = types.YChild{"Foreign", &additionalInfo.Foreign}
    additionalInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    additionalInfo.EntityData.Leafs["mbr-type"] = types.YLeaf{"MbrType", additionalInfo.MbrType}
    return &(additionalInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "additional-info"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = make(map[string]types.YChild)
    local.EntityData.Leafs = make(map[string]types.YLeaf)
    local.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", local.InterfaceHandle}
    return &(local.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetEntityData() *types.CommonEntityData {
    foreign.EntityData.YFilter = foreign.YFilter
    foreign.EntityData.YangName = "foreign"
    foreign.EntityData.BundleName = "cisco_ios_xr"
    foreign.EntityData.ParentYangName = "additional-info"
    foreign.EntityData.SegmentPath = "foreign"
    foreign.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreign.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreign.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreign.EntityData.Children = make(map[string]types.YChild)
    foreign.EntityData.Leafs = make(map[string]types.YLeaf)
    foreign.EntityData.Leafs["peer-address"] = types.YLeaf{"PeerAddress", foreign.PeerAddress}
    foreign.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", foreign.MemberName}
    return &(foreign.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem
// Data for this item
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo
}

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetEntityData() *types.CommonEntityData {
    lacpMemberItem.EntityData.YFilter = lacpMemberItem.YFilter
    lacpMemberItem.EntityData.YangName = "lacp-member-item"
    lacpMemberItem.EntityData.BundleName = "cisco_ios_xr"
    lacpMemberItem.EntityData.ParentYangName = "lacp-member"
    lacpMemberItem.EntityData.SegmentPath = "lacp-member-item"
    lacpMemberItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpMemberItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpMemberItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpMemberItem.EntityData.Children = make(map[string]types.YChild)
    lacpMemberItem.EntityData.Children["actor-info"] = types.YChild{"ActorInfo", &lacpMemberItem.ActorInfo}
    lacpMemberItem.EntityData.Children["partner-info"] = types.YChild{"PartnerInfo", &lacpMemberItem.PartnerInfo}
    lacpMemberItem.EntityData.Children["additional-info"] = types.YChild{"AdditionalInfo", &lacpMemberItem.AdditionalInfo}
    lacpMemberItem.EntityData.Leafs = make(map[string]types.YLeaf)
    lacpMemberItem.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", lacpMemberItem.SelectedAggregatorId}
    lacpMemberItem.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", lacpMemberItem.AttachedAggregatorId}
    lacpMemberItem.EntityData.Leafs["selection-state"] = types.YLeaf{"SelectionState", lacpMemberItem.SelectionState}
    lacpMemberItem.EntityData.Leafs["period-state"] = types.YLeaf{"PeriodState", lacpMemberItem.PeriodState}
    lacpMemberItem.EntityData.Leafs["receive-machine-state"] = types.YLeaf{"ReceiveMachineState", lacpMemberItem.ReceiveMachineState}
    lacpMemberItem.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", lacpMemberItem.MuxState}
    lacpMemberItem.EntityData.Leafs["actor-churn-state"] = types.YLeaf{"ActorChurnState", lacpMemberItem.ActorChurnState}
    lacpMemberItem.EntityData.Leafs["partner-churn-state"] = types.YLeaf{"PartnerChurnState", lacpMemberItem.PartnerChurnState}
    lacpMemberItem.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", lacpMemberItem.IccpGroupId}
    return &(lacpMemberItem.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetEntityData() *types.CommonEntityData {
    actorInfo.EntityData.YFilter = actorInfo.YFilter
    actorInfo.EntityData.YangName = "actor-info"
    actorInfo.EntityData.BundleName = "cisco_ios_xr"
    actorInfo.EntityData.ParentYangName = "lacp-member-item"
    actorInfo.EntityData.SegmentPath = "actor-info"
    actorInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    actorInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    actorInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    actorInfo.EntityData.Children = make(map[string]types.YChild)
    actorInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &actorInfo.PortInfo}
    actorInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    actorInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", actorInfo.TxPeriod}
    return &(actorInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "actor-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetEntityData() *types.CommonEntityData {
    partnerInfo.EntityData.YFilter = partnerInfo.YFilter
    partnerInfo.EntityData.YangName = "partner-info"
    partnerInfo.EntityData.BundleName = "cisco_ios_xr"
    partnerInfo.EntityData.ParentYangName = "lacp-member-item"
    partnerInfo.EntityData.SegmentPath = "partner-info"
    partnerInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    partnerInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    partnerInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    partnerInfo.EntityData.Children = make(map[string]types.YChild)
    partnerInfo.EntityData.Children["port-info"] = types.YChild{"PortInfo", &partnerInfo.PortInfo}
    partnerInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    partnerInfo.EntityData.Leafs["tx-period"] = types.YLeaf{"TxPeriod", partnerInfo.TxPeriod}
    return &(partnerInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetEntityData() *types.CommonEntityData {
    portInfo.EntityData.YFilter = portInfo.YFilter
    portInfo.EntityData.YangName = "port-info"
    portInfo.EntityData.BundleName = "cisco_ios_xr"
    portInfo.EntityData.ParentYangName = "partner-info"
    portInfo.EntityData.SegmentPath = "port-info"
    portInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    portInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    portInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    portInfo.EntityData.Children = make(map[string]types.YChild)
    portInfo.EntityData.Children["system"] = types.YChild{"System", &portInfo.System}
    portInfo.EntityData.Children["port"] = types.YChild{"Port", &portInfo.Port}
    portInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    portInfo.EntityData.Leafs["key"] = types.YLeaf{"Key", portInfo.Key}
    portInfo.EntityData.Leafs["state"] = types.YLeaf{"State", portInfo.State}
    return &(portInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetEntityData() *types.CommonEntityData {
    system.EntityData.YFilter = system.YFilter
    system.EntityData.YangName = "system"
    system.EntityData.BundleName = "cisco_ios_xr"
    system.EntityData.ParentYangName = "port-info"
    system.EntityData.SegmentPath = "system"
    system.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    system.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    system.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    system.EntityData.Children = make(map[string]types.YChild)
    system.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &system.SystemMacAddr}
    system.EntityData.Leafs = make(map[string]types.YLeaf)
    system.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", system.SystemPrio}
    return &(system.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetEntityData() *types.CommonEntityData {
    port.EntityData.YFilter = port.YFilter
    port.EntityData.YangName = "port"
    port.EntityData.BundleName = "cisco_ios_xr"
    port.EntityData.ParentYangName = "port-info"
    port.EntityData.SegmentPath = "port"
    port.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    port.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    port.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    port.EntityData.Children = make(map[string]types.YChild)
    port.EntityData.Leafs = make(map[string]types.YLeaf)
    port.EntityData.Leafs["link-priority"] = types.YLeaf{"LinkPriority", port.LinkPriority}
    port.EntityData.Leafs["link-number"] = types.YLeaf{"LinkNumber", port.LinkNumber}
    return &(port.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetEntityData() *types.CommonEntityData {
    additionalInfo.EntityData.YFilter = additionalInfo.YFilter
    additionalInfo.EntityData.YangName = "additional-info"
    additionalInfo.EntityData.BundleName = "cisco_ios_xr"
    additionalInfo.EntityData.ParentYangName = "lacp-member-item"
    additionalInfo.EntityData.SegmentPath = "additional-info"
    additionalInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    additionalInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    additionalInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    additionalInfo.EntityData.Children = make(map[string]types.YChild)
    additionalInfo.EntityData.Children["local"] = types.YChild{"Local", &additionalInfo.Local}
    additionalInfo.EntityData.Children["foreign"] = types.YChild{"Foreign", &additionalInfo.Foreign}
    additionalInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    additionalInfo.EntityData.Leafs["mbr-type"] = types.YLeaf{"MbrType", additionalInfo.MbrType}
    return &(additionalInfo.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetEntityData() *types.CommonEntityData {
    local.EntityData.YFilter = local.YFilter
    local.EntityData.YangName = "local"
    local.EntityData.BundleName = "cisco_ios_xr"
    local.EntityData.ParentYangName = "additional-info"
    local.EntityData.SegmentPath = "local"
    local.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    local.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    local.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    local.EntityData.Children = make(map[string]types.YChild)
    local.EntityData.Leafs = make(map[string]types.YLeaf)
    local.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", local.InterfaceHandle}
    return &(local.EntityData)
}

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetEntityData() *types.CommonEntityData {
    foreign.EntityData.YFilter = foreign.YFilter
    foreign.EntityData.YangName = "foreign"
    foreign.EntityData.BundleName = "cisco_ios_xr"
    foreign.EntityData.ParentYangName = "additional-info"
    foreign.EntityData.SegmentPath = "foreign"
    foreign.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    foreign.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    foreign.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    foreign.EntityData.Children = make(map[string]types.YChild)
    foreign.EntityData.Leafs = make(map[string]types.YLeaf)
    foreign.EntityData.Leafs["peer-address"] = types.YLeaf{"PeerAddress", foreign.PeerAddress}
    foreign.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", foreign.MemberName}
    return &(foreign.EntityData)
}

// BundleInformation_MlacpBundleCounters
// Bundle specific counters of mLACP events
type BundleInformation_MlacpBundleCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Groups with counters of their bundle's mLACP events.
    IccpGroups BundleInformation_MlacpBundleCounters_IccpGroups

    // Bundle interfaces with counters of mLACP events.
    Bundles BundleInformation_MlacpBundleCounters_Bundles

    // Devices with counters of their bundle's mLACP events.
    Nodes BundleInformation_MlacpBundleCounters_Nodes
}

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetEntityData() *types.CommonEntityData {
    mlacpBundleCounters.EntityData.YFilter = mlacpBundleCounters.YFilter
    mlacpBundleCounters.EntityData.YangName = "mlacp-bundle-counters"
    mlacpBundleCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleCounters.EntityData.ParentYangName = "bundle-information"
    mlacpBundleCounters.EntityData.SegmentPath = "mlacp-bundle-counters"
    mlacpBundleCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleCounters.EntityData.Children["iccp-groups"] = types.YChild{"IccpGroups", &mlacpBundleCounters.IccpGroups}
    mlacpBundleCounters.EntityData.Children["bundles"] = types.YChild{"Bundles", &mlacpBundleCounters.Bundles}
    mlacpBundleCounters.EntityData.Children["nodes"] = types.YChild{"Nodes", &mlacpBundleCounters.Nodes}
    mlacpBundleCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBundleCounters.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups
// ICCP Groups with counters of their bundle's
// mLACP events
type BundleInformation_MlacpBundleCounters_IccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup.
    IccpGroup []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup
}

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetEntityData() *types.CommonEntityData {
    iccpGroups.EntityData.YFilter = iccpGroups.YFilter
    iccpGroups.EntityData.YangName = "iccp-groups"
    iccpGroups.EntityData.BundleName = "cisco_ios_xr"
    iccpGroups.EntityData.ParentYangName = "mlacp-bundle-counters"
    iccpGroups.EntityData.SegmentPath = "iccp-groups"
    iccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroups.EntityData.Children = make(map[string]types.YChild)
    iccpGroups.EntityData.Children["iccp-group"] = types.YChild{"IccpGroup", nil}
    for i := range iccpGroups.IccpGroup {
        iccpGroups.EntityData.Children[types.GetSegmentPath(&iccpGroups.IccpGroup[i])] = types.YChild{"IccpGroup", &iccpGroups.IccpGroup[i]}
    }
    iccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(iccpGroups.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup
// ICCP Group ID
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    IccpGroupItem BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetEntityData() *types.CommonEntityData {
    iccpGroup.EntityData.YFilter = iccpGroup.YFilter
    iccpGroup.EntityData.YangName = "iccp-group"
    iccpGroup.EntityData.BundleName = "cisco_ios_xr"
    iccpGroup.EntityData.ParentYangName = "iccp-groups"
    iccpGroup.EntityData.SegmentPath = "iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", iccpGroup.IccpGroup) + "']"
    iccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroup.EntityData.Children = make(map[string]types.YChild)
    iccpGroup.EntityData.Children["iccp-group-item"] = types.YChild{"IccpGroupItem", &iccpGroup.IccpGroupItem}
    iccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", iccpGroup.IccpGroup}
    return &(iccpGroup.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem
// Data for this item
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information.
    IccpGroupData BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData

    // Peer device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData.
    NodeData []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData
}

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetEntityData() *types.CommonEntityData {
    iccpGroupItem.EntityData.YFilter = iccpGroupItem.YFilter
    iccpGroupItem.EntityData.YangName = "iccp-group-item"
    iccpGroupItem.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupItem.EntityData.ParentYangName = "iccp-group"
    iccpGroupItem.EntityData.SegmentPath = "iccp-group-item"
    iccpGroupItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupItem.EntityData.Children = make(map[string]types.YChild)
    iccpGroupItem.EntityData.Children["iccp-group-data"] = types.YChild{"IccpGroupData", &iccpGroupItem.IccpGroupData}
    iccpGroupItem.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range iccpGroupItem.NodeData {
        iccpGroupItem.EntityData.Children[types.GetSegmentPath(&iccpGroupItem.NodeData[i])] = types.YChild{"NodeData", &iccpGroupItem.NodeData[i]}
    }
    iccpGroupItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(iccpGroupItem.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllLocalBundles BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles

    // Local device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetEntityData() *types.CommonEntityData {
    iccpGroupData.EntityData.YFilter = iccpGroupData.YFilter
    iccpGroupData.EntityData.YangName = "iccp-group-data"
    iccpGroupData.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupData.EntityData.ParentYangName = "iccp-group-item"
    iccpGroupData.EntityData.SegmentPath = "iccp-group-data"
    iccpGroupData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupData.EntityData.Children = make(map[string]types.YChild)
    iccpGroupData.EntityData.Children["mlacp-sync-requests-on-all-local-ports"] = types.YChild{"MlacpSyncRequestsOnAllLocalPorts", &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts}
    iccpGroupData.EntityData.Children["mlacp-sync-requests-on-all-local-bundles"] = types.YChild{"MlacpSyncRequestsOnAllLocalBundles", &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles}
    iccpGroupData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range iccpGroupData.BundleData {
        iccpGroupData.EntityData.Children[types.GetSegmentPath(&iccpGroupData.BundleData[i])] = types.YChild{"BundleData", &iccpGroupData.BundleData[i]}
    }
    iccpGroupData.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupData.IccpGroupId}
    return &(iccpGroupData.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YFilter = mlacpSyncRequestsOnAllLocalPorts.YFilter
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YangName = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.ParentYangName = "iccp-group-data"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalPorts.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalBundles.EntityData.YFilter = mlacpSyncRequestsOnAllLocalBundles.YFilter
    mlacpSyncRequestsOnAllLocalBundles.EntityData.YangName = "mlacp-sync-requests-on-all-local-bundles"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.ParentYangName = "iccp-group-data"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-bundles"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalBundles.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalBundles.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalBundles.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalBundles.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-bundles"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData
// Local device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "iccp-group-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &bundleData.MlacpTlvCounters}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "bundle-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData
// Peer device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_

    // Peer device bundle mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "iccp-group-item"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["node-data"] = types.YChild{"NodeData", &nodeData.NodeData}
    nodeData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range nodeData.BundleData {
        nodeData.EntityData.Children[types.GetSegmentPath(&nodeData.BundleData[i])] = types.YChild{"BundleData", &nodeData.BundleData[i]}
    }
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_
// Peer device mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllForeignBundles BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles
}

func (nodeData_ *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_) GetEntityData() *types.CommonEntityData {
    nodeData_.EntityData.YFilter = nodeData_.YFilter
    nodeData_.EntityData.YangName = "node-data"
    nodeData_.EntityData.BundleName = "cisco_ios_xr"
    nodeData_.EntityData.ParentYangName = "node-data"
    nodeData_.EntityData.SegmentPath = "node-data"
    nodeData_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData_.EntityData.Children = make(map[string]types.YChild)
    nodeData_.EntityData.Children["mlacp-sync-requests-on-all-foreign-ports"] = types.YChild{"MlacpSyncRequestsOnAllForeignPorts", &nodeData_.MlacpSyncRequestsOnAllForeignPorts}
    nodeData_.EntityData.Children["mlacp-sync-requests-on-all-foreign-bundles"] = types.YChild{"MlacpSyncRequestsOnAllForeignBundles", &nodeData_.MlacpSyncRequestsOnAllForeignBundles}
    nodeData_.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData_.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", nodeData_.NodeId}
    return &(nodeData_.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YFilter = mlacpSyncRequestsOnAllForeignPorts.YFilter
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignPorts.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignBundles.EntityData.YFilter = mlacpSyncRequestsOnAllForeignBundles.YFilter
    mlacpSyncRequestsOnAllForeignBundles.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-bundles"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-bundles"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignBundles.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignBundles.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignBundles.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignBundles.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-bundles"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData
// Peer device bundle mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "node-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &bundleData.MlacpTlvCounters}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "bundle-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles
// Bundle interfaces with counters of mLACP events
type BundleInformation_MlacpBundleCounters_Bundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle.
    Bundle []BundleInformation_MlacpBundleCounters_Bundles_Bundle
}

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetEntityData() *types.CommonEntityData {
    bundles.EntityData.YFilter = bundles.YFilter
    bundles.EntityData.YangName = "bundles"
    bundles.EntityData.BundleName = "cisco_ios_xr"
    bundles.EntityData.ParentYangName = "mlacp-bundle-counters"
    bundles.EntityData.SegmentPath = "bundles"
    bundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundles.EntityData.Children = make(map[string]types.YChild)
    bundles.EntityData.Children["bundle"] = types.YChild{"Bundle", nil}
    for i := range bundles.Bundle {
        bundles.EntityData.Children[types.GetSegmentPath(&bundles.Bundle[i])] = types.YChild{"Bundle", &bundles.Bundle[i]}
    }
    bundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundles.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle
// Bundle interface
type BundleInformation_MlacpBundleCounters_Bundles_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    BundleItem BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem
}

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "bundles"
    bundle.EntityData.SegmentPath = "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["bundle-item"] = types.YChild{"BundleItem", &bundle.BundleItem}
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", bundle.BundleInterface}
    return &(bundle.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem
// Data for this item
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup.
    IccpGroup []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup
}

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetEntityData() *types.CommonEntityData {
    bundleItem.EntityData.YFilter = bundleItem.YFilter
    bundleItem.EntityData.YangName = "bundle-item"
    bundleItem.EntityData.BundleName = "cisco_ios_xr"
    bundleItem.EntityData.ParentYangName = "bundle"
    bundleItem.EntityData.SegmentPath = "bundle-item"
    bundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleItem.EntityData.Children = make(map[string]types.YChild)
    bundleItem.EntityData.Children["iccp-group"] = types.YChild{"IccpGroup", nil}
    for i := range bundleItem.IccpGroup {
        bundleItem.EntityData.Children[types.GetSegmentPath(&bundleItem.IccpGroup[i])] = types.YChild{"IccpGroup", &bundleItem.IccpGroup[i]}
    }
    bundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleItem.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information.
    IccpGroupData BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData

    // Peer device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData.
    NodeData []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetEntityData() *types.CommonEntityData {
    iccpGroup.EntityData.YFilter = iccpGroup.YFilter
    iccpGroup.EntityData.YangName = "iccp-group"
    iccpGroup.EntityData.BundleName = "cisco_ios_xr"
    iccpGroup.EntityData.ParentYangName = "bundle-item"
    iccpGroup.EntityData.SegmentPath = "iccp-group"
    iccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroup.EntityData.Children = make(map[string]types.YChild)
    iccpGroup.EntityData.Children["iccp-group-data"] = types.YChild{"IccpGroupData", &iccpGroup.IccpGroupData}
    iccpGroup.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range iccpGroup.NodeData {
        iccpGroup.EntityData.Children[types.GetSegmentPath(&iccpGroup.NodeData[i])] = types.YChild{"NodeData", &iccpGroup.NodeData[i]}
    }
    iccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(iccpGroup.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllLocalBundles BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles

    // Local device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetEntityData() *types.CommonEntityData {
    iccpGroupData.EntityData.YFilter = iccpGroupData.YFilter
    iccpGroupData.EntityData.YangName = "iccp-group-data"
    iccpGroupData.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupData.EntityData.ParentYangName = "iccp-group"
    iccpGroupData.EntityData.SegmentPath = "iccp-group-data"
    iccpGroupData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupData.EntityData.Children = make(map[string]types.YChild)
    iccpGroupData.EntityData.Children["mlacp-sync-requests-on-all-local-ports"] = types.YChild{"MlacpSyncRequestsOnAllLocalPorts", &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts}
    iccpGroupData.EntityData.Children["mlacp-sync-requests-on-all-local-bundles"] = types.YChild{"MlacpSyncRequestsOnAllLocalBundles", &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles}
    iccpGroupData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range iccpGroupData.BundleData {
        iccpGroupData.EntityData.Children[types.GetSegmentPath(&iccpGroupData.BundleData[i])] = types.YChild{"BundleData", &iccpGroupData.BundleData[i]}
    }
    iccpGroupData.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupData.IccpGroupId}
    return &(iccpGroupData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YFilter = mlacpSyncRequestsOnAllLocalPorts.YFilter
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YangName = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.ParentYangName = "iccp-group-data"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalPorts.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalBundles.EntityData.YFilter = mlacpSyncRequestsOnAllLocalBundles.YFilter
    mlacpSyncRequestsOnAllLocalBundles.EntityData.YangName = "mlacp-sync-requests-on-all-local-bundles"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.ParentYangName = "iccp-group-data"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-bundles"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalBundles.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalBundles.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalBundles.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalBundles.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-bundles"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData
// Local device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "iccp-group-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &bundleData.MlacpTlvCounters}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "bundle-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData
// Peer device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_

    // Peer device bundle mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "iccp-group"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["node-data"] = types.YChild{"NodeData", &nodeData.NodeData}
    nodeData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range nodeData.BundleData {
        nodeData.EntityData.Children[types.GetSegmentPath(&nodeData.BundleData[i])] = types.YChild{"BundleData", &nodeData.BundleData[i]}
    }
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_
// Peer device mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllForeignBundles BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles
}

func (nodeData_ *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_) GetEntityData() *types.CommonEntityData {
    nodeData_.EntityData.YFilter = nodeData_.YFilter
    nodeData_.EntityData.YangName = "node-data"
    nodeData_.EntityData.BundleName = "cisco_ios_xr"
    nodeData_.EntityData.ParentYangName = "node-data"
    nodeData_.EntityData.SegmentPath = "node-data"
    nodeData_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData_.EntityData.Children = make(map[string]types.YChild)
    nodeData_.EntityData.Children["mlacp-sync-requests-on-all-foreign-ports"] = types.YChild{"MlacpSyncRequestsOnAllForeignPorts", &nodeData_.MlacpSyncRequestsOnAllForeignPorts}
    nodeData_.EntityData.Children["mlacp-sync-requests-on-all-foreign-bundles"] = types.YChild{"MlacpSyncRequestsOnAllForeignBundles", &nodeData_.MlacpSyncRequestsOnAllForeignBundles}
    nodeData_.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData_.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", nodeData_.NodeId}
    return &(nodeData_.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YFilter = mlacpSyncRequestsOnAllForeignPorts.YFilter
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignPorts.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignBundles.EntityData.YFilter = mlacpSyncRequestsOnAllForeignBundles.YFilter
    mlacpSyncRequestsOnAllForeignBundles.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-bundles"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-bundles"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignBundles.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignBundles.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignBundles.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignBundles.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-bundles"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData
// Peer device bundle mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "node-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &bundleData.MlacpTlvCounters}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "bundle-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes
// Devices with counters of their bundle's mLACP
// events
type BundleInformation_MlacpBundleCounters_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node ID. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node.
    Node []BundleInformation_MlacpBundleCounters_Nodes_Node
}

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "mlacp-bundle-counters"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = make(map[string]types.YChild)
    nodes.EntityData.Children["node"] = types.YChild{"Node", nil}
    for i := range nodes.Node {
        nodes.EntityData.Children[types.GetSegmentPath(&nodes.Node[i])] = types.YChild{"Node", &nodes.Node[i]}
    }
    nodes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodes.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node
// Node ID
type BundleInformation_MlacpBundleCounters_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. For a local device the Node ID e.g. '0_0_CPU0',
    // for a peer device the LDP ID followed by the ICCP Group ID e.g. '5.4.3.2
    // ,4'. The type is string.
    Node interface{}

    // Data for this item.
    NodeItem BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem
}

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + "[node='" + fmt.Sprintf("%v", node.Node) + "']"
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = make(map[string]types.YChild)
    node.EntityData.Children["node-item"] = types.YChild{"NodeItem", &node.NodeItem}
    node.EntityData.Leafs = make(map[string]types.YLeaf)
    node.EntityData.Leafs["node"] = types.YLeaf{"Node", node.Node}
    return &(node.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem
// Data for this item
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information.
    IccpGroupData BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData

    // Peer device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData.
    NodeData []BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData
}

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetEntityData() *types.CommonEntityData {
    nodeItem.EntityData.YFilter = nodeItem.YFilter
    nodeItem.EntityData.YangName = "node-item"
    nodeItem.EntityData.BundleName = "cisco_ios_xr"
    nodeItem.EntityData.ParentYangName = "node"
    nodeItem.EntityData.SegmentPath = "node-item"
    nodeItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeItem.EntityData.Children = make(map[string]types.YChild)
    nodeItem.EntityData.Children["iccp-group-data"] = types.YChild{"IccpGroupData", &nodeItem.IccpGroupData}
    nodeItem.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range nodeItem.NodeData {
        nodeItem.EntityData.Children[types.GetSegmentPath(&nodeItem.NodeData[i])] = types.YChild{"NodeData", &nodeItem.NodeData[i]}
    }
    nodeItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeItem.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllLocalBundles BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles

    // Local device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetEntityData() *types.CommonEntityData {
    iccpGroupData.EntityData.YFilter = iccpGroupData.YFilter
    iccpGroupData.EntityData.YangName = "iccp-group-data"
    iccpGroupData.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupData.EntityData.ParentYangName = "node-item"
    iccpGroupData.EntityData.SegmentPath = "iccp-group-data"
    iccpGroupData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupData.EntityData.Children = make(map[string]types.YChild)
    iccpGroupData.EntityData.Children["mlacp-sync-requests-on-all-local-ports"] = types.YChild{"MlacpSyncRequestsOnAllLocalPorts", &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts}
    iccpGroupData.EntityData.Children["mlacp-sync-requests-on-all-local-bundles"] = types.YChild{"MlacpSyncRequestsOnAllLocalBundles", &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles}
    iccpGroupData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range iccpGroupData.BundleData {
        iccpGroupData.EntityData.Children[types.GetSegmentPath(&iccpGroupData.BundleData[i])] = types.YChild{"BundleData", &iccpGroupData.BundleData[i]}
    }
    iccpGroupData.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupData.IccpGroupId}
    return &(iccpGroupData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YFilter = mlacpSyncRequestsOnAllLocalPorts.YFilter
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YangName = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.ParentYangName = "iccp-group-data"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalPorts.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalBundles.EntityData.YFilter = mlacpSyncRequestsOnAllLocalBundles.YFilter
    mlacpSyncRequestsOnAllLocalBundles.EntityData.YangName = "mlacp-sync-requests-on-all-local-bundles"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.ParentYangName = "iccp-group-data"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-bundles"
    mlacpSyncRequestsOnAllLocalBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalBundles.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalBundles.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalBundles.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalBundles.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalBundles.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-bundles"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData
// Local device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "iccp-group-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &bundleData.MlacpTlvCounters}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "bundle-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData
// Peer device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_

    // Peer device bundle mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "node-item"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["node-data"] = types.YChild{"NodeData", &nodeData.NodeData}
    nodeData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range nodeData.BundleData {
        nodeData.EntityData.Children[types.GetSegmentPath(&nodeData.BundleData[i])] = types.YChild{"BundleData", &nodeData.BundleData[i]}
    }
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_
// Peer device mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllForeignBundles BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles
}

func (nodeData_ *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_) GetEntityData() *types.CommonEntityData {
    nodeData_.EntityData.YFilter = nodeData_.YFilter
    nodeData_.EntityData.YangName = "node-data"
    nodeData_.EntityData.BundleName = "cisco_ios_xr"
    nodeData_.EntityData.ParentYangName = "node-data"
    nodeData_.EntityData.SegmentPath = "node-data"
    nodeData_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData_.EntityData.Children = make(map[string]types.YChild)
    nodeData_.EntityData.Children["mlacp-sync-requests-on-all-foreign-ports"] = types.YChild{"MlacpSyncRequestsOnAllForeignPorts", &nodeData_.MlacpSyncRequestsOnAllForeignPorts}
    nodeData_.EntityData.Children["mlacp-sync-requests-on-all-foreign-bundles"] = types.YChild{"MlacpSyncRequestsOnAllForeignBundles", &nodeData_.MlacpSyncRequestsOnAllForeignBundles}
    nodeData_.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData_.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", nodeData_.NodeId}
    return &(nodeData_.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YFilter = mlacpSyncRequestsOnAllForeignPorts.YFilter
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignPorts.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignBundles.EntityData.YFilter = mlacpSyncRequestsOnAllForeignBundles.YFilter
    mlacpSyncRequestsOnAllForeignBundles.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-bundles"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-bundles"
    mlacpSyncRequestsOnAllForeignBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignBundles.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignBundles.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignBundles.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignBundles.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignBundles.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData__MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-bundles"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData
// Peer device bundle mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "node-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &bundleData.MlacpTlvCounters}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "bundle-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_Protect
// Information for bundles and members that are in
// the protect database
type BundleInformation_Protect struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interfaces with information in the protect database.
    ProtectBundles BundleInformation_Protect_ProtectBundles
}

func (protect *BundleInformation_Protect) GetEntityData() *types.CommonEntityData {
    protect.EntityData.YFilter = protect.YFilter
    protect.EntityData.YangName = "protect"
    protect.EntityData.BundleName = "cisco_ios_xr"
    protect.EntityData.ParentYangName = "bundle-information"
    protect.EntityData.SegmentPath = "protect"
    protect.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protect.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protect.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protect.EntityData.Children = make(map[string]types.YChild)
    protect.EntityData.Children["protect-bundles"] = types.YChild{"ProtectBundles", &protect.ProtectBundles}
    protect.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(protect.EntityData)
}

// BundleInformation_Protect_ProtectBundles
// Bundle interfaces with information in the
// protect database
type BundleInformation_Protect_ProtectBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Protect_ProtectBundles_ProtectBundle.
    ProtectBundle []BundleInformation_Protect_ProtectBundles_ProtectBundle
}

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetEntityData() *types.CommonEntityData {
    protectBundles.EntityData.YFilter = protectBundles.YFilter
    protectBundles.EntityData.YangName = "protect-bundles"
    protectBundles.EntityData.BundleName = "cisco_ios_xr"
    protectBundles.EntityData.ParentYangName = "protect"
    protectBundles.EntityData.SegmentPath = "protect-bundles"
    protectBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protectBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protectBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protectBundles.EntityData.Children = make(map[string]types.YChild)
    protectBundles.EntityData.Children["protect-bundle"] = types.YChild{"ProtectBundle", nil}
    for i := range protectBundles.ProtectBundle {
        protectBundles.EntityData.Children[types.GetSegmentPath(&protectBundles.ProtectBundle[i])] = types.YChild{"ProtectBundle", &protectBundles.ProtectBundle[i]}
    }
    protectBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(protectBundles.EntityData)
}

// BundleInformation_Protect_ProtectBundles_ProtectBundle
// Bundle interface
type BundleInformation_Protect_ProtectBundles_ProtectBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    ProtectBundleItem BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem
}

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetEntityData() *types.CommonEntityData {
    protectBundle.EntityData.YFilter = protectBundle.YFilter
    protectBundle.EntityData.YangName = "protect-bundle"
    protectBundle.EntityData.BundleName = "cisco_ios_xr"
    protectBundle.EntityData.ParentYangName = "protect-bundles"
    protectBundle.EntityData.SegmentPath = "protect-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", protectBundle.BundleInterface) + "']"
    protectBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protectBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protectBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protectBundle.EntityData.Children = make(map[string]types.YChild)
    protectBundle.EntityData.Children["protect-bundle-item"] = types.YChild{"ProtectBundleItem", &protectBundle.ProtectBundleItem}
    protectBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    protectBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", protectBundle.BundleInterface}
    return &(protectBundle.EntityData)
}

// BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem
// Data for this item
type BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterfaceHandle interface{}

    // Whether the bundle interface is up. The type is bool.
    InterfaceUp interface{}

    // Whether there is a client protect registration on the bundle interface. The
    // type is bool.
    Registered interface{}

    // Bundle is up in the slow path. The type is bool.
    SlowPathUp interface{}

    // Whether the last protect trigger originated in the slow path. The type is
    // bool.
    SlowPathTrigger interface{}

    // Minimum active links threshold. The type is interface{} with range:
    // 0..4294967295.
    MinimumActiveLinks interface{}

    // Minimum bandwidth threshold. The type is interface{} with range:
    // 0..4294967295.
    MinimumBandwidth interface{}

    // Scope of the last event that impacted the bundle. The type is BmdBagTarget.
    EventType interface{}

    // Last event for the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Information about the members. The type is slice of
    // BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo.
    MemberInfo []BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo
}

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetEntityData() *types.CommonEntityData {
    protectBundleItem.EntityData.YFilter = protectBundleItem.YFilter
    protectBundleItem.EntityData.YangName = "protect-bundle-item"
    protectBundleItem.EntityData.BundleName = "cisco_ios_xr"
    protectBundleItem.EntityData.ParentYangName = "protect-bundle"
    protectBundleItem.EntityData.SegmentPath = "protect-bundle-item"
    protectBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protectBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protectBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protectBundleItem.EntityData.Children = make(map[string]types.YChild)
    protectBundleItem.EntityData.Children["member-info"] = types.YChild{"MemberInfo", nil}
    for i := range protectBundleItem.MemberInfo {
        protectBundleItem.EntityData.Children[types.GetSegmentPath(&protectBundleItem.MemberInfo[i])] = types.YChild{"MemberInfo", &protectBundleItem.MemberInfo[i]}
    }
    protectBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    protectBundleItem.EntityData.Leafs["bundle-interface-handle"] = types.YLeaf{"BundleInterfaceHandle", protectBundleItem.BundleInterfaceHandle}
    protectBundleItem.EntityData.Leafs["interface-up"] = types.YLeaf{"InterfaceUp", protectBundleItem.InterfaceUp}
    protectBundleItem.EntityData.Leafs["registered"] = types.YLeaf{"Registered", protectBundleItem.Registered}
    protectBundleItem.EntityData.Leafs["slow-path-up"] = types.YLeaf{"SlowPathUp", protectBundleItem.SlowPathUp}
    protectBundleItem.EntityData.Leafs["slow-path-trigger"] = types.YLeaf{"SlowPathTrigger", protectBundleItem.SlowPathTrigger}
    protectBundleItem.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", protectBundleItem.MinimumActiveLinks}
    protectBundleItem.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", protectBundleItem.MinimumBandwidth}
    protectBundleItem.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", protectBundleItem.EventType}
    protectBundleItem.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", protectBundleItem.TimeStamp}
    return &(protectBundleItem.EntityData)
}

// BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo
// Information about the members
type BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Member's bandwidth. The type is interface{} with range: 0..4294967295.
    Bandwidth interface{}

    // Member's node ID. The type is string with pattern:
    // b'([a-zA-Z0-9_]*\\d+/){1,2}([a-zA-Z0-9_]*\\d+)'.
    Node interface{}

    // Member is active within its bundle. The type is bool.
    Active interface{}

    // Received a notification on the member. The type is bool.
    NotificationReceived interface{}

    // Member is up in the slow path. The type is bool.
    SlowPathUp interface{}

    // Last event for the member. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}
}

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetEntityData() *types.CommonEntityData {
    memberInfo.EntityData.YFilter = memberInfo.YFilter
    memberInfo.EntityData.YangName = "member-info"
    memberInfo.EntityData.BundleName = "cisco_ios_xr"
    memberInfo.EntityData.ParentYangName = "protect-bundle-item"
    memberInfo.EntityData.SegmentPath = "member-info"
    memberInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberInfo.EntityData.Children = make(map[string]types.YChild)
    memberInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberInfo.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", memberInfo.InterfaceHandle}
    memberInfo.EntityData.Leafs["underlying-link-id"] = types.YLeaf{"UnderlyingLinkId", memberInfo.UnderlyingLinkId}
    memberInfo.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", memberInfo.LinkOrderNumber}
    memberInfo.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", memberInfo.Bandwidth}
    memberInfo.EntityData.Leafs["node"] = types.YLeaf{"Node", memberInfo.Node}
    memberInfo.EntityData.Leafs["active"] = types.YLeaf{"Active", memberInfo.Active}
    memberInfo.EntityData.Leafs["notification-received"] = types.YLeaf{"NotificationReceived", memberInfo.NotificationReceived}
    memberInfo.EntityData.Leafs["slow-path-up"] = types.YLeaf{"SlowPathUp", memberInfo.SlowPathUp}
    memberInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberInfo.TimeStamp}
    return &(memberInfo.EntityData)
}

// BundleInformation_MlacpBrief
// mLACP Information for Interchassis Groups and
// bundles
type BundleInformation_MlacpBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interfaces with brief mLACP information.
    MlacpBundleBriefs BundleInformation_MlacpBrief_MlacpBundleBriefs

    // ICCP Groups with brief mLACP information.
    MlacpBriefIccpGroups BundleInformation_MlacpBrief_MlacpBriefIccpGroups
}

func (mlacpBrief *BundleInformation_MlacpBrief) GetEntityData() *types.CommonEntityData {
    mlacpBrief.EntityData.YFilter = mlacpBrief.YFilter
    mlacpBrief.EntityData.YangName = "mlacp-brief"
    mlacpBrief.EntityData.BundleName = "cisco_ios_xr"
    mlacpBrief.EntityData.ParentYangName = "bundle-information"
    mlacpBrief.EntityData.SegmentPath = "mlacp-brief"
    mlacpBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBrief.EntityData.Children = make(map[string]types.YChild)
    mlacpBrief.EntityData.Children["mlacp-bundle-briefs"] = types.YChild{"MlacpBundleBriefs", &mlacpBrief.MlacpBundleBriefs}
    mlacpBrief.EntityData.Children["mlacp-brief-iccp-groups"] = types.YChild{"MlacpBriefIccpGroups", &mlacpBrief.MlacpBriefIccpGroups}
    mlacpBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBrief.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs
// Bundle interfaces with brief mLACP information
type BundleInformation_MlacpBrief_MlacpBundleBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief.
    MlacpBundleBrief []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief
}

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetEntityData() *types.CommonEntityData {
    mlacpBundleBriefs.EntityData.YFilter = mlacpBundleBriefs.YFilter
    mlacpBundleBriefs.EntityData.YangName = "mlacp-bundle-briefs"
    mlacpBundleBriefs.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleBriefs.EntityData.ParentYangName = "mlacp-brief"
    mlacpBundleBriefs.EntityData.SegmentPath = "mlacp-bundle-briefs"
    mlacpBundleBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleBriefs.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleBriefs.EntityData.Children["mlacp-bundle-brief"] = types.YChild{"MlacpBundleBrief", nil}
    for i := range mlacpBundleBriefs.MlacpBundleBrief {
        mlacpBundleBriefs.EntityData.Children[types.GetSegmentPath(&mlacpBundleBriefs.MlacpBundleBrief[i])] = types.YChild{"MlacpBundleBrief", &mlacpBundleBriefs.MlacpBundleBrief[i]}
    }
    mlacpBundleBriefs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBundleBriefs.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief
// Bundle interface
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    MlacpBundleItemBrief BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief
}

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetEntityData() *types.CommonEntityData {
    mlacpBundleBrief.EntityData.YFilter = mlacpBundleBrief.YFilter
    mlacpBundleBrief.EntityData.YangName = "mlacp-bundle-brief"
    mlacpBundleBrief.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleBrief.EntityData.ParentYangName = "mlacp-bundle-briefs"
    mlacpBundleBrief.EntityData.SegmentPath = "mlacp-bundle-brief" + "[bundle-interface='" + fmt.Sprintf("%v", mlacpBundleBrief.BundleInterface) + "']"
    mlacpBundleBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleBrief.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleBrief.EntityData.Children["mlacp-bundle-item-brief"] = types.YChild{"MlacpBundleItemBrief", &mlacpBundleBrief.MlacpBundleItemBrief}
    mlacpBundleBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpBundleBrief.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", mlacpBundleBrief.BundleInterface}
    return &(mlacpBundleBrief.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief
// Data for this item
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP data for multiple ICCP Groups. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData.
    MlacpData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData
}

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetEntityData() *types.CommonEntityData {
    mlacpBundleItemBrief.EntityData.YFilter = mlacpBundleItemBrief.YFilter
    mlacpBundleItemBrief.EntityData.YangName = "mlacp-bundle-item-brief"
    mlacpBundleItemBrief.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleItemBrief.EntityData.ParentYangName = "mlacp-bundle-brief"
    mlacpBundleItemBrief.EntityData.SegmentPath = "mlacp-bundle-item-brief"
    mlacpBundleItemBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleItemBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleItemBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleItemBrief.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleItemBrief.EntityData.Children["mlacp-data"] = types.YChild{"MlacpData", nil}
    for i := range mlacpBundleItemBrief.MlacpData {
        mlacpBundleItemBrief.EntityData.Children[types.GetSegmentPath(&mlacpBundleItemBrief.MlacpData[i])] = types.YChild{"MlacpData", &mlacpBundleItemBrief.MlacpData[i]}
    }
    mlacpBundleItemBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBundleItemBrief.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData
// mLACP data for multiple ICCP Groups
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData.
    BundleData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData
}

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetEntityData() *types.CommonEntityData {
    mlacpData.EntityData.YFilter = mlacpData.YFilter
    mlacpData.EntityData.YangName = "mlacp-data"
    mlacpData.EntityData.BundleName = "cisco_ios_xr"
    mlacpData.EntityData.ParentYangName = "mlacp-bundle-item-brief"
    mlacpData.EntityData.SegmentPath = "mlacp-data"
    mlacpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpData.EntityData.Children = make(map[string]types.YChild)
    mlacpData.EntityData.Children["iccp-group-data"] = types.YChild{"IccpGroupData", &mlacpData.IccpGroupData}
    mlacpData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range mlacpData.BundleData {
        mlacpData.EntityData.Children[types.GetSegmentPath(&mlacpData.BundleData[i])] = types.YChild{"BundleData", &mlacpData.BundleData[i]}
    }
    mlacpData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData
// ICCP Group information
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData.
    NodeData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetEntityData() *types.CommonEntityData {
    iccpGroupData.EntityData.YFilter = iccpGroupData.YFilter
    iccpGroupData.EntityData.YangName = "iccp-group-data"
    iccpGroupData.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupData.EntityData.ParentYangName = "mlacp-data"
    iccpGroupData.EntityData.SegmentPath = "iccp-group-data"
    iccpGroupData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupData.EntityData.Children = make(map[string]types.YChild)
    iccpGroupData.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range iccpGroupData.NodeData {
        iccpGroupData.EntityData.Children[types.GetSegmentPath(&iccpGroupData.NodeData[i])] = types.YChild{"NodeData", &iccpGroupData.NodeData[i]}
    }
    iccpGroupData.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupData.IccpGroupId}
    iccpGroupData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", iccpGroupData.Singleton}
    iccpGroupData.EntityData.Leafs["connect-timer-running"] = types.YLeaf{"ConnectTimerRunning", iccpGroupData.ConnectTimerRunning}
    return &(iccpGroupData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "iccp-group-data"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["system-id"] = types.YChild{"SystemId", &nodeData.SystemId}
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", nodeData.MlacpNodeId}
    nodeData.EntityData.Leafs["ldp-id"] = types.YLeaf{"LdpId", nodeData.LdpId}
    nodeData.EntityData.Leafs["version-number"] = types.YLeaf{"VersionNumber", nodeData.VersionNumber}
    nodeData.EntityData.Leafs["node-state"] = types.YLeaf{"NodeState", nodeData.NodeState}
    nodeData.EntityData.Leafs["iccp-group-state"] = types.YLeaf{"IccpGroupState", nodeData.IccpGroupState}
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetEntityData() *types.CommonEntityData {
    systemId.EntityData.YFilter = systemId.YFilter
    systemId.EntityData.YangName = "system-id"
    systemId.EntityData.BundleName = "cisco_ios_xr"
    systemId.EntityData.ParentYangName = "node-data"
    systemId.EntityData.SegmentPath = "system-id"
    systemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId.EntityData.Children = make(map[string]types.YChild)
    systemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &systemId.SystemMacAddr}
    systemId.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", systemId.SystemPrio}
    return &(systemId.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData
// Bundle information
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "mlacp-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-bundle-data"] = types.YChild{"MlacpBundleData", nil}
    for i := range bundleData.MlacpBundleData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpBundleData[i])] = types.YChild{"MlacpBundleData", &bundleData.MlacpBundleData[i]}
    }
    bundleData.EntityData.Children["mlacp-member-data"] = types.YChild{"MlacpMemberData", nil}
    for i := range bundleData.MlacpMemberData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpMemberData[i])] = types.YChild{"MlacpMemberData", &bundleData.MlacpMemberData[i]}
    }
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-interface-key"] = types.YLeaf{"BundleInterfaceKey", bundleData.BundleInterfaceKey}
    bundleData.EntityData.Leafs["media-type"] = types.YLeaf{"MediaType", bundleData.MediaType}
    bundleData.EntityData.Leafs["redundancy-object-id"] = types.YLeaf{"RedundancyObjectId", bundleData.RedundancyObjectId}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetEntityData() *types.CommonEntityData {
    mlacpBundleData.EntityData.YFilter = mlacpBundleData.YFilter
    mlacpBundleData.EntityData.YangName = "mlacp-bundle-data"
    mlacpBundleData.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleData.EntityData.ParentYangName = "bundle-data"
    mlacpBundleData.EntityData.SegmentPath = "mlacp-bundle-data"
    mlacpBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleData.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &mlacpBundleData.MacAddress}
    mlacpBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpBundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", mlacpBundleData.BundleName}
    mlacpBundleData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpBundleData.MlacpNodeId}
    mlacpBundleData.EntityData.Leafs["aggregator-id"] = types.YLeaf{"AggregatorId", mlacpBundleData.AggregatorId}
    mlacpBundleData.EntityData.Leafs["bundle-state"] = types.YLeaf{"BundleState", mlacpBundleData.BundleState}
    mlacpBundleData.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", mlacpBundleData.PortPriority}
    return &(mlacpBundleData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "mlacp-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetEntityData() *types.CommonEntityData {
    mlacpMemberData.EntityData.YFilter = mlacpMemberData.YFilter
    mlacpMemberData.EntityData.YangName = "mlacp-member-data"
    mlacpMemberData.EntityData.BundleName = "cisco_ios_xr"
    mlacpMemberData.EntityData.ParentYangName = "bundle-data"
    mlacpMemberData.EntityData.SegmentPath = "mlacp-member-data"
    mlacpMemberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpMemberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpMemberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpMemberData.EntityData.Children = make(map[string]types.YChild)
    mlacpMemberData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpMemberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", mlacpMemberData.PortName}
    mlacpMemberData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", mlacpMemberData.InterfaceHandle}
    mlacpMemberData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpMemberData.MlacpNodeId}
    mlacpMemberData.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", mlacpMemberData.PortNumber}
    mlacpMemberData.EntityData.Leafs["operational-priority"] = types.YLeaf{"OperationalPriority", mlacpMemberData.OperationalPriority}
    mlacpMemberData.EntityData.Leafs["configured-priority"] = types.YLeaf{"ConfiguredPriority", mlacpMemberData.ConfiguredPriority}
    mlacpMemberData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", mlacpMemberData.MemberState}
    return &(mlacpMemberData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups
// ICCP Groups with brief mLACP information
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup.
    MlacpBriefIccpGroup []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup
}

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetEntityData() *types.CommonEntityData {
    mlacpBriefIccpGroups.EntityData.YFilter = mlacpBriefIccpGroups.YFilter
    mlacpBriefIccpGroups.EntityData.YangName = "mlacp-brief-iccp-groups"
    mlacpBriefIccpGroups.EntityData.BundleName = "cisco_ios_xr"
    mlacpBriefIccpGroups.EntityData.ParentYangName = "mlacp-brief"
    mlacpBriefIccpGroups.EntityData.SegmentPath = "mlacp-brief-iccp-groups"
    mlacpBriefIccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBriefIccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBriefIccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBriefIccpGroups.EntityData.Children = make(map[string]types.YChild)
    mlacpBriefIccpGroups.EntityData.Children["mlacp-brief-iccp-group"] = types.YChild{"MlacpBriefIccpGroup", nil}
    for i := range mlacpBriefIccpGroups.MlacpBriefIccpGroup {
        mlacpBriefIccpGroups.EntityData.Children[types.GetSegmentPath(&mlacpBriefIccpGroups.MlacpBriefIccpGroup[i])] = types.YChild{"MlacpBriefIccpGroup", &mlacpBriefIccpGroups.MlacpBriefIccpGroup[i]}
    }
    mlacpBriefIccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBriefIccpGroups.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup
// ICCP Group ID
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    MlacpBriefIccpGroupItem BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem
}

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetEntityData() *types.CommonEntityData {
    mlacpBriefIccpGroup.EntityData.YFilter = mlacpBriefIccpGroup.YFilter
    mlacpBriefIccpGroup.EntityData.YangName = "mlacp-brief-iccp-group"
    mlacpBriefIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    mlacpBriefIccpGroup.EntityData.ParentYangName = "mlacp-brief-iccp-groups"
    mlacpBriefIccpGroup.EntityData.SegmentPath = "mlacp-brief-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", mlacpBriefIccpGroup.IccpGroup) + "']"
    mlacpBriefIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBriefIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBriefIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBriefIccpGroup.EntityData.Children = make(map[string]types.YChild)
    mlacpBriefIccpGroup.EntityData.Children["mlacp-brief-iccp-group-item"] = types.YChild{"MlacpBriefIccpGroupItem", &mlacpBriefIccpGroup.MlacpBriefIccpGroupItem}
    mlacpBriefIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpBriefIccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", mlacpBriefIccpGroup.IccpGroup}
    return &(mlacpBriefIccpGroup.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem
// Data for this item
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData.
    BundleData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData
}

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetEntityData() *types.CommonEntityData {
    mlacpBriefIccpGroupItem.EntityData.YFilter = mlacpBriefIccpGroupItem.YFilter
    mlacpBriefIccpGroupItem.EntityData.YangName = "mlacp-brief-iccp-group-item"
    mlacpBriefIccpGroupItem.EntityData.BundleName = "cisco_ios_xr"
    mlacpBriefIccpGroupItem.EntityData.ParentYangName = "mlacp-brief-iccp-group"
    mlacpBriefIccpGroupItem.EntityData.SegmentPath = "mlacp-brief-iccp-group-item"
    mlacpBriefIccpGroupItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBriefIccpGroupItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBriefIccpGroupItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBriefIccpGroupItem.EntityData.Children = make(map[string]types.YChild)
    mlacpBriefIccpGroupItem.EntityData.Children["iccp-group-data"] = types.YChild{"IccpGroupData", &mlacpBriefIccpGroupItem.IccpGroupData}
    mlacpBriefIccpGroupItem.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range mlacpBriefIccpGroupItem.BundleData {
        mlacpBriefIccpGroupItem.EntityData.Children[types.GetSegmentPath(&mlacpBriefIccpGroupItem.BundleData[i])] = types.YChild{"BundleData", &mlacpBriefIccpGroupItem.BundleData[i]}
    }
    mlacpBriefIccpGroupItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBriefIccpGroupItem.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData
// ICCP Group information
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData.
    NodeData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetEntityData() *types.CommonEntityData {
    iccpGroupData.EntityData.YFilter = iccpGroupData.YFilter
    iccpGroupData.EntityData.YangName = "iccp-group-data"
    iccpGroupData.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupData.EntityData.ParentYangName = "mlacp-brief-iccp-group-item"
    iccpGroupData.EntityData.SegmentPath = "iccp-group-data"
    iccpGroupData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupData.EntityData.Children = make(map[string]types.YChild)
    iccpGroupData.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range iccpGroupData.NodeData {
        iccpGroupData.EntityData.Children[types.GetSegmentPath(&iccpGroupData.NodeData[i])] = types.YChild{"NodeData", &iccpGroupData.NodeData[i]}
    }
    iccpGroupData.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupData.IccpGroupId}
    iccpGroupData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", iccpGroupData.Singleton}
    iccpGroupData.EntityData.Leafs["connect-timer-running"] = types.YLeaf{"ConnectTimerRunning", iccpGroupData.ConnectTimerRunning}
    return &(iccpGroupData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "iccp-group-data"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["system-id"] = types.YChild{"SystemId", &nodeData.SystemId}
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", nodeData.MlacpNodeId}
    nodeData.EntityData.Leafs["ldp-id"] = types.YLeaf{"LdpId", nodeData.LdpId}
    nodeData.EntityData.Leafs["version-number"] = types.YLeaf{"VersionNumber", nodeData.VersionNumber}
    nodeData.EntityData.Leafs["node-state"] = types.YLeaf{"NodeState", nodeData.NodeState}
    nodeData.EntityData.Leafs["iccp-group-state"] = types.YLeaf{"IccpGroupState", nodeData.IccpGroupState}
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetEntityData() *types.CommonEntityData {
    systemId.EntityData.YFilter = systemId.YFilter
    systemId.EntityData.YangName = "system-id"
    systemId.EntityData.BundleName = "cisco_ios_xr"
    systemId.EntityData.ParentYangName = "node-data"
    systemId.EntityData.SegmentPath = "system-id"
    systemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId.EntityData.Children = make(map[string]types.YChild)
    systemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &systemId.SystemMacAddr}
    systemId.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", systemId.SystemPrio}
    return &(systemId.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData
// Bundle information
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "mlacp-brief-iccp-group-item"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-bundle-data"] = types.YChild{"MlacpBundleData", nil}
    for i := range bundleData.MlacpBundleData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpBundleData[i])] = types.YChild{"MlacpBundleData", &bundleData.MlacpBundleData[i]}
    }
    bundleData.EntityData.Children["mlacp-member-data"] = types.YChild{"MlacpMemberData", nil}
    for i := range bundleData.MlacpMemberData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpMemberData[i])] = types.YChild{"MlacpMemberData", &bundleData.MlacpMemberData[i]}
    }
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-interface-key"] = types.YLeaf{"BundleInterfaceKey", bundleData.BundleInterfaceKey}
    bundleData.EntityData.Leafs["media-type"] = types.YLeaf{"MediaType", bundleData.MediaType}
    bundleData.EntityData.Leafs["redundancy-object-id"] = types.YLeaf{"RedundancyObjectId", bundleData.RedundancyObjectId}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetEntityData() *types.CommonEntityData {
    mlacpBundleData.EntityData.YFilter = mlacpBundleData.YFilter
    mlacpBundleData.EntityData.YangName = "mlacp-bundle-data"
    mlacpBundleData.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleData.EntityData.ParentYangName = "bundle-data"
    mlacpBundleData.EntityData.SegmentPath = "mlacp-bundle-data"
    mlacpBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleData.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &mlacpBundleData.MacAddress}
    mlacpBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpBundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", mlacpBundleData.BundleName}
    mlacpBundleData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpBundleData.MlacpNodeId}
    mlacpBundleData.EntityData.Leafs["aggregator-id"] = types.YLeaf{"AggregatorId", mlacpBundleData.AggregatorId}
    mlacpBundleData.EntityData.Leafs["bundle-state"] = types.YLeaf{"BundleState", mlacpBundleData.BundleState}
    mlacpBundleData.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", mlacpBundleData.PortPriority}
    return &(mlacpBundleData.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "mlacp-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetEntityData() *types.CommonEntityData {
    mlacpMemberData.EntityData.YFilter = mlacpMemberData.YFilter
    mlacpMemberData.EntityData.YangName = "mlacp-member-data"
    mlacpMemberData.EntityData.BundleName = "cisco_ios_xr"
    mlacpMemberData.EntityData.ParentYangName = "bundle-data"
    mlacpMemberData.EntityData.SegmentPath = "mlacp-member-data"
    mlacpMemberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpMemberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpMemberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpMemberData.EntityData.Children = make(map[string]types.YChild)
    mlacpMemberData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpMemberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", mlacpMemberData.PortName}
    mlacpMemberData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", mlacpMemberData.InterfaceHandle}
    mlacpMemberData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpMemberData.MlacpNodeId}
    mlacpMemberData.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", mlacpMemberData.PortNumber}
    mlacpMemberData.EntityData.Leafs["operational-priority"] = types.YLeaf{"OperationalPriority", mlacpMemberData.OperationalPriority}
    mlacpMemberData.EntityData.Leafs["configured-priority"] = types.YLeaf{"ConfiguredPriority", mlacpMemberData.ConfiguredPriority}
    mlacpMemberData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", mlacpMemberData.MemberState}
    return &(mlacpMemberData.EntityData)
}

// BundleInformation_Mlacp
// mLACP Information for Interchassis Groups and
// bundles
type BundleInformation_Mlacp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interfaces with mLACP information.
    MlacpBundles BundleInformation_Mlacp_MlacpBundles

    // ICCP Groups with mLACP information.
    MlacpIccpGroups BundleInformation_Mlacp_MlacpIccpGroups
}

func (mlacp *BundleInformation_Mlacp) GetEntityData() *types.CommonEntityData {
    mlacp.EntityData.YFilter = mlacp.YFilter
    mlacp.EntityData.YangName = "mlacp"
    mlacp.EntityData.BundleName = "cisco_ios_xr"
    mlacp.EntityData.ParentYangName = "bundle-information"
    mlacp.EntityData.SegmentPath = "mlacp"
    mlacp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacp.EntityData.Children = make(map[string]types.YChild)
    mlacp.EntityData.Children["mlacp-bundles"] = types.YChild{"MlacpBundles", &mlacp.MlacpBundles}
    mlacp.EntityData.Children["mlacp-iccp-groups"] = types.YChild{"MlacpIccpGroups", &mlacp.MlacpIccpGroups}
    mlacp.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacp.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles
// Bundle interfaces with mLACP information
type BundleInformation_Mlacp_MlacpBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle.
    MlacpBundle []BundleInformation_Mlacp_MlacpBundles_MlacpBundle
}

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetEntityData() *types.CommonEntityData {
    mlacpBundles.EntityData.YFilter = mlacpBundles.YFilter
    mlacpBundles.EntityData.YangName = "mlacp-bundles"
    mlacpBundles.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundles.EntityData.ParentYangName = "mlacp"
    mlacpBundles.EntityData.SegmentPath = "mlacp-bundles"
    mlacpBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundles.EntityData.Children = make(map[string]types.YChild)
    mlacpBundles.EntityData.Children["mlacp-bundle"] = types.YChild{"MlacpBundle", nil}
    for i := range mlacpBundles.MlacpBundle {
        mlacpBundles.EntityData.Children[types.GetSegmentPath(&mlacpBundles.MlacpBundle[i])] = types.YChild{"MlacpBundle", &mlacpBundles.MlacpBundle[i]}
    }
    mlacpBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBundles.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle
// Bundle interface
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    MlacpBundleItem BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem
}

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetEntityData() *types.CommonEntityData {
    mlacpBundle.EntityData.YFilter = mlacpBundle.YFilter
    mlacpBundle.EntityData.YangName = "mlacp-bundle"
    mlacpBundle.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundle.EntityData.ParentYangName = "mlacp-bundles"
    mlacpBundle.EntityData.SegmentPath = "mlacp-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", mlacpBundle.BundleInterface) + "']"
    mlacpBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundle.EntityData.Children = make(map[string]types.YChild)
    mlacpBundle.EntityData.Children["mlacp-bundle-item"] = types.YChild{"MlacpBundleItem", &mlacpBundle.MlacpBundleItem}
    mlacpBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", mlacpBundle.BundleInterface}
    return &(mlacpBundle.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem
// Data for this item
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP data for multiple ICCP Groups. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData.
    MlacpData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData
}

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetEntityData() *types.CommonEntityData {
    mlacpBundleItem.EntityData.YFilter = mlacpBundleItem.YFilter
    mlacpBundleItem.EntityData.YangName = "mlacp-bundle-item"
    mlacpBundleItem.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleItem.EntityData.ParentYangName = "mlacp-bundle"
    mlacpBundleItem.EntityData.SegmentPath = "mlacp-bundle-item"
    mlacpBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleItem.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleItem.EntityData.Children["mlacp-data"] = types.YChild{"MlacpData", nil}
    for i := range mlacpBundleItem.MlacpData {
        mlacpBundleItem.EntityData.Children[types.GetSegmentPath(&mlacpBundleItem.MlacpData[i])] = types.YChild{"MlacpData", &mlacpBundleItem.MlacpData[i]}
    }
    mlacpBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpBundleItem.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData
// mLACP data for multiple ICCP Groups
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData.
    BundleData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData
}

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetEntityData() *types.CommonEntityData {
    mlacpData.EntityData.YFilter = mlacpData.YFilter
    mlacpData.EntityData.YangName = "mlacp-data"
    mlacpData.EntityData.BundleName = "cisco_ios_xr"
    mlacpData.EntityData.ParentYangName = "mlacp-bundle-item"
    mlacpData.EntityData.SegmentPath = "mlacp-data"
    mlacpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpData.EntityData.Children = make(map[string]types.YChild)
    mlacpData.EntityData.Children["iccp-group-data"] = types.YChild{"IccpGroupData", &mlacpData.IccpGroupData}
    mlacpData.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range mlacpData.BundleData {
        mlacpData.EntityData.Children[types.GetSegmentPath(&mlacpData.BundleData[i])] = types.YChild{"BundleData", &mlacpData.BundleData[i]}
    }
    mlacpData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpData.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData
// ICCP Group information
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData.
    NodeData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetEntityData() *types.CommonEntityData {
    iccpGroupData.EntityData.YFilter = iccpGroupData.YFilter
    iccpGroupData.EntityData.YangName = "iccp-group-data"
    iccpGroupData.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupData.EntityData.ParentYangName = "mlacp-data"
    iccpGroupData.EntityData.SegmentPath = "iccp-group-data"
    iccpGroupData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupData.EntityData.Children = make(map[string]types.YChild)
    iccpGroupData.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range iccpGroupData.NodeData {
        iccpGroupData.EntityData.Children[types.GetSegmentPath(&iccpGroupData.NodeData[i])] = types.YChild{"NodeData", &iccpGroupData.NodeData[i]}
    }
    iccpGroupData.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupData.IccpGroupId}
    iccpGroupData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", iccpGroupData.Singleton}
    iccpGroupData.EntityData.Leafs["connect-timer-running"] = types.YLeaf{"ConnectTimerRunning", iccpGroupData.ConnectTimerRunning}
    return &(iccpGroupData.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "iccp-group-data"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["system-id"] = types.YChild{"SystemId", &nodeData.SystemId}
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", nodeData.MlacpNodeId}
    nodeData.EntityData.Leafs["ldp-id"] = types.YLeaf{"LdpId", nodeData.LdpId}
    nodeData.EntityData.Leafs["version-number"] = types.YLeaf{"VersionNumber", nodeData.VersionNumber}
    nodeData.EntityData.Leafs["node-state"] = types.YLeaf{"NodeState", nodeData.NodeState}
    nodeData.EntityData.Leafs["iccp-group-state"] = types.YLeaf{"IccpGroupState", nodeData.IccpGroupState}
    return &(nodeData.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetEntityData() *types.CommonEntityData {
    systemId.EntityData.YFilter = systemId.YFilter
    systemId.EntityData.YangName = "system-id"
    systemId.EntityData.BundleName = "cisco_ios_xr"
    systemId.EntityData.ParentYangName = "node-data"
    systemId.EntityData.SegmentPath = "system-id"
    systemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId.EntityData.Children = make(map[string]types.YChild)
    systemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &systemId.SystemMacAddr}
    systemId.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", systemId.SystemPrio}
    return &(systemId.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData
// Bundle information
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "mlacp-data"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-bundle-data"] = types.YChild{"MlacpBundleData", nil}
    for i := range bundleData.MlacpBundleData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpBundleData[i])] = types.YChild{"MlacpBundleData", &bundleData.MlacpBundleData[i]}
    }
    bundleData.EntityData.Children["mlacp-member-data"] = types.YChild{"MlacpMemberData", nil}
    for i := range bundleData.MlacpMemberData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpMemberData[i])] = types.YChild{"MlacpMemberData", &bundleData.MlacpMemberData[i]}
    }
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-interface-key"] = types.YLeaf{"BundleInterfaceKey", bundleData.BundleInterfaceKey}
    bundleData.EntityData.Leafs["media-type"] = types.YLeaf{"MediaType", bundleData.MediaType}
    bundleData.EntityData.Leafs["redundancy-object-id"] = types.YLeaf{"RedundancyObjectId", bundleData.RedundancyObjectId}
    return &(bundleData.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetEntityData() *types.CommonEntityData {
    mlacpBundleData.EntityData.YFilter = mlacpBundleData.YFilter
    mlacpBundleData.EntityData.YangName = "mlacp-bundle-data"
    mlacpBundleData.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleData.EntityData.ParentYangName = "bundle-data"
    mlacpBundleData.EntityData.SegmentPath = "mlacp-bundle-data"
    mlacpBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleData.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &mlacpBundleData.MacAddress}
    mlacpBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpBundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", mlacpBundleData.BundleName}
    mlacpBundleData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpBundleData.MlacpNodeId}
    mlacpBundleData.EntityData.Leafs["aggregator-id"] = types.YLeaf{"AggregatorId", mlacpBundleData.AggregatorId}
    mlacpBundleData.EntityData.Leafs["bundle-state"] = types.YLeaf{"BundleState", mlacpBundleData.BundleState}
    mlacpBundleData.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", mlacpBundleData.PortPriority}
    return &(mlacpBundleData.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "mlacp-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetEntityData() *types.CommonEntityData {
    mlacpMemberData.EntityData.YFilter = mlacpMemberData.YFilter
    mlacpMemberData.EntityData.YangName = "mlacp-member-data"
    mlacpMemberData.EntityData.BundleName = "cisco_ios_xr"
    mlacpMemberData.EntityData.ParentYangName = "bundle-data"
    mlacpMemberData.EntityData.SegmentPath = "mlacp-member-data"
    mlacpMemberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpMemberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpMemberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpMemberData.EntityData.Children = make(map[string]types.YChild)
    mlacpMemberData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpMemberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", mlacpMemberData.PortName}
    mlacpMemberData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", mlacpMemberData.InterfaceHandle}
    mlacpMemberData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpMemberData.MlacpNodeId}
    mlacpMemberData.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", mlacpMemberData.PortNumber}
    mlacpMemberData.EntityData.Leafs["operational-priority"] = types.YLeaf{"OperationalPriority", mlacpMemberData.OperationalPriority}
    mlacpMemberData.EntityData.Leafs["configured-priority"] = types.YLeaf{"ConfiguredPriority", mlacpMemberData.ConfiguredPriority}
    mlacpMemberData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", mlacpMemberData.MemberState}
    return &(mlacpMemberData.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups
// ICCP Groups with mLACP information
type BundleInformation_Mlacp_MlacpIccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup.
    MlacpIccpGroup []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup
}

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetEntityData() *types.CommonEntityData {
    mlacpIccpGroups.EntityData.YFilter = mlacpIccpGroups.YFilter
    mlacpIccpGroups.EntityData.YangName = "mlacp-iccp-groups"
    mlacpIccpGroups.EntityData.BundleName = "cisco_ios_xr"
    mlacpIccpGroups.EntityData.ParentYangName = "mlacp"
    mlacpIccpGroups.EntityData.SegmentPath = "mlacp-iccp-groups"
    mlacpIccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpIccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpIccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpIccpGroups.EntityData.Children = make(map[string]types.YChild)
    mlacpIccpGroups.EntityData.Children["mlacp-iccp-group"] = types.YChild{"MlacpIccpGroup", nil}
    for i := range mlacpIccpGroups.MlacpIccpGroup {
        mlacpIccpGroups.EntityData.Children[types.GetSegmentPath(&mlacpIccpGroups.MlacpIccpGroup[i])] = types.YChild{"MlacpIccpGroup", &mlacpIccpGroups.MlacpIccpGroup[i]}
    }
    mlacpIccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpIccpGroups.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup
// ICCP Group ID
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    MlacpIccpGroupItem BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem
}

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetEntityData() *types.CommonEntityData {
    mlacpIccpGroup.EntityData.YFilter = mlacpIccpGroup.YFilter
    mlacpIccpGroup.EntityData.YangName = "mlacp-iccp-group"
    mlacpIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    mlacpIccpGroup.EntityData.ParentYangName = "mlacp-iccp-groups"
    mlacpIccpGroup.EntityData.SegmentPath = "mlacp-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", mlacpIccpGroup.IccpGroup) + "']"
    mlacpIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpIccpGroup.EntityData.Children = make(map[string]types.YChild)
    mlacpIccpGroup.EntityData.Children["mlacp-iccp-group-item"] = types.YChild{"MlacpIccpGroupItem", &mlacpIccpGroup.MlacpIccpGroupItem}
    mlacpIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpIccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", mlacpIccpGroup.IccpGroup}
    return &(mlacpIccpGroup.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem
// Data for this item
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData.
    BundleData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData
}

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetEntityData() *types.CommonEntityData {
    mlacpIccpGroupItem.EntityData.YFilter = mlacpIccpGroupItem.YFilter
    mlacpIccpGroupItem.EntityData.YangName = "mlacp-iccp-group-item"
    mlacpIccpGroupItem.EntityData.BundleName = "cisco_ios_xr"
    mlacpIccpGroupItem.EntityData.ParentYangName = "mlacp-iccp-group"
    mlacpIccpGroupItem.EntityData.SegmentPath = "mlacp-iccp-group-item"
    mlacpIccpGroupItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpIccpGroupItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpIccpGroupItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpIccpGroupItem.EntityData.Children = make(map[string]types.YChild)
    mlacpIccpGroupItem.EntityData.Children["iccp-group-data"] = types.YChild{"IccpGroupData", &mlacpIccpGroupItem.IccpGroupData}
    mlacpIccpGroupItem.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range mlacpIccpGroupItem.BundleData {
        mlacpIccpGroupItem.EntityData.Children[types.GetSegmentPath(&mlacpIccpGroupItem.BundleData[i])] = types.YChild{"BundleData", &mlacpIccpGroupItem.BundleData[i]}
    }
    mlacpIccpGroupItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpIccpGroupItem.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData
// ICCP Group information
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData.
    NodeData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetEntityData() *types.CommonEntityData {
    iccpGroupData.EntityData.YFilter = iccpGroupData.YFilter
    iccpGroupData.EntityData.YangName = "iccp-group-data"
    iccpGroupData.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupData.EntityData.ParentYangName = "mlacp-iccp-group-item"
    iccpGroupData.EntityData.SegmentPath = "iccp-group-data"
    iccpGroupData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupData.EntityData.Children = make(map[string]types.YChild)
    iccpGroupData.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range iccpGroupData.NodeData {
        iccpGroupData.EntityData.Children[types.GetSegmentPath(&iccpGroupData.NodeData[i])] = types.YChild{"NodeData", &iccpGroupData.NodeData[i]}
    }
    iccpGroupData.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupData.IccpGroupId}
    iccpGroupData.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", iccpGroupData.Singleton}
    iccpGroupData.EntityData.Leafs["connect-timer-running"] = types.YLeaf{"ConnectTimerRunning", iccpGroupData.ConnectTimerRunning}
    return &(iccpGroupData.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "iccp-group-data"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["system-id"] = types.YChild{"SystemId", &nodeData.SystemId}
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", nodeData.MlacpNodeId}
    nodeData.EntityData.Leafs["ldp-id"] = types.YLeaf{"LdpId", nodeData.LdpId}
    nodeData.EntityData.Leafs["version-number"] = types.YLeaf{"VersionNumber", nodeData.VersionNumber}
    nodeData.EntityData.Leafs["node-state"] = types.YLeaf{"NodeState", nodeData.NodeState}
    nodeData.EntityData.Leafs["iccp-group-state"] = types.YLeaf{"IccpGroupState", nodeData.IccpGroupState}
    return &(nodeData.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetEntityData() *types.CommonEntityData {
    systemId.EntityData.YFilter = systemId.YFilter
    systemId.EntityData.YangName = "system-id"
    systemId.EntityData.BundleName = "cisco_ios_xr"
    systemId.EntityData.ParentYangName = "node-data"
    systemId.EntityData.SegmentPath = "system-id"
    systemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId.EntityData.Children = make(map[string]types.YChild)
    systemId.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &systemId.SystemMacAddr}
    systemId.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", systemId.SystemPrio}
    return &(systemId.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData
// Bundle information
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "mlacp-iccp-group-item"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-bundle-data"] = types.YChild{"MlacpBundleData", nil}
    for i := range bundleData.MlacpBundleData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpBundleData[i])] = types.YChild{"MlacpBundleData", &bundleData.MlacpBundleData[i]}
    }
    bundleData.EntityData.Children["mlacp-member-data"] = types.YChild{"MlacpMemberData", nil}
    for i := range bundleData.MlacpMemberData {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.MlacpMemberData[i])] = types.YChild{"MlacpMemberData", &bundleData.MlacpMemberData[i]}
    }
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-interface-key"] = types.YLeaf{"BundleInterfaceKey", bundleData.BundleInterfaceKey}
    bundleData.EntityData.Leafs["media-type"] = types.YLeaf{"MediaType", bundleData.MediaType}
    bundleData.EntityData.Leafs["redundancy-object-id"] = types.YLeaf{"RedundancyObjectId", bundleData.RedundancyObjectId}
    return &(bundleData.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetEntityData() *types.CommonEntityData {
    mlacpBundleData.EntityData.YFilter = mlacpBundleData.YFilter
    mlacpBundleData.EntityData.YangName = "mlacp-bundle-data"
    mlacpBundleData.EntityData.BundleName = "cisco_ios_xr"
    mlacpBundleData.EntityData.ParentYangName = "bundle-data"
    mlacpBundleData.EntityData.SegmentPath = "mlacp-bundle-data"
    mlacpBundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpBundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpBundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpBundleData.EntityData.Children = make(map[string]types.YChild)
    mlacpBundleData.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &mlacpBundleData.MacAddress}
    mlacpBundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpBundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", mlacpBundleData.BundleName}
    mlacpBundleData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpBundleData.MlacpNodeId}
    mlacpBundleData.EntityData.Leafs["aggregator-id"] = types.YLeaf{"AggregatorId", mlacpBundleData.AggregatorId}
    mlacpBundleData.EntityData.Leafs["bundle-state"] = types.YLeaf{"BundleState", mlacpBundleData.BundleState}
    mlacpBundleData.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", mlacpBundleData.PortPriority}
    return &(mlacpBundleData.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "mlacp-bundle-data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetEntityData() *types.CommonEntityData {
    mlacpMemberData.EntityData.YFilter = mlacpMemberData.YFilter
    mlacpMemberData.EntityData.YangName = "mlacp-member-data"
    mlacpMemberData.EntityData.BundleName = "cisco_ios_xr"
    mlacpMemberData.EntityData.ParentYangName = "bundle-data"
    mlacpMemberData.EntityData.SegmentPath = "mlacp-member-data"
    mlacpMemberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpMemberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpMemberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpMemberData.EntityData.Children = make(map[string]types.YChild)
    mlacpMemberData.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpMemberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", mlacpMemberData.PortName}
    mlacpMemberData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", mlacpMemberData.InterfaceHandle}
    mlacpMemberData.EntityData.Leafs["mlacp-node-id"] = types.YLeaf{"MlacpNodeId", mlacpMemberData.MlacpNodeId}
    mlacpMemberData.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", mlacpMemberData.PortNumber}
    mlacpMemberData.EntityData.Leafs["operational-priority"] = types.YLeaf{"OperationalPriority", mlacpMemberData.OperationalPriority}
    mlacpMemberData.EntityData.Leafs["configured-priority"] = types.YLeaf{"ConfiguredPriority", mlacpMemberData.ConfiguredPriority}
    mlacpMemberData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", mlacpMemberData.MemberState}
    return &(mlacpMemberData.EntityData)
}

// BundleInformation_MacAllocation
// Information about allocated MAC addresses that
// are not in use
type BundleInformation_MacAllocation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // All MAC addresses that are allocated but currently not in use.
    MacAllocationGlobal BundleInformation_MacAllocation_MacAllocationGlobal
}

func (macAllocation *BundleInformation_MacAllocation) GetEntityData() *types.CommonEntityData {
    macAllocation.EntityData.YFilter = macAllocation.YFilter
    macAllocation.EntityData.YangName = "mac-allocation"
    macAllocation.EntityData.BundleName = "cisco_ios_xr"
    macAllocation.EntityData.ParentYangName = "bundle-information"
    macAllocation.EntityData.SegmentPath = "mac-allocation"
    macAllocation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAllocation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAllocation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAllocation.EntityData.Children = make(map[string]types.YChild)
    macAllocation.EntityData.Children["mac-allocation-global"] = types.YChild{"MacAllocationGlobal", &macAllocation.MacAllocationGlobal}
    macAllocation.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(macAllocation.EntityData)
}

// BundleInformation_MacAllocation_MacAllocationGlobal
// All MAC addresses that are allocated but
// currently not in use
type BundleInformation_MacAllocation_MacAllocationGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for this item.
    MacAllocationGlobalItem BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem
}

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetEntityData() *types.CommonEntityData {
    macAllocationGlobal.EntityData.YFilter = macAllocationGlobal.YFilter
    macAllocationGlobal.EntityData.YangName = "mac-allocation-global"
    macAllocationGlobal.EntityData.BundleName = "cisco_ios_xr"
    macAllocationGlobal.EntityData.ParentYangName = "mac-allocation"
    macAllocationGlobal.EntityData.SegmentPath = "mac-allocation-global"
    macAllocationGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAllocationGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAllocationGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAllocationGlobal.EntityData.Children = make(map[string]types.YChild)
    macAllocationGlobal.EntityData.Children["mac-allocation-global-item"] = types.YChild{"MacAllocationGlobalItem", &macAllocationGlobal.MacAllocationGlobalItem}
    macAllocationGlobal.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(macAllocationGlobal.EntityData)
}

// BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem
// Data for this item
type BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC addresses allocated but unused. The type is slice of
    // BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress.
    MacAddress []BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress
}

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetEntityData() *types.CommonEntityData {
    macAllocationGlobalItem.EntityData.YFilter = macAllocationGlobalItem.YFilter
    macAllocationGlobalItem.EntityData.YangName = "mac-allocation-global-item"
    macAllocationGlobalItem.EntityData.BundleName = "cisco_ios_xr"
    macAllocationGlobalItem.EntityData.ParentYangName = "mac-allocation-global"
    macAllocationGlobalItem.EntityData.SegmentPath = "mac-allocation-global-item"
    macAllocationGlobalItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAllocationGlobalItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAllocationGlobalItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAllocationGlobalItem.EntityData.Children = make(map[string]types.YChild)
    macAllocationGlobalItem.EntityData.Children["mac-address"] = types.YChild{"MacAddress", nil}
    for i := range macAllocationGlobalItem.MacAddress {
        macAllocationGlobalItem.EntityData.Children[types.GetSegmentPath(&macAllocationGlobalItem.MacAddress[i])] = types.YChild{"MacAddress", &macAllocationGlobalItem.MacAddress[i]}
    }
    macAllocationGlobalItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(macAllocationGlobalItem.EntityData)
}

// BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress
// MAC addresses allocated but unused
type BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "mac-allocation-global-item"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_Events
// Events information for bundles and members
type BundleInformation_Events struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interfaces with events information.
    EventsMembers BundleInformation_Events_EventsMembers

    // Bundle interfaces with events information.
    EventsBundles BundleInformation_Events_EventsBundles
}

func (events *BundleInformation_Events) GetEntityData() *types.CommonEntityData {
    events.EntityData.YFilter = events.YFilter
    events.EntityData.YangName = "events"
    events.EntityData.BundleName = "cisco_ios_xr"
    events.EntityData.ParentYangName = "bundle-information"
    events.EntityData.SegmentPath = "events"
    events.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    events.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    events.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    events.EntityData.Children = make(map[string]types.YChild)
    events.EntityData.Children["events-members"] = types.YChild{"EventsMembers", &events.EventsMembers}
    events.EntityData.Children["events-bundles"] = types.YChild{"EventsBundles", &events.EventsBundles}
    events.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(events.EntityData)
}

// BundleInformation_Events_EventsMembers
// Member interfaces with events information
type BundleInformation_Events_EventsMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_Events_EventsMembers_EventsMember.
    EventsMember []BundleInformation_Events_EventsMembers_EventsMember
}

func (eventsMembers *BundleInformation_Events_EventsMembers) GetEntityData() *types.CommonEntityData {
    eventsMembers.EntityData.YFilter = eventsMembers.YFilter
    eventsMembers.EntityData.YangName = "events-members"
    eventsMembers.EntityData.BundleName = "cisco_ios_xr"
    eventsMembers.EntityData.ParentYangName = "events"
    eventsMembers.EntityData.SegmentPath = "events-members"
    eventsMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMembers.EntityData.Children = make(map[string]types.YChild)
    eventsMembers.EntityData.Children["events-member"] = types.YChild{"EventsMember", nil}
    for i := range eventsMembers.EventsMember {
        eventsMembers.EntityData.Children[types.GetSegmentPath(&eventsMembers.EventsMember[i])] = types.YChild{"EventsMember", &eventsMembers.EventsMember[i]}
    }
    eventsMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMembers.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember
// Member interface
type BundleInformation_Events_EventsMembers_EventsMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    EventsMemberItem BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem

    // Data for this item and its parent bundle.
    EventsMemberAncestor BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor
}

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetEntityData() *types.CommonEntityData {
    eventsMember.EntityData.YFilter = eventsMember.YFilter
    eventsMember.EntityData.YangName = "events-member"
    eventsMember.EntityData.BundleName = "cisco_ios_xr"
    eventsMember.EntityData.ParentYangName = "events-members"
    eventsMember.EntityData.SegmentPath = "events-member" + "[member-interface='" + fmt.Sprintf("%v", eventsMember.MemberInterface) + "']"
    eventsMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMember.EntityData.Children = make(map[string]types.YChild)
    eventsMember.EntityData.Children["events-member-item"] = types.YChild{"EventsMemberItem", &eventsMember.EventsMemberItem}
    eventsMember.EntityData.Children["events-member-ancestor"] = types.YChild{"EventsMemberAncestor", &eventsMember.EventsMemberAncestor}
    eventsMember.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", eventsMember.MemberInterface}
    return &(eventsMember.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem
// Data for this item
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items.
    Items []BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items
}

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetEntityData() *types.CommonEntityData {
    eventsMemberItem.EntityData.YFilter = eventsMemberItem.YFilter
    eventsMemberItem.EntityData.YangName = "events-member-item"
    eventsMemberItem.EntityData.BundleName = "cisco_ios_xr"
    eventsMemberItem.EntityData.ParentYangName = "events-member"
    eventsMemberItem.EntityData.SegmentPath = "events-member-item"
    eventsMemberItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMemberItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMemberItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMemberItem.EntityData.Children = make(map[string]types.YChild)
    eventsMemberItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsMemberItem.Items {
        eventsMemberItem.EntityData.Children[types.GetSegmentPath(&eventsMemberItem.Items[i])] = types.YChild{"Items", &eventsMemberItem.Items[i]}
    }
    eventsMemberItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMemberItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsMemberItem.ItemName}
    return &(eventsMemberItem.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items
// Event items
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-member-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items.
    Items []BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items
}

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetEntityData() *types.CommonEntityData {
    eventsMemberAncestor.EntityData.YFilter = eventsMemberAncestor.YFilter
    eventsMemberAncestor.EntityData.YangName = "events-member-ancestor"
    eventsMemberAncestor.EntityData.BundleName = "cisco_ios_xr"
    eventsMemberAncestor.EntityData.ParentYangName = "events-member"
    eventsMemberAncestor.EntityData.SegmentPath = "events-member-ancestor"
    eventsMemberAncestor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMemberAncestor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMemberAncestor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMemberAncestor.EntityData.Children = make(map[string]types.YChild)
    eventsMemberAncestor.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsMemberAncestor.Items {
        eventsMemberAncestor.EntityData.Children[types.GetSegmentPath(&eventsMemberAncestor.Items[i])] = types.YChild{"Items", &eventsMemberAncestor.Items[i]}
    }
    eventsMemberAncestor.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMemberAncestor.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsMemberAncestor.ItemName}
    return &(eventsMemberAncestor.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items
// Event items
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-member-ancestor"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles
// Bundle interfaces with events information
type BundleInformation_Events_EventsBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle.
    EventsBundle []BundleInformation_Events_EventsBundles_EventsBundle
}

func (eventsBundles *BundleInformation_Events_EventsBundles) GetEntityData() *types.CommonEntityData {
    eventsBundles.EntityData.YFilter = eventsBundles.YFilter
    eventsBundles.EntityData.YangName = "events-bundles"
    eventsBundles.EntityData.BundleName = "cisco_ios_xr"
    eventsBundles.EntityData.ParentYangName = "events"
    eventsBundles.EntityData.SegmentPath = "events-bundles"
    eventsBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBundles.EntityData.Children = make(map[string]types.YChild)
    eventsBundles.EntityData.Children["events-bundle"] = types.YChild{"EventsBundle", nil}
    for i := range eventsBundles.EventsBundle {
        eventsBundles.EntityData.Children[types.GetSegmentPath(&eventsBundles.EventsBundle[i])] = types.YChild{"EventsBundle", &eventsBundles.EventsBundle[i]}
    }
    eventsBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBundles.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle
// Bundle interface
type BundleInformation_Events_EventsBundles_EventsBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item and its parent bundle.
    EventsBundleAncestor BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor

    // Data for this item.
    EventsBundleItem BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem

    // Data for this item and all its members.
    EventsBundleDescendant BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant

    // Children of bundle with events information.
    EventsBundleChildrenMembers BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers
}

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetEntityData() *types.CommonEntityData {
    eventsBundle.EntityData.YFilter = eventsBundle.YFilter
    eventsBundle.EntityData.YangName = "events-bundle"
    eventsBundle.EntityData.BundleName = "cisco_ios_xr"
    eventsBundle.EntityData.ParentYangName = "events-bundles"
    eventsBundle.EntityData.SegmentPath = "events-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsBundle.BundleInterface) + "']"
    eventsBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBundle.EntityData.Children = make(map[string]types.YChild)
    eventsBundle.EntityData.Children["events-bundle-ancestor"] = types.YChild{"EventsBundleAncestor", &eventsBundle.EventsBundleAncestor}
    eventsBundle.EntityData.Children["events-bundle-item"] = types.YChild{"EventsBundleItem", &eventsBundle.EventsBundleItem}
    eventsBundle.EntityData.Children["events-bundle-descendant"] = types.YChild{"EventsBundleDescendant", &eventsBundle.EventsBundleDescendant}
    eventsBundle.EntityData.Children["events-bundle-children-members"] = types.YChild{"EventsBundleChildrenMembers", &eventsBundle.EventsBundleChildrenMembers}
    eventsBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", eventsBundle.BundleInterface}
    return &(eventsBundle.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor
// Data for this item and its parent bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items
}

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetEntityData() *types.CommonEntityData {
    eventsBundleAncestor.EntityData.YFilter = eventsBundleAncestor.YFilter
    eventsBundleAncestor.EntityData.YangName = "events-bundle-ancestor"
    eventsBundleAncestor.EntityData.BundleName = "cisco_ios_xr"
    eventsBundleAncestor.EntityData.ParentYangName = "events-bundle"
    eventsBundleAncestor.EntityData.SegmentPath = "events-bundle-ancestor"
    eventsBundleAncestor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBundleAncestor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBundleAncestor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBundleAncestor.EntityData.Children = make(map[string]types.YChild)
    eventsBundleAncestor.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsBundleAncestor.Items {
        eventsBundleAncestor.EntityData.Children[types.GetSegmentPath(&eventsBundleAncestor.Items[i])] = types.YChild{"Items", &eventsBundleAncestor.Items[i]}
    }
    eventsBundleAncestor.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBundleAncestor.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsBundleAncestor.ItemName}
    return &(eventsBundleAncestor.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-bundle-ancestor"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem
// Data for this item
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items
}

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetEntityData() *types.CommonEntityData {
    eventsBundleItem.EntityData.YFilter = eventsBundleItem.YFilter
    eventsBundleItem.EntityData.YangName = "events-bundle-item"
    eventsBundleItem.EntityData.BundleName = "cisco_ios_xr"
    eventsBundleItem.EntityData.ParentYangName = "events-bundle"
    eventsBundleItem.EntityData.SegmentPath = "events-bundle-item"
    eventsBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBundleItem.EntityData.Children = make(map[string]types.YChild)
    eventsBundleItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsBundleItem.Items {
        eventsBundleItem.EntityData.Children[types.GetSegmentPath(&eventsBundleItem.Items[i])] = types.YChild{"Items", &eventsBundleItem.Items[i]}
    }
    eventsBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBundleItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsBundleItem.ItemName}
    return &(eventsBundleItem.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-bundle-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant
// Data for this item and all its members
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem.
    EventsItem []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem
}

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetEntityData() *types.CommonEntityData {
    eventsBundleDescendant.EntityData.YFilter = eventsBundleDescendant.YFilter
    eventsBundleDescendant.EntityData.YangName = "events-bundle-descendant"
    eventsBundleDescendant.EntityData.BundleName = "cisco_ios_xr"
    eventsBundleDescendant.EntityData.ParentYangName = "events-bundle"
    eventsBundleDescendant.EntityData.SegmentPath = "events-bundle-descendant"
    eventsBundleDescendant.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBundleDescendant.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBundleDescendant.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBundleDescendant.EntityData.Children = make(map[string]types.YChild)
    eventsBundleDescendant.EntityData.Children["events-item"] = types.YChild{"EventsItem", nil}
    for i := range eventsBundleDescendant.EventsItem {
        eventsBundleDescendant.EntityData.Children[types.GetSegmentPath(&eventsBundleDescendant.EventsItem[i])] = types.YChild{"EventsItem", &eventsBundleDescendant.EventsItem[i]}
    }
    eventsBundleDescendant.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBundleDescendant.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items
}

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetEntityData() *types.CommonEntityData {
    eventsItem.EntityData.YFilter = eventsItem.YFilter
    eventsItem.EntityData.YangName = "events-item"
    eventsItem.EntityData.BundleName = "cisco_ios_xr"
    eventsItem.EntityData.ParentYangName = "events-bundle-descendant"
    eventsItem.EntityData.SegmentPath = "events-item"
    eventsItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsItem.EntityData.Children = make(map[string]types.YChild)
    eventsItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsItem.Items {
        eventsItem.EntityData.Children[types.GetSegmentPath(&eventsItem.Items[i])] = types.YChild{"Items", &eventsItem.Items[i]}
    }
    eventsItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsItem.ItemName}
    return &(eventsItem.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers
// Children of bundle with events information
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle member item with events information. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember.
    EventsBundleChildrenMember []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember
}

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetEntityData() *types.CommonEntityData {
    eventsBundleChildrenMembers.EntityData.YFilter = eventsBundleChildrenMembers.YFilter
    eventsBundleChildrenMembers.EntityData.YangName = "events-bundle-children-members"
    eventsBundleChildrenMembers.EntityData.BundleName = "cisco_ios_xr"
    eventsBundleChildrenMembers.EntityData.ParentYangName = "events-bundle"
    eventsBundleChildrenMembers.EntityData.SegmentPath = "events-bundle-children-members"
    eventsBundleChildrenMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBundleChildrenMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBundleChildrenMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBundleChildrenMembers.EntityData.Children = make(map[string]types.YChild)
    eventsBundleChildrenMembers.EntityData.Children["events-bundle-children-member"] = types.YChild{"EventsBundleChildrenMember", nil}
    for i := range eventsBundleChildrenMembers.EventsBundleChildrenMember {
        eventsBundleChildrenMembers.EntityData.Children[types.GetSegmentPath(&eventsBundleChildrenMembers.EventsBundleChildrenMember[i])] = types.YChild{"EventsBundleChildrenMember", &eventsBundleChildrenMembers.EventsBundleChildrenMember[i]}
    }
    eventsBundleChildrenMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBundleChildrenMembers.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember
// Bundle member item with events information
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items
}

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetEntityData() *types.CommonEntityData {
    eventsBundleChildrenMember.EntityData.YFilter = eventsBundleChildrenMember.YFilter
    eventsBundleChildrenMember.EntityData.YangName = "events-bundle-children-member"
    eventsBundleChildrenMember.EntityData.BundleName = "cisco_ios_xr"
    eventsBundleChildrenMember.EntityData.ParentYangName = "events-bundle-children-members"
    eventsBundleChildrenMember.EntityData.SegmentPath = "events-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", eventsBundleChildrenMember.MemberInterface) + "']"
    eventsBundleChildrenMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBundleChildrenMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBundleChildrenMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBundleChildrenMember.EntityData.Children = make(map[string]types.YChild)
    eventsBundleChildrenMember.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsBundleChildrenMember.Items {
        eventsBundleChildrenMember.EntityData.Children[types.GetSegmentPath(&eventsBundleChildrenMember.Items[i])] = types.YChild{"Items", &eventsBundleChildrenMember.Items[i]}
    }
    eventsBundleChildrenMember.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBundleChildrenMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", eventsBundleChildrenMember.MemberInterface}
    eventsBundleChildrenMember.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsBundleChildrenMember.ItemName}
    return &(eventsBundleChildrenMember.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-bundle-children-member"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl
// Bundle events information for bundles and
// members
type BundleInformation_EventsBdl struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interfaces with bundle events information.
    EventsBdlMembers BundleInformation_EventsBdl_EventsBdlMembers

    // Bundle interfaces with bundle events information.
    EventsBdlBundles BundleInformation_EventsBdl_EventsBdlBundles

    // Bundle events for all ICCP Groups.
    EventsBdlIccpGroups BundleInformation_EventsBdl_EventsBdlIccpGroups
}

func (eventsBdl *BundleInformation_EventsBdl) GetEntityData() *types.CommonEntityData {
    eventsBdl.EntityData.YFilter = eventsBdl.YFilter
    eventsBdl.EntityData.YangName = "events-bdl"
    eventsBdl.EntityData.BundleName = "cisco_ios_xr"
    eventsBdl.EntityData.ParentYangName = "bundle-information"
    eventsBdl.EntityData.SegmentPath = "events-bdl"
    eventsBdl.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdl.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdl.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdl.EntityData.Children = make(map[string]types.YChild)
    eventsBdl.EntityData.Children["events-bdl-members"] = types.YChild{"EventsBdlMembers", &eventsBdl.EventsBdlMembers}
    eventsBdl.EntityData.Children["events-bdl-bundles"] = types.YChild{"EventsBdlBundles", &eventsBdl.EventsBdlBundles}
    eventsBdl.EntityData.Children["events-bdl-iccp-groups"] = types.YChild{"EventsBdlIccpGroups", &eventsBdl.EventsBdlIccpGroups}
    eventsBdl.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBdl.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers
// Member interfaces with bundle events
// information
type BundleInformation_EventsBdl_EventsBdlMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember.
    EventsBdlMember []BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember
}

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetEntityData() *types.CommonEntityData {
    eventsBdlMembers.EntityData.YFilter = eventsBdlMembers.YFilter
    eventsBdlMembers.EntityData.YangName = "events-bdl-members"
    eventsBdlMembers.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlMembers.EntityData.ParentYangName = "events-bdl"
    eventsBdlMembers.EntityData.SegmentPath = "events-bdl-members"
    eventsBdlMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlMembers.EntityData.Children = make(map[string]types.YChild)
    eventsBdlMembers.EntityData.Children["events-bdl-member"] = types.YChild{"EventsBdlMember", nil}
    for i := range eventsBdlMembers.EventsBdlMember {
        eventsBdlMembers.EntityData.Children[types.GetSegmentPath(&eventsBdlMembers.EventsBdlMember[i])] = types.YChild{"EventsBdlMember", &eventsBdlMembers.EventsBdlMember[i]}
    }
    eventsBdlMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBdlMembers.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember
// Member interface
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    EventsBdlMemberAncestor BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor
}

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetEntityData() *types.CommonEntityData {
    eventsBdlMember.EntityData.YFilter = eventsBdlMember.YFilter
    eventsBdlMember.EntityData.YangName = "events-bdl-member"
    eventsBdlMember.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlMember.EntityData.ParentYangName = "events-bdl-members"
    eventsBdlMember.EntityData.SegmentPath = "events-bdl-member" + "[member-interface='" + fmt.Sprintf("%v", eventsBdlMember.MemberInterface) + "']"
    eventsBdlMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlMember.EntityData.Children = make(map[string]types.YChild)
    eventsBdlMember.EntityData.Children["events-bdl-member-ancestor"] = types.YChild{"EventsBdlMemberAncestor", &eventsBdlMember.EventsBdlMemberAncestor}
    eventsBdlMember.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBdlMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", eventsBdlMember.MemberInterface}
    return &(eventsBdlMember.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items.
    Items []BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items
}

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetEntityData() *types.CommonEntityData {
    eventsBdlMemberAncestor.EntityData.YFilter = eventsBdlMemberAncestor.YFilter
    eventsBdlMemberAncestor.EntityData.YangName = "events-bdl-member-ancestor"
    eventsBdlMemberAncestor.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlMemberAncestor.EntityData.ParentYangName = "events-bdl-member"
    eventsBdlMemberAncestor.EntityData.SegmentPath = "events-bdl-member-ancestor"
    eventsBdlMemberAncestor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlMemberAncestor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlMemberAncestor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlMemberAncestor.EntityData.Children = make(map[string]types.YChild)
    eventsBdlMemberAncestor.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsBdlMemberAncestor.Items {
        eventsBdlMemberAncestor.EntityData.Children[types.GetSegmentPath(&eventsBdlMemberAncestor.Items[i])] = types.YChild{"Items", &eventsBdlMemberAncestor.Items[i]}
    }
    eventsBdlMemberAncestor.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBdlMemberAncestor.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsBdlMemberAncestor.ItemName}
    return &(eventsBdlMemberAncestor.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items
// Event items
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-bdl-member-ancestor"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles
// Bundle interfaces with bundle events
// information
type BundleInformation_EventsBdl_EventsBdlBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle.
    EventsBdlBundle []BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle
}

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetEntityData() *types.CommonEntityData {
    eventsBdlBundles.EntityData.YFilter = eventsBdlBundles.YFilter
    eventsBdlBundles.EntityData.YangName = "events-bdl-bundles"
    eventsBdlBundles.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlBundles.EntityData.ParentYangName = "events-bdl"
    eventsBdlBundles.EntityData.SegmentPath = "events-bdl-bundles"
    eventsBdlBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlBundles.EntityData.Children = make(map[string]types.YChild)
    eventsBdlBundles.EntityData.Children["events-bdl-bundle"] = types.YChild{"EventsBdlBundle", nil}
    for i := range eventsBdlBundles.EventsBdlBundle {
        eventsBdlBundles.EntityData.Children[types.GetSegmentPath(&eventsBdlBundles.EventsBdlBundle[i])] = types.YChild{"EventsBdlBundle", &eventsBdlBundles.EventsBdlBundle[i]}
    }
    eventsBdlBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBdlBundles.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle
// Bundle interface
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    EventsBdlBundleItem BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem
}

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetEntityData() *types.CommonEntityData {
    eventsBdlBundle.EntityData.YFilter = eventsBdlBundle.YFilter
    eventsBdlBundle.EntityData.YangName = "events-bdl-bundle"
    eventsBdlBundle.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlBundle.EntityData.ParentYangName = "events-bdl-bundles"
    eventsBdlBundle.EntityData.SegmentPath = "events-bdl-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsBdlBundle.BundleInterface) + "']"
    eventsBdlBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlBundle.EntityData.Children = make(map[string]types.YChild)
    eventsBdlBundle.EntityData.Children["events-bdl-bundle-item"] = types.YChild{"EventsBdlBundleItem", &eventsBdlBundle.EventsBdlBundleItem}
    eventsBdlBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBdlBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", eventsBdlBundle.BundleInterface}
    return &(eventsBdlBundle.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem
// Data for this item
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items.
    Items []BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items
}

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetEntityData() *types.CommonEntityData {
    eventsBdlBundleItem.EntityData.YFilter = eventsBdlBundleItem.YFilter
    eventsBdlBundleItem.EntityData.YangName = "events-bdl-bundle-item"
    eventsBdlBundleItem.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlBundleItem.EntityData.ParentYangName = "events-bdl-bundle"
    eventsBdlBundleItem.EntityData.SegmentPath = "events-bdl-bundle-item"
    eventsBdlBundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlBundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlBundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlBundleItem.EntityData.Children = make(map[string]types.YChild)
    eventsBdlBundleItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsBdlBundleItem.Items {
        eventsBdlBundleItem.EntityData.Children[types.GetSegmentPath(&eventsBdlBundleItem.Items[i])] = types.YChild{"Items", &eventsBdlBundleItem.Items[i]}
    }
    eventsBdlBundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBdlBundleItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsBdlBundleItem.ItemName}
    return &(eventsBdlBundleItem.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items
// Event items
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-bdl-bundle-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups
// Bundle events for all ICCP Groups
type BundleInformation_EventsBdl_EventsBdlIccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup.
    EventsBdlIccpGroup []BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup
}

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetEntityData() *types.CommonEntityData {
    eventsBdlIccpGroups.EntityData.YFilter = eventsBdlIccpGroups.YFilter
    eventsBdlIccpGroups.EntityData.YangName = "events-bdl-iccp-groups"
    eventsBdlIccpGroups.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlIccpGroups.EntityData.ParentYangName = "events-bdl"
    eventsBdlIccpGroups.EntityData.SegmentPath = "events-bdl-iccp-groups"
    eventsBdlIccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlIccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlIccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlIccpGroups.EntityData.Children = make(map[string]types.YChild)
    eventsBdlIccpGroups.EntityData.Children["events-bdl-iccp-group"] = types.YChild{"EventsBdlIccpGroup", nil}
    for i := range eventsBdlIccpGroups.EventsBdlIccpGroup {
        eventsBdlIccpGroups.EntityData.Children[types.GetSegmentPath(&eventsBdlIccpGroups.EventsBdlIccpGroup[i])] = types.YChild{"EventsBdlIccpGroup", &eventsBdlIccpGroups.EventsBdlIccpGroup[i]}
    }
    eventsBdlIccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBdlIccpGroups.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup
// ICCP Group ID
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item and all its members.
    EventsBdlBundleDescendantIccpGroup BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup
}

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetEntityData() *types.CommonEntityData {
    eventsBdlIccpGroup.EntityData.YFilter = eventsBdlIccpGroup.YFilter
    eventsBdlIccpGroup.EntityData.YangName = "events-bdl-iccp-group"
    eventsBdlIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlIccpGroup.EntityData.ParentYangName = "events-bdl-iccp-groups"
    eventsBdlIccpGroup.EntityData.SegmentPath = "events-bdl-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", eventsBdlIccpGroup.IccpGroup) + "']"
    eventsBdlIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlIccpGroup.EntityData.Children = make(map[string]types.YChild)
    eventsBdlIccpGroup.EntityData.Children["events-bdl-bundle-descendant-iccp-group"] = types.YChild{"EventsBdlBundleDescendantIccpGroup", &eventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup}
    eventsBdlIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsBdlIccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", eventsBdlIccpGroup.IccpGroup}
    return &(eventsBdlIccpGroup.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup
// Data for this item and all its members
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem.
    EventsItem []BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem
}

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetEntityData() *types.CommonEntityData {
    eventsBdlBundleDescendantIccpGroup.EntityData.YFilter = eventsBdlBundleDescendantIccpGroup.YFilter
    eventsBdlBundleDescendantIccpGroup.EntityData.YangName = "events-bdl-bundle-descendant-iccp-group"
    eventsBdlBundleDescendantIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    eventsBdlBundleDescendantIccpGroup.EntityData.ParentYangName = "events-bdl-iccp-group"
    eventsBdlBundleDescendantIccpGroup.EntityData.SegmentPath = "events-bdl-bundle-descendant-iccp-group"
    eventsBdlBundleDescendantIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsBdlBundleDescendantIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsBdlBundleDescendantIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsBdlBundleDescendantIccpGroup.EntityData.Children = make(map[string]types.YChild)
    eventsBdlBundleDescendantIccpGroup.EntityData.Children["events-item"] = types.YChild{"EventsItem", nil}
    for i := range eventsBdlBundleDescendantIccpGroup.EventsItem {
        eventsBdlBundleDescendantIccpGroup.EntityData.Children[types.GetSegmentPath(&eventsBdlBundleDescendantIccpGroup.EventsItem[i])] = types.YChild{"EventsItem", &eventsBdlBundleDescendantIccpGroup.EventsItem[i]}
    }
    eventsBdlBundleDescendantIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsBdlBundleDescendantIccpGroup.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem
// Event items
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items.
    Items []BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items
}

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetEntityData() *types.CommonEntityData {
    eventsItem.EntityData.YFilter = eventsItem.YFilter
    eventsItem.EntityData.YangName = "events-item"
    eventsItem.EntityData.BundleName = "cisco_ios_xr"
    eventsItem.EntityData.ParentYangName = "events-bdl-bundle-descendant-iccp-group"
    eventsItem.EntityData.SegmentPath = "events-item"
    eventsItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsItem.EntityData.Children = make(map[string]types.YChild)
    eventsItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsItem.Items {
        eventsItem.EntityData.Children[types.GetSegmentPath(&eventsItem.Items[i])] = types.YChild{"Items", &eventsItem.Items[i]}
    }
    eventsItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsItem.ItemName}
    return &(eventsItem.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items
// Event items
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_BundleBriefs
// Bundle interfaces with common bundle information
type BundleInformation_BundleBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_BundleBriefs_BundleBrief.
    BundleBrief []BundleInformation_BundleBriefs_BundleBrief
}

func (bundleBriefs *BundleInformation_BundleBriefs) GetEntityData() *types.CommonEntityData {
    bundleBriefs.EntityData.YFilter = bundleBriefs.YFilter
    bundleBriefs.EntityData.YangName = "bundle-briefs"
    bundleBriefs.EntityData.BundleName = "cisco_ios_xr"
    bundleBriefs.EntityData.ParentYangName = "bundle-information"
    bundleBriefs.EntityData.SegmentPath = "bundle-briefs"
    bundleBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBriefs.EntityData.Children = make(map[string]types.YChild)
    bundleBriefs.EntityData.Children["bundle-brief"] = types.YChild{"BundleBrief", nil}
    for i := range bundleBriefs.BundleBrief {
        bundleBriefs.EntityData.Children[types.GetSegmentPath(&bundleBriefs.BundleBrief[i])] = types.YChild{"BundleBrief", &bundleBriefs.BundleBrief[i]}
    }
    bundleBriefs.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleBriefs.EntityData)
}

// BundleInformation_BundleBriefs_BundleBrief
// Bundle interface
type BundleInformation_BundleBriefs_BundleBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    BundleBriefItem BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem
}

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetEntityData() *types.CommonEntityData {
    bundleBrief.EntityData.YFilter = bundleBrief.YFilter
    bundleBrief.EntityData.YangName = "bundle-brief"
    bundleBrief.EntityData.BundleName = "cisco_ios_xr"
    bundleBrief.EntityData.ParentYangName = "bundle-briefs"
    bundleBrief.EntityData.SegmentPath = "bundle-brief" + "[bundle-interface='" + fmt.Sprintf("%v", bundleBrief.BundleInterface) + "']"
    bundleBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBrief.EntityData.Children = make(map[string]types.YChild)
    bundleBrief.EntityData.Children["bundle-brief-item"] = types.YChild{"BundleBriefItem", &bundleBrief.BundleBriefItem}
    bundleBrief.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleBrief.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", bundleBrief.BundleInterface}
    return &(bundleBrief.EntityData)
}

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem
// Data for this item
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig.
    BfdConfig []BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig
}

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetEntityData() *types.CommonEntityData {
    bundleBriefItem.EntityData.YFilter = bundleBriefItem.YFilter
    bundleBriefItem.EntityData.YangName = "bundle-brief-item"
    bundleBriefItem.EntityData.BundleName = "cisco_ios_xr"
    bundleBriefItem.EntityData.ParentYangName = "bundle-brief"
    bundleBriefItem.EntityData.SegmentPath = "bundle-brief-item"
    bundleBriefItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleBriefItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleBriefItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleBriefItem.EntityData.Children = make(map[string]types.YChild)
    bundleBriefItem.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &bundleBriefItem.MacAddress}
    bundleBriefItem.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range bundleBriefItem.BfdConfig {
        bundleBriefItem.EntityData.Children[types.GetSegmentPath(&bundleBriefItem.BfdConfig[i])] = types.YChild{"BfdConfig", &bundleBriefItem.BfdConfig[i]}
    }
    bundleBriefItem.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleBriefItem.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", bundleBriefItem.BundleInterfaceName}
    bundleBriefItem.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", bundleBriefItem.AvailableBandwidth}
    bundleBriefItem.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", bundleBriefItem.EffectiveBandwidth}
    bundleBriefItem.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", bundleBriefItem.ConfiguredBandwidth}
    bundleBriefItem.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", bundleBriefItem.MinimumActiveLinks}
    bundleBriefItem.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", bundleBriefItem.MaximumActiveLinks}
    bundleBriefItem.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", bundleBriefItem.MaximumActiveLinksSource}
    bundleBriefItem.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", bundleBriefItem.MinimumBandwidth}
    bundleBriefItem.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", bundleBriefItem.PrimaryMember}
    bundleBriefItem.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bundleBriefItem.BundleStatus}
    bundleBriefItem.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", bundleBriefItem.ActiveMemberCount}
    bundleBriefItem.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", bundleBriefItem.StandbyMemberCount}
    bundleBriefItem.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", bundleBriefItem.ConfiguredMemberCount}
    bundleBriefItem.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", bundleBriefItem.MacSource}
    bundleBriefItem.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", bundleBriefItem.MacSourceMember}
    bundleBriefItem.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", bundleBriefItem.InterChassis}
    bundleBriefItem.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", bundleBriefItem.IsActive}
    bundleBriefItem.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", bundleBriefItem.LacpStatus}
    bundleBriefItem.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", bundleBriefItem.MlacpStatus}
    bundleBriefItem.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", bundleBriefItem.Ipv4BfdStatus}
    bundleBriefItem.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", bundleBriefItem.LinkOrderStatus}
    bundleBriefItem.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", bundleBriefItem.Ipv6BfdStatus}
    bundleBriefItem.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", bundleBriefItem.LoadBalanceHashType}
    bundleBriefItem.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", bundleBriefItem.LoadBalanceLocalityThreshold}
    bundleBriefItem.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", bundleBriefItem.SuppressionTimer}
    bundleBriefItem.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", bundleBriefItem.WaitWhileTimer}
    bundleBriefItem.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", bundleBriefItem.CollectorMaxDelay}
    bundleBriefItem.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", bundleBriefItem.CiscoExtensions}
    bundleBriefItem.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", bundleBriefItem.LacpNonrevertive}
    bundleBriefItem.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleBriefItem.IccpGroupId}
    bundleBriefItem.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", bundleBriefItem.ActiveForeignMemberCount}
    bundleBriefItem.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", bundleBriefItem.ConfiguredForeignMemberCount}
    bundleBriefItem.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", bundleBriefItem.SwitchoverType}
    bundleBriefItem.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", bundleBriefItem.MaximizeThresholdValueLinks}
    bundleBriefItem.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", bundleBriefItem.MaximizeThresholdValueBandWidth}
    bundleBriefItem.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", bundleBriefItem.MlacpMode}
    bundleBriefItem.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", bundleBriefItem.RecoveryDelay}
    bundleBriefItem.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", bundleBriefItem.Singleton}
    return &(bundleBriefItem.EntityData)
}

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress
// MAC address of this member
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "bundle-brief-item"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "bundle-brief-item"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// BundleInformation_EventsMbr
// Bundle member events information for bundles and
// members
type BundleInformation_EventsMbr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interfaces with member events information.
    EventsMbrBundles BundleInformation_EventsMbr_EventsMbrBundles

    // Member interfaces with bundle member events information.
    EventsMbrMembers BundleInformation_EventsMbr_EventsMbrMembers

    // Member events for all ICCP Groups.
    EventsMbrIccpGroups BundleInformation_EventsMbr_EventsMbrIccpGroups
}

func (eventsMbr *BundleInformation_EventsMbr) GetEntityData() *types.CommonEntityData {
    eventsMbr.EntityData.YFilter = eventsMbr.YFilter
    eventsMbr.EntityData.YangName = "events-mbr"
    eventsMbr.EntityData.BundleName = "cisco_ios_xr"
    eventsMbr.EntityData.ParentYangName = "bundle-information"
    eventsMbr.EntityData.SegmentPath = "events-mbr"
    eventsMbr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbr.EntityData.Children = make(map[string]types.YChild)
    eventsMbr.EntityData.Children["events-mbr-bundles"] = types.YChild{"EventsMbrBundles", &eventsMbr.EventsMbrBundles}
    eventsMbr.EntityData.Children["events-mbr-members"] = types.YChild{"EventsMbrMembers", &eventsMbr.EventsMbrMembers}
    eventsMbr.EntityData.Children["events-mbr-iccp-groups"] = types.YChild{"EventsMbrIccpGroups", &eventsMbr.EventsMbrIccpGroups}
    eventsMbr.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbr.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles
// Bundle interfaces with member events
// information
type BundleInformation_EventsMbr_EventsMbrBundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle.
    EventsMbrBundle []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle
}

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetEntityData() *types.CommonEntityData {
    eventsMbrBundles.EntityData.YFilter = eventsMbrBundles.YFilter
    eventsMbrBundles.EntityData.YangName = "events-mbr-bundles"
    eventsMbrBundles.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundles.EntityData.ParentYangName = "events-mbr"
    eventsMbrBundles.EntityData.SegmentPath = "events-mbr-bundles"
    eventsMbrBundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundles.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundles.EntityData.Children["events-mbr-bundle"] = types.YChild{"EventsMbrBundle", nil}
    for i := range eventsMbrBundles.EventsMbrBundle {
        eventsMbrBundles.EntityData.Children[types.GetSegmentPath(&eventsMbrBundles.EventsMbrBundle[i])] = types.YChild{"EventsMbrBundle", &eventsMbrBundles.EventsMbrBundle[i]}
    }
    eventsMbrBundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbrBundles.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle
// Bundle interface
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Children of bundle with member events information.
    EventsMbrBundleChildrenMembers BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers

    // Data for this item and all its members.
    EventsMbrBundleDescendant BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant
}

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetEntityData() *types.CommonEntityData {
    eventsMbrBundle.EntityData.YFilter = eventsMbrBundle.YFilter
    eventsMbrBundle.EntityData.YangName = "events-mbr-bundle"
    eventsMbrBundle.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundle.EntityData.ParentYangName = "events-mbr-bundles"
    eventsMbrBundle.EntityData.SegmentPath = "events-mbr-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsMbrBundle.BundleInterface) + "']"
    eventsMbrBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundle.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundle.EntityData.Children["events-mbr-bundle-children-members"] = types.YChild{"EventsMbrBundleChildrenMembers", &eventsMbrBundle.EventsMbrBundleChildrenMembers}
    eventsMbrBundle.EntityData.Children["events-mbr-bundle-descendant"] = types.YChild{"EventsMbrBundleDescendant", &eventsMbrBundle.EventsMbrBundleDescendant}
    eventsMbrBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMbrBundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", eventsMbrBundle.BundleInterface}
    return &(eventsMbrBundle.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers
// Children of bundle with member events
// information
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle member item with member events information. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember.
    EventsMbrBundleChildrenMember []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember
}

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetEntityData() *types.CommonEntityData {
    eventsMbrBundleChildrenMembers.EntityData.YFilter = eventsMbrBundleChildrenMembers.YFilter
    eventsMbrBundleChildrenMembers.EntityData.YangName = "events-mbr-bundle-children-members"
    eventsMbrBundleChildrenMembers.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundleChildrenMembers.EntityData.ParentYangName = "events-mbr-bundle"
    eventsMbrBundleChildrenMembers.EntityData.SegmentPath = "events-mbr-bundle-children-members"
    eventsMbrBundleChildrenMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundleChildrenMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundleChildrenMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundleChildrenMembers.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundleChildrenMembers.EntityData.Children["events-mbr-bundle-children-member"] = types.YChild{"EventsMbrBundleChildrenMember", nil}
    for i := range eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember {
        eventsMbrBundleChildrenMembers.EntityData.Children[types.GetSegmentPath(&eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember[i])] = types.YChild{"EventsMbrBundleChildrenMember", &eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember[i]}
    }
    eventsMbrBundleChildrenMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbrBundleChildrenMembers.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember
// Bundle member item with member events
// information
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items.
    Items []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items
}

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetEntityData() *types.CommonEntityData {
    eventsMbrBundleChildrenMember.EntityData.YFilter = eventsMbrBundleChildrenMember.YFilter
    eventsMbrBundleChildrenMember.EntityData.YangName = "events-mbr-bundle-children-member"
    eventsMbrBundleChildrenMember.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundleChildrenMember.EntityData.ParentYangName = "events-mbr-bundle-children-members"
    eventsMbrBundleChildrenMember.EntityData.SegmentPath = "events-mbr-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", eventsMbrBundleChildrenMember.MemberInterface) + "']"
    eventsMbrBundleChildrenMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundleChildrenMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundleChildrenMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundleChildrenMember.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundleChildrenMember.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsMbrBundleChildrenMember.Items {
        eventsMbrBundleChildrenMember.EntityData.Children[types.GetSegmentPath(&eventsMbrBundleChildrenMember.Items[i])] = types.YChild{"Items", &eventsMbrBundleChildrenMember.Items[i]}
    }
    eventsMbrBundleChildrenMember.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMbrBundleChildrenMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", eventsMbrBundleChildrenMember.MemberInterface}
    eventsMbrBundleChildrenMember.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsMbrBundleChildrenMember.ItemName}
    return &(eventsMbrBundleChildrenMember.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-mbr-bundle-children-member"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant
// Data for this item and all its members
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem.
    EventsItem []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem
}

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetEntityData() *types.CommonEntityData {
    eventsMbrBundleDescendant.EntityData.YFilter = eventsMbrBundleDescendant.YFilter
    eventsMbrBundleDescendant.EntityData.YangName = "events-mbr-bundle-descendant"
    eventsMbrBundleDescendant.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundleDescendant.EntityData.ParentYangName = "events-mbr-bundle"
    eventsMbrBundleDescendant.EntityData.SegmentPath = "events-mbr-bundle-descendant"
    eventsMbrBundleDescendant.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundleDescendant.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundleDescendant.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundleDescendant.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundleDescendant.EntityData.Children["events-item"] = types.YChild{"EventsItem", nil}
    for i := range eventsMbrBundleDescendant.EventsItem {
        eventsMbrBundleDescendant.EntityData.Children[types.GetSegmentPath(&eventsMbrBundleDescendant.EventsItem[i])] = types.YChild{"EventsItem", &eventsMbrBundleDescendant.EventsItem[i]}
    }
    eventsMbrBundleDescendant.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbrBundleDescendant.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem
// Event items
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items.
    Items []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetEntityData() *types.CommonEntityData {
    eventsItem.EntityData.YFilter = eventsItem.YFilter
    eventsItem.EntityData.YangName = "events-item"
    eventsItem.EntityData.BundleName = "cisco_ios_xr"
    eventsItem.EntityData.ParentYangName = "events-mbr-bundle-descendant"
    eventsItem.EntityData.SegmentPath = "events-item"
    eventsItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsItem.EntityData.Children = make(map[string]types.YChild)
    eventsItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsItem.Items {
        eventsItem.EntityData.Children[types.GetSegmentPath(&eventsItem.Items[i])] = types.YChild{"Items", &eventsItem.Items[i]}
    }
    eventsItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsItem.ItemName}
    return &(eventsItem.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers
// Member interfaces with bundle member events
// information
type BundleInformation_EventsMbr_EventsMbrMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember.
    EventsMbrMember []BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember
}

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetEntityData() *types.CommonEntityData {
    eventsMbrMembers.EntityData.YFilter = eventsMbrMembers.YFilter
    eventsMbrMembers.EntityData.YangName = "events-mbr-members"
    eventsMbrMembers.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrMembers.EntityData.ParentYangName = "events-mbr"
    eventsMbrMembers.EntityData.SegmentPath = "events-mbr-members"
    eventsMbrMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrMembers.EntityData.Children = make(map[string]types.YChild)
    eventsMbrMembers.EntityData.Children["events-mbr-member"] = types.YChild{"EventsMbrMember", nil}
    for i := range eventsMbrMembers.EventsMbrMember {
        eventsMbrMembers.EntityData.Children[types.GetSegmentPath(&eventsMbrMembers.EventsMbrMember[i])] = types.YChild{"EventsMbrMember", &eventsMbrMembers.EventsMbrMember[i]}
    }
    eventsMbrMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbrMembers.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember
// Member interface
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    EventsMbrMemberItem BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem
}

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetEntityData() *types.CommonEntityData {
    eventsMbrMember.EntityData.YFilter = eventsMbrMember.YFilter
    eventsMbrMember.EntityData.YangName = "events-mbr-member"
    eventsMbrMember.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrMember.EntityData.ParentYangName = "events-mbr-members"
    eventsMbrMember.EntityData.SegmentPath = "events-mbr-member" + "[member-interface='" + fmt.Sprintf("%v", eventsMbrMember.MemberInterface) + "']"
    eventsMbrMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrMember.EntityData.Children = make(map[string]types.YChild)
    eventsMbrMember.EntityData.Children["events-mbr-member-item"] = types.YChild{"EventsMbrMemberItem", &eventsMbrMember.EventsMbrMemberItem}
    eventsMbrMember.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMbrMember.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", eventsMbrMember.MemberInterface}
    return &(eventsMbrMember.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem
// Data for this item
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items.
    Items []BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items
}

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetEntityData() *types.CommonEntityData {
    eventsMbrMemberItem.EntityData.YFilter = eventsMbrMemberItem.YFilter
    eventsMbrMemberItem.EntityData.YangName = "events-mbr-member-item"
    eventsMbrMemberItem.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrMemberItem.EntityData.ParentYangName = "events-mbr-member"
    eventsMbrMemberItem.EntityData.SegmentPath = "events-mbr-member-item"
    eventsMbrMemberItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrMemberItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrMemberItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrMemberItem.EntityData.Children = make(map[string]types.YChild)
    eventsMbrMemberItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsMbrMemberItem.Items {
        eventsMbrMemberItem.EntityData.Children[types.GetSegmentPath(&eventsMbrMemberItem.Items[i])] = types.YChild{"Items", &eventsMbrMemberItem.Items[i]}
    }
    eventsMbrMemberItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMbrMemberItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsMbrMemberItem.ItemName}
    return &(eventsMbrMemberItem.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-mbr-member-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups
// Member events for all ICCP Groups
type BundleInformation_EventsMbr_EventsMbrIccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup.
    EventsMbrIccpGroup []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup
}

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetEntityData() *types.CommonEntityData {
    eventsMbrIccpGroups.EntityData.YFilter = eventsMbrIccpGroups.YFilter
    eventsMbrIccpGroups.EntityData.YangName = "events-mbr-iccp-groups"
    eventsMbrIccpGroups.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrIccpGroups.EntityData.ParentYangName = "events-mbr"
    eventsMbrIccpGroups.EntityData.SegmentPath = "events-mbr-iccp-groups"
    eventsMbrIccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrIccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrIccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrIccpGroups.EntityData.Children = make(map[string]types.YChild)
    eventsMbrIccpGroups.EntityData.Children["events-mbr-iccp-group"] = types.YChild{"EventsMbrIccpGroup", nil}
    for i := range eventsMbrIccpGroups.EventsMbrIccpGroup {
        eventsMbrIccpGroups.EntityData.Children[types.GetSegmentPath(&eventsMbrIccpGroups.EventsMbrIccpGroup[i])] = types.YChild{"EventsMbrIccpGroup", &eventsMbrIccpGroups.EventsMbrIccpGroup[i]}
    }
    eventsMbrIccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbrIccpGroups.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup
// ICCP Group ID
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Children of bundle with member events information.
    EventsMbrBundleChildrenMemberIccpGroups BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups

    // Data for this item and all its members.
    EventsMbrBundleDescendantIccpGroup BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup
}

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetEntityData() *types.CommonEntityData {
    eventsMbrIccpGroup.EntityData.YFilter = eventsMbrIccpGroup.YFilter
    eventsMbrIccpGroup.EntityData.YangName = "events-mbr-iccp-group"
    eventsMbrIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrIccpGroup.EntityData.ParentYangName = "events-mbr-iccp-groups"
    eventsMbrIccpGroup.EntityData.SegmentPath = "events-mbr-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", eventsMbrIccpGroup.IccpGroup) + "']"
    eventsMbrIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrIccpGroup.EntityData.Children = make(map[string]types.YChild)
    eventsMbrIccpGroup.EntityData.Children["events-mbr-bundle-children-member-iccp-groups"] = types.YChild{"EventsMbrBundleChildrenMemberIccpGroups", &eventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups}
    eventsMbrIccpGroup.EntityData.Children["events-mbr-bundle-descendant-iccp-group"] = types.YChild{"EventsMbrBundleDescendantIccpGroup", &eventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup}
    eventsMbrIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMbrIccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", eventsMbrIccpGroup.IccpGroup}
    return &(eventsMbrIccpGroup.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups
// Children of bundle with member events
// information
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle member item with ICCP events information. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup.
    EventsMbrBundleChildrenMemberIccpGroup []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup
}

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetEntityData() *types.CommonEntityData {
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.YFilter = eventsMbrBundleChildrenMemberIccpGroups.YFilter
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.YangName = "events-mbr-bundle-children-member-iccp-groups"
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.ParentYangName = "events-mbr-iccp-group"
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.SegmentPath = "events-mbr-bundle-children-member-iccp-groups"
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundleChildrenMemberIccpGroups.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.Children["events-mbr-bundle-children-member-iccp-group"] = types.YChild{"EventsMbrBundleChildrenMemberIccpGroup", nil}
    for i := range eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup {
        eventsMbrBundleChildrenMemberIccpGroups.EntityData.Children[types.GetSegmentPath(&eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup[i])] = types.YChild{"EventsMbrBundleChildrenMemberIccpGroup", &eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup[i]}
    }
    eventsMbrBundleChildrenMemberIccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbrBundleChildrenMemberIccpGroups.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup
// Bundle member item with ICCP events
// information
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items.
    Items []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items
}

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetEntityData() *types.CommonEntityData {
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.YFilter = eventsMbrBundleChildrenMemberIccpGroup.YFilter
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.YangName = "events-mbr-bundle-children-member-iccp-group"
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.ParentYangName = "events-mbr-bundle-children-member-iccp-groups"
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.SegmentPath = "events-mbr-bundle-children-member-iccp-group" + "[member-interface='" + fmt.Sprintf("%v", eventsMbrBundleChildrenMemberIccpGroup.MemberInterface) + "']"
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundleChildrenMemberIccpGroup.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsMbrBundleChildrenMemberIccpGroup.Items {
        eventsMbrBundleChildrenMemberIccpGroup.EntityData.Children[types.GetSegmentPath(&eventsMbrBundleChildrenMemberIccpGroup.Items[i])] = types.YChild{"Items", &eventsMbrBundleChildrenMemberIccpGroup.Items[i]}
    }
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", eventsMbrBundleChildrenMemberIccpGroup.MemberInterface}
    eventsMbrBundleChildrenMemberIccpGroup.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsMbrBundleChildrenMemberIccpGroup.ItemName}
    return &(eventsMbrBundleChildrenMemberIccpGroup.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-mbr-bundle-children-member-iccp-group"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup
// Data for this item and all its members
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem.
    EventsItem []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem
}

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetEntityData() *types.CommonEntityData {
    eventsMbrBundleDescendantIccpGroup.EntityData.YFilter = eventsMbrBundleDescendantIccpGroup.YFilter
    eventsMbrBundleDescendantIccpGroup.EntityData.YangName = "events-mbr-bundle-descendant-iccp-group"
    eventsMbrBundleDescendantIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    eventsMbrBundleDescendantIccpGroup.EntityData.ParentYangName = "events-mbr-iccp-group"
    eventsMbrBundleDescendantIccpGroup.EntityData.SegmentPath = "events-mbr-bundle-descendant-iccp-group"
    eventsMbrBundleDescendantIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsMbrBundleDescendantIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsMbrBundleDescendantIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsMbrBundleDescendantIccpGroup.EntityData.Children = make(map[string]types.YChild)
    eventsMbrBundleDescendantIccpGroup.EntityData.Children["events-item"] = types.YChild{"EventsItem", nil}
    for i := range eventsMbrBundleDescendantIccpGroup.EventsItem {
        eventsMbrBundleDescendantIccpGroup.EntityData.Children[types.GetSegmentPath(&eventsMbrBundleDescendantIccpGroup.EventsItem[i])] = types.YChild{"EventsItem", &eventsMbrBundleDescendantIccpGroup.EventsItem[i]}
    }
    eventsMbrBundleDescendantIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(eventsMbrBundleDescendantIccpGroup.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem
// Event items
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items.
    Items []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetEntityData() *types.CommonEntityData {
    eventsItem.EntityData.YFilter = eventsItem.YFilter
    eventsItem.EntityData.YangName = "events-item"
    eventsItem.EntityData.BundleName = "cisco_ios_xr"
    eventsItem.EntityData.ParentYangName = "events-mbr-bundle-descendant-iccp-group"
    eventsItem.EntityData.SegmentPath = "events-item"
    eventsItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventsItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventsItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventsItem.EntityData.Children = make(map[string]types.YChild)
    eventsItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range eventsItem.Items {
        eventsItem.EntityData.Children[types.GetSegmentPath(&eventsItem.Items[i])] = types.YChild{"Items", &eventsItem.Items[i]}
    }
    eventsItem.EntityData.Leafs = make(map[string]types.YLeaf)
    eventsItem.EntityData.Leafs["item-name"] = types.YLeaf{"ItemName", eventsItem.ItemName}
    return &(eventsItem.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "events-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["member-evt-info"] = types.YChild{"MemberEvtInfo", &items.MemberEvtInfo}
    items.EntityData.Children["bundle-evt-info"] = types.YChild{"BundleEvtInfo", &items.BundleEvtInfo}
    items.EntityData.Children["rg-evt-info"] = types.YChild{"RgEvtInfo", &items.RgEvtInfo}
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    items.EntityData.Leafs["event-type"] = types.YLeaf{"EventType", items.EventType}
    return &(items.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetEntityData() *types.CommonEntityData {
    memberEvtInfo.EntityData.YFilter = memberEvtInfo.YFilter
    memberEvtInfo.EntityData.YangName = "member-evt-info"
    memberEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    memberEvtInfo.EntityData.ParentYangName = "items"
    memberEvtInfo.EntityData.SegmentPath = "member-evt-info"
    memberEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberEvtInfo.EntityData.Children = make(map[string]types.YChild)
    memberEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &memberEvtInfo.Data}
    memberEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    memberEvtInfo.EntityData.Leafs["member-event-type"] = types.YLeaf{"MemberEventType", memberEvtInfo.MemberEventType}
    memberEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", memberEvtInfo.TimeStamp}
    return &(memberEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetEntityData() *types.CommonEntityData {
    bundleEvtInfo.EntityData.YFilter = bundleEvtInfo.YFilter
    bundleEvtInfo.EntityData.YangName = "bundle-evt-info"
    bundleEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleEvtInfo.EntityData.ParentYangName = "items"
    bundleEvtInfo.EntityData.SegmentPath = "bundle-evt-info"
    bundleEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleEvtInfo.EntityData.Children = make(map[string]types.YChild)
    bundleEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &bundleEvtInfo.Data}
    bundleEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleEvtInfo.EntityData.Leafs["bundle-event-type"] = types.YLeaf{"BundleEventType", bundleEvtInfo.BundleEventType}
    bundleEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", bundleEvtInfo.TimeStamp}
    return &(bundleEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetEntityData() *types.CommonEntityData {
    rgEvtInfo.EntityData.YFilter = rgEvtInfo.YFilter
    rgEvtInfo.EntityData.YangName = "rg-evt-info"
    rgEvtInfo.EntityData.BundleName = "cisco_ios_xr"
    rgEvtInfo.EntityData.ParentYangName = "items"
    rgEvtInfo.EntityData.SegmentPath = "rg-evt-info"
    rgEvtInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rgEvtInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rgEvtInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rgEvtInfo.EntityData.Children = make(map[string]types.YChild)
    rgEvtInfo.EntityData.Children["data"] = types.YChild{"Data", &rgEvtInfo.Data}
    rgEvtInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    rgEvtInfo.EntityData.Leafs["rg-event-type"] = types.YLeaf{"RgEventType", rgEvtInfo.RgEventType}
    rgEvtInfo.EntityData.Leafs["time-stamp"] = types.YLeaf{"TimeStamp", rgEvtInfo.TimeStamp}
    return &(rgEvtInfo.EntityData)
}

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "rg-evt-info"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["data-type"] = types.YLeaf{"DataType", data.DataType}
    data.EntityData.Leafs["no-data"] = types.YLeaf{"NoData", data.NoData}
    data.EntityData.Leafs["error"] = types.YLeaf{"Error", data.Error}
    data.EntityData.Leafs["string-data"] = types.YLeaf{"StringData", data.StringData}
    return &(data.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters
// ICCP Group specific counters of mLACP events
type BundleInformation_MlacpIccpGroupCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Groups with counters of mLACP events.
    IccpGroups BundleInformation_MlacpIccpGroupCounters_IccpGroups
}

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetEntityData() *types.CommonEntityData {
    mlacpIccpGroupCounters.EntityData.YFilter = mlacpIccpGroupCounters.YFilter
    mlacpIccpGroupCounters.EntityData.YangName = "mlacp-iccp-group-counters"
    mlacpIccpGroupCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpIccpGroupCounters.EntityData.ParentYangName = "bundle-information"
    mlacpIccpGroupCounters.EntityData.SegmentPath = "mlacp-iccp-group-counters"
    mlacpIccpGroupCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpIccpGroupCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpIccpGroupCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpIccpGroupCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpIccpGroupCounters.EntityData.Children["iccp-groups"] = types.YChild{"IccpGroups", &mlacpIccpGroupCounters.IccpGroups}
    mlacpIccpGroupCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpIccpGroupCounters.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups
// ICCP Groups with counters of mLACP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup.
    IccpGroup []BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup
}

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetEntityData() *types.CommonEntityData {
    iccpGroups.EntityData.YFilter = iccpGroups.YFilter
    iccpGroups.EntityData.YangName = "iccp-groups"
    iccpGroups.EntityData.BundleName = "cisco_ios_xr"
    iccpGroups.EntityData.ParentYangName = "mlacp-iccp-group-counters"
    iccpGroups.EntityData.SegmentPath = "iccp-groups"
    iccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroups.EntityData.Children = make(map[string]types.YChild)
    iccpGroups.EntityData.Children["iccp-group"] = types.YChild{"IccpGroup", nil}
    for i := range iccpGroups.IccpGroup {
        iccpGroups.EntityData.Children[types.GetSegmentPath(&iccpGroups.IccpGroup[i])] = types.YChild{"IccpGroup", &iccpGroups.IccpGroup[i]}
    }
    iccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(iccpGroups.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup
// ICCP Group ID
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item and its parent RG.
    IccpGroupAncestorBundle BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle

    // Data for this item and its parent RG.
    IccpGroupAncestorMember BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember

    // Data for this item and its parent RG.
    IccpGroupAncestorNode BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode

    // Data for this item.
    IccpGroupItem BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem
}

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetEntityData() *types.CommonEntityData {
    iccpGroup.EntityData.YFilter = iccpGroup.YFilter
    iccpGroup.EntityData.YangName = "iccp-group"
    iccpGroup.EntityData.BundleName = "cisco_ios_xr"
    iccpGroup.EntityData.ParentYangName = "iccp-groups"
    iccpGroup.EntityData.SegmentPath = "iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", iccpGroup.IccpGroup) + "']"
    iccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroup.EntityData.Children = make(map[string]types.YChild)
    iccpGroup.EntityData.Children["iccp-group-ancestor-bundle"] = types.YChild{"IccpGroupAncestorBundle", &iccpGroup.IccpGroupAncestorBundle}
    iccpGroup.EntityData.Children["iccp-group-ancestor-member"] = types.YChild{"IccpGroupAncestorMember", &iccpGroup.IccpGroupAncestorMember}
    iccpGroup.EntityData.Children["iccp-group-ancestor-node"] = types.YChild{"IccpGroupAncestorNode", &iccpGroup.IccpGroupAncestorNode}
    iccpGroup.EntityData.Children["iccp-group-item"] = types.YChild{"IccpGroupItem", &iccpGroup.IccpGroupItem}
    iccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", iccpGroup.IccpGroup}
    return &(iccpGroup.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle
// Data for this item and its parent RG
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters
}

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetEntityData() *types.CommonEntityData {
    iccpGroupAncestorBundle.EntityData.YFilter = iccpGroupAncestorBundle.YFilter
    iccpGroupAncestorBundle.EntityData.YangName = "iccp-group-ancestor-bundle"
    iccpGroupAncestorBundle.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupAncestorBundle.EntityData.ParentYangName = "iccp-group"
    iccpGroupAncestorBundle.EntityData.SegmentPath = "iccp-group-ancestor-bundle"
    iccpGroupAncestorBundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupAncestorBundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupAncestorBundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupAncestorBundle.EntityData.Children = make(map[string]types.YChild)
    iccpGroupAncestorBundle.EntityData.Children["iccp-group-counters"] = types.YChild{"IccpGroupCounters", &iccpGroupAncestorBundle.IccpGroupCounters}
    iccpGroupAncestorBundle.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupAncestorBundle.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupAncestorBundle.IccpGroupId}
    return &(iccpGroupAncestorBundle.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetEntityData() *types.CommonEntityData {
    iccpGroupCounters.EntityData.YFilter = iccpGroupCounters.YFilter
    iccpGroupCounters.EntityData.YangName = "iccp-group-counters"
    iccpGroupCounters.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupCounters.EntityData.ParentYangName = "iccp-group-ancestor-bundle"
    iccpGroupCounters.EntityData.SegmentPath = "iccp-group-counters"
    iccpGroupCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupCounters.EntityData.Children = make(map[string]types.YChild)
    iccpGroupCounters.EntityData.Children["connection"] = types.YChild{"Connection", &iccpGroupCounters.Connection}
    iccpGroupCounters.EntityData.Children["tl-vs"] = types.YChild{"TlVs", &iccpGroupCounters.TlVs}
    iccpGroupCounters.EntityData.Children["invalid-tl-vs"] = types.YChild{"InvalidTlVs", &iccpGroupCounters.InvalidTlVs}
    iccpGroupCounters.EntityData.Children["iccp-messages"] = types.YChild{"IccpMessages", &iccpGroupCounters.IccpMessages}
    iccpGroupCounters.EntityData.Children["iccp-events"] = types.YChild{"IccpEvents", &iccpGroupCounters.IccpEvents}
    iccpGroupCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", iccpGroupCounters.LastTimeCleared}
    iccpGroupCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", iccpGroupCounters.TimeSinceCleared}
    iccpGroupCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", iccpGroupCounters.LastUnexpectedEvent}
    return &(iccpGroupCounters.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetEntityData() *types.CommonEntityData {
    connection.EntityData.YFilter = connection.YFilter
    connection.EntityData.YangName = "connection"
    connection.EntityData.BundleName = "cisco_ios_xr"
    connection.EntityData.ParentYangName = "iccp-group-counters"
    connection.EntityData.SegmentPath = "connection"
    connection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connection.EntityData.Children = make(map[string]types.YChild)
    connection.EntityData.Leafs = make(map[string]types.YLeaf)
    connection.EntityData.Leafs["sent-connects"] = types.YLeaf{"SentConnects", connection.SentConnects}
    connection.EntityData.Leafs["received-connects"] = types.YLeaf{"ReceivedConnects", connection.ReceivedConnects}
    connection.EntityData.Leafs["iccp-invalid-connects"] = types.YLeaf{"IccpInvalidConnects", connection.IccpInvalidConnects}
    connection.EntityData.Leafs["iccp-config-connect-errors"] = types.YLeaf{"IccpConfigConnectErrors", connection.IccpConfigConnectErrors}
    connection.EntityData.Leafs["iccp-count-connect-errors"] = types.YLeaf{"IccpCountConnectErrors", connection.IccpCountConnectErrors}
    connection.EntityData.Leafs["sent-wrong-versions"] = types.YLeaf{"SentWrongVersions", connection.SentWrongVersions}
    connection.EntityData.Leafs["received-wrong-versions"] = types.YLeaf{"ReceivedWrongVersions", connection.ReceivedWrongVersions}
    connection.EntityData.Leafs["sent-disconnects"] = types.YLeaf{"SentDisconnects", connection.SentDisconnects}
    connection.EntityData.Leafs["received-disconnects"] = types.YLeaf{"ReceivedDisconnects", connection.ReceivedDisconnects}
    connection.EntityData.Leafs["iccp-invalid-disconnects"] = types.YLeaf{"IccpInvalidDisconnects", connection.IccpInvalidDisconnects}
    return &(connection.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetEntityData() *types.CommonEntityData {
    tlVs.EntityData.YFilter = tlVs.YFilter
    tlVs.EntityData.YangName = "tl-vs"
    tlVs.EntityData.BundleName = "cisco_ios_xr"
    tlVs.EntityData.ParentYangName = "iccp-group-counters"
    tlVs.EntityData.SegmentPath = "tl-vs"
    tlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlVs.EntityData.Children = make(map[string]types.YChild)
    tlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    tlVs.EntityData.Leafs["sent-config"] = types.YLeaf{"SentConfig", tlVs.SentConfig}
    tlVs.EntityData.Leafs["received-config"] = types.YLeaf{"ReceivedConfig", tlVs.ReceivedConfig}
    tlVs.EntityData.Leafs["sent-state"] = types.YLeaf{"SentState", tlVs.SentState}
    tlVs.EntityData.Leafs["received-state"] = types.YLeaf{"ReceivedState", tlVs.ReceivedState}
    tlVs.EntityData.Leafs["sent-na-ks"] = types.YLeaf{"SentNaKs", tlVs.SentNaKs}
    tlVs.EntityData.Leafs["received-na-ks"] = types.YLeaf{"ReceivedNaKs", tlVs.ReceivedNaKs}
    tlVs.EntityData.Leafs["sent-sync-requests"] = types.YLeaf{"SentSyncRequests", tlVs.SentSyncRequests}
    tlVs.EntityData.Leafs["received-sync-requests"] = types.YLeaf{"ReceivedSyncRequests", tlVs.ReceivedSyncRequests}
    tlVs.EntityData.Leafs["sent-state-sync-requests"] = types.YLeaf{"SentStateSyncRequests", tlVs.SentStateSyncRequests}
    tlVs.EntityData.Leafs["received-state-sync-requests"] = types.YLeaf{"ReceivedStateSyncRequests", tlVs.ReceivedStateSyncRequests}
    tlVs.EntityData.Leafs["sent-config-sync-requests"] = types.YLeaf{"SentConfigSyncRequests", tlVs.SentConfigSyncRequests}
    tlVs.EntityData.Leafs["received-config-sync-requests"] = types.YLeaf{"ReceivedConfigSyncRequests", tlVs.ReceivedConfigSyncRequests}
    tlVs.EntityData.Leafs["sent-solicited-sync-data"] = types.YLeaf{"SentSolicitedSyncData", tlVs.SentSolicitedSyncData}
    tlVs.EntityData.Leafs["received-solicited-sync-data"] = types.YLeaf{"ReceivedSolicitedSyncData", tlVs.ReceivedSolicitedSyncData}
    tlVs.EntityData.Leafs["sent-unsolicited-sync-data"] = types.YLeaf{"SentUnsolicitedSyncData", tlVs.SentUnsolicitedSyncData}
    tlVs.EntityData.Leafs["received-unsolicited-sync-data"] = types.YLeaf{"ReceivedUnsolicitedSyncData", tlVs.ReceivedUnsolicitedSyncData}
    return &(tlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetEntityData() *types.CommonEntityData {
    invalidTlVs.EntityData.YFilter = invalidTlVs.YFilter
    invalidTlVs.EntityData.YangName = "invalid-tl-vs"
    invalidTlVs.EntityData.BundleName = "cisco_ios_xr"
    invalidTlVs.EntityData.ParentYangName = "iccp-group-counters"
    invalidTlVs.EntityData.SegmentPath = "invalid-tl-vs"
    invalidTlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalidTlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalidTlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalidTlVs.EntityData.Children = make(map[string]types.YChild)
    invalidTlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    invalidTlVs.EntityData.Leafs["incorrect-length"] = types.YLeaf{"IncorrectLength", invalidTlVs.IncorrectLength}
    invalidTlVs.EntityData.Leafs["invalid-type"] = types.YLeaf{"InvalidType", invalidTlVs.InvalidType}
    invalidTlVs.EntityData.Leafs["invalid-data"] = types.YLeaf{"InvalidData", invalidTlVs.InvalidData}
    invalidTlVs.EntityData.Leafs["unknown-bundle"] = types.YLeaf{"UnknownBundle", invalidTlVs.UnknownBundle}
    invalidTlVs.EntityData.Leafs["unknown-port"] = types.YLeaf{"UnknownPort", invalidTlVs.UnknownPort}
    return &(invalidTlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetEntityData() *types.CommonEntityData {
    iccpMessages.EntityData.YFilter = iccpMessages.YFilter
    iccpMessages.EntityData.YangName = "iccp-messages"
    iccpMessages.EntityData.BundleName = "cisco_ios_xr"
    iccpMessages.EntityData.ParentYangName = "iccp-group-counters"
    iccpMessages.EntityData.SegmentPath = "iccp-messages"
    iccpMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpMessages.EntityData.Children = make(map[string]types.YChild)
    iccpMessages.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpMessages.EntityData.Leafs["sent-messages"] = types.YLeaf{"SentMessages", iccpMessages.SentMessages}
    iccpMessages.EntityData.Leafs["sent-buffer-messages"] = types.YLeaf{"SentBufferMessages", iccpMessages.SentBufferMessages}
    iccpMessages.EntityData.Leafs["received-messages"] = types.YLeaf{"ReceivedMessages", iccpMessages.ReceivedMessages}
    iccpMessages.EntityData.Leafs["transmission-errors"] = types.YLeaf{"TransmissionErrors", iccpMessages.TransmissionErrors}
    return &(iccpMessages.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetEntityData() *types.CommonEntityData {
    iccpEvents.EntityData.YFilter = iccpEvents.YFilter
    iccpEvents.EntityData.YangName = "iccp-events"
    iccpEvents.EntityData.BundleName = "cisco_ios_xr"
    iccpEvents.EntityData.ParentYangName = "iccp-group-counters"
    iccpEvents.EntityData.SegmentPath = "iccp-events"
    iccpEvents.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpEvents.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpEvents.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpEvents.EntityData.Children = make(map[string]types.YChild)
    iccpEvents.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpEvents.EntityData.Leafs["transport-up"] = types.YLeaf{"TransportUp", iccpEvents.TransportUp}
    iccpEvents.EntityData.Leafs["transport-down"] = types.YLeaf{"TransportDown", iccpEvents.TransportDown}
    iccpEvents.EntityData.Leafs["transport-unavailable"] = types.YLeaf{"TransportUnavailable", iccpEvents.TransportUnavailable}
    iccpEvents.EntityData.Leafs["configured-set"] = types.YLeaf{"ConfiguredSet", iccpEvents.ConfiguredSet}
    iccpEvents.EntityData.Leafs["configured-clear"] = types.YLeaf{"ConfiguredClear", iccpEvents.ConfiguredClear}
    iccpEvents.EntityData.Leafs["reachability-set"] = types.YLeaf{"ReachabilitySet", iccpEvents.ReachabilitySet}
    iccpEvents.EntityData.Leafs["reachability-cleared"] = types.YLeaf{"ReachabilityCleared", iccpEvents.ReachabilityCleared}
    iccpEvents.EntityData.Leafs["member-status-up"] = types.YLeaf{"MemberStatusUp", iccpEvents.MemberStatusUp}
    iccpEvents.EntityData.Leafs["member-status-down"] = types.YLeaf{"MemberStatusDown", iccpEvents.MemberStatusDown}
    iccpEvents.EntityData.Leafs["pe-isolated"] = types.YLeaf{"PeIsolated", iccpEvents.PeIsolated}
    iccpEvents.EntityData.Leafs["pe-isolated-clear"] = types.YLeaf{"PeIsolatedClear", iccpEvents.PeIsolatedClear}
    return &(iccpEvents.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember
// Data for this item and its parent RG
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters
}

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetEntityData() *types.CommonEntityData {
    iccpGroupAncestorMember.EntityData.YFilter = iccpGroupAncestorMember.YFilter
    iccpGroupAncestorMember.EntityData.YangName = "iccp-group-ancestor-member"
    iccpGroupAncestorMember.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupAncestorMember.EntityData.ParentYangName = "iccp-group"
    iccpGroupAncestorMember.EntityData.SegmentPath = "iccp-group-ancestor-member"
    iccpGroupAncestorMember.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupAncestorMember.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupAncestorMember.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupAncestorMember.EntityData.Children = make(map[string]types.YChild)
    iccpGroupAncestorMember.EntityData.Children["iccp-group-counters"] = types.YChild{"IccpGroupCounters", &iccpGroupAncestorMember.IccpGroupCounters}
    iccpGroupAncestorMember.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupAncestorMember.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupAncestorMember.IccpGroupId}
    return &(iccpGroupAncestorMember.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetEntityData() *types.CommonEntityData {
    iccpGroupCounters.EntityData.YFilter = iccpGroupCounters.YFilter
    iccpGroupCounters.EntityData.YangName = "iccp-group-counters"
    iccpGroupCounters.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupCounters.EntityData.ParentYangName = "iccp-group-ancestor-member"
    iccpGroupCounters.EntityData.SegmentPath = "iccp-group-counters"
    iccpGroupCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupCounters.EntityData.Children = make(map[string]types.YChild)
    iccpGroupCounters.EntityData.Children["connection"] = types.YChild{"Connection", &iccpGroupCounters.Connection}
    iccpGroupCounters.EntityData.Children["tl-vs"] = types.YChild{"TlVs", &iccpGroupCounters.TlVs}
    iccpGroupCounters.EntityData.Children["invalid-tl-vs"] = types.YChild{"InvalidTlVs", &iccpGroupCounters.InvalidTlVs}
    iccpGroupCounters.EntityData.Children["iccp-messages"] = types.YChild{"IccpMessages", &iccpGroupCounters.IccpMessages}
    iccpGroupCounters.EntityData.Children["iccp-events"] = types.YChild{"IccpEvents", &iccpGroupCounters.IccpEvents}
    iccpGroupCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", iccpGroupCounters.LastTimeCleared}
    iccpGroupCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", iccpGroupCounters.TimeSinceCleared}
    iccpGroupCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", iccpGroupCounters.LastUnexpectedEvent}
    return &(iccpGroupCounters.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetEntityData() *types.CommonEntityData {
    connection.EntityData.YFilter = connection.YFilter
    connection.EntityData.YangName = "connection"
    connection.EntityData.BundleName = "cisco_ios_xr"
    connection.EntityData.ParentYangName = "iccp-group-counters"
    connection.EntityData.SegmentPath = "connection"
    connection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connection.EntityData.Children = make(map[string]types.YChild)
    connection.EntityData.Leafs = make(map[string]types.YLeaf)
    connection.EntityData.Leafs["sent-connects"] = types.YLeaf{"SentConnects", connection.SentConnects}
    connection.EntityData.Leafs["received-connects"] = types.YLeaf{"ReceivedConnects", connection.ReceivedConnects}
    connection.EntityData.Leafs["iccp-invalid-connects"] = types.YLeaf{"IccpInvalidConnects", connection.IccpInvalidConnects}
    connection.EntityData.Leafs["iccp-config-connect-errors"] = types.YLeaf{"IccpConfigConnectErrors", connection.IccpConfigConnectErrors}
    connection.EntityData.Leafs["iccp-count-connect-errors"] = types.YLeaf{"IccpCountConnectErrors", connection.IccpCountConnectErrors}
    connection.EntityData.Leafs["sent-wrong-versions"] = types.YLeaf{"SentWrongVersions", connection.SentWrongVersions}
    connection.EntityData.Leafs["received-wrong-versions"] = types.YLeaf{"ReceivedWrongVersions", connection.ReceivedWrongVersions}
    connection.EntityData.Leafs["sent-disconnects"] = types.YLeaf{"SentDisconnects", connection.SentDisconnects}
    connection.EntityData.Leafs["received-disconnects"] = types.YLeaf{"ReceivedDisconnects", connection.ReceivedDisconnects}
    connection.EntityData.Leafs["iccp-invalid-disconnects"] = types.YLeaf{"IccpInvalidDisconnects", connection.IccpInvalidDisconnects}
    return &(connection.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetEntityData() *types.CommonEntityData {
    tlVs.EntityData.YFilter = tlVs.YFilter
    tlVs.EntityData.YangName = "tl-vs"
    tlVs.EntityData.BundleName = "cisco_ios_xr"
    tlVs.EntityData.ParentYangName = "iccp-group-counters"
    tlVs.EntityData.SegmentPath = "tl-vs"
    tlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlVs.EntityData.Children = make(map[string]types.YChild)
    tlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    tlVs.EntityData.Leafs["sent-config"] = types.YLeaf{"SentConfig", tlVs.SentConfig}
    tlVs.EntityData.Leafs["received-config"] = types.YLeaf{"ReceivedConfig", tlVs.ReceivedConfig}
    tlVs.EntityData.Leafs["sent-state"] = types.YLeaf{"SentState", tlVs.SentState}
    tlVs.EntityData.Leafs["received-state"] = types.YLeaf{"ReceivedState", tlVs.ReceivedState}
    tlVs.EntityData.Leafs["sent-na-ks"] = types.YLeaf{"SentNaKs", tlVs.SentNaKs}
    tlVs.EntityData.Leafs["received-na-ks"] = types.YLeaf{"ReceivedNaKs", tlVs.ReceivedNaKs}
    tlVs.EntityData.Leafs["sent-sync-requests"] = types.YLeaf{"SentSyncRequests", tlVs.SentSyncRequests}
    tlVs.EntityData.Leafs["received-sync-requests"] = types.YLeaf{"ReceivedSyncRequests", tlVs.ReceivedSyncRequests}
    tlVs.EntityData.Leafs["sent-state-sync-requests"] = types.YLeaf{"SentStateSyncRequests", tlVs.SentStateSyncRequests}
    tlVs.EntityData.Leafs["received-state-sync-requests"] = types.YLeaf{"ReceivedStateSyncRequests", tlVs.ReceivedStateSyncRequests}
    tlVs.EntityData.Leafs["sent-config-sync-requests"] = types.YLeaf{"SentConfigSyncRequests", tlVs.SentConfigSyncRequests}
    tlVs.EntityData.Leafs["received-config-sync-requests"] = types.YLeaf{"ReceivedConfigSyncRequests", tlVs.ReceivedConfigSyncRequests}
    tlVs.EntityData.Leafs["sent-solicited-sync-data"] = types.YLeaf{"SentSolicitedSyncData", tlVs.SentSolicitedSyncData}
    tlVs.EntityData.Leafs["received-solicited-sync-data"] = types.YLeaf{"ReceivedSolicitedSyncData", tlVs.ReceivedSolicitedSyncData}
    tlVs.EntityData.Leafs["sent-unsolicited-sync-data"] = types.YLeaf{"SentUnsolicitedSyncData", tlVs.SentUnsolicitedSyncData}
    tlVs.EntityData.Leafs["received-unsolicited-sync-data"] = types.YLeaf{"ReceivedUnsolicitedSyncData", tlVs.ReceivedUnsolicitedSyncData}
    return &(tlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetEntityData() *types.CommonEntityData {
    invalidTlVs.EntityData.YFilter = invalidTlVs.YFilter
    invalidTlVs.EntityData.YangName = "invalid-tl-vs"
    invalidTlVs.EntityData.BundleName = "cisco_ios_xr"
    invalidTlVs.EntityData.ParentYangName = "iccp-group-counters"
    invalidTlVs.EntityData.SegmentPath = "invalid-tl-vs"
    invalidTlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalidTlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalidTlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalidTlVs.EntityData.Children = make(map[string]types.YChild)
    invalidTlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    invalidTlVs.EntityData.Leafs["incorrect-length"] = types.YLeaf{"IncorrectLength", invalidTlVs.IncorrectLength}
    invalidTlVs.EntityData.Leafs["invalid-type"] = types.YLeaf{"InvalidType", invalidTlVs.InvalidType}
    invalidTlVs.EntityData.Leafs["invalid-data"] = types.YLeaf{"InvalidData", invalidTlVs.InvalidData}
    invalidTlVs.EntityData.Leafs["unknown-bundle"] = types.YLeaf{"UnknownBundle", invalidTlVs.UnknownBundle}
    invalidTlVs.EntityData.Leafs["unknown-port"] = types.YLeaf{"UnknownPort", invalidTlVs.UnknownPort}
    return &(invalidTlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetEntityData() *types.CommonEntityData {
    iccpMessages.EntityData.YFilter = iccpMessages.YFilter
    iccpMessages.EntityData.YangName = "iccp-messages"
    iccpMessages.EntityData.BundleName = "cisco_ios_xr"
    iccpMessages.EntityData.ParentYangName = "iccp-group-counters"
    iccpMessages.EntityData.SegmentPath = "iccp-messages"
    iccpMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpMessages.EntityData.Children = make(map[string]types.YChild)
    iccpMessages.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpMessages.EntityData.Leafs["sent-messages"] = types.YLeaf{"SentMessages", iccpMessages.SentMessages}
    iccpMessages.EntityData.Leafs["sent-buffer-messages"] = types.YLeaf{"SentBufferMessages", iccpMessages.SentBufferMessages}
    iccpMessages.EntityData.Leafs["received-messages"] = types.YLeaf{"ReceivedMessages", iccpMessages.ReceivedMessages}
    iccpMessages.EntityData.Leafs["transmission-errors"] = types.YLeaf{"TransmissionErrors", iccpMessages.TransmissionErrors}
    return &(iccpMessages.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetEntityData() *types.CommonEntityData {
    iccpEvents.EntityData.YFilter = iccpEvents.YFilter
    iccpEvents.EntityData.YangName = "iccp-events"
    iccpEvents.EntityData.BundleName = "cisco_ios_xr"
    iccpEvents.EntityData.ParentYangName = "iccp-group-counters"
    iccpEvents.EntityData.SegmentPath = "iccp-events"
    iccpEvents.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpEvents.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpEvents.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpEvents.EntityData.Children = make(map[string]types.YChild)
    iccpEvents.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpEvents.EntityData.Leafs["transport-up"] = types.YLeaf{"TransportUp", iccpEvents.TransportUp}
    iccpEvents.EntityData.Leafs["transport-down"] = types.YLeaf{"TransportDown", iccpEvents.TransportDown}
    iccpEvents.EntityData.Leafs["transport-unavailable"] = types.YLeaf{"TransportUnavailable", iccpEvents.TransportUnavailable}
    iccpEvents.EntityData.Leafs["configured-set"] = types.YLeaf{"ConfiguredSet", iccpEvents.ConfiguredSet}
    iccpEvents.EntityData.Leafs["configured-clear"] = types.YLeaf{"ConfiguredClear", iccpEvents.ConfiguredClear}
    iccpEvents.EntityData.Leafs["reachability-set"] = types.YLeaf{"ReachabilitySet", iccpEvents.ReachabilitySet}
    iccpEvents.EntityData.Leafs["reachability-cleared"] = types.YLeaf{"ReachabilityCleared", iccpEvents.ReachabilityCleared}
    iccpEvents.EntityData.Leafs["member-status-up"] = types.YLeaf{"MemberStatusUp", iccpEvents.MemberStatusUp}
    iccpEvents.EntityData.Leafs["member-status-down"] = types.YLeaf{"MemberStatusDown", iccpEvents.MemberStatusDown}
    iccpEvents.EntityData.Leafs["pe-isolated"] = types.YLeaf{"PeIsolated", iccpEvents.PeIsolated}
    iccpEvents.EntityData.Leafs["pe-isolated-clear"] = types.YLeaf{"PeIsolatedClear", iccpEvents.PeIsolatedClear}
    return &(iccpEvents.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode
// Data for this item and its parent RG
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters
}

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetEntityData() *types.CommonEntityData {
    iccpGroupAncestorNode.EntityData.YFilter = iccpGroupAncestorNode.YFilter
    iccpGroupAncestorNode.EntityData.YangName = "iccp-group-ancestor-node"
    iccpGroupAncestorNode.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupAncestorNode.EntityData.ParentYangName = "iccp-group"
    iccpGroupAncestorNode.EntityData.SegmentPath = "iccp-group-ancestor-node"
    iccpGroupAncestorNode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupAncestorNode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupAncestorNode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupAncestorNode.EntityData.Children = make(map[string]types.YChild)
    iccpGroupAncestorNode.EntityData.Children["iccp-group-counters"] = types.YChild{"IccpGroupCounters", &iccpGroupAncestorNode.IccpGroupCounters}
    iccpGroupAncestorNode.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupAncestorNode.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupAncestorNode.IccpGroupId}
    return &(iccpGroupAncestorNode.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetEntityData() *types.CommonEntityData {
    iccpGroupCounters.EntityData.YFilter = iccpGroupCounters.YFilter
    iccpGroupCounters.EntityData.YangName = "iccp-group-counters"
    iccpGroupCounters.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupCounters.EntityData.ParentYangName = "iccp-group-ancestor-node"
    iccpGroupCounters.EntityData.SegmentPath = "iccp-group-counters"
    iccpGroupCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupCounters.EntityData.Children = make(map[string]types.YChild)
    iccpGroupCounters.EntityData.Children["connection"] = types.YChild{"Connection", &iccpGroupCounters.Connection}
    iccpGroupCounters.EntityData.Children["tl-vs"] = types.YChild{"TlVs", &iccpGroupCounters.TlVs}
    iccpGroupCounters.EntityData.Children["invalid-tl-vs"] = types.YChild{"InvalidTlVs", &iccpGroupCounters.InvalidTlVs}
    iccpGroupCounters.EntityData.Children["iccp-messages"] = types.YChild{"IccpMessages", &iccpGroupCounters.IccpMessages}
    iccpGroupCounters.EntityData.Children["iccp-events"] = types.YChild{"IccpEvents", &iccpGroupCounters.IccpEvents}
    iccpGroupCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", iccpGroupCounters.LastTimeCleared}
    iccpGroupCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", iccpGroupCounters.TimeSinceCleared}
    iccpGroupCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", iccpGroupCounters.LastUnexpectedEvent}
    return &(iccpGroupCounters.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetEntityData() *types.CommonEntityData {
    connection.EntityData.YFilter = connection.YFilter
    connection.EntityData.YangName = "connection"
    connection.EntityData.BundleName = "cisco_ios_xr"
    connection.EntityData.ParentYangName = "iccp-group-counters"
    connection.EntityData.SegmentPath = "connection"
    connection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connection.EntityData.Children = make(map[string]types.YChild)
    connection.EntityData.Leafs = make(map[string]types.YLeaf)
    connection.EntityData.Leafs["sent-connects"] = types.YLeaf{"SentConnects", connection.SentConnects}
    connection.EntityData.Leafs["received-connects"] = types.YLeaf{"ReceivedConnects", connection.ReceivedConnects}
    connection.EntityData.Leafs["iccp-invalid-connects"] = types.YLeaf{"IccpInvalidConnects", connection.IccpInvalidConnects}
    connection.EntityData.Leafs["iccp-config-connect-errors"] = types.YLeaf{"IccpConfigConnectErrors", connection.IccpConfigConnectErrors}
    connection.EntityData.Leafs["iccp-count-connect-errors"] = types.YLeaf{"IccpCountConnectErrors", connection.IccpCountConnectErrors}
    connection.EntityData.Leafs["sent-wrong-versions"] = types.YLeaf{"SentWrongVersions", connection.SentWrongVersions}
    connection.EntityData.Leafs["received-wrong-versions"] = types.YLeaf{"ReceivedWrongVersions", connection.ReceivedWrongVersions}
    connection.EntityData.Leafs["sent-disconnects"] = types.YLeaf{"SentDisconnects", connection.SentDisconnects}
    connection.EntityData.Leafs["received-disconnects"] = types.YLeaf{"ReceivedDisconnects", connection.ReceivedDisconnects}
    connection.EntityData.Leafs["iccp-invalid-disconnects"] = types.YLeaf{"IccpInvalidDisconnects", connection.IccpInvalidDisconnects}
    return &(connection.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetEntityData() *types.CommonEntityData {
    tlVs.EntityData.YFilter = tlVs.YFilter
    tlVs.EntityData.YangName = "tl-vs"
    tlVs.EntityData.BundleName = "cisco_ios_xr"
    tlVs.EntityData.ParentYangName = "iccp-group-counters"
    tlVs.EntityData.SegmentPath = "tl-vs"
    tlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlVs.EntityData.Children = make(map[string]types.YChild)
    tlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    tlVs.EntityData.Leafs["sent-config"] = types.YLeaf{"SentConfig", tlVs.SentConfig}
    tlVs.EntityData.Leafs["received-config"] = types.YLeaf{"ReceivedConfig", tlVs.ReceivedConfig}
    tlVs.EntityData.Leafs["sent-state"] = types.YLeaf{"SentState", tlVs.SentState}
    tlVs.EntityData.Leafs["received-state"] = types.YLeaf{"ReceivedState", tlVs.ReceivedState}
    tlVs.EntityData.Leafs["sent-na-ks"] = types.YLeaf{"SentNaKs", tlVs.SentNaKs}
    tlVs.EntityData.Leafs["received-na-ks"] = types.YLeaf{"ReceivedNaKs", tlVs.ReceivedNaKs}
    tlVs.EntityData.Leafs["sent-sync-requests"] = types.YLeaf{"SentSyncRequests", tlVs.SentSyncRequests}
    tlVs.EntityData.Leafs["received-sync-requests"] = types.YLeaf{"ReceivedSyncRequests", tlVs.ReceivedSyncRequests}
    tlVs.EntityData.Leafs["sent-state-sync-requests"] = types.YLeaf{"SentStateSyncRequests", tlVs.SentStateSyncRequests}
    tlVs.EntityData.Leafs["received-state-sync-requests"] = types.YLeaf{"ReceivedStateSyncRequests", tlVs.ReceivedStateSyncRequests}
    tlVs.EntityData.Leafs["sent-config-sync-requests"] = types.YLeaf{"SentConfigSyncRequests", tlVs.SentConfigSyncRequests}
    tlVs.EntityData.Leafs["received-config-sync-requests"] = types.YLeaf{"ReceivedConfigSyncRequests", tlVs.ReceivedConfigSyncRequests}
    tlVs.EntityData.Leafs["sent-solicited-sync-data"] = types.YLeaf{"SentSolicitedSyncData", tlVs.SentSolicitedSyncData}
    tlVs.EntityData.Leafs["received-solicited-sync-data"] = types.YLeaf{"ReceivedSolicitedSyncData", tlVs.ReceivedSolicitedSyncData}
    tlVs.EntityData.Leafs["sent-unsolicited-sync-data"] = types.YLeaf{"SentUnsolicitedSyncData", tlVs.SentUnsolicitedSyncData}
    tlVs.EntityData.Leafs["received-unsolicited-sync-data"] = types.YLeaf{"ReceivedUnsolicitedSyncData", tlVs.ReceivedUnsolicitedSyncData}
    return &(tlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetEntityData() *types.CommonEntityData {
    invalidTlVs.EntityData.YFilter = invalidTlVs.YFilter
    invalidTlVs.EntityData.YangName = "invalid-tl-vs"
    invalidTlVs.EntityData.BundleName = "cisco_ios_xr"
    invalidTlVs.EntityData.ParentYangName = "iccp-group-counters"
    invalidTlVs.EntityData.SegmentPath = "invalid-tl-vs"
    invalidTlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalidTlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalidTlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalidTlVs.EntityData.Children = make(map[string]types.YChild)
    invalidTlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    invalidTlVs.EntityData.Leafs["incorrect-length"] = types.YLeaf{"IncorrectLength", invalidTlVs.IncorrectLength}
    invalidTlVs.EntityData.Leafs["invalid-type"] = types.YLeaf{"InvalidType", invalidTlVs.InvalidType}
    invalidTlVs.EntityData.Leafs["invalid-data"] = types.YLeaf{"InvalidData", invalidTlVs.InvalidData}
    invalidTlVs.EntityData.Leafs["unknown-bundle"] = types.YLeaf{"UnknownBundle", invalidTlVs.UnknownBundle}
    invalidTlVs.EntityData.Leafs["unknown-port"] = types.YLeaf{"UnknownPort", invalidTlVs.UnknownPort}
    return &(invalidTlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetEntityData() *types.CommonEntityData {
    iccpMessages.EntityData.YFilter = iccpMessages.YFilter
    iccpMessages.EntityData.YangName = "iccp-messages"
    iccpMessages.EntityData.BundleName = "cisco_ios_xr"
    iccpMessages.EntityData.ParentYangName = "iccp-group-counters"
    iccpMessages.EntityData.SegmentPath = "iccp-messages"
    iccpMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpMessages.EntityData.Children = make(map[string]types.YChild)
    iccpMessages.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpMessages.EntityData.Leafs["sent-messages"] = types.YLeaf{"SentMessages", iccpMessages.SentMessages}
    iccpMessages.EntityData.Leafs["sent-buffer-messages"] = types.YLeaf{"SentBufferMessages", iccpMessages.SentBufferMessages}
    iccpMessages.EntityData.Leafs["received-messages"] = types.YLeaf{"ReceivedMessages", iccpMessages.ReceivedMessages}
    iccpMessages.EntityData.Leafs["transmission-errors"] = types.YLeaf{"TransmissionErrors", iccpMessages.TransmissionErrors}
    return &(iccpMessages.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetEntityData() *types.CommonEntityData {
    iccpEvents.EntityData.YFilter = iccpEvents.YFilter
    iccpEvents.EntityData.YangName = "iccp-events"
    iccpEvents.EntityData.BundleName = "cisco_ios_xr"
    iccpEvents.EntityData.ParentYangName = "iccp-group-counters"
    iccpEvents.EntityData.SegmentPath = "iccp-events"
    iccpEvents.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpEvents.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpEvents.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpEvents.EntityData.Children = make(map[string]types.YChild)
    iccpEvents.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpEvents.EntityData.Leafs["transport-up"] = types.YLeaf{"TransportUp", iccpEvents.TransportUp}
    iccpEvents.EntityData.Leafs["transport-down"] = types.YLeaf{"TransportDown", iccpEvents.TransportDown}
    iccpEvents.EntityData.Leafs["transport-unavailable"] = types.YLeaf{"TransportUnavailable", iccpEvents.TransportUnavailable}
    iccpEvents.EntityData.Leafs["configured-set"] = types.YLeaf{"ConfiguredSet", iccpEvents.ConfiguredSet}
    iccpEvents.EntityData.Leafs["configured-clear"] = types.YLeaf{"ConfiguredClear", iccpEvents.ConfiguredClear}
    iccpEvents.EntityData.Leafs["reachability-set"] = types.YLeaf{"ReachabilitySet", iccpEvents.ReachabilitySet}
    iccpEvents.EntityData.Leafs["reachability-cleared"] = types.YLeaf{"ReachabilityCleared", iccpEvents.ReachabilityCleared}
    iccpEvents.EntityData.Leafs["member-status-up"] = types.YLeaf{"MemberStatusUp", iccpEvents.MemberStatusUp}
    iccpEvents.EntityData.Leafs["member-status-down"] = types.YLeaf{"MemberStatusDown", iccpEvents.MemberStatusDown}
    iccpEvents.EntityData.Leafs["pe-isolated"] = types.YLeaf{"PeIsolated", iccpEvents.PeIsolated}
    iccpEvents.EntityData.Leafs["pe-isolated-clear"] = types.YLeaf{"PeIsolatedClear", iccpEvents.PeIsolatedClear}
    return &(iccpEvents.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem
// Data for this item
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters
}

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetEntityData() *types.CommonEntityData {
    iccpGroupItem.EntityData.YFilter = iccpGroupItem.YFilter
    iccpGroupItem.EntityData.YangName = "iccp-group-item"
    iccpGroupItem.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupItem.EntityData.ParentYangName = "iccp-group"
    iccpGroupItem.EntityData.SegmentPath = "iccp-group-item"
    iccpGroupItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupItem.EntityData.Children = make(map[string]types.YChild)
    iccpGroupItem.EntityData.Children["iccp-group-counters"] = types.YChild{"IccpGroupCounters", &iccpGroupItem.IccpGroupCounters}
    iccpGroupItem.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupItem.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", iccpGroupItem.IccpGroupId}
    return &(iccpGroupItem.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetEntityData() *types.CommonEntityData {
    iccpGroupCounters.EntityData.YFilter = iccpGroupCounters.YFilter
    iccpGroupCounters.EntityData.YangName = "iccp-group-counters"
    iccpGroupCounters.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupCounters.EntityData.ParentYangName = "iccp-group-item"
    iccpGroupCounters.EntityData.SegmentPath = "iccp-group-counters"
    iccpGroupCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupCounters.EntityData.Children = make(map[string]types.YChild)
    iccpGroupCounters.EntityData.Children["connection"] = types.YChild{"Connection", &iccpGroupCounters.Connection}
    iccpGroupCounters.EntityData.Children["tl-vs"] = types.YChild{"TlVs", &iccpGroupCounters.TlVs}
    iccpGroupCounters.EntityData.Children["invalid-tl-vs"] = types.YChild{"InvalidTlVs", &iccpGroupCounters.InvalidTlVs}
    iccpGroupCounters.EntityData.Children["iccp-messages"] = types.YChild{"IccpMessages", &iccpGroupCounters.IccpMessages}
    iccpGroupCounters.EntityData.Children["iccp-events"] = types.YChild{"IccpEvents", &iccpGroupCounters.IccpEvents}
    iccpGroupCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroupCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", iccpGroupCounters.LastTimeCleared}
    iccpGroupCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", iccpGroupCounters.TimeSinceCleared}
    iccpGroupCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", iccpGroupCounters.LastUnexpectedEvent}
    return &(iccpGroupCounters.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetEntityData() *types.CommonEntityData {
    connection.EntityData.YFilter = connection.YFilter
    connection.EntityData.YangName = "connection"
    connection.EntityData.BundleName = "cisco_ios_xr"
    connection.EntityData.ParentYangName = "iccp-group-counters"
    connection.EntityData.SegmentPath = "connection"
    connection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connection.EntityData.Children = make(map[string]types.YChild)
    connection.EntityData.Leafs = make(map[string]types.YLeaf)
    connection.EntityData.Leafs["sent-connects"] = types.YLeaf{"SentConnects", connection.SentConnects}
    connection.EntityData.Leafs["received-connects"] = types.YLeaf{"ReceivedConnects", connection.ReceivedConnects}
    connection.EntityData.Leafs["iccp-invalid-connects"] = types.YLeaf{"IccpInvalidConnects", connection.IccpInvalidConnects}
    connection.EntityData.Leafs["iccp-config-connect-errors"] = types.YLeaf{"IccpConfigConnectErrors", connection.IccpConfigConnectErrors}
    connection.EntityData.Leafs["iccp-count-connect-errors"] = types.YLeaf{"IccpCountConnectErrors", connection.IccpCountConnectErrors}
    connection.EntityData.Leafs["sent-wrong-versions"] = types.YLeaf{"SentWrongVersions", connection.SentWrongVersions}
    connection.EntityData.Leafs["received-wrong-versions"] = types.YLeaf{"ReceivedWrongVersions", connection.ReceivedWrongVersions}
    connection.EntityData.Leafs["sent-disconnects"] = types.YLeaf{"SentDisconnects", connection.SentDisconnects}
    connection.EntityData.Leafs["received-disconnects"] = types.YLeaf{"ReceivedDisconnects", connection.ReceivedDisconnects}
    connection.EntityData.Leafs["iccp-invalid-disconnects"] = types.YLeaf{"IccpInvalidDisconnects", connection.IccpInvalidDisconnects}
    return &(connection.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetEntityData() *types.CommonEntityData {
    tlVs.EntityData.YFilter = tlVs.YFilter
    tlVs.EntityData.YangName = "tl-vs"
    tlVs.EntityData.BundleName = "cisco_ios_xr"
    tlVs.EntityData.ParentYangName = "iccp-group-counters"
    tlVs.EntityData.SegmentPath = "tl-vs"
    tlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tlVs.EntityData.Children = make(map[string]types.YChild)
    tlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    tlVs.EntityData.Leafs["sent-config"] = types.YLeaf{"SentConfig", tlVs.SentConfig}
    tlVs.EntityData.Leafs["received-config"] = types.YLeaf{"ReceivedConfig", tlVs.ReceivedConfig}
    tlVs.EntityData.Leafs["sent-state"] = types.YLeaf{"SentState", tlVs.SentState}
    tlVs.EntityData.Leafs["received-state"] = types.YLeaf{"ReceivedState", tlVs.ReceivedState}
    tlVs.EntityData.Leafs["sent-na-ks"] = types.YLeaf{"SentNaKs", tlVs.SentNaKs}
    tlVs.EntityData.Leafs["received-na-ks"] = types.YLeaf{"ReceivedNaKs", tlVs.ReceivedNaKs}
    tlVs.EntityData.Leafs["sent-sync-requests"] = types.YLeaf{"SentSyncRequests", tlVs.SentSyncRequests}
    tlVs.EntityData.Leafs["received-sync-requests"] = types.YLeaf{"ReceivedSyncRequests", tlVs.ReceivedSyncRequests}
    tlVs.EntityData.Leafs["sent-state-sync-requests"] = types.YLeaf{"SentStateSyncRequests", tlVs.SentStateSyncRequests}
    tlVs.EntityData.Leafs["received-state-sync-requests"] = types.YLeaf{"ReceivedStateSyncRequests", tlVs.ReceivedStateSyncRequests}
    tlVs.EntityData.Leafs["sent-config-sync-requests"] = types.YLeaf{"SentConfigSyncRequests", tlVs.SentConfigSyncRequests}
    tlVs.EntityData.Leafs["received-config-sync-requests"] = types.YLeaf{"ReceivedConfigSyncRequests", tlVs.ReceivedConfigSyncRequests}
    tlVs.EntityData.Leafs["sent-solicited-sync-data"] = types.YLeaf{"SentSolicitedSyncData", tlVs.SentSolicitedSyncData}
    tlVs.EntityData.Leafs["received-solicited-sync-data"] = types.YLeaf{"ReceivedSolicitedSyncData", tlVs.ReceivedSolicitedSyncData}
    tlVs.EntityData.Leafs["sent-unsolicited-sync-data"] = types.YLeaf{"SentUnsolicitedSyncData", tlVs.SentUnsolicitedSyncData}
    tlVs.EntityData.Leafs["received-unsolicited-sync-data"] = types.YLeaf{"ReceivedUnsolicitedSyncData", tlVs.ReceivedUnsolicitedSyncData}
    return &(tlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetEntityData() *types.CommonEntityData {
    invalidTlVs.EntityData.YFilter = invalidTlVs.YFilter
    invalidTlVs.EntityData.YangName = "invalid-tl-vs"
    invalidTlVs.EntityData.BundleName = "cisco_ios_xr"
    invalidTlVs.EntityData.ParentYangName = "iccp-group-counters"
    invalidTlVs.EntityData.SegmentPath = "invalid-tl-vs"
    invalidTlVs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    invalidTlVs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    invalidTlVs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    invalidTlVs.EntityData.Children = make(map[string]types.YChild)
    invalidTlVs.EntityData.Leafs = make(map[string]types.YLeaf)
    invalidTlVs.EntityData.Leafs["incorrect-length"] = types.YLeaf{"IncorrectLength", invalidTlVs.IncorrectLength}
    invalidTlVs.EntityData.Leafs["invalid-type"] = types.YLeaf{"InvalidType", invalidTlVs.InvalidType}
    invalidTlVs.EntityData.Leafs["invalid-data"] = types.YLeaf{"InvalidData", invalidTlVs.InvalidData}
    invalidTlVs.EntityData.Leafs["unknown-bundle"] = types.YLeaf{"UnknownBundle", invalidTlVs.UnknownBundle}
    invalidTlVs.EntityData.Leafs["unknown-port"] = types.YLeaf{"UnknownPort", invalidTlVs.UnknownPort}
    return &(invalidTlVs.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetEntityData() *types.CommonEntityData {
    iccpMessages.EntityData.YFilter = iccpMessages.YFilter
    iccpMessages.EntityData.YangName = "iccp-messages"
    iccpMessages.EntityData.BundleName = "cisco_ios_xr"
    iccpMessages.EntityData.ParentYangName = "iccp-group-counters"
    iccpMessages.EntityData.SegmentPath = "iccp-messages"
    iccpMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpMessages.EntityData.Children = make(map[string]types.YChild)
    iccpMessages.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpMessages.EntityData.Leafs["sent-messages"] = types.YLeaf{"SentMessages", iccpMessages.SentMessages}
    iccpMessages.EntityData.Leafs["sent-buffer-messages"] = types.YLeaf{"SentBufferMessages", iccpMessages.SentBufferMessages}
    iccpMessages.EntityData.Leafs["received-messages"] = types.YLeaf{"ReceivedMessages", iccpMessages.ReceivedMessages}
    iccpMessages.EntityData.Leafs["transmission-errors"] = types.YLeaf{"TransmissionErrors", iccpMessages.TransmissionErrors}
    return &(iccpMessages.EntityData)
}

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetEntityData() *types.CommonEntityData {
    iccpEvents.EntityData.YFilter = iccpEvents.YFilter
    iccpEvents.EntityData.YangName = "iccp-events"
    iccpEvents.EntityData.BundleName = "cisco_ios_xr"
    iccpEvents.EntityData.ParentYangName = "iccp-group-counters"
    iccpEvents.EntityData.SegmentPath = "iccp-events"
    iccpEvents.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpEvents.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpEvents.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpEvents.EntityData.Children = make(map[string]types.YChild)
    iccpEvents.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpEvents.EntityData.Leafs["transport-up"] = types.YLeaf{"TransportUp", iccpEvents.TransportUp}
    iccpEvents.EntityData.Leafs["transport-down"] = types.YLeaf{"TransportDown", iccpEvents.TransportDown}
    iccpEvents.EntityData.Leafs["transport-unavailable"] = types.YLeaf{"TransportUnavailable", iccpEvents.TransportUnavailable}
    iccpEvents.EntityData.Leafs["configured-set"] = types.YLeaf{"ConfiguredSet", iccpEvents.ConfiguredSet}
    iccpEvents.EntityData.Leafs["configured-clear"] = types.YLeaf{"ConfiguredClear", iccpEvents.ConfiguredClear}
    iccpEvents.EntityData.Leafs["reachability-set"] = types.YLeaf{"ReachabilitySet", iccpEvents.ReachabilitySet}
    iccpEvents.EntityData.Leafs["reachability-cleared"] = types.YLeaf{"ReachabilityCleared", iccpEvents.ReachabilityCleared}
    iccpEvents.EntityData.Leafs["member-status-up"] = types.YLeaf{"MemberStatusUp", iccpEvents.MemberStatusUp}
    iccpEvents.EntityData.Leafs["member-status-down"] = types.YLeaf{"MemberStatusDown", iccpEvents.MemberStatusDown}
    iccpEvents.EntityData.Leafs["pe-isolated"] = types.YLeaf{"PeIsolated", iccpEvents.PeIsolated}
    iccpEvents.EntityData.Leafs["pe-isolated-clear"] = types.YLeaf{"PeIsolatedClear", iccpEvents.PeIsolatedClear}
    return &(iccpEvents.EntityData)
}

// BundleInformation_SystemId
// System Identifiers for the local system and all
// ICCP Groups
type BundleInformation_SystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System Identifier for the local system.
    SystemIdGlobal BundleInformation_SystemId_SystemIdGlobal

    // System Identifiers for all ICCP Groups.
    SystemIdIccpGroups BundleInformation_SystemId_SystemIdIccpGroups
}

func (systemId *BundleInformation_SystemId) GetEntityData() *types.CommonEntityData {
    systemId.EntityData.YFilter = systemId.YFilter
    systemId.EntityData.YangName = "system-id"
    systemId.EntityData.BundleName = "cisco_ios_xr"
    systemId.EntityData.ParentYangName = "bundle-information"
    systemId.EntityData.SegmentPath = "system-id"
    systemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId.EntityData.Children = make(map[string]types.YChild)
    systemId.EntityData.Children["system-id-global"] = types.YChild{"SystemIdGlobal", &systemId.SystemIdGlobal}
    systemId.EntityData.Children["system-id-iccp-groups"] = types.YChild{"SystemIdIccpGroups", &systemId.SystemIdIccpGroups}
    systemId.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(systemId.EntityData)
}

// BundleInformation_SystemId_SystemIdGlobal
// System Identifier for the local system
type BundleInformation_SystemId_SystemIdGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for this item.
    SystemIdGlobalItem BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem
}

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetEntityData() *types.CommonEntityData {
    systemIdGlobal.EntityData.YFilter = systemIdGlobal.YFilter
    systemIdGlobal.EntityData.YangName = "system-id-global"
    systemIdGlobal.EntityData.BundleName = "cisco_ios_xr"
    systemIdGlobal.EntityData.ParentYangName = "system-id"
    systemIdGlobal.EntityData.SegmentPath = "system-id-global"
    systemIdGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemIdGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemIdGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemIdGlobal.EntityData.Children = make(map[string]types.YChild)
    systemIdGlobal.EntityData.Children["system-id-global-item"] = types.YChild{"SystemIdGlobalItem", &systemIdGlobal.SystemIdGlobalItem}
    systemIdGlobal.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(systemIdGlobal.EntityData)
}

// BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem
// Data for this item
type BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group that the system ID is for. The type is interface{} with range:
    // 0..4294967295.
    IccpGroupId interface{}

    // Priority of the system (deprecated). The type is interface{} with range:
    // 0..65535.
    SystemPriority interface{}

    // MAC Address used to identify the system (deprecated). The type is string
    // with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    SystemMacAddress interface{}

    // System ID.
    SystemId BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_
}

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetEntityData() *types.CommonEntityData {
    systemIdGlobalItem.EntityData.YFilter = systemIdGlobalItem.YFilter
    systemIdGlobalItem.EntityData.YangName = "system-id-global-item"
    systemIdGlobalItem.EntityData.BundleName = "cisco_ios_xr"
    systemIdGlobalItem.EntityData.ParentYangName = "system-id-global"
    systemIdGlobalItem.EntityData.SegmentPath = "system-id-global-item"
    systemIdGlobalItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemIdGlobalItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemIdGlobalItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemIdGlobalItem.EntityData.Children = make(map[string]types.YChild)
    systemIdGlobalItem.EntityData.Children["system-id"] = types.YChild{"SystemId", &systemIdGlobalItem.SystemId}
    systemIdGlobalItem.EntityData.Leafs = make(map[string]types.YLeaf)
    systemIdGlobalItem.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", systemIdGlobalItem.IccpGroupId}
    systemIdGlobalItem.EntityData.Leafs["system-priority"] = types.YLeaf{"SystemPriority", systemIdGlobalItem.SystemPriority}
    systemIdGlobalItem.EntityData.Leafs["system-mac-address"] = types.YLeaf{"SystemMacAddress", systemIdGlobalItem.SystemMacAddress}
    return &(systemIdGlobalItem.EntityData)
}

// BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_
// System ID
type BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId__SystemMacAddr
}

func (systemId_ *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_) GetEntityData() *types.CommonEntityData {
    systemId_.EntityData.YFilter = systemId_.YFilter
    systemId_.EntityData.YangName = "system-id"
    systemId_.EntityData.BundleName = "cisco_ios_xr"
    systemId_.EntityData.ParentYangName = "system-id-global-item"
    systemId_.EntityData.SegmentPath = "system-id"
    systemId_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId_.EntityData.Children = make(map[string]types.YChild)
    systemId_.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &systemId_.SystemMacAddr}
    systemId_.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId_.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", systemId_.SystemPrio}
    return &(systemId_.EntityData)
}

// BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId__SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId__SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId__SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_SystemId_SystemIdIccpGroups
// System Identifiers for all ICCP Groups
type BundleInformation_SystemId_SystemIdIccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup.
    SystemIdIccpGroup []BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup
}

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetEntityData() *types.CommonEntityData {
    systemIdIccpGroups.EntityData.YFilter = systemIdIccpGroups.YFilter
    systemIdIccpGroups.EntityData.YangName = "system-id-iccp-groups"
    systemIdIccpGroups.EntityData.BundleName = "cisco_ios_xr"
    systemIdIccpGroups.EntityData.ParentYangName = "system-id"
    systemIdIccpGroups.EntityData.SegmentPath = "system-id-iccp-groups"
    systemIdIccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemIdIccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemIdIccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemIdIccpGroups.EntityData.Children = make(map[string]types.YChild)
    systemIdIccpGroups.EntityData.Children["system-id-iccp-group"] = types.YChild{"SystemIdIccpGroup", nil}
    for i := range systemIdIccpGroups.SystemIdIccpGroup {
        systemIdIccpGroups.EntityData.Children[types.GetSegmentPath(&systemIdIccpGroups.SystemIdIccpGroup[i])] = types.YChild{"SystemIdIccpGroup", &systemIdIccpGroups.SystemIdIccpGroup[i]}
    }
    systemIdIccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(systemIdIccpGroups.EntityData)
}

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup
// ICCP Group ID
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    SystemIdIccpGroupItem BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem
}

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetEntityData() *types.CommonEntityData {
    systemIdIccpGroup.EntityData.YFilter = systemIdIccpGroup.YFilter
    systemIdIccpGroup.EntityData.YangName = "system-id-iccp-group"
    systemIdIccpGroup.EntityData.BundleName = "cisco_ios_xr"
    systemIdIccpGroup.EntityData.ParentYangName = "system-id-iccp-groups"
    systemIdIccpGroup.EntityData.SegmentPath = "system-id-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", systemIdIccpGroup.IccpGroup) + "']"
    systemIdIccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemIdIccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemIdIccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemIdIccpGroup.EntityData.Children = make(map[string]types.YChild)
    systemIdIccpGroup.EntityData.Children["system-id-iccp-group-item"] = types.YChild{"SystemIdIccpGroupItem", &systemIdIccpGroup.SystemIdIccpGroupItem}
    systemIdIccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    systemIdIccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", systemIdIccpGroup.IccpGroup}
    return &(systemIdIccpGroup.EntityData)
}

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem
// Data for this item
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group that the system ID is for. The type is interface{} with range:
    // 0..4294967295.
    IccpGroupId interface{}

    // Priority of the system (deprecated). The type is interface{} with range:
    // 0..65535.
    SystemPriority interface{}

    // MAC Address used to identify the system (deprecated). The type is string
    // with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    SystemMacAddress interface{}

    // System ID.
    SystemId BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_
}

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetEntityData() *types.CommonEntityData {
    systemIdIccpGroupItem.EntityData.YFilter = systemIdIccpGroupItem.YFilter
    systemIdIccpGroupItem.EntityData.YangName = "system-id-iccp-group-item"
    systemIdIccpGroupItem.EntityData.BundleName = "cisco_ios_xr"
    systemIdIccpGroupItem.EntityData.ParentYangName = "system-id-iccp-group"
    systemIdIccpGroupItem.EntityData.SegmentPath = "system-id-iccp-group-item"
    systemIdIccpGroupItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemIdIccpGroupItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemIdIccpGroupItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemIdIccpGroupItem.EntityData.Children = make(map[string]types.YChild)
    systemIdIccpGroupItem.EntityData.Children["system-id"] = types.YChild{"SystemId", &systemIdIccpGroupItem.SystemId}
    systemIdIccpGroupItem.EntityData.Leafs = make(map[string]types.YLeaf)
    systemIdIccpGroupItem.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", systemIdIccpGroupItem.IccpGroupId}
    systemIdIccpGroupItem.EntityData.Leafs["system-priority"] = types.YLeaf{"SystemPriority", systemIdIccpGroupItem.SystemPriority}
    systemIdIccpGroupItem.EntityData.Leafs["system-mac-address"] = types.YLeaf{"SystemMacAddress", systemIdIccpGroupItem.SystemMacAddress}
    return &(systemIdIccpGroupItem.EntityData)
}

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_
// System ID
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId__SystemMacAddr
}

func (systemId_ *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_) GetEntityData() *types.CommonEntityData {
    systemId_.EntityData.YFilter = systemId_.YFilter
    systemId_.EntityData.YangName = "system-id"
    systemId_.EntityData.BundleName = "cisco_ios_xr"
    systemId_.EntityData.ParentYangName = "system-id-iccp-group-item"
    systemId_.EntityData.SegmentPath = "system-id"
    systemId_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId_.EntityData.Children = make(map[string]types.YChild)
    systemId_.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &systemId_.SystemMacAddr}
    systemId_.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId_.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", systemId_.SystemPrio}
    return &(systemId_.EntityData)
}

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId__SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId__SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId__SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// BundleInformation_MlacpMemberCounters
// Member specific counters of mLACP events
type BundleInformation_MlacpMemberCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Groups with counters of their member's mLACP events.
    IccpGroups BundleInformation_MlacpMemberCounters_IccpGroups

    // Member interfaces with counters of mLACP events.
    Members BundleInformation_MlacpMemberCounters_Members

    // Bundle interfaces with counters of their member's mLACP events.
    Bundles BundleInformation_MlacpMemberCounters_Bundles

    // Devices with counters of their member's mLACP events.
    Nodes BundleInformation_MlacpMemberCounters_Nodes
}

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetEntityData() *types.CommonEntityData {
    mlacpMemberCounters.EntityData.YFilter = mlacpMemberCounters.YFilter
    mlacpMemberCounters.EntityData.YangName = "mlacp-member-counters"
    mlacpMemberCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpMemberCounters.EntityData.ParentYangName = "bundle-information"
    mlacpMemberCounters.EntityData.SegmentPath = "mlacp-member-counters"
    mlacpMemberCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpMemberCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpMemberCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpMemberCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpMemberCounters.EntityData.Children["iccp-groups"] = types.YChild{"IccpGroups", &mlacpMemberCounters.IccpGroups}
    mlacpMemberCounters.EntityData.Children["members"] = types.YChild{"Members", &mlacpMemberCounters.Members}
    mlacpMemberCounters.EntityData.Children["bundles"] = types.YChild{"Bundles", &mlacpMemberCounters.Bundles}
    mlacpMemberCounters.EntityData.Children["nodes"] = types.YChild{"Nodes", &mlacpMemberCounters.Nodes}
    mlacpMemberCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(mlacpMemberCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups
// ICCP Groups with counters of their member's
// mLACP events
type BundleInformation_MlacpMemberCounters_IccpGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup.
    IccpGroup []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup
}

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetEntityData() *types.CommonEntityData {
    iccpGroups.EntityData.YFilter = iccpGroups.YFilter
    iccpGroups.EntityData.YangName = "iccp-groups"
    iccpGroups.EntityData.BundleName = "cisco_ios_xr"
    iccpGroups.EntityData.ParentYangName = "mlacp-member-counters"
    iccpGroups.EntityData.SegmentPath = "iccp-groups"
    iccpGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroups.EntityData.Children = make(map[string]types.YChild)
    iccpGroups.EntityData.Children["iccp-group"] = types.YChild{"IccpGroup", nil}
    for i := range iccpGroups.IccpGroup {
        iccpGroups.EntityData.Children[types.GetSegmentPath(&iccpGroups.IccpGroup[i])] = types.YChild{"IccpGroup", &iccpGroups.IccpGroup[i]}
    }
    iccpGroups.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(iccpGroups.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup
// ICCP Group ID
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item and all its members.
    IccpGroupItem BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem
}

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetEntityData() *types.CommonEntityData {
    iccpGroup.EntityData.YFilter = iccpGroup.YFilter
    iccpGroup.EntityData.YangName = "iccp-group"
    iccpGroup.EntityData.BundleName = "cisco_ios_xr"
    iccpGroup.EntityData.ParentYangName = "iccp-groups"
    iccpGroup.EntityData.SegmentPath = "iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", iccpGroup.IccpGroup) + "']"
    iccpGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroup.EntityData.Children = make(map[string]types.YChild)
    iccpGroup.EntityData.Children["iccp-group-item"] = types.YChild{"IccpGroupItem", &iccpGroup.IccpGroupItem}
    iccpGroup.EntityData.Leafs = make(map[string]types.YLeaf)
    iccpGroup.EntityData.Leafs["iccp-group"] = types.YLeaf{"IccpGroup", iccpGroup.IccpGroup}
    return &(iccpGroup.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem
// Data for this item and all its members
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP counter information items. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items.
    Items []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items
}

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetEntityData() *types.CommonEntityData {
    iccpGroupItem.EntityData.YFilter = iccpGroupItem.YFilter
    iccpGroupItem.EntityData.YangName = "iccp-group-item"
    iccpGroupItem.EntityData.BundleName = "cisco_ios_xr"
    iccpGroupItem.EntityData.ParentYangName = "iccp-group"
    iccpGroupItem.EntityData.SegmentPath = "iccp-group-item"
    iccpGroupItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    iccpGroupItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    iccpGroupItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    iccpGroupItem.EntityData.Children = make(map[string]types.YChild)
    iccpGroupItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range iccpGroupItem.Items {
        iccpGroupItem.EntityData.Children[types.GetSegmentPath(&iccpGroupItem.Items[i])] = types.YChild{"Items", &iccpGroupItem.Items[i]}
    }
    iccpGroupItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(iccpGroupItem.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items
// mLACP counter information items
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData
}

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "iccp-group-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &items.BundleData}
    items.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range items.NodeData {
        items.EntityData.Children[types.GetSegmentPath(&items.NodeData[i])] = types.YChild{"NodeData", &items.NodeData[i]}
    }
    items.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range items.MemberData {
        items.EntityData.Children[types.GetSegmentPath(&items.MemberData[i])] = types.YChild{"MemberData", &items.MemberData[i]}
    }
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(items.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "items"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-sync-requests-on-all-local-ports"] = types.YChild{"MlacpSyncRequestsOnAllLocalPorts", &bundleData.MlacpSyncRequestsOnAllLocalPorts}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    bundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleData.IccpGroupId}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YFilter = mlacpSyncRequestsOnAllLocalPorts.YFilter
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YangName = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.ParentYangName = "bundle-data"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData_

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "items"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["node-data"] = types.YChild{"NodeData", &nodeData.NodeData}
    nodeData.EntityData.Children["mlacp-sync-requests-on-all-foreign-ports"] = types.YChild{"MlacpSyncRequestsOnAllForeignPorts", &nodeData.MlacpSyncRequestsOnAllForeignPorts}
    nodeData.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range nodeData.MemberData {
        nodeData.EntityData.Children[types.GetSegmentPath(&nodeData.MemberData[i])] = types.YChild{"MemberData", &nodeData.MemberData[i]}
    }
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData_
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData_ *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData_) GetEntityData() *types.CommonEntityData {
    nodeData_.EntityData.YFilter = nodeData_.YFilter
    nodeData_.EntityData.YangName = "node-data"
    nodeData_.EntityData.BundleName = "cisco_ios_xr"
    nodeData_.EntityData.ParentYangName = "node-data"
    nodeData_.EntityData.SegmentPath = "node-data"
    nodeData_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData_.EntityData.Children = make(map[string]types.YChild)
    nodeData_.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData_.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", nodeData_.NodeId}
    nodeData_.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", nodeData_.IccpGroupId}
    return &(nodeData_.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YFilter = mlacpSyncRequestsOnAllForeignPorts.YFilter
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "node-data"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "items"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members
// Member interfaces with counters of mLACP events
type BundleInformation_MlacpMemberCounters_Members struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member.
    Member []BundleInformation_MlacpMemberCounters_Members_Member
}

func (members *BundleInformation_MlacpMemberCounters_Members) GetEntityData() *types.CommonEntityData {
    members.EntityData.YFilter = members.YFilter
    members.EntityData.YangName = "members"
    members.EntityData.BundleName = "cisco_ios_xr"
    members.EntityData.ParentYangName = "mlacp-member-counters"
    members.EntityData.SegmentPath = "members"
    members.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    members.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    members.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    members.EntityData.Children = make(map[string]types.YChild)
    members.EntityData.Children["member"] = types.YChild{"Member", nil}
    for i := range members.Member {
        members.EntityData.Children[types.GetSegmentPath(&members.Member[i])] = types.YChild{"Member", &members.Member[i]}
    }
    members.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(members.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member
// Member interface
type BundleInformation_MlacpMemberCounters_Members_Member struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    MemberItem BundleInformation_MlacpMemberCounters_Members_Member_MemberItem
}

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetEntityData() *types.CommonEntityData {
    member.EntityData.YFilter = member.YFilter
    member.EntityData.YangName = "member"
    member.EntityData.BundleName = "cisco_ios_xr"
    member.EntityData.ParentYangName = "members"
    member.EntityData.SegmentPath = "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
    member.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    member.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    member.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    member.EntityData.Children = make(map[string]types.YChild)
    member.EntityData.Children["member-item"] = types.YChild{"MemberItem", &member.MemberItem}
    member.EntityData.Leafs = make(map[string]types.YLeaf)
    member.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", member.MemberInterface}
    return &(member.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem
// Data for this item
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP counter information items. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items.
    Items []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items
}

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetEntityData() *types.CommonEntityData {
    memberItem.EntityData.YFilter = memberItem.YFilter
    memberItem.EntityData.YangName = "member-item"
    memberItem.EntityData.BundleName = "cisco_ios_xr"
    memberItem.EntityData.ParentYangName = "member"
    memberItem.EntityData.SegmentPath = "member-item"
    memberItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberItem.EntityData.Children = make(map[string]types.YChild)
    memberItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range memberItem.Items {
        memberItem.EntityData.Children[types.GetSegmentPath(&memberItem.Items[i])] = types.YChild{"Items", &memberItem.Items[i]}
    }
    memberItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(memberItem.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items
// mLACP counter information items
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData
}

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "member-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &items.BundleData}
    items.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range items.NodeData {
        items.EntityData.Children[types.GetSegmentPath(&items.NodeData[i])] = types.YChild{"NodeData", &items.NodeData[i]}
    }
    items.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range items.MemberData {
        items.EntityData.Children[types.GetSegmentPath(&items.MemberData[i])] = types.YChild{"MemberData", &items.MemberData[i]}
    }
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(items.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "items"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-sync-requests-on-all-local-ports"] = types.YChild{"MlacpSyncRequestsOnAllLocalPorts", &bundleData.MlacpSyncRequestsOnAllLocalPorts}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    bundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleData.IccpGroupId}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YFilter = mlacpSyncRequestsOnAllLocalPorts.YFilter
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YangName = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.ParentYangName = "bundle-data"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData_

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "items"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["node-data"] = types.YChild{"NodeData", &nodeData.NodeData}
    nodeData.EntityData.Children["mlacp-sync-requests-on-all-foreign-ports"] = types.YChild{"MlacpSyncRequestsOnAllForeignPorts", &nodeData.MlacpSyncRequestsOnAllForeignPorts}
    nodeData.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range nodeData.MemberData {
        nodeData.EntityData.Children[types.GetSegmentPath(&nodeData.MemberData[i])] = types.YChild{"MemberData", &nodeData.MemberData[i]}
    }
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData_
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData_ *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData_) GetEntityData() *types.CommonEntityData {
    nodeData_.EntityData.YFilter = nodeData_.YFilter
    nodeData_.EntityData.YangName = "node-data"
    nodeData_.EntityData.BundleName = "cisco_ios_xr"
    nodeData_.EntityData.ParentYangName = "node-data"
    nodeData_.EntityData.SegmentPath = "node-data"
    nodeData_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData_.EntityData.Children = make(map[string]types.YChild)
    nodeData_.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData_.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", nodeData_.NodeId}
    nodeData_.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", nodeData_.IccpGroupId}
    return &(nodeData_.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YFilter = mlacpSyncRequestsOnAllForeignPorts.YFilter
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "node-data"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "items"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles
// Bundle interfaces with counters of their
// member's mLACP events
type BundleInformation_MlacpMemberCounters_Bundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle.
    Bundle []BundleInformation_MlacpMemberCounters_Bundles_Bundle
}

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetEntityData() *types.CommonEntityData {
    bundles.EntityData.YFilter = bundles.YFilter
    bundles.EntityData.YangName = "bundles"
    bundles.EntityData.BundleName = "cisco_ios_xr"
    bundles.EntityData.ParentYangName = "mlacp-member-counters"
    bundles.EntityData.SegmentPath = "bundles"
    bundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundles.EntityData.Children = make(map[string]types.YChild)
    bundles.EntityData.Children["bundle"] = types.YChild{"Bundle", nil}
    for i := range bundles.Bundle {
        bundles.EntityData.Children[types.GetSegmentPath(&bundles.Bundle[i])] = types.YChild{"Bundle", &bundles.Bundle[i]}
    }
    bundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundles.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle
// Bundle interface
type BundleInformation_MlacpMemberCounters_Bundles_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for this item.
    BundleItem BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem
}

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "bundles"
    bundle.EntityData.SegmentPath = "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["bundle-item"] = types.YChild{"BundleItem", &bundle.BundleItem}
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", bundle.BundleInterface}
    return &(bundle.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem
// Data for this item
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData
}

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetEntityData() *types.CommonEntityData {
    bundleItem.EntityData.YFilter = bundleItem.YFilter
    bundleItem.EntityData.YangName = "bundle-item"
    bundleItem.EntityData.BundleName = "cisco_ios_xr"
    bundleItem.EntityData.ParentYangName = "bundle"
    bundleItem.EntityData.SegmentPath = "bundle-item"
    bundleItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleItem.EntityData.Children = make(map[string]types.YChild)
    bundleItem.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &bundleItem.BundleData}
    bundleItem.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range bundleItem.NodeData {
        bundleItem.EntityData.Children[types.GetSegmentPath(&bundleItem.NodeData[i])] = types.YChild{"NodeData", &bundleItem.NodeData[i]}
    }
    bundleItem.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range bundleItem.MemberData {
        bundleItem.EntityData.Children[types.GetSegmentPath(&bundleItem.MemberData[i])] = types.YChild{"MemberData", &bundleItem.MemberData[i]}
    }
    bundleItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundleItem.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "bundle-item"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-sync-requests-on-all-local-ports"] = types.YChild{"MlacpSyncRequestsOnAllLocalPorts", &bundleData.MlacpSyncRequestsOnAllLocalPorts}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    bundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleData.IccpGroupId}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YFilter = mlacpSyncRequestsOnAllLocalPorts.YFilter
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YangName = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.ParentYangName = "bundle-data"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData_

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "bundle-item"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["node-data"] = types.YChild{"NodeData", &nodeData.NodeData}
    nodeData.EntityData.Children["mlacp-sync-requests-on-all-foreign-ports"] = types.YChild{"MlacpSyncRequestsOnAllForeignPorts", &nodeData.MlacpSyncRequestsOnAllForeignPorts}
    nodeData.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range nodeData.MemberData {
        nodeData.EntityData.Children[types.GetSegmentPath(&nodeData.MemberData[i])] = types.YChild{"MemberData", &nodeData.MemberData[i]}
    }
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData_
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData_ *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData_) GetEntityData() *types.CommonEntityData {
    nodeData_.EntityData.YFilter = nodeData_.YFilter
    nodeData_.EntityData.YangName = "node-data"
    nodeData_.EntityData.BundleName = "cisco_ios_xr"
    nodeData_.EntityData.ParentYangName = "node-data"
    nodeData_.EntityData.SegmentPath = "node-data"
    nodeData_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData_.EntityData.Children = make(map[string]types.YChild)
    nodeData_.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData_.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", nodeData_.NodeId}
    nodeData_.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", nodeData_.IccpGroupId}
    return &(nodeData_.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YFilter = mlacpSyncRequestsOnAllForeignPorts.YFilter
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "node-data"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "bundle-item"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes
// Devices with counters of their member's mLACP
// events
type BundleInformation_MlacpMemberCounters_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node ID. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node.
    Node []BundleInformation_MlacpMemberCounters_Nodes_Node
}

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "mlacp-member-counters"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = make(map[string]types.YChild)
    nodes.EntityData.Children["node"] = types.YChild{"Node", nil}
    for i := range nodes.Node {
        nodes.EntityData.Children[types.GetSegmentPath(&nodes.Node[i])] = types.YChild{"Node", &nodes.Node[i]}
    }
    nodes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodes.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node
// Node ID
type BundleInformation_MlacpMemberCounters_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. For a local device the Node ID e.g. '0_0_CPU0',
    // for a peer device the LDP ID followed by the ICCP Group ID e.g. '5.4.3.2
    // ,4'. The type is string.
    Node interface{}

    // Data for this item.
    NodeItem BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem
}

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + "[node='" + fmt.Sprintf("%v", node.Node) + "']"
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = make(map[string]types.YChild)
    node.EntityData.Children["node-item"] = types.YChild{"NodeItem", &node.NodeItem}
    node.EntityData.Leafs = make(map[string]types.YLeaf)
    node.EntityData.Leafs["node"] = types.YLeaf{"Node", node.Node}
    return &(node.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem
// Data for this item
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // mLACP counter information items. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items.
    Items []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items
}

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetEntityData() *types.CommonEntityData {
    nodeItem.EntityData.YFilter = nodeItem.YFilter
    nodeItem.EntityData.YangName = "node-item"
    nodeItem.EntityData.BundleName = "cisco_ios_xr"
    nodeItem.EntityData.ParentYangName = "node"
    nodeItem.EntityData.SegmentPath = "node-item"
    nodeItem.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeItem.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeItem.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeItem.EntityData.Children = make(map[string]types.YChild)
    nodeItem.EntityData.Children["items"] = types.YChild{"Items", nil}
    for i := range nodeItem.Items {
        nodeItem.EntityData.Children[types.GetSegmentPath(&nodeItem.Items[i])] = types.YChild{"Items", &nodeItem.Items[i]}
    }
    nodeItem.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeItem.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items
// mLACP counter information items
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData
}

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetEntityData() *types.CommonEntityData {
    items.EntityData.YFilter = items.YFilter
    items.EntityData.YangName = "items"
    items.EntityData.BundleName = "cisco_ios_xr"
    items.EntityData.ParentYangName = "node-item"
    items.EntityData.SegmentPath = "items"
    items.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    items.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    items.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    items.EntityData.Children = make(map[string]types.YChild)
    items.EntityData.Children["bundle-data"] = types.YChild{"BundleData", &items.BundleData}
    items.EntityData.Children["node-data"] = types.YChild{"NodeData", nil}
    for i := range items.NodeData {
        items.EntityData.Children[types.GetSegmentPath(&items.NodeData[i])] = types.YChild{"NodeData", &items.NodeData[i]}
    }
    items.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range items.MemberData {
        items.EntityData.Children[types.GetSegmentPath(&items.MemberData[i])] = types.YChild{"MemberData", &items.MemberData[i]}
    }
    items.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(items.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "items"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["mlacp-sync-requests-on-all-local-ports"] = types.YChild{"MlacpSyncRequestsOnAllLocalPorts", &bundleData.MlacpSyncRequestsOnAllLocalPorts}
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundleData.BundleName}
    bundleData.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", bundleData.IccpGroupId}
    return &(bundleData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YFilter = mlacpSyncRequestsOnAllLocalPorts.YFilter
    mlacpSyncRequestsOnAllLocalPorts.EntityData.YangName = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.ParentYangName = "bundle-data"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-local-ports"
    mlacpSyncRequestsOnAllLocalPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllLocalPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllLocalPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllLocalPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-local-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData_

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetEntityData() *types.CommonEntityData {
    nodeData.EntityData.YFilter = nodeData.YFilter
    nodeData.EntityData.YangName = "node-data"
    nodeData.EntityData.BundleName = "cisco_ios_xr"
    nodeData.EntityData.ParentYangName = "items"
    nodeData.EntityData.SegmentPath = "node-data"
    nodeData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData.EntityData.Children = make(map[string]types.YChild)
    nodeData.EntityData.Children["node-data"] = types.YChild{"NodeData", &nodeData.NodeData}
    nodeData.EntityData.Children["mlacp-sync-requests-on-all-foreign-ports"] = types.YChild{"MlacpSyncRequestsOnAllForeignPorts", &nodeData.MlacpSyncRequestsOnAllForeignPorts}
    nodeData.EntityData.Children["member-data"] = types.YChild{"MemberData", nil}
    for i := range nodeData.MemberData {
        nodeData.EntityData.Children[types.GetSegmentPath(&nodeData.MemberData[i])] = types.YChild{"MemberData", &nodeData.MemberData[i]}
    }
    nodeData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodeData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData_
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData_ *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData_) GetEntityData() *types.CommonEntityData {
    nodeData_.EntityData.YFilter = nodeData_.YFilter
    nodeData_.EntityData.YangName = "node-data"
    nodeData_.EntityData.BundleName = "cisco_ios_xr"
    nodeData_.EntityData.ParentYangName = "node-data"
    nodeData_.EntityData.SegmentPath = "node-data"
    nodeData_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodeData_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodeData_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodeData_.EntityData.Children = make(map[string]types.YChild)
    nodeData_.EntityData.Leafs = make(map[string]types.YLeaf)
    nodeData_.EntityData.Leafs["node-id"] = types.YLeaf{"NodeId", nodeData_.NodeId}
    nodeData_.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", nodeData_.IccpGroupId}
    return &(nodeData_.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetEntityData() *types.CommonEntityData {
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YFilter = mlacpSyncRequestsOnAllForeignPorts.YFilter
    mlacpSyncRequestsOnAllForeignPorts.EntityData.YangName = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleName = "cisco_ios_xr"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.ParentYangName = "node-data"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.SegmentPath = "mlacp-sync-requests-on-all-foreign-ports"
    mlacpSyncRequestsOnAllForeignPorts.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpSyncRequestsOnAllForeignPorts.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children = make(map[string]types.YChild)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared}
    mlacpSyncRequestsOnAllForeignPorts.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared}
    return &(mlacpSyncRequestsOnAllForeignPorts.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-sync-requests-on-all-foreign-ports"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "node-data"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetEntityData() *types.CommonEntityData {
    memberData.EntityData.YFilter = memberData.YFilter
    memberData.EntityData.YangName = "member-data"
    memberData.EntityData.BundleName = "cisco_ios_xr"
    memberData.EntityData.ParentYangName = "items"
    memberData.EntityData.SegmentPath = "member-data"
    memberData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberData.EntityData.Children = make(map[string]types.YChild)
    memberData.EntityData.Children["mlacp-tlv-counters"] = types.YChild{"MlacpTlvCounters", &memberData.MlacpTlvCounters}
    memberData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberData.EntityData.Leafs["port-name"] = types.YLeaf{"PortName", memberData.PortName}
    return &(memberData.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetEntityData() *types.CommonEntityData {
    mlacpTlvCounters.EntityData.YFilter = mlacpTlvCounters.YFilter
    mlacpTlvCounters.EntityData.YangName = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.BundleName = "cisco_ios_xr"
    mlacpTlvCounters.EntityData.ParentYangName = "member-data"
    mlacpTlvCounters.EntityData.SegmentPath = "mlacp-tlv-counters"
    mlacpTlvCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mlacpTlvCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mlacpTlvCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mlacpTlvCounters.EntityData.Children = make(map[string]types.YChild)
    mlacpTlvCounters.EntityData.Children["received-sync-requests"] = types.YChild{"ReceivedSyncRequests", &mlacpTlvCounters.ReceivedSyncRequests}
    mlacpTlvCounters.EntityData.Leafs = make(map[string]types.YLeaf)
    mlacpTlvCounters.EntityData.Leafs["sent-config-tl-vs"] = types.YLeaf{"SentConfigTlVs", mlacpTlvCounters.SentConfigTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-state-tl-vs"] = types.YLeaf{"SentStateTlVs", mlacpTlvCounters.SentStateTlVs}
    mlacpTlvCounters.EntityData.Leafs["sent-priority-tl-vs"] = types.YLeaf{"SentPriorityTlVs", mlacpTlvCounters.SentPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-priority-tl-vs"] = types.YLeaf{"ReceivedPriorityTlVs", mlacpTlvCounters.ReceivedPriorityTlVs}
    mlacpTlvCounters.EntityData.Leafs["received-nak-tl-vs"] = types.YLeaf{"ReceivedNakTlVs", mlacpTlvCounters.ReceivedNakTlVs}
    mlacpTlvCounters.EntityData.Leafs["last-time-cleared"] = types.YLeaf{"LastTimeCleared", mlacpTlvCounters.LastTimeCleared}
    mlacpTlvCounters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", mlacpTlvCounters.TimeSinceCleared}
    mlacpTlvCounters.EntityData.Leafs["last-unexpected-event"] = types.YLeaf{"LastUnexpectedEvent", mlacpTlvCounters.LastUnexpectedEvent}
    return &(mlacpTlvCounters.EntityData)
}

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetEntityData() *types.CommonEntityData {
    receivedSyncRequests.EntityData.YFilter = receivedSyncRequests.YFilter
    receivedSyncRequests.EntityData.YangName = "received-sync-requests"
    receivedSyncRequests.EntityData.BundleName = "cisco_ios_xr"
    receivedSyncRequests.EntityData.ParentYangName = "mlacp-tlv-counters"
    receivedSyncRequests.EntityData.SegmentPath = "received-sync-requests"
    receivedSyncRequests.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedSyncRequests.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedSyncRequests.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedSyncRequests.EntityData.Children = make(map[string]types.YChild)
    receivedSyncRequests.EntityData.Leafs = make(map[string]types.YLeaf)
    receivedSyncRequests.EntityData.Leafs["all-syncs"] = types.YLeaf{"AllSyncs", receivedSyncRequests.AllSyncs}
    receivedSyncRequests.EntityData.Leafs["config-syncs"] = types.YLeaf{"ConfigSyncs", receivedSyncRequests.ConfigSyncs}
    receivedSyncRequests.EntityData.Leafs["state-syncs"] = types.YLeaf{"StateSyncs", receivedSyncRequests.StateSyncs}
    return &(receivedSyncRequests.EntityData)
}

// LacpData
// lacp data
type LacpData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global LACP data.
    Global LacpData_Global
}

func (lacpData *LacpData) GetEntityData() *types.CommonEntityData {
    lacpData.EntityData.YFilter = lacpData.YFilter
    lacpData.EntityData.YangName = "lacp-data"
    lacpData.EntityData.BundleName = "cisco_ios_xr"
    lacpData.EntityData.ParentYangName = "Cisco-IOS-XR-bundlemgr-oper"
    lacpData.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-oper:lacp-data"
    lacpData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpData.EntityData.Children = make(map[string]types.YChild)
    lacpData.EntityData.Children["global"] = types.YChild{"Global", &lacpData.Global}
    lacpData.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpData.EntityData)
}

// LacpData_Global
// Global LACP data
type LacpData_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACP System ID.
    SystemId LacpData_Global_SystemId
}

func (global *LacpData_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "cisco_ios_xr"
    global.EntityData.ParentYangName = "lacp-data"
    global.EntityData.SegmentPath = "global"
    global.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    global.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    global.EntityData.Children = make(map[string]types.YChild)
    global.EntityData.Children["system-id"] = types.YChild{"SystemId", &global.SystemId}
    global.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(global.EntityData)
}

// LacpData_Global_SystemId
// LACP System ID
type LacpData_Global_SystemId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ICCP Group that the system ID is for. The type is interface{} with range:
    // 0..4294967295.
    IccpGroupId interface{}

    // Priority of the system (deprecated). The type is interface{} with range:
    // 0..65535.
    SystemPriority interface{}

    // MAC Address used to identify the system (deprecated). The type is string
    // with pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    SystemMacAddress interface{}

    // System ID.
    SystemId LacpData_Global_SystemId_SystemId_
}

func (systemId *LacpData_Global_SystemId) GetEntityData() *types.CommonEntityData {
    systemId.EntityData.YFilter = systemId.YFilter
    systemId.EntityData.YangName = "system-id"
    systemId.EntityData.BundleName = "cisco_ios_xr"
    systemId.EntityData.ParentYangName = "global"
    systemId.EntityData.SegmentPath = "system-id"
    systemId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId.EntityData.Children = make(map[string]types.YChild)
    systemId.EntityData.Children["system-id"] = types.YChild{"SystemId", &systemId.SystemId}
    systemId.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", systemId.IccpGroupId}
    systemId.EntityData.Leafs["system-priority"] = types.YLeaf{"SystemPriority", systemId.SystemPriority}
    systemId.EntityData.Leafs["system-mac-address"] = types.YLeaf{"SystemMacAddress", systemId.SystemMacAddress}
    return &(systemId.EntityData)
}

// LacpData_Global_SystemId_SystemId_
// System ID
type LacpData_Global_SystemId_SystemId_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr LacpData_Global_SystemId_SystemId__SystemMacAddr
}

func (systemId_ *LacpData_Global_SystemId_SystemId_) GetEntityData() *types.CommonEntityData {
    systemId_.EntityData.YFilter = systemId_.YFilter
    systemId_.EntityData.YangName = "system-id"
    systemId_.EntityData.BundleName = "cisco_ios_xr"
    systemId_.EntityData.ParentYangName = "system-id"
    systemId_.EntityData.SegmentPath = "system-id"
    systemId_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemId_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemId_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemId_.EntityData.Children = make(map[string]types.YChild)
    systemId_.EntityData.Children["system-mac-addr"] = types.YChild{"SystemMacAddr", &systemId_.SystemMacAddr}
    systemId_.EntityData.Leafs = make(map[string]types.YLeaf)
    systemId_.EntityData.Leafs["system-prio"] = types.YLeaf{"SystemPrio", systemId_.SystemPrio}
    return &(systemId_.EntityData)
}

// LacpData_Global_SystemId_SystemId__SystemMacAddr
// MAC Address used to identify the system
type LacpData_Global_SystemId_SystemId__SystemMacAddr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // b'([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?'.
    Macaddr interface{}
}

func (systemMacAddr *LacpData_Global_SystemId_SystemId__SystemMacAddr) GetEntityData() *types.CommonEntityData {
    systemMacAddr.EntityData.YFilter = systemMacAddr.YFilter
    systemMacAddr.EntityData.YangName = "system-mac-addr"
    systemMacAddr.EntityData.BundleName = "cisco_ios_xr"
    systemMacAddr.EntityData.ParentYangName = "system-id"
    systemMacAddr.EntityData.SegmentPath = "system-mac-addr"
    systemMacAddr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    systemMacAddr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    systemMacAddr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    systemMacAddr.EntityData.Children = make(map[string]types.YChild)
    systemMacAddr.EntityData.Leafs = make(map[string]types.YLeaf)
    systemMacAddr.EntityData.Leafs["macaddr"] = types.YLeaf{"Macaddr", systemMacAddr.Macaddr}
    return &(systemMacAddr.EntityData)
}

// Bundles
// bundles
type Bundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per bundle operational data.
    Bundles Bundles_Bundles_
}

func (bundles *Bundles) GetEntityData() *types.CommonEntityData {
    bundles.EntityData.YFilter = bundles.YFilter
    bundles.EntityData.YangName = "bundles"
    bundles.EntityData.BundleName = "cisco_ios_xr"
    bundles.EntityData.ParentYangName = "Cisco-IOS-XR-bundlemgr-oper"
    bundles.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-oper:bundles"
    bundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundles.EntityData.Children = make(map[string]types.YChild)
    bundles.EntityData.Children["bundles"] = types.YChild{"Bundles", &bundles.Bundles}
    bundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundles.EntityData)
}

// Bundles_Bundles_
// Per bundle operational data
type Bundles_Bundles_ struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of Bundles_Bundles__Bundle.
    Bundle []Bundles_Bundles__Bundle
}

func (bundles_ *Bundles_Bundles_) GetEntityData() *types.CommonEntityData {
    bundles_.EntityData.YFilter = bundles_.YFilter
    bundles_.EntityData.YangName = "bundles"
    bundles_.EntityData.BundleName = "cisco_ios_xr"
    bundles_.EntityData.ParentYangName = "bundles"
    bundles_.EntityData.SegmentPath = "bundles"
    bundles_.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundles_.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundles_.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundles_.EntityData.Children = make(map[string]types.YChild)
    bundles_.EntityData.Children["bundle"] = types.YChild{"Bundle", nil}
    for i := range bundles_.Bundle {
        bundles_.EntityData.Children[types.GetSegmentPath(&bundles_.Bundle[i])] = types.YChild{"Bundle", &bundles_.Bundle[i]}
    }
    bundles_.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundles_.EntityData)
}

// Bundles_Bundles__Bundle
// Bundle interface
type Bundles_Bundles__Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleInterface interface{}

    // Data for each Bundle.
    Data Bundles_Bundles__Bundle_Data

    // Member interface.
    Members Bundles_Bundles__Bundle_Members
}

func (bundle *Bundles_Bundles__Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "bundles"
    bundle.EntityData.SegmentPath = "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["data"] = types.YChild{"Data", &bundle.Data}
    bundle.EntityData.Children["members"] = types.YChild{"Members", &bundle.Members}
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bundle.EntityData.Leafs["bundle-interface"] = types.YLeaf{"BundleInterface", bundle.BundleInterface}
    return &(bundle.EntityData)
}

// Bundles_Bundles__Bundle_Data
// Data for each Bundle
type Bundles_Bundles__Bundle_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: b'[a-zA-Z0-9./-]+'.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: b'[a-zA-Z0-9./-]+'.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress Bundles_Bundles__Bundle_Data_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // Bundles_Bundles__Bundle_Data_BfdConfig.
    BfdConfig []Bundles_Bundles__Bundle_Data_BfdConfig
}

func (data *Bundles_Bundles__Bundle_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "bundle"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &data.MacAddress}
    data.EntityData.Children["bfd-config"] = types.YChild{"BfdConfig", nil}
    for i := range data.BfdConfig {
        data.EntityData.Children[types.GetSegmentPath(&data.BfdConfig[i])] = types.YChild{"BfdConfig", &data.BfdConfig[i]}
    }
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["bundle-interface-name"] = types.YLeaf{"BundleInterfaceName", data.BundleInterfaceName}
    data.EntityData.Leafs["available-bandwidth"] = types.YLeaf{"AvailableBandwidth", data.AvailableBandwidth}
    data.EntityData.Leafs["effective-bandwidth"] = types.YLeaf{"EffectiveBandwidth", data.EffectiveBandwidth}
    data.EntityData.Leafs["configured-bandwidth"] = types.YLeaf{"ConfiguredBandwidth", data.ConfiguredBandwidth}
    data.EntityData.Leafs["minimum-active-links"] = types.YLeaf{"MinimumActiveLinks", data.MinimumActiveLinks}
    data.EntityData.Leafs["maximum-active-links"] = types.YLeaf{"MaximumActiveLinks", data.MaximumActiveLinks}
    data.EntityData.Leafs["maximum-active-links-source"] = types.YLeaf{"MaximumActiveLinksSource", data.MaximumActiveLinksSource}
    data.EntityData.Leafs["minimum-bandwidth"] = types.YLeaf{"MinimumBandwidth", data.MinimumBandwidth}
    data.EntityData.Leafs["primary-member"] = types.YLeaf{"PrimaryMember", data.PrimaryMember}
    data.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", data.BundleStatus}
    data.EntityData.Leafs["active-member-count"] = types.YLeaf{"ActiveMemberCount", data.ActiveMemberCount}
    data.EntityData.Leafs["standby-member-count"] = types.YLeaf{"StandbyMemberCount", data.StandbyMemberCount}
    data.EntityData.Leafs["configured-member-count"] = types.YLeaf{"ConfiguredMemberCount", data.ConfiguredMemberCount}
    data.EntityData.Leafs["mac-source"] = types.YLeaf{"MacSource", data.MacSource}
    data.EntityData.Leafs["mac-source-member"] = types.YLeaf{"MacSourceMember", data.MacSourceMember}
    data.EntityData.Leafs["inter-chassis"] = types.YLeaf{"InterChassis", data.InterChassis}
    data.EntityData.Leafs["is-active"] = types.YLeaf{"IsActive", data.IsActive}
    data.EntityData.Leafs["lacp-status"] = types.YLeaf{"LacpStatus", data.LacpStatus}
    data.EntityData.Leafs["mlacp-status"] = types.YLeaf{"MlacpStatus", data.MlacpStatus}
    data.EntityData.Leafs["ipv4bfd-status"] = types.YLeaf{"Ipv4BfdStatus", data.Ipv4BfdStatus}
    data.EntityData.Leafs["link-order-status"] = types.YLeaf{"LinkOrderStatus", data.LinkOrderStatus}
    data.EntityData.Leafs["ipv6bfd-status"] = types.YLeaf{"Ipv6BfdStatus", data.Ipv6BfdStatus}
    data.EntityData.Leafs["load-balance-hash-type"] = types.YLeaf{"LoadBalanceHashType", data.LoadBalanceHashType}
    data.EntityData.Leafs["load-balance-locality-threshold"] = types.YLeaf{"LoadBalanceLocalityThreshold", data.LoadBalanceLocalityThreshold}
    data.EntityData.Leafs["suppression-timer"] = types.YLeaf{"SuppressionTimer", data.SuppressionTimer}
    data.EntityData.Leafs["wait-while-timer"] = types.YLeaf{"WaitWhileTimer", data.WaitWhileTimer}
    data.EntityData.Leafs["collector-max-delay"] = types.YLeaf{"CollectorMaxDelay", data.CollectorMaxDelay}
    data.EntityData.Leafs["cisco-extensions"] = types.YLeaf{"CiscoExtensions", data.CiscoExtensions}
    data.EntityData.Leafs["lacp-nonrevertive"] = types.YLeaf{"LacpNonrevertive", data.LacpNonrevertive}
    data.EntityData.Leafs["iccp-group-id"] = types.YLeaf{"IccpGroupId", data.IccpGroupId}
    data.EntityData.Leafs["active-foreign-member-count"] = types.YLeaf{"ActiveForeignMemberCount", data.ActiveForeignMemberCount}
    data.EntityData.Leafs["configured-foreign-member-count"] = types.YLeaf{"ConfiguredForeignMemberCount", data.ConfiguredForeignMemberCount}
    data.EntityData.Leafs["switchover-type"] = types.YLeaf{"SwitchoverType", data.SwitchoverType}
    data.EntityData.Leafs["maximize-threshold-value-links"] = types.YLeaf{"MaximizeThresholdValueLinks", data.MaximizeThresholdValueLinks}
    data.EntityData.Leafs["maximize-threshold-value-band-width"] = types.YLeaf{"MaximizeThresholdValueBandWidth", data.MaximizeThresholdValueBandWidth}
    data.EntityData.Leafs["mlacp-mode"] = types.YLeaf{"MlacpMode", data.MlacpMode}
    data.EntityData.Leafs["recovery-delay"] = types.YLeaf{"RecoveryDelay", data.RecoveryDelay}
    data.EntityData.Leafs["singleton"] = types.YLeaf{"Singleton", data.Singleton}
    return &(data.EntityData)
}

// Bundles_Bundles__Bundle_Data_MacAddress
// MAC address of this member
type Bundles_Bundles__Bundle_Data_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *Bundles_Bundles__Bundle_Data_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "data"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// Bundles_Bundles__Bundle_Data_BfdConfig
// Configuration values for BFD on bundle members
type Bundles_Bundles__Bundle_Data_BfdConfig struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress Bundles_Bundles__Bundle_Data_BfdConfig_DestinationAddress
}

func (bfdConfig *Bundles_Bundles__Bundle_Data_BfdConfig) GetEntityData() *types.CommonEntityData {
    bfdConfig.EntityData.YFilter = bfdConfig.YFilter
    bfdConfig.EntityData.YangName = "bfd-config"
    bfdConfig.EntityData.BundleName = "cisco_ios_xr"
    bfdConfig.EntityData.ParentYangName = "data"
    bfdConfig.EntityData.SegmentPath = "bfd-config"
    bfdConfig.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfdConfig.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfdConfig.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfdConfig.EntityData.Children = make(map[string]types.YChild)
    bfdConfig.EntityData.Children["destination-address"] = types.YChild{"DestinationAddress", &bfdConfig.DestinationAddress}
    bfdConfig.EntityData.Leafs = make(map[string]types.YLeaf)
    bfdConfig.EntityData.Leafs["bundle-status"] = types.YLeaf{"BundleStatus", bfdConfig.BundleStatus}
    bfdConfig.EntityData.Leafs["start-timer"] = types.YLeaf{"StartTimer", bfdConfig.StartTimer}
    bfdConfig.EntityData.Leafs["nbr-unconfig-timer"] = types.YLeaf{"NbrUnconfigTimer", bfdConfig.NbrUnconfigTimer}
    bfdConfig.EntityData.Leafs["pref-multiplier"] = types.YLeaf{"PrefMultiplier", bfdConfig.PrefMultiplier}
    bfdConfig.EntityData.Leafs["pref-min-interval"] = types.YLeaf{"PrefMinInterval", bfdConfig.PrefMinInterval}
    bfdConfig.EntityData.Leafs["pref-echo-min-interval"] = types.YLeaf{"PrefEchoMinInterval", bfdConfig.PrefEchoMinInterval}
    bfdConfig.EntityData.Leafs["fast-detect"] = types.YLeaf{"FastDetect", bfdConfig.FastDetect}
    bfdConfig.EntityData.Leafs["mode-info"] = types.YLeaf{"ModeInfo", bfdConfig.ModeInfo}
    return &(bfdConfig.EntityData)
}

// Bundles_Bundles__Bundle_Data_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type Bundles_Bundles__Bundle_Data_BfdConfig_DestinationAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Ipv6 interface{}
}

func (destinationAddress *Bundles_Bundles__Bundle_Data_BfdConfig_DestinationAddress) GetEntityData() *types.CommonEntityData {
    destinationAddress.EntityData.YFilter = destinationAddress.YFilter
    destinationAddress.EntityData.YangName = "destination-address"
    destinationAddress.EntityData.BundleName = "cisco_ios_xr"
    destinationAddress.EntityData.ParentYangName = "bfd-config"
    destinationAddress.EntityData.SegmentPath = "destination-address"
    destinationAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    destinationAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    destinationAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    destinationAddress.EntityData.Children = make(map[string]types.YChild)
    destinationAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    destinationAddress.EntityData.Leafs["af"] = types.YLeaf{"Af", destinationAddress.Af}
    destinationAddress.EntityData.Leafs["ipv4"] = types.YLeaf{"Ipv4", destinationAddress.Ipv4}
    destinationAddress.EntityData.Leafs["ipv6"] = types.YLeaf{"Ipv6", destinationAddress.Ipv6}
    return &(destinationAddress.EntityData)
}

// Bundles_Bundles__Bundle_Members
// Member interface
type Bundles_Bundles__Bundle_Members struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member information. The type is slice of
    // Bundles_Bundles__Bundle_Members_Member.
    Member []Bundles_Bundles__Bundle_Members_Member
}

func (members *Bundles_Bundles__Bundle_Members) GetEntityData() *types.CommonEntityData {
    members.EntityData.YFilter = members.YFilter
    members.EntityData.YangName = "members"
    members.EntityData.BundleName = "cisco_ios_xr"
    members.EntityData.ParentYangName = "bundle"
    members.EntityData.SegmentPath = "members"
    members.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    members.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    members.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    members.EntityData.Children = make(map[string]types.YChild)
    members.EntityData.Children["member"] = types.YChild{"Member", nil}
    for i := range members.Member {
        members.EntityData.Children[types.GetSegmentPath(&members.Member[i])] = types.YChild{"Member", &members.Member[i]}
    }
    members.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(members.EntityData)
}

// Bundles_Bundles__Bundle_Members_Member
// Member information
type Bundles_Bundles__Bundle_Members_Member struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    MemberInterface interface{}

    // Member's interface name. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters Bundles_Bundles__Bundle_Members_Member_Counters

    // Lacp data about member link.
    LinkData Bundles_Bundles__Bundle_Members_Member_LinkData

    // Mux state machine data.
    MemberMuxData Bundles_Bundles__Bundle_Members_Member_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress Bundles_Bundles__Bundle_Members_Member_MacAddress
}

func (member *Bundles_Bundles__Bundle_Members_Member) GetEntityData() *types.CommonEntityData {
    member.EntityData.YFilter = member.YFilter
    member.EntityData.YangName = "member"
    member.EntityData.BundleName = "cisco_ios_xr"
    member.EntityData.ParentYangName = "members"
    member.EntityData.SegmentPath = "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
    member.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    member.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    member.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    member.EntityData.Children = make(map[string]types.YChild)
    member.EntityData.Children["counters"] = types.YChild{"Counters", &member.Counters}
    member.EntityData.Children["link-data"] = types.YChild{"LinkData", &member.LinkData}
    member.EntityData.Children["member-mux-data"] = types.YChild{"MemberMuxData", &member.MemberMuxData}
    member.EntityData.Children["mac-address"] = types.YChild{"MacAddress", &member.MacAddress}
    member.EntityData.Leafs = make(map[string]types.YLeaf)
    member.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", member.MemberInterface}
    member.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", member.InterfaceName}
    member.EntityData.Leafs["port-priority"] = types.YLeaf{"PortPriority", member.PortPriority}
    member.EntityData.Leafs["port-number"] = types.YLeaf{"PortNumber", member.PortNumber}
    member.EntityData.Leafs["underlying-link-id"] = types.YLeaf{"UnderlyingLinkId", member.UnderlyingLinkId}
    member.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", member.LinkOrderNumber}
    member.EntityData.Leafs["iccp-node"] = types.YLeaf{"IccpNode", member.IccpNode}
    member.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", member.Bandwidth}
    member.EntityData.Leafs["lacp-enabled"] = types.YLeaf{"LacpEnabled", member.LacpEnabled}
    member.EntityData.Leafs["member-type"] = types.YLeaf{"MemberType", member.MemberType}
    member.EntityData.Leafs["member-name"] = types.YLeaf{"MemberName", member.MemberName}
    return &(member.EntityData)
}

// Bundles_Bundles__Bundle_Members_Member_Counters
// Counters data about member link
type Bundles_Bundles__Bundle_Members_Member_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *Bundles_Bundles__Bundle_Members_Member_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "member"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["lacpd-us-received"] = types.YLeaf{"LacpdUsReceived", counters.LacpdUsReceived}
    counters.EntityData.Leafs["lacpd-us-transmitted"] = types.YLeaf{"LacpdUsTransmitted", counters.LacpdUsTransmitted}
    counters.EntityData.Leafs["marker-packets-received"] = types.YLeaf{"MarkerPacketsReceived", counters.MarkerPacketsReceived}
    counters.EntityData.Leafs["marker-responses-transmitted"] = types.YLeaf{"MarkerResponsesTransmitted", counters.MarkerResponsesTransmitted}
    counters.EntityData.Leafs["illegal-packets-received"] = types.YLeaf{"IllegalPacketsReceived", counters.IllegalPacketsReceived}
    counters.EntityData.Leafs["excess-lacpd-us-received"] = types.YLeaf{"ExcessLacpdUsReceived", counters.ExcessLacpdUsReceived}
    counters.EntityData.Leafs["excess-marker-packets-received"] = types.YLeaf{"ExcessMarkerPacketsReceived", counters.ExcessMarkerPacketsReceived}
    counters.EntityData.Leafs["defaulted"] = types.YLeaf{"Defaulted", counters.Defaulted}
    counters.EntityData.Leafs["expired"] = types.YLeaf{"Expired", counters.Expired}
    counters.EntityData.Leafs["last-cleared-sec"] = types.YLeaf{"LastClearedSec", counters.LastClearedSec}
    counters.EntityData.Leafs["last-cleared-nsec"] = types.YLeaf{"LastClearedNsec", counters.LastClearedNsec}
    return &(counters.EntityData)
}

// Bundles_Bundles__Bundle_Members_Member_LinkData
// Lacp data about member link
type Bundles_Bundles__Bundle_Members_Member_LinkData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *Bundles_Bundles__Bundle_Members_Member_LinkData) GetEntityData() *types.CommonEntityData {
    linkData.EntityData.YFilter = linkData.YFilter
    linkData.EntityData.YangName = "link-data"
    linkData.EntityData.BundleName = "cisco_ios_xr"
    linkData.EntityData.ParentYangName = "member"
    linkData.EntityData.SegmentPath = "link-data"
    linkData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkData.EntityData.Children = make(map[string]types.YChild)
    linkData.EntityData.Leafs = make(map[string]types.YLeaf)
    linkData.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", linkData.InterfaceHandle}
    linkData.EntityData.Leafs["actor-system-priority"] = types.YLeaf{"ActorSystemPriority", linkData.ActorSystemPriority}
    linkData.EntityData.Leafs["actor-system-mac-address"] = types.YLeaf{"ActorSystemMacAddress", linkData.ActorSystemMacAddress}
    linkData.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", linkData.ActorOperationalKey}
    linkData.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", linkData.PartnerSystemPriority}
    linkData.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", linkData.PartnerSystemMacAddress}
    linkData.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", linkData.PartnerOperationalKey}
    linkData.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", linkData.SelectedAggregatorId}
    linkData.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", linkData.AttachedAggregatorId}
    linkData.EntityData.Leafs["actor-port-id"] = types.YLeaf{"ActorPortId", linkData.ActorPortId}
    linkData.EntityData.Leafs["actor-port-priority"] = types.YLeaf{"ActorPortPriority", linkData.ActorPortPriority}
    linkData.EntityData.Leafs["partner-port-id"] = types.YLeaf{"PartnerPortId", linkData.PartnerPortId}
    linkData.EntityData.Leafs["partner-port-priority"] = types.YLeaf{"PartnerPortPriority", linkData.PartnerPortPriority}
    linkData.EntityData.Leafs["actor-port-state"] = types.YLeaf{"ActorPortState", linkData.ActorPortState}
    linkData.EntityData.Leafs["partner-port-state"] = types.YLeaf{"PartnerPortState", linkData.PartnerPortState}
    return &(linkData.EntityData)
}

// Bundles_Bundles__Bundle_Members_Member_MemberMuxData
// Mux state machine data
type Bundles_Bundles__Bundle_Members_Member_MemberMuxData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData Bundles_Bundles__Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *Bundles_Bundles__Bundle_Members_Member_MemberMuxData) GetEntityData() *types.CommonEntityData {
    memberMuxData.EntityData.YFilter = memberMuxData.YFilter
    memberMuxData.EntityData.YangName = "member-mux-data"
    memberMuxData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxData.EntityData.ParentYangName = "member"
    memberMuxData.EntityData.SegmentPath = "member-mux-data"
    memberMuxData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxData.EntityData.Children = make(map[string]types.YChild)
    memberMuxData.EntityData.Children["member-mux-state-reason-data"] = types.YChild{"MemberMuxStateReasonData", &memberMuxData.MemberMuxStateReasonData}
    memberMuxData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxData.EntityData.Leafs["mux-state"] = types.YLeaf{"MuxState", memberMuxData.MuxState}
    memberMuxData.EntityData.Leafs["error"] = types.YLeaf{"Error", memberMuxData.Error}
    memberMuxData.EntityData.Leafs["member-mux-state-reason"] = types.YLeaf{"MemberMuxStateReason", memberMuxData.MemberMuxStateReason}
    memberMuxData.EntityData.Leafs["member-state"] = types.YLeaf{"MemberState", memberMuxData.MemberState}
    memberMuxData.EntityData.Leafs["mux-state-reason"] = types.YLeaf{"MuxStateReason", memberMuxData.MuxStateReason}
    return &(memberMuxData.EntityData)
}

// Bundles_Bundles__Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type Bundles_Bundles__Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *Bundles_Bundles__Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetEntityData() *types.CommonEntityData {
    memberMuxStateReasonData.EntityData.YFilter = memberMuxStateReasonData.YFilter
    memberMuxStateReasonData.EntityData.YangName = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.BundleName = "cisco_ios_xr"
    memberMuxStateReasonData.EntityData.ParentYangName = "member-mux-data"
    memberMuxStateReasonData.EntityData.SegmentPath = "member-mux-state-reason-data"
    memberMuxStateReasonData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    memberMuxStateReasonData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    memberMuxStateReasonData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    memberMuxStateReasonData.EntityData.Children = make(map[string]types.YChild)
    memberMuxStateReasonData.EntityData.Leafs = make(map[string]types.YLeaf)
    memberMuxStateReasonData.EntityData.Leafs["reason-type"] = types.YLeaf{"ReasonType", memberMuxStateReasonData.ReasonType}
    memberMuxStateReasonData.EntityData.Leafs["severity"] = types.YLeaf{"Severity", memberMuxStateReasonData.Severity}
    return &(memberMuxStateReasonData.EntityData)
}

// Bundles_Bundles__Bundle_Members_Member_MacAddress
// MAC address of this member (deprecated)
type Bundles_Bundles__Bundle_Members_Member_MacAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    Address interface{}
}

func (macAddress *Bundles_Bundles__Bundle_Members_Member_MacAddress) GetEntityData() *types.CommonEntityData {
    macAddress.EntityData.YFilter = macAddress.YFilter
    macAddress.EntityData.YangName = "mac-address"
    macAddress.EntityData.BundleName = "cisco_ios_xr"
    macAddress.EntityData.ParentYangName = "member"
    macAddress.EntityData.SegmentPath = "mac-address"
    macAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    macAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    macAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    macAddress.EntityData.Children = make(map[string]types.YChild)
    macAddress.EntityData.Leafs = make(map[string]types.YLeaf)
    macAddress.EntityData.Leafs["address"] = types.YLeaf{"Address", macAddress.Address}
    return &(macAddress.EntityData)
}

// LacpBundleMembers
// lacp bundle members
type LacpBundleMembers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of devices with their LACP bundle member interfaces.
    Nodes LacpBundleMembers_Nodes

    // Table of LACP bundle member interfaces.
    Members LacpBundleMembers_Members
}

func (lacpBundleMembers *LacpBundleMembers) GetEntityData() *types.CommonEntityData {
    lacpBundleMembers.EntityData.YFilter = lacpBundleMembers.YFilter
    lacpBundleMembers.EntityData.YangName = "lacp-bundle-members"
    lacpBundleMembers.EntityData.BundleName = "cisco_ios_xr"
    lacpBundleMembers.EntityData.ParentYangName = "Cisco-IOS-XR-bundlemgr-oper"
    lacpBundleMembers.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members"
    lacpBundleMembers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lacpBundleMembers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lacpBundleMembers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lacpBundleMembers.EntityData.Children = make(map[string]types.YChild)
    lacpBundleMembers.EntityData.Children["nodes"] = types.YChild{"Nodes", &lacpBundleMembers.Nodes}
    lacpBundleMembers.EntityData.Children["members"] = types.YChild{"Members", &lacpBundleMembers.Members}
    lacpBundleMembers.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(lacpBundleMembers.EntityData)
}

// LacpBundleMembers_Nodes
// Table of devices with their LACP bundle member
// interfaces
type LacpBundleMembers_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Node ID. The type is slice of LacpBundleMembers_Nodes_Node.
    Node []LacpBundleMembers_Nodes_Node
}

func (nodes *LacpBundleMembers_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "lacp-bundle-members"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = make(map[string]types.YChild)
    nodes.EntityData.Children["node"] = types.YChild{"Node", nil}
    for i := range nodes.Node {
        nodes.EntityData.Children[types.GetSegmentPath(&nodes.Node[i])] = types.YChild{"Node", &nodes.Node[i]}
    }
    nodes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodes.EntityData)
}

// LacpBundleMembers_Nodes_Node
// Node ID
type LacpBundleMembers_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. For a local device the Node ID e.g. '0_0_CPU0' ,
    // for a peer device the LDP ID followed by the ICCP Group ID e.g.
    // '5.4.3.2,4'. The type is string.
    Node interface{}

    // Link counters for LACP bundle members per node.
    Counters LacpBundleMembers_Nodes_Node_Counters
}

func (node *LacpBundleMembers_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + "[node='" + fmt.Sprintf("%v", node.Node) + "']"
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = make(map[string]types.YChild)
    node.EntityData.Children["counters"] = types.YChild{"Counters", &node.Counters}
    node.EntityData.Leafs = make(map[string]types.YLeaf)
    node.EntityData.Leafs["node"] = types.YLeaf{"Node", node.Node}
    return &(node.EntityData)
}

// LacpBundleMembers_Nodes_Node_Counters
// Link counters for LACP bundle members per node
type LacpBundleMembers_Nodes_Node_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACP protocol packets received on ports with LACP inactive/off. The type is
    // interface{} with range: 0..4294967295.
    WrongPortCount interface{}

    // Last unrecognized port on which a packet was received. The type is
    // interface{} with range: 0..4294967295.
    LastWrongPort interface{}

    // Packets received for which rx port could not be determined. The type is
    // interface{} with range: 0..4294967295.
    UnknownPortCount interface{}

    // Packets received which could not be decoded. The type is interface{} with
    // range: 0..4294967295.
    UndecodablePackets interface{}

    // Time elapsed since counters were last cleared (in nanoseconds). The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Time elapsed since last unexpected event (in nanoseconds). The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceUnexpectedEvent interface{}

    // Time elapsed since statistics were last updated (in nanoseconds). The type
    // is interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceLastUpdated interface{}
}

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "node"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["wrong-port-count"] = types.YLeaf{"WrongPortCount", counters.WrongPortCount}
    counters.EntityData.Leafs["last-wrong-port"] = types.YLeaf{"LastWrongPort", counters.LastWrongPort}
    counters.EntityData.Leafs["unknown-port-count"] = types.YLeaf{"UnknownPortCount", counters.UnknownPortCount}
    counters.EntityData.Leafs["undecodable-packets"] = types.YLeaf{"UndecodablePackets", counters.UndecodablePackets}
    counters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", counters.TimeSinceCleared}
    counters.EntityData.Leafs["time-since-unexpected-event"] = types.YLeaf{"TimeSinceUnexpectedEvent", counters.TimeSinceUnexpectedEvent}
    counters.EntityData.Leafs["time-since-last-updated"] = types.YLeaf{"TimeSinceLastUpdated", counters.TimeSinceLastUpdated}
    return &(counters.EntityData)
}

// LacpBundleMembers_Members
// Table of LACP bundle member interfaces
type LacpBundleMembers_Members struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACP bundle member interface data. The type is slice of
    // LacpBundleMembers_Members_Member.
    Member []LacpBundleMembers_Members_Member
}

func (members *LacpBundleMembers_Members) GetEntityData() *types.CommonEntityData {
    members.EntityData.YFilter = members.YFilter
    members.EntityData.YangName = "members"
    members.EntityData.BundleName = "cisco_ios_xr"
    members.EntityData.ParentYangName = "lacp-bundle-members"
    members.EntityData.SegmentPath = "members"
    members.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    members.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    members.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    members.EntityData.Children = make(map[string]types.YChild)
    members.EntityData.Children["member"] = types.YChild{"Member", nil}
    for i := range members.Member {
        members.EntityData.Children[types.GetSegmentPath(&members.Member[i])] = types.YChild{"Member", &members.Member[i]}
    }
    members.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(members.EntityData)
}

// LacpBundleMembers_Members_Member
// LACP bundle member interface data
type LacpBundleMembers_Members_Member struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    MemberInterface interface{}

    // Link data for LACP bundle members.
    Data LacpBundleMembers_Members_Member_Data

    // Link counters for LACP bundle members.
    Counters LacpBundleMembers_Members_Member_Counters
}

func (member *LacpBundleMembers_Members_Member) GetEntityData() *types.CommonEntityData {
    member.EntityData.YFilter = member.YFilter
    member.EntityData.YangName = "member"
    member.EntityData.BundleName = "cisco_ios_xr"
    member.EntityData.ParentYangName = "members"
    member.EntityData.SegmentPath = "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
    member.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    member.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    member.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    member.EntityData.Children = make(map[string]types.YChild)
    member.EntityData.Children["data"] = types.YChild{"Data", &member.Data}
    member.EntityData.Children["counters"] = types.YChild{"Counters", &member.Counters}
    member.EntityData.Leafs = make(map[string]types.YLeaf)
    member.EntityData.Leafs["member-interface"] = types.YLeaf{"MemberInterface", member.MemberInterface}
    return &(member.EntityData)
}

// LacpBundleMembers_Members_Member_Data
// Link data for LACP bundle members
type LacpBundleMembers_Members_Member_Data struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    InterfaceHandle interface{}

    // System priority of the actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (data *LacpBundleMembers_Members_Member_Data) GetEntityData() *types.CommonEntityData {
    data.EntityData.YFilter = data.YFilter
    data.EntityData.YangName = "data"
    data.EntityData.BundleName = "cisco_ios_xr"
    data.EntityData.ParentYangName = "member"
    data.EntityData.SegmentPath = "data"
    data.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    data.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    data.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    data.EntityData.Children = make(map[string]types.YChild)
    data.EntityData.Leafs = make(map[string]types.YLeaf)
    data.EntityData.Leafs["interface-handle"] = types.YLeaf{"InterfaceHandle", data.InterfaceHandle}
    data.EntityData.Leafs["actor-system-priority"] = types.YLeaf{"ActorSystemPriority", data.ActorSystemPriority}
    data.EntityData.Leafs["actor-system-mac-address"] = types.YLeaf{"ActorSystemMacAddress", data.ActorSystemMacAddress}
    data.EntityData.Leafs["actor-operational-key"] = types.YLeaf{"ActorOperationalKey", data.ActorOperationalKey}
    data.EntityData.Leafs["partner-system-priority"] = types.YLeaf{"PartnerSystemPriority", data.PartnerSystemPriority}
    data.EntityData.Leafs["partner-system-mac-address"] = types.YLeaf{"PartnerSystemMacAddress", data.PartnerSystemMacAddress}
    data.EntityData.Leafs["partner-operational-key"] = types.YLeaf{"PartnerOperationalKey", data.PartnerOperationalKey}
    data.EntityData.Leafs["selected-aggregator-id"] = types.YLeaf{"SelectedAggregatorId", data.SelectedAggregatorId}
    data.EntityData.Leafs["attached-aggregator-id"] = types.YLeaf{"AttachedAggregatorId", data.AttachedAggregatorId}
    data.EntityData.Leafs["actor-port-id"] = types.YLeaf{"ActorPortId", data.ActorPortId}
    data.EntityData.Leafs["actor-port-priority"] = types.YLeaf{"ActorPortPriority", data.ActorPortPriority}
    data.EntityData.Leafs["partner-port-id"] = types.YLeaf{"PartnerPortId", data.PartnerPortId}
    data.EntityData.Leafs["partner-port-priority"] = types.YLeaf{"PartnerPortPriority", data.PartnerPortPriority}
    data.EntityData.Leafs["actor-port-state"] = types.YLeaf{"ActorPortState", data.ActorPortState}
    data.EntityData.Leafs["partner-port-state"] = types.YLeaf{"PartnerPortState", data.PartnerPortState}
    return &(data.EntityData)
}

// LacpBundleMembers_Members_Member_Counters
// Link counters for LACP bundle members
type LacpBundleMembers_Members_Member_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Time elapsed since last LACPDU received (nsec). The type is interface{}
    // with range: 0..18446744073709551615.
    TimeSinceLastLacpduReceived interface{}

    // Time elapsed since counters last cleared (nsec). The type is interface{}
    // with range: 0..18446744073709551615.
    TimeSinceCleared interface{}

    // Time elapsed since last unexpected event (nsec). The type is interface{}
    // with range: 0..18446744073709551615.
    TimeSinceUnexpectedEvent interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *LacpBundleMembers_Members_Member_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "member"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = make(map[string]types.YChild)
    counters.EntityData.Leafs = make(map[string]types.YLeaf)
    counters.EntityData.Leafs["lacpd-us-received"] = types.YLeaf{"LacpdUsReceived", counters.LacpdUsReceived}
    counters.EntityData.Leafs["lacpd-us-transmitted"] = types.YLeaf{"LacpdUsTransmitted", counters.LacpdUsTransmitted}
    counters.EntityData.Leafs["marker-packets-received"] = types.YLeaf{"MarkerPacketsReceived", counters.MarkerPacketsReceived}
    counters.EntityData.Leafs["marker-responses-transmitted"] = types.YLeaf{"MarkerResponsesTransmitted", counters.MarkerResponsesTransmitted}
    counters.EntityData.Leafs["illegal-packets-received"] = types.YLeaf{"IllegalPacketsReceived", counters.IllegalPacketsReceived}
    counters.EntityData.Leafs["excess-lacpd-us-received"] = types.YLeaf{"ExcessLacpdUsReceived", counters.ExcessLacpdUsReceived}
    counters.EntityData.Leafs["excess-marker-packets-received"] = types.YLeaf{"ExcessMarkerPacketsReceived", counters.ExcessMarkerPacketsReceived}
    counters.EntityData.Leafs["defaulted"] = types.YLeaf{"Defaulted", counters.Defaulted}
    counters.EntityData.Leafs["expired"] = types.YLeaf{"Expired", counters.Expired}
    counters.EntityData.Leafs["time-since-last-lacpdu-received"] = types.YLeaf{"TimeSinceLastLacpduReceived", counters.TimeSinceLastLacpduReceived}
    counters.EntityData.Leafs["time-since-cleared"] = types.YLeaf{"TimeSinceCleared", counters.TimeSinceCleared}
    counters.EntityData.Leafs["time-since-unexpected-event"] = types.YLeaf{"TimeSinceUnexpectedEvent", counters.TimeSinceUnexpectedEvent}
    counters.EntityData.Leafs["last-cleared-sec"] = types.YLeaf{"LastClearedSec", counters.LastClearedSec}
    counters.EntityData.Leafs["last-cleared-nsec"] = types.YLeaf{"LastClearedNsec", counters.LastClearedNsec}
    return &(counters.EntityData)
}

// BundlesAdjacency
// bundles adjacency
type BundlesAdjacency struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Per bundle operational data.
    Nodes BundlesAdjacency_Nodes
}

func (bundlesAdjacency *BundlesAdjacency) GetEntityData() *types.CommonEntityData {
    bundlesAdjacency.EntityData.YFilter = bundlesAdjacency.YFilter
    bundlesAdjacency.EntityData.YangName = "bundles-adjacency"
    bundlesAdjacency.EntityData.BundleName = "cisco_ios_xr"
    bundlesAdjacency.EntityData.ParentYangName = "Cisco-IOS-XR-bundlemgr-oper"
    bundlesAdjacency.EntityData.SegmentPath = "Cisco-IOS-XR-bundlemgr-oper:bundles-adjacency"
    bundlesAdjacency.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundlesAdjacency.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundlesAdjacency.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundlesAdjacency.EntityData.Children = make(map[string]types.YChild)
    bundlesAdjacency.EntityData.Children["nodes"] = types.YChild{"Nodes", &bundlesAdjacency.Nodes}
    bundlesAdjacency.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundlesAdjacency.EntityData)
}

// BundlesAdjacency_Nodes
// Per bundle operational data
type BundlesAdjacency_Nodes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Location. The type is slice of BundlesAdjacency_Nodes_Node.
    Node []BundlesAdjacency_Nodes_Node
}

func (nodes *BundlesAdjacency_Nodes) GetEntityData() *types.CommonEntityData {
    nodes.EntityData.YFilter = nodes.YFilter
    nodes.EntityData.YangName = "nodes"
    nodes.EntityData.BundleName = "cisco_ios_xr"
    nodes.EntityData.ParentYangName = "bundles-adjacency"
    nodes.EntityData.SegmentPath = "nodes"
    nodes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nodes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nodes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nodes.EntityData.Children = make(map[string]types.YChild)
    nodes.EntityData.Children["node"] = types.YChild{"Node", nil}
    for i := range nodes.Node {
        nodes.EntityData.Children[types.GetSegmentPath(&nodes.Node[i])] = types.YChild{"Node", &nodes.Node[i]}
    }
    nodes.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(nodes.EntityData)
}

// BundlesAdjacency_Nodes_Node
// Location
type BundlesAdjacency_Nodes_Node struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Node ID. The type is string with pattern:
    // b'([a-zA-Z0-9_]*\\d+/){1,2}([a-zA-Z0-9_]*\\d+)'.
    NodeName interface{}

    // Brief load-balance information for the node.
    Brief BundlesAdjacency_Nodes_Node_Brief

    // Per bundle operational data.
    Bundles BundlesAdjacency_Nodes_Node_Bundles
}

func (node *BundlesAdjacency_Nodes_Node) GetEntityData() *types.CommonEntityData {
    node.EntityData.YFilter = node.YFilter
    node.EntityData.YangName = "node"
    node.EntityData.BundleName = "cisco_ios_xr"
    node.EntityData.ParentYangName = "nodes"
    node.EntityData.SegmentPath = "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
    node.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    node.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    node.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    node.EntityData.Children = make(map[string]types.YChild)
    node.EntityData.Children["brief"] = types.YChild{"Brief", &node.Brief}
    node.EntityData.Children["bundles"] = types.YChild{"Bundles", &node.Bundles}
    node.EntityData.Leafs = make(map[string]types.YLeaf)
    node.EntityData.Leafs["node-name"] = types.YLeaf{"NodeName", node.NodeName}
    return &(node.EntityData)
}

// BundlesAdjacency_Nodes_Node_Brief
// Brief load-balance information for the node
type BundlesAdjacency_Nodes_Node_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Data for all bundles on node. The type is slice of
    // BundlesAdjacency_Nodes_Node_Brief_BundleData.
    BundleData []BundlesAdjacency_Nodes_Node_Brief_BundleData
}

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "node"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["bundle-data"] = types.YChild{"BundleData", nil}
    for i := range brief.BundleData {
        brief.EntityData.Children[types.GetSegmentPath(&brief.BundleData[i])] = types.YChild{"BundleData", &brief.BundleData[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(brief.EntityData)
}

// BundlesAdjacency_Nodes_Node_Brief_BundleData
// Data for all bundles on node
type BundlesAdjacency_Nodes_Node_Brief_BundleData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Number of sub-interfaces on the bundle. The type is interface{} with range:
    // 0..4294967295.
    SubInterfaceCount interface{}

    // Number of members configured to the bundle. The type is interface{} with
    // range: 0..4294967295.
    MemberCount interface{}

    // Total weighting (relative bandwidth) of bundle. The type is interface{}
    // with range: 0..4294967295.
    TotalWeight interface{}

    // Sub-interfaces of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface.
    SubInterface []BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface
}

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetEntityData() *types.CommonEntityData {
    bundleData.EntityData.YFilter = bundleData.YFilter
    bundleData.EntityData.YangName = "bundle-data"
    bundleData.EntityData.BundleName = "cisco_ios_xr"
    bundleData.EntityData.ParentYangName = "brief"
    bundleData.EntityData.SegmentPath = "bundle-data"
    bundleData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleData.EntityData.Children = make(map[string]types.YChild)
    bundleData.EntityData.Children["sub-interface"] = types.YChild{"SubInterface", nil}
    for i := range bundleData.SubInterface {
        bundleData.EntityData.Children[types.GetSegmentPath(&bundleData.SubInterface[i])] = types.YChild{"SubInterface", &bundleData.SubInterface[i]}
    }
    bundleData.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleData.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", bundleData.InterfaceName}
    bundleData.EntityData.Leafs["sub-interface-count"] = types.YLeaf{"SubInterfaceCount", bundleData.SubInterfaceCount}
    bundleData.EntityData.Leafs["member-count"] = types.YLeaf{"MemberCount", bundleData.MemberCount}
    bundleData.EntityData.Leafs["total-weight"] = types.YLeaf{"TotalWeight", bundleData.TotalWeight}
    return &(bundleData.EntityData)
}

// BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface
// Sub-interfaces of the bundle
type BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Load balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData
}

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetEntityData() *types.CommonEntityData {
    subInterface.EntityData.YFilter = subInterface.YFilter
    subInterface.EntityData.YangName = "sub-interface"
    subInterface.EntityData.BundleName = "cisco_ios_xr"
    subInterface.EntityData.ParentYangName = "bundle-data"
    subInterface.EntityData.SegmentPath = "sub-interface"
    subInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subInterface.EntityData.Children = make(map[string]types.YChild)
    subInterface.EntityData.Children["load-balance-data"] = types.YChild{"LoadBalanceData", &subInterface.LoadBalanceData}
    subInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    subInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", subInterface.InterfaceName}
    return &(subInterface.EntityData)
}

// BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData
// Load balance data
type BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type_ interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetEntityData() *types.CommonEntityData {
    loadBalanceData.EntityData.YFilter = loadBalanceData.YFilter
    loadBalanceData.EntityData.YangName = "load-balance-data"
    loadBalanceData.EntityData.BundleName = "cisco_ios_xr"
    loadBalanceData.EntityData.ParentYangName = "sub-interface"
    loadBalanceData.EntityData.SegmentPath = "load-balance-data"
    loadBalanceData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadBalanceData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadBalanceData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadBalanceData.EntityData.Children = make(map[string]types.YChild)
    loadBalanceData.EntityData.Leafs = make(map[string]types.YLeaf)
    loadBalanceData.EntityData.Leafs["type"] = types.YLeaf{"Type_", loadBalanceData.Type_}
    loadBalanceData.EntityData.Leafs["value"] = types.YLeaf{"Value", loadBalanceData.Value}
    loadBalanceData.EntityData.Leafs["local-link-threshold"] = types.YLeaf{"LocalLinkThreshold", loadBalanceData.LocalLinkThreshold}
    return &(loadBalanceData.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles
// Per bundle operational data
type BundlesAdjacency_Nodes_Node_Bundles struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle information. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle.
    Bundle []BundlesAdjacency_Nodes_Node_Bundles_Bundle
}

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetEntityData() *types.CommonEntityData {
    bundles.EntityData.YFilter = bundles.YFilter
    bundles.EntityData.YangName = "bundles"
    bundles.EntityData.BundleName = "cisco_ios_xr"
    bundles.EntityData.ParentYangName = "node"
    bundles.EntityData.SegmentPath = "bundles"
    bundles.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundles.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundles.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundles.EntityData.Children = make(map[string]types.YChild)
    bundles.EntityData.Children["bundle"] = types.YChild{"Bundle", nil}
    for i := range bundles.Bundle {
        bundles.EntityData.Children[types.GetSegmentPath(&bundles.Bundle[i])] = types.YChild{"Bundle", &bundles.Bundle[i]}
    }
    bundles.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(bundles.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle
// Bundle information
type BundlesAdjacency_Nodes_Node_Bundles_Bundle struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // b'[a-zA-Z0-9./-]+'.
    BundleName interface{}

    // Data for each Bundle.
    BundleInfo BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo
}

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetEntityData() *types.CommonEntityData {
    bundle.EntityData.YFilter = bundle.YFilter
    bundle.EntityData.YangName = "bundle"
    bundle.EntityData.BundleName = "cisco_ios_xr"
    bundle.EntityData.ParentYangName = "bundles"
    bundle.EntityData.SegmentPath = "bundle" + "[bundle-name='" + fmt.Sprintf("%v", bundle.BundleName) + "']"
    bundle.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundle.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundle.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundle.EntityData.Children = make(map[string]types.YChild)
    bundle.EntityData.Children["bundle-info"] = types.YChild{"BundleInfo", &bundle.BundleInfo}
    bundle.EntityData.Leafs = make(map[string]types.YLeaf)
    bundle.EntityData.Leafs["bundle-name"] = types.YLeaf{"BundleName", bundle.BundleName}
    return &(bundle.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo
// Data for each Bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Media type of bundle. The type is BundleMedia1.
    Media interface{}

    // Maximum number of members for the bundle. The type is interface{} with
    // range: 0..4294967295.
    MaxMemberCount interface{}

    // Avoid rebalancing traffic flows. The type is bool.
    AvoidRebalance interface{}

    // Brief bundle data.
    Brief BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief

    // Load Balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData

    // Members of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member.
    Member []BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member

    // Sub-interfaces of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface.
    SubInterface []BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface
}

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetEntityData() *types.CommonEntityData {
    bundleInfo.EntityData.YFilter = bundleInfo.YFilter
    bundleInfo.EntityData.YangName = "bundle-info"
    bundleInfo.EntityData.BundleName = "cisco_ios_xr"
    bundleInfo.EntityData.ParentYangName = "bundle"
    bundleInfo.EntityData.SegmentPath = "bundle-info"
    bundleInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleInfo.EntityData.Children = make(map[string]types.YChild)
    bundleInfo.EntityData.Children["brief"] = types.YChild{"Brief", &bundleInfo.Brief}
    bundleInfo.EntityData.Children["load-balance-data"] = types.YChild{"LoadBalanceData", &bundleInfo.LoadBalanceData}
    bundleInfo.EntityData.Children["member"] = types.YChild{"Member", nil}
    for i := range bundleInfo.Member {
        bundleInfo.EntityData.Children[types.GetSegmentPath(&bundleInfo.Member[i])] = types.YChild{"Member", &bundleInfo.Member[i]}
    }
    bundleInfo.EntityData.Children["sub-interface"] = types.YChild{"SubInterface", nil}
    for i := range bundleInfo.SubInterface {
        bundleInfo.EntityData.Children[types.GetSegmentPath(&bundleInfo.SubInterface[i])] = types.YChild{"SubInterface", &bundleInfo.SubInterface[i]}
    }
    bundleInfo.EntityData.Leafs = make(map[string]types.YLeaf)
    bundleInfo.EntityData.Leafs["media"] = types.YLeaf{"Media", bundleInfo.Media}
    bundleInfo.EntityData.Leafs["max-member-count"] = types.YLeaf{"MaxMemberCount", bundleInfo.MaxMemberCount}
    bundleInfo.EntityData.Leafs["avoid-rebalance"] = types.YLeaf{"AvoidRebalance", bundleInfo.AvoidRebalance}
    return &(bundleInfo.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief
// Brief bundle data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bundle interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Number of sub-interfaces on the bundle. The type is interface{} with range:
    // 0..4294967295.
    SubInterfaceCount interface{}

    // Number of members configured to the bundle. The type is interface{} with
    // range: 0..4294967295.
    MemberCount interface{}

    // Total weighting (relative bandwidth) of bundle. The type is interface{}
    // with range: 0..4294967295.
    TotalWeight interface{}

    // Sub-interfaces of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface.
    SubInterface []BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface
}

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetEntityData() *types.CommonEntityData {
    brief.EntityData.YFilter = brief.YFilter
    brief.EntityData.YangName = "brief"
    brief.EntityData.BundleName = "cisco_ios_xr"
    brief.EntityData.ParentYangName = "bundle-info"
    brief.EntityData.SegmentPath = "brief"
    brief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    brief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    brief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    brief.EntityData.Children = make(map[string]types.YChild)
    brief.EntityData.Children["sub-interface"] = types.YChild{"SubInterface", nil}
    for i := range brief.SubInterface {
        brief.EntityData.Children[types.GetSegmentPath(&brief.SubInterface[i])] = types.YChild{"SubInterface", &brief.SubInterface[i]}
    }
    brief.EntityData.Leafs = make(map[string]types.YLeaf)
    brief.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", brief.InterfaceName}
    brief.EntityData.Leafs["sub-interface-count"] = types.YLeaf{"SubInterfaceCount", brief.SubInterfaceCount}
    brief.EntityData.Leafs["member-count"] = types.YLeaf{"MemberCount", brief.MemberCount}
    brief.EntityData.Leafs["total-weight"] = types.YLeaf{"TotalWeight", brief.TotalWeight}
    return &(brief.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface
// Sub-interfaces of the bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Load balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetEntityData() *types.CommonEntityData {
    subInterface.EntityData.YFilter = subInterface.YFilter
    subInterface.EntityData.YangName = "sub-interface"
    subInterface.EntityData.BundleName = "cisco_ios_xr"
    subInterface.EntityData.ParentYangName = "brief"
    subInterface.EntityData.SegmentPath = "sub-interface"
    subInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subInterface.EntityData.Children = make(map[string]types.YChild)
    subInterface.EntityData.Children["load-balance-data"] = types.YChild{"LoadBalanceData", &subInterface.LoadBalanceData}
    subInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    subInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", subInterface.InterfaceName}
    return &(subInterface.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData
// Load balance data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type_ interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetEntityData() *types.CommonEntityData {
    loadBalanceData.EntityData.YFilter = loadBalanceData.YFilter
    loadBalanceData.EntityData.YangName = "load-balance-data"
    loadBalanceData.EntityData.BundleName = "cisco_ios_xr"
    loadBalanceData.EntityData.ParentYangName = "sub-interface"
    loadBalanceData.EntityData.SegmentPath = "load-balance-data"
    loadBalanceData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadBalanceData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadBalanceData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadBalanceData.EntityData.Children = make(map[string]types.YChild)
    loadBalanceData.EntityData.Leafs = make(map[string]types.YLeaf)
    loadBalanceData.EntityData.Leafs["type"] = types.YLeaf{"Type_", loadBalanceData.Type_}
    loadBalanceData.EntityData.Leafs["value"] = types.YLeaf{"Value", loadBalanceData.Value}
    loadBalanceData.EntityData.Leafs["local-link-threshold"] = types.YLeaf{"LocalLinkThreshold", loadBalanceData.LocalLinkThreshold}
    return &(loadBalanceData.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData
// Load Balance data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type_ interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetEntityData() *types.CommonEntityData {
    loadBalanceData.EntityData.YFilter = loadBalanceData.YFilter
    loadBalanceData.EntityData.YangName = "load-balance-data"
    loadBalanceData.EntityData.BundleName = "cisco_ios_xr"
    loadBalanceData.EntityData.ParentYangName = "bundle-info"
    loadBalanceData.EntityData.SegmentPath = "load-balance-data"
    loadBalanceData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadBalanceData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadBalanceData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadBalanceData.EntityData.Children = make(map[string]types.YChild)
    loadBalanceData.EntityData.Leafs = make(map[string]types.YLeaf)
    loadBalanceData.EntityData.Leafs["type"] = types.YLeaf{"Type_", loadBalanceData.Type_}
    loadBalanceData.EntityData.Leafs["value"] = types.YLeaf{"Value", loadBalanceData.Value}
    loadBalanceData.EntityData.Leafs["local-link-threshold"] = types.YLeaf{"LocalLinkThreshold", loadBalanceData.LocalLinkThreshold}
    return &(loadBalanceData.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member
// Members of the bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Member interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Member's link ID in database. The type is interface{} with range: 0..255.
    LinkId interface{}

    // Member's link order number in database. The type is interface{} with range:
    // 0..255.
    LinkOrderNumber interface{}

    // Member's relative bandwidth. The type is interface{} with range: 0..255.
    Bandwidth interface{}
}

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetEntityData() *types.CommonEntityData {
    member.EntityData.YFilter = member.YFilter
    member.EntityData.YangName = "member"
    member.EntityData.BundleName = "cisco_ios_xr"
    member.EntityData.ParentYangName = "bundle-info"
    member.EntityData.SegmentPath = "member"
    member.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    member.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    member.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    member.EntityData.Children = make(map[string]types.YChild)
    member.EntityData.Leafs = make(map[string]types.YLeaf)
    member.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", member.InterfaceName}
    member.EntityData.Leafs["link-id"] = types.YLeaf{"LinkId", member.LinkId}
    member.EntityData.Leafs["link-order-number"] = types.YLeaf{"LinkOrderNumber", member.LinkOrderNumber}
    member.EntityData.Leafs["bandwidth"] = types.YLeaf{"Bandwidth", member.Bandwidth}
    return &(member.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface
// Sub-interfaces of the bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sub interface. The type is string with pattern: b'[a-zA-Z0-9./-]+'.
    InterfaceName interface{}

    // Load balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetEntityData() *types.CommonEntityData {
    subInterface.EntityData.YFilter = subInterface.YFilter
    subInterface.EntityData.YangName = "sub-interface"
    subInterface.EntityData.BundleName = "cisco_ios_xr"
    subInterface.EntityData.ParentYangName = "bundle-info"
    subInterface.EntityData.SegmentPath = "sub-interface"
    subInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subInterface.EntityData.Children = make(map[string]types.YChild)
    subInterface.EntityData.Children["load-balance-data"] = types.YChild{"LoadBalanceData", &subInterface.LoadBalanceData}
    subInterface.EntityData.Leafs = make(map[string]types.YLeaf)
    subInterface.EntityData.Leafs["interface-name"] = types.YLeaf{"InterfaceName", subInterface.InterfaceName}
    return &(subInterface.EntityData)
}

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData
// Load balance data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type_ interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetEntityData() *types.CommonEntityData {
    loadBalanceData.EntityData.YFilter = loadBalanceData.YFilter
    loadBalanceData.EntityData.YangName = "load-balance-data"
    loadBalanceData.EntityData.BundleName = "cisco_ios_xr"
    loadBalanceData.EntityData.ParentYangName = "sub-interface"
    loadBalanceData.EntityData.SegmentPath = "load-balance-data"
    loadBalanceData.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    loadBalanceData.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    loadBalanceData.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    loadBalanceData.EntityData.Children = make(map[string]types.YChild)
    loadBalanceData.EntityData.Leafs = make(map[string]types.YLeaf)
    loadBalanceData.EntityData.Leafs["type"] = types.YLeaf{"Type_", loadBalanceData.Type_}
    loadBalanceData.EntityData.Leafs["value"] = types.YLeaf{"Value", loadBalanceData.Value}
    loadBalanceData.EntityData.Leafs["local-link-threshold"] = types.YLeaf{"LocalLinkThreshold", loadBalanceData.LocalLinkThreshold}
    return &(loadBalanceData.EntityData)
}

