// This module contains a collection of YANG definitions
// for Cisco IOS-XR bundlemgr package operational data.
// 
// This module contains definitions
// for the following management objects:
//   lacp-bundles: LACP bundle data
//   bundle-information: bundle information
//   lacp-data: lacp data
//   bundles: bundles
//   lacp-bundle-members: lacp bundle members
//   bundles-adjacency: bundles adjacency
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package bundlemgr_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package bundlemgr_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper lacp-bundles}", reflect.TypeOf(LacpBundles{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:lacp-bundles", reflect.TypeOf(LacpBundles{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper bundle-information}", reflect.TypeOf(BundleInformation{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:bundle-information", reflect.TypeOf(BundleInformation{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper lacp-data}", reflect.TypeOf(LacpData{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:lacp-data", reflect.TypeOf(LacpData{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper bundles}", reflect.TypeOf(Bundles{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:bundles", reflect.TypeOf(Bundles{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper lacp-bundle-members}", reflect.TypeOf(LacpBundleMembers{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members", reflect.TypeOf(LacpBundleMembers{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper bundles-adjacency}", reflect.TypeOf(BundlesAdjacency{}))
    ydk.RegisterEntity("Cisco-IOS-XR-bundlemgr-oper:bundles-adjacency", reflect.TypeOf(BundlesAdjacency{}))
}

// BmdMlacpSwitchover represents Bmd mlacp switchover
type BmdMlacpSwitchover string

const (
    // Non-revertive switchover type
    BmdMlacpSwitchover_bmd_mlacp_switchover_nonrevertive BmdMlacpSwitchover = "bmd-mlacp-switchover-nonrevertive"

    // Brute force switchover type
    BmdMlacpSwitchover_bmd_mlacp_switchover_brute_force BmdMlacpSwitchover = "bmd-mlacp-switchover-brute-force"

    // Revertive switchover type
    BmdMlacpSwitchover_bmd_mlacp_switchover_revertive BmdMlacpSwitchover = "bmd-mlacp-switchover-revertive"

    // Number of switchover types
    BmdMlacpSwitchover_bmd_mlacp_switchover_count BmdMlacpSwitchover = "bmd-mlacp-switchover-count"
)

// LoadBalance represents Load balance
type LoadBalance string

const (
    // Default
    LoadBalance_default_ LoadBalance = "default"

    // Auto
    LoadBalance_auto LoadBalance = "auto"

    // Value
    LoadBalance_value LoadBalance = "value"

    // Source IP
    LoadBalance_source_ip LoadBalance = "source-ip"

    // Destination IP
    LoadBalance_destination_ip LoadBalance = "destination-ip"

    // Unknown
    LoadBalance_unknown LoadBalance = "unknown"
)

// BmBdlState represents Bm bdl state
type BmBdlState string

const (
    // The bundle has been configured Down
    BmBdlState_bm_bdl_state_admin_down BmBdlState = "bm-bdl-state-admin-down"

    // The bundle is Down
    BmBdlState_bm_bdl_state_down BmBdlState = "bm-bdl-state-down"

    // The bundle is controlled by CLIENT Down
    BmBdlState_bm_bdl_state_client_down BmBdlState = "bm-bdl-state-client-down"

    // The bundle is Down on the partner device
    BmBdlState_bm_bdl_state_ptnr_down BmBdlState = "bm-bdl-state-ptnr-down"

    // Bundle shutdown has been configured
    BmBdlState_bm_bdl_state_bundle_shutdown BmBdlState = "bm-bdl-state-bundle-shutdown"

    // The bundle cannot contact the core
    BmBdlState_bm_bdl_state_pe_isolated BmBdlState = "bm-bdl-state-pe-isolated"

    // The state is disputed by a peer device
    BmBdlState_bm_bdl_state_nak BmBdlState = "bm-bdl-state-nak"

    // The bundle is Up
    BmBdlState_bm_bdl_state_up_active BmBdlState = "bm-bdl-state-up-active"

    // The bundle is Up, but is mLACP standby
    BmBdlState_bm_bdl_state_mlacp_hot_standby BmBdlState = "bm-bdl-state-mlacp-hot-standby"

    // The bundle is mLACP standby, but will not
    // eliminate traffic loss
    BmBdlState_bm_bdl_state_mlacp_cold_standby BmBdlState = "bm-bdl-state-mlacp-cold-standby"

    // The bundle state has not been determined
    BmBdlState_bm_bdl_state_unknown BmBdlState = "bm-bdl-state-unknown"

    // The bundle is standby, but will not eliminate
    // traffic loss
    BmBdlState_bm_bdl_state_cold_standby BmBdlState = "bm-bdl-state-cold-standby"

    // The bundle has been error-disabled
    BmBdlState_bm_bdl_state_error_disabled BmBdlState = "bm-bdl-state-error-disabled"

    // The bundle has been disabled by EFD
    BmBdlState_bm_bdl_state_efd_disabled BmBdlState = "bm-bdl-state-efd-disabled"
)

// LacpPeriodState represents Lacp period state
type LacpPeriodState string

const (
    // Packets are being sent using a long period
    LacpPeriodState_period_s_low LacpPeriodState = "period-s-low"

    // Packets are being sent using a short period
    LacpPeriodState_period_fast LacpPeriodState = "period-fast"

    // Packets are not being sent
    LacpPeriodState_period_none LacpPeriodState = "period-none"
)

// BundleMedia represents Bundle media
type BundleMedia string

const (
    // bundle media ethernet
    BundleMedia_bundle_media_ethernet BundleMedia = "bundle-media-ethernet"

    // bundle media pos
    BundleMedia_bundle_media_pos BundleMedia = "bundle-media-pos"

    // bundle media count
    BundleMedia_bundle_media_count BundleMedia = "bundle-media-count"
)

// BmdMlacpBdlStateEnum represents State of an mLACP device
type BmdMlacpBdlStateEnum string

const (
    // Bundle info NAK'd
    BmdMlacpBdlStateEnum_bdl_state_nak BmdMlacpBdlStateEnum = "bdl-state-nak"

    // No bundle state TLV received
    BmdMlacpBdlStateEnum_bdl_state_unknown BmdMlacpBdlStateEnum = "bdl-state-unknown"

    // No bundle config TLV with sync bit set received
    BmdMlacpBdlStateEnum_bdl_state_no_sync BmdMlacpBdlStateEnum = "bdl-state-no-sync"

    // Revertive delay timer running
    BmdMlacpBdlStateEnum_bdl_state_rec_delay BmdMlacpBdlStateEnum = "bdl-state-rec-delay"

    // Bundle is up
    BmdMlacpBdlStateEnum_bdl_state_up BmdMlacpBdlStateEnum = "bdl-state-up"

    // Bundle is down
    BmdMlacpBdlStateEnum_bdl_state_down BmdMlacpBdlStateEnum = "bdl-state-down"

    // Bundle is admin down
    BmdMlacpBdlStateEnum_bdl_state_admin_down BmdMlacpBdlStateEnum = "bdl-state-admin-down"

    // Bundle state TLV reported test
    BmdMlacpBdlStateEnum_bdl_state_test BmdMlacpBdlStateEnum = "bdl-state-test"

    // Bundle state TLV reported error
    BmdMlacpBdlStateEnum_bdl_state_error BmdMlacpBdlStateEnum = "bdl-state-error"
)

// BundleMedia1 represents Bundle media1
type BundleMedia1 string

const (
    // Ethernet
    BundleMedia1_ethernet BundleMedia1 = "ethernet"

    // POS
    BundleMedia1_pos BundleMedia1 = "pos"
)

// Rxstates represents Rxstates
type Rxstates string

const (
    // current rx
    Rxstates_current_rx Rxstates = "current-rx"

    // expired
    Rxstates_expired Rxstates = "expired"

    // defaulted
    Rxstates_defaulted Rxstates = "defaulted"

    // initialize
    Rxstates_initialize Rxstates = "initialize"

    // lacp disabled
    Rxstates_lacp_disabled Rxstates = "lacp-disabled"

    // port disabled
    Rxstates_port_disabled Rxstates = "port-disabled"
)

// LacpChurnstates represents Lacp churnstates
type LacpChurnstates string

const (
    // The port is synchronized correctly
    LacpChurnstates_no_churn LacpChurnstates = "no-churn"

    // The port is OutOfSync and the churn timer has
    // expired
    LacpChurnstates_churn LacpChurnstates = "churn"

    // The port is OutOfSync but the churn timer has
    // not expired
    LacpChurnstates_churn_monitor LacpChurnstates = "churn-monitor"
)

// BmdBagEventMbrItem represents Description of an event for a member
type BmdBagEventMbrItem string

const (
    // Member structure created
    BmdBagEventMbrItem_bmd_event_mbr_idb_create BmdBagEventMbrItem = "bmd-event-mbr-idb-create"

    // Added to bundle
    BmdBagEventMbrItem_bmd_event_mbr_bdl_add BmdBagEventMbrItem = "bmd-event-mbr-bdl-add"

    // Member's IM state changed
    BmdBagEventMbrItem_bmd_event_mbr_im_state BmdBagEventMbrItem = "bmd-event-mbr-im-state"

    // Sel logic state changed
    BmdBagEventMbrItem_bmd_event_mbr_sel_logic BmdBagEventMbrItem = "bmd-event-mbr-sel-logic"

    // Mux state changed
    BmdBagEventMbrItem_bmd_event_mbr_mux BmdBagEventMbrItem = "bmd-event-mbr-mux"

    // BFD state changed
    BmdBagEventMbrItem_bmd_event_mbr_bfd BmdBagEventMbrItem = "bmd-event-mbr-bfd"

    // Expired
    BmdBagEventMbrItem_bmd_event_mbr_expired BmdBagEventMbrItem = "bmd-event-mbr-expired"

    // Defaulted
    BmdBagEventMbrItem_bmd_event_mbr_defaulted BmdBagEventMbrItem = "bmd-event-mbr-defaulted"

    // First retry
    BmdBagEventMbrItem_bmd_event_mbr_first_retry BmdBagEventMbrItem = "bmd-event-mbr-first-retry"

    // Message from BML
    BmdBagEventMbrItem_bmd_event_mbr_msg BmdBagEventMbrItem = "bmd-event-mbr-msg"

    // Last error
    BmdBagEventMbrItem_bmd_event_mbr_error BmdBagEventMbrItem = "bmd-event-mbr-error"

    // mLACP TLV received
    BmdBagEventMbrItem_bmd_event_mbr_mlacp_tlv BmdBagEventMbrItem = "bmd-event-mbr-mlacp-tlv"

    // redundancy role change
    BmdBagEventMbrItem_bmd_event_mbr_redundancy_role BmdBagEventMbrItem = "bmd-event-mbr-redundancy-role"

    // Number of member events
    BmdBagEventMbrItem_bmd_event_mbr_count BmdBagEventMbrItem = "bmd-event-mbr-count"
)

// BmdBagEventData represents Type of additional info for an event
type BmdBagEventData string

const (
    // No additional data
    BmdBagEventData_bmd_bag_evt_data_none BmdBagEventData = "bmd-bag-evt-data-none"

    // Additional data is an error code
    BmdBagEventData_bmd_bag_evt_data_error BmdBagEventData = "bmd-bag-evt-data-error"

    // Additional data is a string
    BmdBagEventData_bmd_bag_evt_data_string BmdBagEventData = "bmd-bag-evt-data-string"
)

// BmdSwitchReason represents Bmd switch reason
type BmdSwitchReason string

const (
    // Switch is permitted
    BmdSwitchReason_bm_switch_reason_none BmdSwitchReason = "bm-switch-reason-none"

    // Switch has no effect
    BmdSwitchReason_bm_switch_reason_noop BmdSwitchReason = "bm-switch-reason-noop"

    // mLACP not configured
    BmdSwitchReason_bm_switch_reason_not_mlacp BmdSwitchReason = "bm-switch-reason-not-mlacp"

    // Brute-force or revertive switchover is in
    // effect
    BmdSwitchReason_bm_switch_reason_revertive BmdSwitchReason = "bm-switch-reason-revertive"

    // Would-be active bundle is not ready
    BmdSwitchReason_bm_switch_reason_bdl_down BmdSwitchReason = "bm-switch-reason-bdl-down"

    // Recovery delay in effect, applications may not
    // be fully synced
    BmdSwitchReason_bm_switch_reason_recovery BmdSwitchReason = "bm-switch-reason-recovery"

    // Preceding switch action not viable
    BmdSwitchReason_bm_switch_reason_preceding_error BmdSwitchReason = "bm-switch-reason-preceding-error"

    // Switch actions are scheduled incorrectly
    BmdSwitchReason_bm_switch_reason_wrong_order BmdSwitchReason = "bm-switch-reason-wrong-order"

    // The ICCP group is operating in singleton mode
    BmdSwitchReason_bm_switch_reason_singleton BmdSwitchReason = "bm-switch-reason-singleton"
)

// BmdMemberTypeEnum represents Bmd member type enum
type BmdMemberTypeEnum string

const (
    // Member has been configured on the local device
    BmdMemberTypeEnum_bmd_mbr_local BmdMemberTypeEnum = "bmd-mbr-local"

    // Member has been configured on an mLACP peer
    // device
    BmdMemberTypeEnum_bmd_mbr_foreign BmdMemberTypeEnum = "bmd-mbr-foreign"

    // Member's type is unknown
    BmdMemberTypeEnum_bmd_mbr_unknown BmdMemberTypeEnum = "bmd-mbr-unknown"
)

// BmAfId represents Bm af id
type BmAfId string

const (
    // IPv4 AFI
    BmAfId_bm_af_id_ipv4 BmAfId = "bm-af-id-ipv4"

    // IPv6 AFI
    BmAfId_bm_af_id_ipv6 BmAfId = "bm-af-id-ipv6"
)

// BmMbrStateReason represents Bm mbr state reason
type BmMbrStateReason string

const (
    // Reason unavailable (diagnostics error)
    BmMbrStateReason_bm_mbr_state_reason_unknown BmMbrStateReason = "bm-mbr-state-reason-unknown"

    // Link cannot be used (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_unselectable_unknown BmMbrStateReason = "bm-mbr-state-reason-unselectable-unknown"

    // Link is down
    BmMbrStateReason_bm_mbr_state_reason_link_down BmMbrStateReason = "bm-mbr-state-reason-link-down"

    // Link is being removed from the bundle
    BmMbrStateReason_bm_mbr_state_reason_link_deleting BmMbrStateReason = "bm-mbr-state-reason-link-deleting"

    // Link is in the process of being created
    BmMbrStateReason_bm_mbr_state_reason_creating BmMbrStateReason = "bm-mbr-state-reason-creating"

    // Bundle is in the process of being created
    BmMbrStateReason_bm_mbr_state_reason_bundle_creating BmMbrStateReason = "bm-mbr-state-reason-bundle-creating"

    // Bundle is in the process of being deleted
    BmMbrStateReason_bm_mbr_state_reason_bundle_deleting BmMbrStateReason = "bm-mbr-state-reason-bundle-deleting"

    // Bundle has been shut down
    BmMbrStateReason_bm_mbr_state_reason_bundle_admin_down BmMbrStateReason = "bm-mbr-state-reason-bundle-admin-down"

    // Bundle is in the process of being replicated to
    // this location
    BmMbrStateReason_bm_mbr_state_reason_replicating BmMbrStateReason = "bm-mbr-state-reason-replicating"

    // Incompatible with other links in the bundle
    // (bandwidth out of range)
    BmMbrStateReason_bm_mbr_state_reason_bandwidth BmMbrStateReason = "bm-mbr-state-reason-bandwidth"

    // Loopback: Actor and Partner have the same
    // System ID and Key
    BmMbrStateReason_bm_mbr_state_reason_loop_back BmMbrStateReason = "bm-mbr-state-reason-loop-back"

    // Incompatible with other links in the bundle
    // (LACP vs non-LACP)
    BmMbrStateReason_bm_mbr_state_reason_activity_type BmMbrStateReason = "bm-mbr-state-reason-activity-type"

    // Bundle shutdown is configured for the bundle
    BmMbrStateReason_bm_mbr_state_reason_bundle_shutdown BmMbrStateReason = "bm-mbr-state-reason-bundle-shutdown"

    // Not enough links available to meet
    // minimum-active threshold
    BmMbrStateReason_bm_mbr_state_reason_min_selected BmMbrStateReason = "bm-mbr-state-reason-min-selected"

    // Link is Standby due to maximum-active links
    // configuration
    BmMbrStateReason_bm_mbr_state_reason_max_selected BmMbrStateReason = "bm-mbr-state-reason-max-selected"

    // Bundle has too many member links configured
    BmMbrStateReason_bm_mbr_state_reason_link_limit BmMbrStateReason = "bm-mbr-state-reason-link-limit"

    // Bundle has reached maximum supported number of
    // active links
    BmMbrStateReason_bm_mbr_state_reason_active_limit BmMbrStateReason = "bm-mbr-state-reason-active-limit"

    // Link is Standby (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_standby_unknown BmMbrStateReason = "bm-mbr-state-reason-standby-unknown"

    // Link is Expired; LACPDUs are not being received
    // from the partner
    BmMbrStateReason_bm_mbr_state_reason_expired BmMbrStateReason = "bm-mbr-state-reason-expired"

    // Link is Defaulted; LACPDUs are not being
    // received from the partner
    BmMbrStateReason_bm_mbr_state_reason_defaulted BmMbrStateReason = "bm-mbr-state-reason-defaulted"

    // Link is Not Aggregatable (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_act_or_not_agg BmMbrStateReason = "bm-mbr-state-reason-act-or-not-agg"

    // Partner has marked the link as Not Aggregatable
    BmMbrStateReason_bm_mbr_state_reason_partner_not_agg BmMbrStateReason = "bm-mbr-state-reason-partner-not-agg"

    // Partner System ID/Key do not match that of the
    // Selected links
    BmMbrStateReason_bm_mbr_state_reason_lagid BmMbrStateReason = "bm-mbr-state-reason-lagid"

    // Bundle interface is not present in
    // configuration
    BmMbrStateReason_bm_mbr_state_reason_bundle_not_cfgd BmMbrStateReason = "bm-mbr-state-reason-bundle-not-cfgd"

    // Wait-while timer is running
    BmMbrStateReason_bm_mbr_state_reason_bundle_not_ready BmMbrStateReason = "bm-mbr-state-reason-bundle-not-ready"

    // Partner has not echoed the correct parameters
    // for this link
    BmMbrStateReason_bm_mbr_state_reason_partner_ood BmMbrStateReason = "bm-mbr-state-reason-partner-ood"

    // Partner is not Synchronized (Waiting, Standby,
    // or LAG ID mismatch)
    BmMbrStateReason_bm_mbr_state_reason_partner_not_in_sync BmMbrStateReason = "bm-mbr-state-reason-partner-not-in-sync"

    // Partner is not Synchronized (Waiting, not
    // Selected, or out-of-date)
    BmMbrStateReason_bm_mbr_state_reason_foreign_partner_oos BmMbrStateReason = "bm-mbr-state-reason-foreign-partner-oos"

    // Link is Attached and has not gone Collecting
    // (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_attach_unknown BmMbrStateReason = "bm-mbr-state-reason-attach-unknown"

    // Partner has not advertized that it is
    // Collecting
    BmMbrStateReason_bm_mbr_state_reason_partner_not_collecting BmMbrStateReason = "bm-mbr-state-reason-partner-not-collecting"

    // Link is Collecting and has not gone
    // Distributing (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_collect_unknown BmMbrStateReason = "bm-mbr-state-reason-collect-unknown"

    // Link is marked as Standby by mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_standby_foreign BmMbrStateReason = "bm-mbr-state-reason-standby-foreign"

    // Link is waiting for BFD session to start
    BmMbrStateReason_bm_mbr_state_reason_bfd_starting BmMbrStateReason = "bm-mbr-state-reason-bfd-starting"

    // BFD state of this link is Down
    BmMbrStateReason_bm_mbr_state_reason_bfd_down BmMbrStateReason = "bm-mbr-state-reason-bfd-down"

    // BFD session is unconfigured on the remote end
    BmMbrStateReason_bm_mbr_state_reason_bfd_nbr_unconfig BmMbrStateReason = "bm-mbr-state-reason-bfd-nbr-unconfig"

    // Link is not operational as a result of mLACP
    // negotiations
    BmMbrStateReason_bm_mbr_state_reason_mlacp BmMbrStateReason = "bm-mbr-state-reason-mlacp"

    // ICCP group is isolated from the core network
    BmMbrStateReason_bm_mbr_state_reason_pe_isolated BmMbrStateReason = "bm-mbr-state-reason-pe-isolated"

    // Forced switchover to the mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_forced_switchover BmMbrStateReason = "bm-mbr-state-reason-forced-switchover"

    // Link is error disabled (unknown reason)
    BmMbrStateReason_bm_mbr_state_reason_errdis_unknown BmMbrStateReason = "bm-mbr-state-reason-errdis-unknown"

    // Waiting for member state information from mLACP
    // peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_mbr_state_info BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-mbr-state-info"

    // Link is Active
    BmMbrStateReason_bm_mbr_state_reason_active BmMbrStateReason = "bm-mbr-state-reason-active"

    // Waiting for bundle state information from mLACP
    // peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_state_info BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-bdl-state-info"

    // Waiting for bundle configuration information
    // from mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_config_info BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-bdl-config-info"

    // Waiting for bundle to complete initial
    // synchronization with mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_no_bdl_sync BmMbrStateReason = "bm-mbr-state-reason-mlacp-no-bdl-sync"

    // mLACP bundle does not have a peer device
    BmMbrStateReason_bm_mbr_state_reason_mlacp_bdl_has_no_peer BmMbrStateReason = "bm-mbr-state-reason-mlacp-bdl-has-no-peer"

    // Link is being ignored due to an inconsistency
    // with mLACP peer
    BmMbrStateReason_bm_mbr_state_reason_mlacp_nak BmMbrStateReason = "bm-mbr-state-reason-mlacp-nak"

    // ICCP transport is unavailable
    BmMbrStateReason_bm_mbr_state_reason_mlacp_transport_unavailable BmMbrStateReason = "bm-mbr-state-reason-mlacp-transport-unavailable"

    // ICCP Group is not fully configured
    BmMbrStateReason_bm_mbr_state_reason_mlacp_not_configured BmMbrStateReason = "bm-mbr-state-reason-mlacp-not-configured"

    // mLACP recovery delay timer is running
    BmMbrStateReason_bm_mbr_state_reason_recovery_timer BmMbrStateReason = "bm-mbr-state-reason-recovery-timer"

    // mLACP peer is active
    BmMbrStateReason_bm_mbr_state_reason_mlacp_standby BmMbrStateReason = "bm-mbr-state-reason-mlacp-standby"

    // mLACP peer has more links/bandwidth available
    BmMbrStateReason_bm_mbr_state_reason_maximized_out BmMbrStateReason = "bm-mbr-state-reason-maximized-out"

    // mLACP peer has one or more links Selected
    BmMbrStateReason_bm_mbr_state_reason_mlacp_peer_selected BmMbrStateReason = "bm-mbr-state-reason-mlacp-peer-selected"

    // mLACP bundle does not have a peer device
    // (connect timer running)
    BmMbrStateReason_bm_mbr_state_reason_mlacp_connect_timer_running BmMbrStateReason = "bm-mbr-state-reason-mlacp-connect-timer-running"

    // Bundle is not configured to run mLACP
    BmMbrStateReason_bm_mbr_state_reason_bundle_not_mlacp BmMbrStateReason = "bm-mbr-state-reason-bundle-not-mlacp"

    // Bundle has too many working links configured
    // (more than the maximum-active limit)
    BmMbrStateReason_bm_mbr_state_reason_no_lon BmMbrStateReason = "bm-mbr-state-reason-no-lon"

    // Additional bandwidth from link would exceed
    // load balancing capabilities
    BmMbrStateReason_bm_mbr_state_reason_cumul_rel_bw_limit BmMbrStateReason = "bm-mbr-state-reason-cumul-rel-bw-limit"

    // No MAC address available for the bundle
    BmMbrStateReason_bm_mbr_state_reason_no_mac BmMbrStateReason = "bm-mbr-state-reason-no-mac"

    // No system ID available for use by this bundle
    BmMbrStateReason_bm_mbr_state_reason_no_system_id BmMbrStateReason = "bm-mbr-state-reason-no-system-id"

    // Link is shutdown
    BmMbrStateReason_bm_mbr_state_reason_link_shutdown BmMbrStateReason = "bm-mbr-state-reason-link-shutdown"

    // Non-LACP link in mLACP bundle
    BmMbrStateReason_bm_mbr_state_reason_activity_mlacp BmMbrStateReason = "bm-mbr-state-reason-activity-mlacp"

    // LACP link in inter-chassis bundle
    BmMbrStateReason_bm_mbr_state_reason_activity_iccp BmMbrStateReason = "bm-mbr-state-reason-activity-iccp"

    // Parent bundle is both inter-chassis and
    // configured for mLACP
    BmMbrStateReason_bm_mbr_state_reason_bundle_icpe_mlacp BmMbrStateReason = "bm-mbr-state-reason-bundle-icpe-mlacp"

    // Too many bundle members in system; no link
    // number available
    BmMbrStateReason_bm_mbr_state_reason_no_link_num BmMbrStateReason = "bm-mbr-state-reason-no-link-num"

    // mLACP peer has a higher priority link
    BmMbrStateReason_bm_mbr_state_reason_standby_peer_higher_prio BmMbrStateReason = "bm-mbr-state-reason-standby-peer-higher-prio"

    // Link is in standby redundancy state
    BmMbrStateReason_bm_mbr_state_reason_red_state_standby BmMbrStateReason = "bm-mbr-state-reason-red-state-standby"

    // One or more links in the bundle are in standby
    // redundancy state
    BmMbrStateReason_bm_mbr_state_reason_other_red_state_standby BmMbrStateReason = "bm-mbr-state-reason-other-red-state-standby"

    // Holding down temporary to avoid churn after
    // restart
    BmMbrStateReason_bm_mbr_state_reason_hold_ing BmMbrStateReason = "bm-mbr-state-reason-hold-ing"

    // Bundle has been error-disabled
    BmMbrStateReason_bm_mbr_state_reason_bundle_error_disabled BmMbrStateReason = "bm-mbr-state-reason-bundle-error-disabled"

    // Bundle has been disabled by EFD
    BmMbrStateReason_bm_mbr_state_reason_bundle_efd_disabled BmMbrStateReason = "bm-mbr-state-reason-bundle-efd-disabled"

    // Singleton ICCP group is isolated from the core
    // network
    BmMbrStateReason_bm_mbr_state_reason_singleton_pe_isolated BmMbrStateReason = "bm-mbr-state-reason-singleton-pe-isolated"

    // Link is waiting for BFDv6 session to start
    BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_starting BmMbrStateReason = "bm-mbr-state-reason-bfd-ipv6-starting"

    // BFDv6 state of this link is Down
    BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_down BmMbrStateReason = "bm-mbr-state-reason-bfd-ipv6-down"

    // BFDv6 session is unconfigured on the remote end
    BmMbrStateReason_bm_mbr_state_reason_bfd_ipv6_nbr_unconfig BmMbrStateReason = "bm-mbr-state-reason-bfd-ipv6-nbr-unconfig"

    // LACP delay timer is running
    BmMbrStateReason_bm_mbr_state_reason_timer_running BmMbrStateReason = "bm-mbr-state-reason-timer-running"

    // Client has configured the bundle state Down
    BmMbrStateReason_bm_mbr_state_reason_client_bundle_ctrl BmMbrStateReason = "bm-mbr-state-reason-client-bundle-ctrl"

    // Enumeration maximum value
    BmMbrStateReason_bm_mbr_state_reason_count BmMbrStateReason = "bm-mbr-state-reason-count"
)

// BmdBagEventBdlItem represents Description of an event for a bundle
type BmdBagEventBdlItem string

const (
    // Bundle structure created
    BmdBagEventBdlItem_bmd_event_bdl_idb_create BmdBagEventBdlItem = "bmd-event-bdl-idb-create"

    // Bundle configured by user
    BmdBagEventBdlItem_bmd_event_bdl_configured BmdBagEventBdlItem = "bmd-event-bdl-configured"

    // Bundle's IM state changed
    BmdBagEventBdlItem_bmd_event_bdl_im_state BmdBagEventBdlItem = "bmd-event-bdl-im-state"

    // Member added to the bundle
    BmdBagEventBdlItem_bmd_event_bdl_mbr_added BmdBagEventBdlItem = "bmd-event-bdl-mbr-added"

    // Member removed from the bundle
    BmdBagEventBdlItem_bmd_event_bdl_mbr_deleted BmdBagEventBdlItem = "bmd-event-bdl-mbr-deleted"

    // Bundle's MAC address changed
    BmdBagEventBdlItem_bmd_event_bdl_mac_addr BmdBagEventBdlItem = "bmd-event-bdl-mac-addr"

    // First retry
    BmdBagEventBdlItem_bmd_event_bdl_first_retry BmdBagEventBdlItem = "bmd-event-bdl-first-retry"

    // User changed the configuration
    BmdBagEventBdlItem_bmd_event_bdl_user_config BmdBagEventBdlItem = "bmd-event-bdl-user-config"

    // Last error
    BmdBagEventBdlItem_bmd_event_bdl_error BmdBagEventBdlItem = "bmd-event-bdl-error"

    // mLACP TLV received
    BmdBagEventBdlItem_bmd_event_bdl_mlacp_tlv BmdBagEventBdlItem = "bmd-event-bdl-mlacp-tlv"

    // redundancy role change
    BmdBagEventBdlItem_bmd_event_bdl_redundancy_role BmdBagEventBdlItem = "bmd-event-bdl-redundancy-role"

    // BFD state change
    BmdBagEventBdlItem_bdl_bfd_state_change BmdBagEventBdlItem = "bdl-bfd-state-change"

    // Inter-chassis link mode changed
    BmdBagEventBdlItem_bmd_event_bdl_icl BmdBagEventBdlItem = "bmd-event-bdl-icl"

    // Number of bundle events
    BmdBagEventBdlItem_bmd_event_bdl_count BmdBagEventBdlItem = "bmd-event-bdl-count"
)

// BmdMlacpNodeStateEnum represents State of an mLACP device
type BmdMlacpNodeStateEnum string

const (
    // Missing some mLACP IG config
    BmdMlacpNodeStateEnum_node_state_incomplete BmdMlacpNodeStateEnum = "node-state-incomplete"

    // Connection rejected by peer
    BmdMlacpNodeStateEnum_node_state_conn_rejected BmdMlacpNodeStateEnum = "node-state-conn-rejected"

    // Connect timer running
    BmdMlacpNodeStateEnum_node_state_connect_sent BmdMlacpNodeStateEnum = "node-state-connect-sent"

    // Missing some ICCP IG config
    BmdMlacpNodeStateEnum_node_state_unconfigured BmdMlacpNodeStateEnum = "node-state-unconfigured"

    // ICCP declared peer node unreachable
    BmdMlacpNodeStateEnum_node_state_unreachable BmdMlacpNodeStateEnum = "node-state-unreachable"

    // ICCP declared peer node down
    BmdMlacpNodeStateEnum_node_state_iccp_down BmdMlacpNodeStateEnum = "node-state-iccp-down"

    // System info NAK'd
    BmdMlacpNodeStateEnum_node_state_nak BmdMlacpNodeStateEnum = "node-state-nak"

    // No system state TLV received
    BmdMlacpNodeStateEnum_node_state_unknown BmdMlacpNodeStateEnum = "node-state-unknown"

    // System state TLV reported down
    BmdMlacpNodeStateEnum_node_state_mlacp_down BmdMlacpNodeStateEnum = "node-state-mlacp-down"

    // System state TLV reported admin down
    BmdMlacpNodeStateEnum_node_state_admin_down BmdMlacpNodeStateEnum = "node-state-admin-down"

    // System is isolated from core network
    BmdMlacpNodeStateEnum_node_state_pe_isolated BmdMlacpNodeStateEnum = "node-state-pe-isolated"

    // System state TLV reported error
    BmdMlacpNodeStateEnum_node_state_error BmdMlacpNodeStateEnum = "node-state-error"

    // System state TLV reported test
    BmdMlacpNodeStateEnum_node_state_test BmdMlacpNodeStateEnum = "node-state-test"

    // System is up
    BmdMlacpNodeStateEnum_node_state_up BmdMlacpNodeStateEnum = "node-state-up"
)

// BmdBagEventRgItem represents Description of an event for a RG
type BmdBagEventRgItem string

const (
    // RG structure created
    BmdBagEventRgItem_bmd_event_rg_idb_create BmdBagEventRgItem = "bmd-event-rg-idb-create"

    // RG configured by user
    BmdBagEventRgItem_bmd_event_rg_configured BmdBagEventRgItem = "bmd-event-rg-configured"

    // User changed the configuration
    BmdBagEventRgItem_bmd_event_rg_user_config BmdBagEventRgItem = "bmd-event-rg-user-config"

    // Connection to peer
    BmdBagEventRgItem_bmd_event_rg_connect_ion BmdBagEventRgItem = "bmd-event-rg-connect-ion"

    // Data received
    BmdBagEventRgItem_bmd_event_rg_data BmdBagEventRgItem = "bmd-event-rg-data"

    // Sync performed
    BmdBagEventRgItem_bmd_event_rg_sync BmdBagEventRgItem = "bmd-event-rg-sync"

    // First retry
    BmdBagEventRgItem_bmd_event_rg_first_retry BmdBagEventRgItem = "bmd-event-rg-first-retry"

    // Last error
    BmdBagEventRgItem_bmd_event_rg_error BmdBagEventRgItem = "bmd-event-rg-error"

    // mLACP TLV received
    BmdBagEventRgItem_bmd_event_rg_mlacp_tlv BmdBagEventRgItem = "bmd-event-rg-mlacp-tlv"

    // ICCP event received
    BmdBagEventRgItem_bmd_event_rg_iccp_event BmdBagEventRgItem = "bmd-event-rg-iccp-event"

    // Number of RG events
    BmdBagEventRgItem_bmd_event_rg_count BmdBagEventRgItem = "bmd-event-rg-count"
)

// BmWhichSystem represents Bm which system
type BmWhichSystem string

const (
    // Actor
    BmWhichSystem_bm_which_system_actr BmWhichSystem = "bm-which-system-actr"

    // Partner
    BmWhichSystem_bm_which_system_ptnr BmWhichSystem = "bm-which-system-ptnr"
)

// BmdBfdBdlState represents Bmd bfd bdl state
type BmdBfdBdlState string

const (
    // BFD is down on the bundle
    BmdBfdBdlState_bmd_bfd_bdl_down BmdBfdBdlState = "bmd-bfd-bdl-down"

    // BFD has just started on a bundle, and the state
    // has not been determined
    BmdBfdBdlState_bmd_bfd_bdl_unknown BmdBfdBdlState = "bmd-bfd-bdl-unknown"

    // BFD is up on the bundle
    BmdBfdBdlState_bmd_bfd_bdl_up BmdBfdBdlState = "bmd-bfd-bdl-up"

    // Number of BFD states on a bundle
    BmdBfdBdlState_bmd_bfd_bdl_count BmdBfdBdlState = "bmd-bfd-bdl-count"
)

// BmdMlacpMbrStateEnum represents State of an mLACP device
type BmdMlacpMbrStateEnum string

const (
    // Member info NAK'd
    BmdMlacpMbrStateEnum_mbr_state_nak BmdMlacpMbrStateEnum = "mbr-state-nak"

    // No member state TLV received
    BmdMlacpMbrStateEnum_mbr_state_unknown BmdMlacpMbrStateEnum = "mbr-state-unknown"

    // Member is up
    BmdMlacpMbrStateEnum_mbr_state_up BmdMlacpMbrStateEnum = "mbr-state-up"

    // Member is down
    BmdMlacpMbrStateEnum_mbr_state_down BmdMlacpMbrStateEnum = "mbr-state-down"

    // Member is admin down
    BmdMlacpMbrStateEnum_mbr_state_admin_down BmdMlacpMbrStateEnum = "mbr-state-admin-down"

    // Member state TLV reported test
    BmdMlacpMbrStateEnum_mbr_state_test BmdMlacpMbrStateEnum = "mbr-state-test"

    // Member state TLV reported error
    BmdMlacpMbrStateEnum_mbr_state_error BmdMlacpMbrStateEnum = "mbr-state-error"
)

// BmdBagTarget represents Scope of information
type BmdBagTarget string

const (
    // Information for a member
    BmdBagTarget_bm_bag_target_mbr BmdBagTarget = "bm-bag-target-mbr"

    // Information for a bundle
    BmdBagTarget_bm_bag_target_bdl BmdBagTarget = "bm-bag-target-bdl"

    // Information for a node
    BmdBagTarget_bm_bag_target_node BmdBagTarget = "bm-bag-target-node"

    // Information for an RG
    BmdBagTarget_bm_bag_target_rg BmdBagTarget = "bm-bag-target-rg"
)

// BmMuxstate represents Bm muxstate
type BmMuxstate string

const (
    // Port is not attached to a bundle
    BmMuxstate_detached BmMuxstate = "detached"

    // Port has chosen bundle and is waiting to join
    BmMuxstate_waiting BmMuxstate = "waiting"

    // Port is attached to the bundle but not active
    BmMuxstate_attached BmMuxstate = "attached"

    // Port is ready to receive data
    BmMuxstate_collecting BmMuxstate = "collecting"

    // Port is distributing data
    BmMuxstate_distributing BmMuxstate = "distributing"

    // Port is active and can send and receive data
    BmMuxstate_collecting_distributing BmMuxstate = "collecting-distributing"
)

// LacpSelState represents Lacp sel state
type LacpSelState string

const (
    // The link is Unselected
    LacpSelState_unselected LacpSelState = "unselected"

    // The link is Standby
    LacpSelState_standby LacpSelState = "standby"

    // The link is Selected
    LacpSelState_selected LacpSelState = "selected"
)

// BmdMemberState represents Bmd member state
type BmdMemberState string

const (
    // Member is configured
    BmdMemberState_bmd_mbr_state_configured BmdMemberState = "bmd-mbr-state-configured"

    // Member is standby
    BmdMemberState_bmd_mbr_state_standby BmdMemberState = "bmd-mbr-state-standby"

    // Member is hot standby
    BmdMemberState_bmd_mbr_state_hot_standby BmdMemberState = "bmd-mbr-state-hot-standby"

    // Member is negotiating
    BmdMemberState_bmd_mbr_state_negotiating BmdMemberState = "bmd-mbr-state-negotiating"

    // Member has a BFD session running
    BmdMemberState_bmd_mbr_state_bfd_running BmdMemberState = "bmd-mbr-state-bfd-running"

    // Member is active
    BmdMemberState_bmd_mbr_state_active BmdMemberState = "bmd-mbr-state-active"
)

// BmMuxreason represents Bm muxreason
type BmMuxreason string

const (
    // Selection logic has not yet been run for the
    // bundle this link is a member of
    BmMuxreason_bm_mux_reason_no_reason BmMuxreason = "bm-mux-reason-no-reason"

    // Link is down
    BmMuxreason_bm_mux_reason_link_down BmMuxreason = "bm-mux-reason-link-down"

    // Link is being removed from the bundle
    BmMuxreason_bm_mux_reason_link_deleted BmMuxreason = "bm-mux-reason-link-deleted"

    // Link has wrong duplexity
    BmMuxreason_bm_mux_reason_duplex BmMuxreason = "bm-mux-reason-duplex"

    // Link has wrong bandwidth
    BmMuxreason_bm_mux_reason_bandwidth BmMuxreason = "bm-mux-reason-bandwidth"

    // Link is a loopback interface
    BmMuxreason_bm_mux_reason_loop_back BmMuxreason = "bm-mux-reason-loop-back"

    // Link has wrong activity type
    BmMuxreason_bm_mux_reason_activity_type BmMuxreason = "bm-mux-reason-activity-type"

    // Link's bundle already has maximum number of
    // members allowed
    BmMuxreason_bm_mux_reason_link_limit BmMuxreason = "bm-mux-reason-link-limit"

    // Link is attached to a shared medium
    BmMuxreason_bm_mux_reason_shared BmMuxreason = "bm-mux-reason-shared"

    // Link has wrong LAG ID
    BmMuxreason_bm_mux_reason_lagid BmMuxreason = "bm-mux-reason-lagid"

    // Link's bundle does not exist
    BmMuxreason_bm_mux_reason_no_bundle BmMuxreason = "bm-mux-reason-no-bundle"

    // Link's bundle has no primary link
    BmMuxreason_bm_mux_reason_no_primary BmMuxreason = "bm-mux-reason-no-primary"

    // Link's bundle is shut down
    BmMuxreason_bm_mux_reason_bundle_down BmMuxreason = "bm-mux-reason-bundle-down"

    // Link is marked individual by partner
    BmMuxreason_bm_mux_reason_individual BmMuxreason = "bm-mux-reason-individual"

    // Link is Defaulted, suggesting it is not
    // receiving LACPDUs from the peer
    BmMuxreason_bm_mux_reason_defaulted BmMuxreason = "bm-mux-reason-defaulted"

    // Link is in InSync state
    BmMuxreason_bm_mux_reason_in_sync BmMuxreason = "bm-mux-reason-in-sync"

    // Link is in Collecting state
    BmMuxreason_bm_mux_reason_collecting BmMuxreason = "bm-mux-reason-collecting"

    // Link exceeds maximum active limit
    BmMuxreason_bm_mux_reason_active_link_limit BmMuxreason = "bm-mux-reason-active-link-limit"

    // Link is in Distributing state
    BmMuxreason_bm_mux_reason_distributing BmMuxreason = "bm-mux-reason-distributing"

    // Enumeration maximum value
    BmMuxreason_bm_mux_reason_count BmMuxreason = "bm-mux-reason-count"
)

// BmFeatureStatus represents Bm feature status
type BmFeatureStatus string

const (
    // No configuration is applied for a feature
    BmFeatureStatus_bm_feature_not_configured BmFeatureStatus = "bm-feature-not-configured"

    // The feature is currently not operational
    BmFeatureStatus_bm_feature_not_operational BmFeatureStatus = "bm-feature-not-operational"

    // The feature is currently operational
    BmFeatureStatus_bm_feature_operational BmFeatureStatus = "bm-feature-operational"
)

// BmSeverity represents Severity of the member state reason
type BmSeverity string

const (
    // OK
    BmSeverity_ok BmSeverity = "ok"

    // Information
    BmSeverity_information BmSeverity = "information"

    // Misconfiguration
    BmSeverity_misconfiguration BmSeverity = "misconfiguration"

    // Warning
    BmSeverity_warning BmSeverity = "warning"

    // Error
    BmSeverity_error BmSeverity = "error"
)

// BundleMlacpMode represents Bundle mlacp mode
type BundleMlacpMode string

const (
    // bundle mlacp mode standby
    BundleMlacpMode_bundle_mlacp_mode_standby BundleMlacpMode = "bundle-mlacp-mode-standby"

    // bundle mlacp mode active
    BundleMlacpMode_bundle_mlacp_mode_active BundleMlacpMode = "bundle-mlacp-mode-active"

    // bundle mlacp mode count
    BundleMlacpMode_bundle_mlacp_mode_count BundleMlacpMode = "bundle-mlacp-mode-count"
)

// BmdBagMlacpSchActionItem represents Description of scheduled actions for a bundle
type BmdBagMlacpSchActionItem string

const (
    // mLACP Switchover scheduled
    BmdBagMlacpSchActionItem_switchover BmdBagMlacpSchActionItem = "switchover"

    // mLACP Switchback scheduled
    BmdBagMlacpSchActionItem_switchback BmdBagMlacpSchActionItem = "switchback"
)

// BmStateReasonTarget represents Scope of the state reason
type BmStateReasonTarget string

const (
    // Member applicable reason
    BmStateReasonTarget_member_reason BmStateReasonTarget = "member-reason"

    // Bundle applicable reason
    BmStateReasonTarget_bundle_reason BmStateReasonTarget = "bundle-reason"
)

// BmdMlacpNodeSyncEnum represents Synchronization states of an mLACP device
type BmdMlacpNodeSyncEnum string

const (
    // Sync requested of device
    BmdMlacpNodeSyncEnum_node_sync_req BmdMlacpNodeSyncEnum = "node-sync-req"

    // Sync performed by device
    BmdMlacpNodeSyncEnum_node_sync_done BmdMlacpNodeSyncEnum = "node-sync-done"

    // Sync in progress from device
    BmdMlacpNodeSyncEnum_node_sync_start BmdMlacpNodeSyncEnum = "node-sync-start"

    // Initial sync pending from device
    BmdMlacpNodeSyncEnum_node_sync_init BmdMlacpNodeSyncEnum = "node-sync-init"

    // Sync not required for singleton groups
    BmdMlacpNodeSyncEnum_node_sync_singleton BmdMlacpNodeSyncEnum = "node-sync-singleton"
)

// BmBdlMacSource represents Bm bdl mac source
type BmBdlMacSource string

const (
    // The MAC is currently unknown
    BmBdlMacSource_bm_bdl_mac_source_unknown BmBdlMacSource = "bm-bdl-mac-source-unknown"

    // The MAC was allocated from the chassis pool
    BmBdlMacSource_bm_bdl_mac_source_chassis BmBdlMacSource = "bm-bdl-mac-source-chassis"

    // The MAC was configured by the user
    BmBdlMacSource_bm_bdl_mac_source_configured BmBdlMacSource = "bm-bdl-mac-source-configured"

    // The MAC belongs to a member
    BmBdlMacSource_bm_bdl_mac_source_member BmBdlMacSource = "bm-bdl-mac-source-member"

    // The MAC has come from the peer device
    BmBdlMacSource_bm_bdl_mac_source_peer BmBdlMacSource = "bm-bdl-mac-source-peer"
)

// LacpBundles
// LACP bundle data
type LacpBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACP bundle data.
    Bundles LacpBundles_Bundles
}

func (lacpBundles *LacpBundles) GetFilter() yfilter.YFilter { return lacpBundles.YFilter }

func (lacpBundles *LacpBundles) SetFilter(yf yfilter.YFilter) { lacpBundles.YFilter = yf }

func (lacpBundles *LacpBundles) GetGoName(yname string) string {
    if yname == "bundles" { return "Bundles" }
    return ""
}

func (lacpBundles *LacpBundles) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-oper:lacp-bundles"
}

func (lacpBundles *LacpBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundles" {
        return &lacpBundles.Bundles
    }
    return nil
}

func (lacpBundles *LacpBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundles"] = &lacpBundles.Bundles
    return children
}

func (lacpBundles *LacpBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpBundles *LacpBundles) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundles *LacpBundles) GetYangName() string { return "lacp-bundles" }

func (lacpBundles *LacpBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundles *LacpBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundles *LacpBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundles *LacpBundles) SetParent(parent types.Entity) { lacpBundles.parent = parent }

func (lacpBundles *LacpBundles) GetParent() types.Entity { return lacpBundles.parent }

func (lacpBundles *LacpBundles) GetParentYangName() string { return "Cisco-IOS-XR-bundlemgr-oper" }

// LacpBundles_Bundles
// LACP bundle data
type LacpBundles_Bundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACP Bundle interface. The type is slice of LacpBundles_Bundles_Bundle.
    Bundle []LacpBundles_Bundles_Bundle
}

func (bundles *LacpBundles_Bundles) GetFilter() yfilter.YFilter { return bundles.YFilter }

func (bundles *LacpBundles_Bundles) SetFilter(yf yfilter.YFilter) { bundles.YFilter = yf }

func (bundles *LacpBundles_Bundles) GetGoName(yname string) string {
    if yname == "bundle" { return "Bundle" }
    return ""
}

func (bundles *LacpBundles_Bundles) GetSegmentPath() string {
    return "bundles"
}

func (bundles *LacpBundles_Bundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle" {
        for _, c := range bundles.Bundle {
            if bundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := LacpBundles_Bundles_Bundle{}
        bundles.Bundle = append(bundles.Bundle, child)
        return &bundles.Bundle[len(bundles.Bundle)-1]
    }
    return nil
}

func (bundles *LacpBundles_Bundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundles.Bundle {
        children[bundles.Bundle[i].GetSegmentPath()] = &bundles.Bundle[i]
    }
    return children
}

func (bundles *LacpBundles_Bundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundles *LacpBundles_Bundles) GetBundleName() string { return "cisco_ios_xr" }

func (bundles *LacpBundles_Bundles) GetYangName() string { return "bundles" }

func (bundles *LacpBundles_Bundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundles *LacpBundles_Bundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundles *LacpBundles_Bundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundles *LacpBundles_Bundles) SetParent(parent types.Entity) { bundles.parent = parent }

func (bundles *LacpBundles_Bundles) GetParent() types.Entity { return bundles.parent }

func (bundles *LacpBundles_Bundles) GetParentYangName() string { return "lacp-bundles" }

// LacpBundles_Bundles_Bundle
// LACP Bundle interface
type LacpBundles_Bundles_Bundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. LACP Bundle interface. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for each Bundle.
    Data LacpBundles_Bundles_Bundle_Data

    // LACP Member interface.
    Members LacpBundles_Bundles_Bundle_Members
}

func (bundle *LacpBundles_Bundles_Bundle) GetFilter() yfilter.YFilter { return bundle.YFilter }

func (bundle *LacpBundles_Bundles_Bundle) SetFilter(yf yfilter.YFilter) { bundle.YFilter = yf }

func (bundle *LacpBundles_Bundles_Bundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "data" { return "Data" }
    if yname == "members" { return "Members" }
    return ""
}

func (bundle *LacpBundles_Bundles_Bundle) GetSegmentPath() string {
    return "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
}

func (bundle *LacpBundles_Bundles_Bundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundle.Data
    }
    if childYangName == "members" {
        return &bundle.Members
    }
    return nil
}

func (bundle *LacpBundles_Bundles_Bundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundle.Data
    children["members"] = &bundle.Members
    return children
}

func (bundle *LacpBundles_Bundles_Bundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = bundle.BundleInterface
    return leafs
}

func (bundle *LacpBundles_Bundles_Bundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundle *LacpBundles_Bundles_Bundle) GetYangName() string { return "bundle" }

func (bundle *LacpBundles_Bundles_Bundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundle *LacpBundles_Bundles_Bundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundle *LacpBundles_Bundles_Bundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundle *LacpBundles_Bundles_Bundle) SetParent(parent types.Entity) { bundle.parent = parent }

func (bundle *LacpBundles_Bundles_Bundle) GetParent() types.Entity { return bundle.parent }

func (bundle *LacpBundles_Bundles_Bundle) GetParentYangName() string { return "bundles" }

// LacpBundles_Bundles_Bundle_Data
// Data for each Bundle
type LacpBundles_Bundles_Bundle_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData LacpBundles_Bundles_Bundle_Data_ActorBundleData

    // System ID for the bundle.
    BundleSystemId LacpBundles_Bundles_Bundle_Data_BundleSystemId
}

func (data *LacpBundles_Bundles_Bundle_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *LacpBundles_Bundles_Bundle_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *LacpBundles_Bundles_Bundle_Data) GetGoName(yname string) string {
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "actor-bundle-data" { return "ActorBundleData" }
    if yname == "bundle-system-id" { return "BundleSystemId" }
    return ""
}

func (data *LacpBundles_Bundles_Bundle_Data) GetSegmentPath() string {
    return "data"
}

func (data *LacpBundles_Bundles_Bundle_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-bundle-data" {
        return &data.ActorBundleData
    }
    if childYangName == "bundle-system-id" {
        return &data.BundleSystemId
    }
    return nil
}

func (data *LacpBundles_Bundles_Bundle_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-bundle-data"] = &data.ActorBundleData
    children["bundle-system-id"] = &data.BundleSystemId
    return children
}

func (data *LacpBundles_Bundles_Bundle_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["actor-operational-key"] = data.ActorOperationalKey
    leafs["partner-system-priority"] = data.PartnerSystemPriority
    leafs["partner-system-mac-address"] = data.PartnerSystemMacAddress
    leafs["partner-operational-key"] = data.PartnerOperationalKey
    return leafs
}

func (data *LacpBundles_Bundles_Bundle_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *LacpBundles_Bundles_Bundle_Data) GetYangName() string { return "data" }

func (data *LacpBundles_Bundles_Bundle_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *LacpBundles_Bundles_Bundle_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *LacpBundles_Bundles_Bundle_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *LacpBundles_Bundles_Bundle_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *LacpBundles_Bundles_Bundle_Data) GetParent() types.Entity { return data.parent }

func (data *LacpBundles_Bundles_Bundle_Data) GetParentYangName() string { return "bundle" }

// LacpBundles_Bundles_Bundle_Data_ActorBundleData
// Basic bundle information
type LacpBundles_Bundles_Bundle_Data_ActorBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig.
    BfdConfig []LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig
}

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetFilter() yfilter.YFilter { return actorBundleData.YFilter }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) SetFilter(yf yfilter.YFilter) { actorBundleData.YFilter = yf }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetSegmentPath() string {
    return "actor-bundle-data"
}

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &actorBundleData.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range actorBundleData.BfdConfig {
            if actorBundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig{}
        actorBundleData.BfdConfig = append(actorBundleData.BfdConfig, child)
        return &actorBundleData.BfdConfig[len(actorBundleData.BfdConfig)-1]
    }
    return nil
}

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &actorBundleData.MacAddress
    for i := range actorBundleData.BfdConfig {
        children[actorBundleData.BfdConfig[i].GetSegmentPath()] = &actorBundleData.BfdConfig[i]
    }
    return children
}

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = actorBundleData.BundleInterfaceName
    leafs["available-bandwidth"] = actorBundleData.AvailableBandwidth
    leafs["effective-bandwidth"] = actorBundleData.EffectiveBandwidth
    leafs["configured-bandwidth"] = actorBundleData.ConfiguredBandwidth
    leafs["minimum-active-links"] = actorBundleData.MinimumActiveLinks
    leafs["maximum-active-links"] = actorBundleData.MaximumActiveLinks
    leafs["maximum-active-links-source"] = actorBundleData.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = actorBundleData.MinimumBandwidth
    leafs["primary-member"] = actorBundleData.PrimaryMember
    leafs["bundle-status"] = actorBundleData.BundleStatus
    leafs["active-member-count"] = actorBundleData.ActiveMemberCount
    leafs["standby-member-count"] = actorBundleData.StandbyMemberCount
    leafs["configured-member-count"] = actorBundleData.ConfiguredMemberCount
    leafs["mac-source"] = actorBundleData.MacSource
    leafs["mac-source-member"] = actorBundleData.MacSourceMember
    leafs["inter-chassis"] = actorBundleData.InterChassis
    leafs["is-active"] = actorBundleData.IsActive
    leafs["lacp-status"] = actorBundleData.LacpStatus
    leafs["mlacp-status"] = actorBundleData.MlacpStatus
    leafs["ipv4bfd-status"] = actorBundleData.Ipv4BfdStatus
    leafs["link-order-status"] = actorBundleData.LinkOrderStatus
    leafs["ipv6bfd-status"] = actorBundleData.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = actorBundleData.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = actorBundleData.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = actorBundleData.SuppressionTimer
    leafs["wait-while-timer"] = actorBundleData.WaitWhileTimer
    leafs["collector-max-delay"] = actorBundleData.CollectorMaxDelay
    leafs["cisco-extensions"] = actorBundleData.CiscoExtensions
    leafs["lacp-nonrevertive"] = actorBundleData.LacpNonrevertive
    leafs["iccp-group-id"] = actorBundleData.IccpGroupId
    leafs["active-foreign-member-count"] = actorBundleData.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = actorBundleData.ConfiguredForeignMemberCount
    leafs["switchover-type"] = actorBundleData.SwitchoverType
    leafs["maximize-threshold-value-links"] = actorBundleData.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = actorBundleData.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = actorBundleData.MlacpMode
    leafs["recovery-delay"] = actorBundleData.RecoveryDelay
    leafs["singleton"] = actorBundleData.Singleton
    return leafs
}

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetYangName() string { return "actor-bundle-data" }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) SetParent(parent types.Entity) { actorBundleData.parent = parent }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetParent() types.Entity { return actorBundleData.parent }

func (actorBundleData *LacpBundles_Bundles_Bundle_Data_ActorBundleData) GetParentYangName() string { return "data" }

// LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress
// MAC address of this member
type LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_MacAddress) GetParentYangName() string { return "actor-bundle-data" }

// LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig) GetParentYangName() string { return "actor-bundle-data" }

// LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *LacpBundles_Bundles_Bundle_Data_ActorBundleData_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// LacpBundles_Bundles_Bundle_Data_BundleSystemId
// System ID for the bundle
type LacpBundles_Bundles_Bundle_Data_BundleSystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetFilter() yfilter.YFilter { return bundleSystemId.YFilter }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) SetFilter(yf yfilter.YFilter) { bundleSystemId.YFilter = yf }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetSegmentPath() string {
    return "bundle-system-id"
}

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &bundleSystemId.SystemMacAddr
    }
    return nil
}

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &bundleSystemId.SystemMacAddr
    return children
}

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = bundleSystemId.SystemPrio
    return leafs
}

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetBundleName() string { return "cisco_ios_xr" }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetYangName() string { return "bundle-system-id" }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) SetParent(parent types.Entity) { bundleSystemId.parent = parent }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetParent() types.Entity { return bundleSystemId.parent }

func (bundleSystemId *LacpBundles_Bundles_Bundle_Data_BundleSystemId) GetParentYangName() string { return "data" }

// LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *LacpBundles_Bundles_Bundle_Data_BundleSystemId_SystemMacAddr) GetParentYangName() string { return "bundle-system-id" }

// LacpBundles_Bundles_Bundle_Members
// LACP Member interface
type LacpBundles_Bundles_Bundle_Members struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member information. The type is slice of
    // LacpBundles_Bundles_Bundle_Members_Member.
    Member []LacpBundles_Bundles_Bundle_Members_Member
}

func (members *LacpBundles_Bundles_Bundle_Members) GetFilter() yfilter.YFilter { return members.YFilter }

func (members *LacpBundles_Bundles_Bundle_Members) SetFilter(yf yfilter.YFilter) { members.YFilter = yf }

func (members *LacpBundles_Bundles_Bundle_Members) GetGoName(yname string) string {
    if yname == "member" { return "Member" }
    return ""
}

func (members *LacpBundles_Bundles_Bundle_Members) GetSegmentPath() string {
    return "members"
}

func (members *LacpBundles_Bundles_Bundle_Members) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member" {
        for _, c := range members.Member {
            if members.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := LacpBundles_Bundles_Bundle_Members_Member{}
        members.Member = append(members.Member, child)
        return &members.Member[len(members.Member)-1]
    }
    return nil
}

func (members *LacpBundles_Bundles_Bundle_Members) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range members.Member {
        children[members.Member[i].GetSegmentPath()] = &members.Member[i]
    }
    return children
}

func (members *LacpBundles_Bundles_Bundle_Members) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (members *LacpBundles_Bundles_Bundle_Members) GetBundleName() string { return "cisco_ios_xr" }

func (members *LacpBundles_Bundles_Bundle_Members) GetYangName() string { return "members" }

func (members *LacpBundles_Bundles_Bundle_Members) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (members *LacpBundles_Bundles_Bundle_Members) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (members *LacpBundles_Bundles_Bundle_Members) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (members *LacpBundles_Bundles_Bundle_Members) SetParent(parent types.Entity) { members.parent = parent }

func (members *LacpBundles_Bundles_Bundle_Members) GetParent() types.Entity { return members.parent }

func (members *LacpBundles_Bundles_Bundle_Members) GetParentYangName() string { return "bundle" }

// LacpBundles_Bundles_Bundle_Members_Member
// Member information
type LacpBundles_Bundles_Bundle_Members_Member struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MemberInterface interface{}

    // Member's interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters LacpBundles_Bundles_Bundle_Members_Member_Counters

    // Lacp data about member link.
    LinkData LacpBundles_Bundles_Bundle_Members_Member_LinkData

    // Mux state machine data.
    MemberMuxData LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress LacpBundles_Bundles_Bundle_Members_Member_MacAddress
}

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetFilter() yfilter.YFilter { return member.YFilter }

func (member *LacpBundles_Bundles_Bundle_Members_Member) SetFilter(yf yfilter.YFilter) { member.YFilter = yf }

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "underlying-link-id" { return "UnderlyingLinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "iccp-node" { return "IccpNode" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "lacp-enabled" { return "LacpEnabled" }
    if yname == "member-type" { return "MemberType" }
    if yname == "member-name" { return "MemberName" }
    if yname == "counters" { return "Counters" }
    if yname == "link-data" { return "LinkData" }
    if yname == "member-mux-data" { return "MemberMuxData" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetSegmentPath() string {
    return "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
}

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &member.Counters
    }
    if childYangName == "link-data" {
        return &member.LinkData
    }
    if childYangName == "member-mux-data" {
        return &member.MemberMuxData
    }
    if childYangName == "mac-address" {
        return &member.MacAddress
    }
    return nil
}

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &member.Counters
    children["link-data"] = &member.LinkData
    children["member-mux-data"] = &member.MemberMuxData
    children["mac-address"] = &member.MacAddress
    return children
}

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = member.MemberInterface
    leafs["interface-name"] = member.InterfaceName
    leafs["port-priority"] = member.PortPriority
    leafs["port-number"] = member.PortNumber
    leafs["underlying-link-id"] = member.UnderlyingLinkId
    leafs["link-order-number"] = member.LinkOrderNumber
    leafs["iccp-node"] = member.IccpNode
    leafs["bandwidth"] = member.Bandwidth
    leafs["lacp-enabled"] = member.LacpEnabled
    leafs["member-type"] = member.MemberType
    leafs["member-name"] = member.MemberName
    return leafs
}

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetBundleName() string { return "cisco_ios_xr" }

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetYangName() string { return "member" }

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (member *LacpBundles_Bundles_Bundle_Members_Member) SetParent(parent types.Entity) { member.parent = parent }

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetParent() types.Entity { return member.parent }

func (member *LacpBundles_Bundles_Bundle_Members_Member) GetParentYangName() string { return "members" }

// LacpBundles_Bundles_Bundle_Members_Member_Counters
// Counters data about member link
type LacpBundles_Bundles_Bundle_Members_Member_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetGoName(yname string) string {
    if yname == "lacpd-us-received" { return "LacpdUsReceived" }
    if yname == "lacpd-us-transmitted" { return "LacpdUsTransmitted" }
    if yname == "marker-packets-received" { return "MarkerPacketsReceived" }
    if yname == "marker-responses-transmitted" { return "MarkerResponsesTransmitted" }
    if yname == "illegal-packets-received" { return "IllegalPacketsReceived" }
    if yname == "excess-lacpd-us-received" { return "ExcessLacpdUsReceived" }
    if yname == "excess-marker-packets-received" { return "ExcessMarkerPacketsReceived" }
    if yname == "defaulted" { return "Defaulted" }
    if yname == "expired" { return "Expired" }
    if yname == "last-cleared-sec" { return "LastClearedSec" }
    if yname == "last-cleared-nsec" { return "LastClearedNsec" }
    return ""
}

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacpd-us-received"] = counters.LacpdUsReceived
    leafs["lacpd-us-transmitted"] = counters.LacpdUsTransmitted
    leafs["marker-packets-received"] = counters.MarkerPacketsReceived
    leafs["marker-responses-transmitted"] = counters.MarkerResponsesTransmitted
    leafs["illegal-packets-received"] = counters.IllegalPacketsReceived
    leafs["excess-lacpd-us-received"] = counters.ExcessLacpdUsReceived
    leafs["excess-marker-packets-received"] = counters.ExcessMarkerPacketsReceived
    leafs["defaulted"] = counters.Defaulted
    leafs["expired"] = counters.Expired
    leafs["last-cleared-sec"] = counters.LastClearedSec
    leafs["last-cleared-nsec"] = counters.LastClearedNsec
    return leafs
}

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetYangName() string { return "counters" }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetParent() types.Entity { return counters.parent }

func (counters *LacpBundles_Bundles_Bundle_Members_Member_Counters) GetParentYangName() string { return "member" }

// LacpBundles_Bundles_Bundle_Members_Member_LinkData
// Lacp data about member link
type LacpBundles_Bundles_Bundle_Members_Member_LinkData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetFilter() yfilter.YFilter { return linkData.YFilter }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) SetFilter(yf yfilter.YFilter) { linkData.YFilter = yf }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "actor-system-priority" { return "ActorSystemPriority" }
    if yname == "actor-system-mac-address" { return "ActorSystemMacAddress" }
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "actor-port-id" { return "ActorPortId" }
    if yname == "actor-port-priority" { return "ActorPortPriority" }
    if yname == "partner-port-id" { return "PartnerPortId" }
    if yname == "partner-port-priority" { return "PartnerPortPriority" }
    if yname == "actor-port-state" { return "ActorPortState" }
    if yname == "partner-port-state" { return "PartnerPortState" }
    return ""
}

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetSegmentPath() string {
    return "link-data"
}

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = linkData.InterfaceHandle
    leafs["actor-system-priority"] = linkData.ActorSystemPriority
    leafs["actor-system-mac-address"] = linkData.ActorSystemMacAddress
    leafs["actor-operational-key"] = linkData.ActorOperationalKey
    leafs["partner-system-priority"] = linkData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = linkData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = linkData.PartnerOperationalKey
    leafs["selected-aggregator-id"] = linkData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = linkData.AttachedAggregatorId
    leafs["actor-port-id"] = linkData.ActorPortId
    leafs["actor-port-priority"] = linkData.ActorPortPriority
    leafs["partner-port-id"] = linkData.PartnerPortId
    leafs["partner-port-priority"] = linkData.PartnerPortPriority
    leafs["actor-port-state"] = linkData.ActorPortState
    leafs["partner-port-state"] = linkData.PartnerPortState
    return leafs
}

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetBundleName() string { return "cisco_ios_xr" }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetYangName() string { return "link-data" }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) SetParent(parent types.Entity) { linkData.parent = parent }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetParent() types.Entity { return linkData.parent }

func (linkData *LacpBundles_Bundles_Bundle_Members_Member_LinkData) GetParentYangName() string { return "member" }

// LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData
// Mux state machine data
type LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetFilter() yfilter.YFilter { return memberMuxData.YFilter }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) SetFilter(yf yfilter.YFilter) { memberMuxData.YFilter = yf }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetGoName(yname string) string {
    if yname == "mux-state" { return "MuxState" }
    if yname == "error" { return "Error" }
    if yname == "member-mux-state-reason" { return "MemberMuxStateReason" }
    if yname == "member-state" { return "MemberState" }
    if yname == "mux-state-reason" { return "MuxStateReason" }
    if yname == "member-mux-state-reason-data" { return "MemberMuxStateReasonData" }
    return ""
}

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetSegmentPath() string {
    return "member-mux-data"
}

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-mux-state-reason-data" {
        return &memberMuxData.MemberMuxStateReasonData
    }
    return nil
}

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-mux-state-reason-data"] = &memberMuxData.MemberMuxStateReasonData
    return children
}

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mux-state"] = memberMuxData.MuxState
    leafs["error"] = memberMuxData.Error
    leafs["member-mux-state-reason"] = memberMuxData.MemberMuxStateReason
    leafs["member-state"] = memberMuxData.MemberState
    leafs["mux-state-reason"] = memberMuxData.MuxStateReason
    return leafs
}

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetYangName() string { return "member-mux-data" }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) SetParent(parent types.Entity) { memberMuxData.parent = parent }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetParent() types.Entity { return memberMuxData.parent }

func (memberMuxData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData) GetParentYangName() string { return "member" }

// LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetFilter() yfilter.YFilter { return memberMuxStateReasonData.YFilter }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) SetFilter(yf yfilter.YFilter) { memberMuxStateReasonData.YFilter = yf }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetGoName(yname string) string {
    if yname == "reason-type" { return "ReasonType" }
    if yname == "severity" { return "Severity" }
    return ""
}

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetSegmentPath() string {
    return "member-mux-state-reason-data"
}

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-type"] = memberMuxStateReasonData.ReasonType
    leafs["severity"] = memberMuxStateReasonData.Severity
    return leafs
}

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetYangName() string { return "member-mux-state-reason-data" }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) SetParent(parent types.Entity) { memberMuxStateReasonData.parent = parent }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetParent() types.Entity { return memberMuxStateReasonData.parent }

func (memberMuxStateReasonData *LacpBundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetParentYangName() string { return "member-mux-data" }

// LacpBundles_Bundles_Bundle_Members_Member_MacAddress
// MAC address of this member (deprecated)
type LacpBundles_Bundles_Bundle_Members_Member_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *LacpBundles_Bundles_Bundle_Members_Member_MacAddress) GetParentYangName() string { return "member" }

// BundleInformation
// bundle information
type BundleInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD counters information for bundles and members.
    BfdCounters BundleInformation_BfdCounters

    // Scheduled actions on a bundle.
    ScheduledActions BundleInformation_ScheduledActions

    // Generic information for bundles and members.
    Bundle BundleInformation_Bundle

    // Bundle ICCP events information for bundles and members.
    EventsRg BundleInformation_EventsRg

    // LACP information for bundles and members.
    Lacp BundleInformation_Lacp

    // Bundle specific counters of mLACP events.
    MlacpBundleCounters BundleInformation_MlacpBundleCounters

    // Information for bundles and members that are in the protect database.
    Protect BundleInformation_Protect

    // mLACP Information for Interchassis Groups and bundles.
    MlacpBrief BundleInformation_MlacpBrief

    // mLACP Information for Interchassis Groups and bundles.
    Mlacp BundleInformation_Mlacp

    // Information about allocated MAC addresses that are not in use.
    MacAllocation BundleInformation_MacAllocation

    // Events information for bundles and members.
    Events BundleInformation_Events

    // Bundle events information for bundles and members.
    EventsBdl BundleInformation_EventsBdl

    // Bundle interfaces with common bundle information.
    BundleBriefs BundleInformation_BundleBriefs

    // Bundle member events information for bundles and members.
    EventsMbr BundleInformation_EventsMbr

    // ICCP Group specific counters of mLACP events.
    MlacpIccpGroupCounters BundleInformation_MlacpIccpGroupCounters

    // System Identifiers for the local system and all ICCP Groups.
    SystemId BundleInformation_SystemId

    // Member specific counters of mLACP events.
    MlacpMemberCounters BundleInformation_MlacpMemberCounters
}

func (bundleInformation *BundleInformation) GetFilter() yfilter.YFilter { return bundleInformation.YFilter }

func (bundleInformation *BundleInformation) SetFilter(yf yfilter.YFilter) { bundleInformation.YFilter = yf }

func (bundleInformation *BundleInformation) GetGoName(yname string) string {
    if yname == "bfd-counters" { return "BfdCounters" }
    if yname == "scheduled-actions" { return "ScheduledActions" }
    if yname == "bundle" { return "Bundle" }
    if yname == "events-rg" { return "EventsRg" }
    if yname == "lacp" { return "Lacp" }
    if yname == "mlacp-bundle-counters" { return "MlacpBundleCounters" }
    if yname == "protect" { return "Protect" }
    if yname == "mlacp-brief" { return "MlacpBrief" }
    if yname == "mlacp" { return "Mlacp" }
    if yname == "mac-allocation" { return "MacAllocation" }
    if yname == "events" { return "Events" }
    if yname == "events-bdl" { return "EventsBdl" }
    if yname == "bundle-briefs" { return "BundleBriefs" }
    if yname == "events-mbr" { return "EventsMbr" }
    if yname == "mlacp-iccp-group-counters" { return "MlacpIccpGroupCounters" }
    if yname == "system-id" { return "SystemId" }
    if yname == "mlacp-member-counters" { return "MlacpMemberCounters" }
    return ""
}

func (bundleInformation *BundleInformation) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-oper:bundle-information"
}

func (bundleInformation *BundleInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-counters" {
        return &bundleInformation.BfdCounters
    }
    if childYangName == "scheduled-actions" {
        return &bundleInformation.ScheduledActions
    }
    if childYangName == "bundle" {
        return &bundleInformation.Bundle
    }
    if childYangName == "events-rg" {
        return &bundleInformation.EventsRg
    }
    if childYangName == "lacp" {
        return &bundleInformation.Lacp
    }
    if childYangName == "mlacp-bundle-counters" {
        return &bundleInformation.MlacpBundleCounters
    }
    if childYangName == "protect" {
        return &bundleInformation.Protect
    }
    if childYangName == "mlacp-brief" {
        return &bundleInformation.MlacpBrief
    }
    if childYangName == "mlacp" {
        return &bundleInformation.Mlacp
    }
    if childYangName == "mac-allocation" {
        return &bundleInformation.MacAllocation
    }
    if childYangName == "events" {
        return &bundleInformation.Events
    }
    if childYangName == "events-bdl" {
        return &bundleInformation.EventsBdl
    }
    if childYangName == "bundle-briefs" {
        return &bundleInformation.BundleBriefs
    }
    if childYangName == "events-mbr" {
        return &bundleInformation.EventsMbr
    }
    if childYangName == "mlacp-iccp-group-counters" {
        return &bundleInformation.MlacpIccpGroupCounters
    }
    if childYangName == "system-id" {
        return &bundleInformation.SystemId
    }
    if childYangName == "mlacp-member-counters" {
        return &bundleInformation.MlacpMemberCounters
    }
    return nil
}

func (bundleInformation *BundleInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bfd-counters"] = &bundleInformation.BfdCounters
    children["scheduled-actions"] = &bundleInformation.ScheduledActions
    children["bundle"] = &bundleInformation.Bundle
    children["events-rg"] = &bundleInformation.EventsRg
    children["lacp"] = &bundleInformation.Lacp
    children["mlacp-bundle-counters"] = &bundleInformation.MlacpBundleCounters
    children["protect"] = &bundleInformation.Protect
    children["mlacp-brief"] = &bundleInformation.MlacpBrief
    children["mlacp"] = &bundleInformation.Mlacp
    children["mac-allocation"] = &bundleInformation.MacAllocation
    children["events"] = &bundleInformation.Events
    children["events-bdl"] = &bundleInformation.EventsBdl
    children["bundle-briefs"] = &bundleInformation.BundleBriefs
    children["events-mbr"] = &bundleInformation.EventsMbr
    children["mlacp-iccp-group-counters"] = &bundleInformation.MlacpIccpGroupCounters
    children["system-id"] = &bundleInformation.SystemId
    children["mlacp-member-counters"] = &bundleInformation.MlacpMemberCounters
    return children
}

func (bundleInformation *BundleInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleInformation *BundleInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bundleInformation *BundleInformation) GetYangName() string { return "bundle-information" }

func (bundleInformation *BundleInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleInformation *BundleInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleInformation *BundleInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleInformation *BundleInformation) SetParent(parent types.Entity) { bundleInformation.parent = parent }

func (bundleInformation *BundleInformation) GetParent() types.Entity { return bundleInformation.parent }

func (bundleInformation *BundleInformation) GetParentYangName() string { return "Cisco-IOS-XR-bundlemgr-oper" }

// BundleInformation_BfdCounters
// BFD counters information for bundles and members
type BundleInformation_BfdCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interfaces with BFD counters information.
    BfdCountersBundles BundleInformation_BfdCounters_BfdCountersBundles

    // Member interfaces with BFD counters information.
    BfdCountersMembers BundleInformation_BfdCounters_BfdCountersMembers
}

func (bfdCounters *BundleInformation_BfdCounters) GetFilter() yfilter.YFilter { return bfdCounters.YFilter }

func (bfdCounters *BundleInformation_BfdCounters) SetFilter(yf yfilter.YFilter) { bfdCounters.YFilter = yf }

func (bfdCounters *BundleInformation_BfdCounters) GetGoName(yname string) string {
    if yname == "bfd-counters-bundles" { return "BfdCountersBundles" }
    if yname == "bfd-counters-members" { return "BfdCountersMembers" }
    return ""
}

func (bfdCounters *BundleInformation_BfdCounters) GetSegmentPath() string {
    return "bfd-counters"
}

func (bfdCounters *BundleInformation_BfdCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-counters-bundles" {
        return &bfdCounters.BfdCountersBundles
    }
    if childYangName == "bfd-counters-members" {
        return &bfdCounters.BfdCountersMembers
    }
    return nil
}

func (bfdCounters *BundleInformation_BfdCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bfd-counters-bundles"] = &bfdCounters.BfdCountersBundles
    children["bfd-counters-members"] = &bfdCounters.BfdCountersMembers
    return children
}

func (bfdCounters *BundleInformation_BfdCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bfdCounters *BundleInformation_BfdCounters) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCounters *BundleInformation_BfdCounters) GetYangName() string { return "bfd-counters" }

func (bfdCounters *BundleInformation_BfdCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCounters *BundleInformation_BfdCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCounters *BundleInformation_BfdCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCounters *BundleInformation_BfdCounters) SetParent(parent types.Entity) { bfdCounters.parent = parent }

func (bfdCounters *BundleInformation_BfdCounters) GetParent() types.Entity { return bfdCounters.parent }

func (bfdCounters *BundleInformation_BfdCounters) GetParentYangName() string { return "bundle-information" }

// BundleInformation_BfdCounters_BfdCountersBundles
// Bundle interfaces with BFD counters information
type BundleInformation_BfdCounters_BfdCountersBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle.
    BfdCountersBundle []BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle
}

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetFilter() yfilter.YFilter { return bfdCountersBundles.YFilter }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) SetFilter(yf yfilter.YFilter) { bfdCountersBundles.YFilter = yf }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetGoName(yname string) string {
    if yname == "bfd-counters-bundle" { return "BfdCountersBundle" }
    return ""
}

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetSegmentPath() string {
    return "bfd-counters-bundles"
}

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-counters-bundle" {
        for _, c := range bfdCountersBundles.BfdCountersBundle {
            if bfdCountersBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle{}
        bfdCountersBundles.BfdCountersBundle = append(bfdCountersBundles.BfdCountersBundle, child)
        return &bfdCountersBundles.BfdCountersBundle[len(bfdCountersBundles.BfdCountersBundle)-1]
    }
    return nil
}

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bfdCountersBundles.BfdCountersBundle {
        children[bfdCountersBundles.BfdCountersBundle[i].GetSegmentPath()] = &bfdCountersBundles.BfdCountersBundle[i]
    }
    return children
}

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetYangName() string { return "bfd-counters-bundles" }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) SetParent(parent types.Entity) { bfdCountersBundles.parent = parent }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetParent() types.Entity { return bfdCountersBundles.parent }

func (bfdCountersBundles *BundleInformation_BfdCounters_BfdCountersBundles) GetParentYangName() string { return "bfd-counters" }

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle
// Bundle interface
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item and all its members.
    BfdCountersBundleDescendant BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant

    // Children of bundle with BFD counters information.
    BfdCountersBundleChildrenMembers BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers

    // Data for this item.
    BfdCountersBundleItem BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem
}

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetFilter() yfilter.YFilter { return bfdCountersBundle.YFilter }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) SetFilter(yf yfilter.YFilter) { bfdCountersBundle.YFilter = yf }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "bfd-counters-bundle-descendant" { return "BfdCountersBundleDescendant" }
    if yname == "bfd-counters-bundle-children-members" { return "BfdCountersBundleChildrenMembers" }
    if yname == "bfd-counters-bundle-item" { return "BfdCountersBundleItem" }
    return ""
}

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetSegmentPath() string {
    return "bfd-counters-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bfdCountersBundle.BundleInterface) + "']"
}

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-counters-bundle-descendant" {
        return &bfdCountersBundle.BfdCountersBundleDescendant
    }
    if childYangName == "bfd-counters-bundle-children-members" {
        return &bfdCountersBundle.BfdCountersBundleChildrenMembers
    }
    if childYangName == "bfd-counters-bundle-item" {
        return &bfdCountersBundle.BfdCountersBundleItem
    }
    return nil
}

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bfd-counters-bundle-descendant"] = &bfdCountersBundle.BfdCountersBundleDescendant
    children["bfd-counters-bundle-children-members"] = &bfdCountersBundle.BfdCountersBundleChildrenMembers
    children["bfd-counters-bundle-item"] = &bfdCountersBundle.BfdCountersBundleItem
    return children
}

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = bfdCountersBundle.BundleInterface
    return leafs
}

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetYangName() string { return "bfd-counters-bundle" }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) SetParent(parent types.Entity) { bfdCountersBundle.parent = parent }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetParent() types.Entity { return bfdCountersBundle.parent }

func (bfdCountersBundle *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle) GetParentYangName() string { return "bfd-counters-bundles" }

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant
// Data for this item and all its members
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the bundle this information is for.
    BundleName BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName

    // BFD event counters. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter.
    BfdCounter []BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter
}

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetFilter() yfilter.YFilter { return bfdCountersBundleDescendant.YFilter }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) SetFilter(yf yfilter.YFilter) { bfdCountersBundleDescendant.YFilter = yf }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "bfd-counter" { return "BfdCounter" }
    return ""
}

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetSegmentPath() string {
    return "bfd-counters-bundle-descendant"
}

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-name" {
        return &bfdCountersBundleDescendant.BundleName
    }
    if childYangName == "bfd-counter" {
        for _, c := range bfdCountersBundleDescendant.BfdCounter {
            if bfdCountersBundleDescendant.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter{}
        bfdCountersBundleDescendant.BfdCounter = append(bfdCountersBundleDescendant.BfdCounter, child)
        return &bfdCountersBundleDescendant.BfdCounter[len(bfdCountersBundleDescendant.BfdCounter)-1]
    }
    return nil
}

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-name"] = &bfdCountersBundleDescendant.BundleName
    for i := range bfdCountersBundleDescendant.BfdCounter {
        children[bfdCountersBundleDescendant.BfdCounter[i].GetSegmentPath()] = &bfdCountersBundleDescendant.BfdCounter[i]
    }
    return children
}

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetYangName() string { return "bfd-counters-bundle-descendant" }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) SetParent(parent types.Entity) { bfdCountersBundleDescendant.parent = parent }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetParent() types.Entity { return bfdCountersBundleDescendant.parent }

func (bfdCountersBundleDescendant *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant) GetParentYangName() string { return "bfd-counters-bundle" }

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName
// Name of the bundle this information is for
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of item. The type is string.
    ItemName interface{}
}

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetFilter() yfilter.YFilter { return bundleName.YFilter }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) SetFilter(yf yfilter.YFilter) { bundleName.YFilter = yf }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    return ""
}

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetSegmentPath() string {
    return "bundle-name"
}

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = bundleName.ItemName
    return leafs
}

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetBundleName() string { return "cisco_ios_xr" }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetYangName() string { return "bundle-name" }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) SetParent(parent types.Entity) { bundleName.parent = parent }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetParent() types.Entity { return bundleName.parent }

func (bundleName *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BundleName) GetParentYangName() string { return "bfd-counters-bundle-descendant" }

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter
// BFD event counters
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the member this information is for. The type is string.
    MemberName interface{}

    // Timestamp when counters were last cleared (deprecated). The type is
    // interface{} with range: 0..18446744073709551615.
    LastTimeCleared interface{}

    // Number of times member state changed to starting. The type is interface{}
    // with range: 0..4294967295.
    Starting interface{}

    // Number of times member state changed to up. The type is interface{} with
    // range: 0..4294967295.
    Up interface{}

    // Number of times member state changed to down. The type is interface{} with
    // range: 0..4294967295.
    Down interface{}

    // Number of times member state changed to neighbor unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfigured interface{}

    // Number of timeouts waiting for BFD to start. The type is interface{} with
    // range: 0..4294967295.
    StartTimeouts interface{}

    // Number of timeouts waiting for neighbor to become unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfiguredTimeouts interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}
}

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetFilter() yfilter.YFilter { return bfdCounter.YFilter }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) SetFilter(yf yfilter.YFilter) { bfdCounter.YFilter = yf }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetGoName(yname string) string {
    if yname == "member-name" { return "MemberName" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "starting" { return "Starting" }
    if yname == "up" { return "Up" }
    if yname == "down" { return "Down" }
    if yname == "neighbor-unconfigured" { return "NeighborUnconfigured" }
    if yname == "start-timeouts" { return "StartTimeouts" }
    if yname == "neighbor-unconfigured-timeouts" { return "NeighborUnconfiguredTimeouts" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    return ""
}

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetSegmentPath() string {
    return "bfd-counter"
}

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-name"] = bfdCounter.MemberName
    leafs["last-time-cleared"] = bfdCounter.LastTimeCleared
    leafs["starting"] = bfdCounter.Starting
    leafs["up"] = bfdCounter.Up
    leafs["down"] = bfdCounter.Down
    leafs["neighbor-unconfigured"] = bfdCounter.NeighborUnconfigured
    leafs["start-timeouts"] = bfdCounter.StartTimeouts
    leafs["neighbor-unconfigured-timeouts"] = bfdCounter.NeighborUnconfiguredTimeouts
    leafs["time-since-cleared"] = bfdCounter.TimeSinceCleared
    return leafs
}

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetYangName() string { return "bfd-counter" }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) SetParent(parent types.Entity) { bfdCounter.parent = parent }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetParent() types.Entity { return bfdCounter.parent }

func (bfdCounter *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleDescendant_BfdCounter) GetParentYangName() string { return "bfd-counters-bundle-descendant" }

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers
// Children of bundle with BFD counters
// information
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle member item with BFD counters information. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember.
    BfdCountersBundleChildrenMember []BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember
}

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetFilter() yfilter.YFilter { return bfdCountersBundleChildrenMembers.YFilter }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) SetFilter(yf yfilter.YFilter) { bfdCountersBundleChildrenMembers.YFilter = yf }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetGoName(yname string) string {
    if yname == "bfd-counters-bundle-children-member" { return "BfdCountersBundleChildrenMember" }
    return ""
}

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetSegmentPath() string {
    return "bfd-counters-bundle-children-members"
}

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-counters-bundle-children-member" {
        for _, c := range bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember {
            if bfdCountersBundleChildrenMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember{}
        bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember = append(bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember, child)
        return &bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember[len(bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember)-1]
    }
    return nil
}

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember {
        children[bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember[i].GetSegmentPath()] = &bfdCountersBundleChildrenMembers.BfdCountersBundleChildrenMember[i]
    }
    return children
}

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetYangName() string { return "bfd-counters-bundle-children-members" }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) SetParent(parent types.Entity) { bfdCountersBundleChildrenMembers.parent = parent }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetParent() types.Entity { return bfdCountersBundleChildrenMembers.parent }

func (bfdCountersBundleChildrenMembers *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers) GetParentYangName() string { return "bfd-counters-bundle" }

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember
// Bundle member item with BFD counters
// information
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name of the member this information is for. The type is string.
    MemberName interface{}

    // Timestamp when counters were last cleared (deprecated). The type is
    // interface{} with range: 0..18446744073709551615.
    LastTimeCleared interface{}

    // Number of times member state changed to starting. The type is interface{}
    // with range: 0..4294967295.
    Starting interface{}

    // Number of times member state changed to up. The type is interface{} with
    // range: 0..4294967295.
    Up interface{}

    // Number of times member state changed to down. The type is interface{} with
    // range: 0..4294967295.
    Down interface{}

    // Number of times member state changed to neighbor unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfigured interface{}

    // Number of timeouts waiting for BFD to start. The type is interface{} with
    // range: 0..4294967295.
    StartTimeouts interface{}

    // Number of timeouts waiting for neighbor to become unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfiguredTimeouts interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}
}

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetFilter() yfilter.YFilter { return bfdCountersBundleChildrenMember.YFilter }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) SetFilter(yf yfilter.YFilter) { bfdCountersBundleChildrenMember.YFilter = yf }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "member-name" { return "MemberName" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "starting" { return "Starting" }
    if yname == "up" { return "Up" }
    if yname == "down" { return "Down" }
    if yname == "neighbor-unconfigured" { return "NeighborUnconfigured" }
    if yname == "start-timeouts" { return "StartTimeouts" }
    if yname == "neighbor-unconfigured-timeouts" { return "NeighborUnconfiguredTimeouts" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    return ""
}

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetSegmentPath() string {
    return "bfd-counters-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", bfdCountersBundleChildrenMember.MemberInterface) + "']"
}

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = bfdCountersBundleChildrenMember.MemberInterface
    leafs["member-name"] = bfdCountersBundleChildrenMember.MemberName
    leafs["last-time-cleared"] = bfdCountersBundleChildrenMember.LastTimeCleared
    leafs["starting"] = bfdCountersBundleChildrenMember.Starting
    leafs["up"] = bfdCountersBundleChildrenMember.Up
    leafs["down"] = bfdCountersBundleChildrenMember.Down
    leafs["neighbor-unconfigured"] = bfdCountersBundleChildrenMember.NeighborUnconfigured
    leafs["start-timeouts"] = bfdCountersBundleChildrenMember.StartTimeouts
    leafs["neighbor-unconfigured-timeouts"] = bfdCountersBundleChildrenMember.NeighborUnconfiguredTimeouts
    leafs["time-since-cleared"] = bfdCountersBundleChildrenMember.TimeSinceCleared
    return leafs
}

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetYangName() string { return "bfd-counters-bundle-children-member" }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) SetParent(parent types.Entity) { bfdCountersBundleChildrenMember.parent = parent }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetParent() types.Entity { return bfdCountersBundleChildrenMember.parent }

func (bfdCountersBundleChildrenMember *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleChildrenMembers_BfdCountersBundleChildrenMember) GetParentYangName() string { return "bfd-counters-bundle-children-members" }

// BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem
// Data for this item
type BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of item. The type is string.
    ItemName interface{}
}

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetFilter() yfilter.YFilter { return bfdCountersBundleItem.YFilter }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) SetFilter(yf yfilter.YFilter) { bfdCountersBundleItem.YFilter = yf }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    return ""
}

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetSegmentPath() string {
    return "bfd-counters-bundle-item"
}

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = bfdCountersBundleItem.ItemName
    return leafs
}

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetYangName() string { return "bfd-counters-bundle-item" }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) SetParent(parent types.Entity) { bfdCountersBundleItem.parent = parent }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetParent() types.Entity { return bfdCountersBundleItem.parent }

func (bfdCountersBundleItem *BundleInformation_BfdCounters_BfdCountersBundles_BfdCountersBundle_BfdCountersBundleItem) GetParentYangName() string { return "bfd-counters-bundle" }

// BundleInformation_BfdCounters_BfdCountersMembers
// Member interfaces with BFD counters information
type BundleInformation_BfdCounters_BfdCountersMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember.
    BfdCountersMember []BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember
}

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetFilter() yfilter.YFilter { return bfdCountersMembers.YFilter }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) SetFilter(yf yfilter.YFilter) { bfdCountersMembers.YFilter = yf }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetGoName(yname string) string {
    if yname == "bfd-counters-member" { return "BfdCountersMember" }
    return ""
}

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetSegmentPath() string {
    return "bfd-counters-members"
}

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-counters-member" {
        for _, c := range bfdCountersMembers.BfdCountersMember {
            if bfdCountersMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember{}
        bfdCountersMembers.BfdCountersMember = append(bfdCountersMembers.BfdCountersMember, child)
        return &bfdCountersMembers.BfdCountersMember[len(bfdCountersMembers.BfdCountersMember)-1]
    }
    return nil
}

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bfdCountersMembers.BfdCountersMember {
        children[bfdCountersMembers.BfdCountersMember[i].GetSegmentPath()] = &bfdCountersMembers.BfdCountersMember[i]
    }
    return children
}

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetYangName() string { return "bfd-counters-members" }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) SetParent(parent types.Entity) { bfdCountersMembers.parent = parent }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetParent() types.Entity { return bfdCountersMembers.parent }

func (bfdCountersMembers *BundleInformation_BfdCounters_BfdCountersMembers) GetParentYangName() string { return "bfd-counters" }

// BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember
// Member interface
type BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    BfdCountersMemberItem BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem
}

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetFilter() yfilter.YFilter { return bfdCountersMember.YFilter }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) SetFilter(yf yfilter.YFilter) { bfdCountersMember.YFilter = yf }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "bfd-counters-member-item" { return "BfdCountersMemberItem" }
    return ""
}

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetSegmentPath() string {
    return "bfd-counters-member" + "[member-interface='" + fmt.Sprintf("%v", bfdCountersMember.MemberInterface) + "']"
}

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bfd-counters-member-item" {
        return &bfdCountersMember.BfdCountersMemberItem
    }
    return nil
}

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bfd-counters-member-item"] = &bfdCountersMember.BfdCountersMemberItem
    return children
}

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = bfdCountersMember.MemberInterface
    return leafs
}

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetYangName() string { return "bfd-counters-member" }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) SetParent(parent types.Entity) { bfdCountersMember.parent = parent }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetParent() types.Entity { return bfdCountersMember.parent }

func (bfdCountersMember *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember) GetParentYangName() string { return "bfd-counters-members" }

// BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem
// Data for this item
type BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the member this information is for. The type is string.
    MemberName interface{}

    // Timestamp when counters were last cleared (deprecated). The type is
    // interface{} with range: 0..18446744073709551615.
    LastTimeCleared interface{}

    // Number of times member state changed to starting. The type is interface{}
    // with range: 0..4294967295.
    Starting interface{}

    // Number of times member state changed to up. The type is interface{} with
    // range: 0..4294967295.
    Up interface{}

    // Number of times member state changed to down. The type is interface{} with
    // range: 0..4294967295.
    Down interface{}

    // Number of times member state changed to neighbor unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfigured interface{}

    // Number of timeouts waiting for BFD to start. The type is interface{} with
    // range: 0..4294967295.
    StartTimeouts interface{}

    // Number of timeouts waiting for neighbor to become unconfigured. The type is
    // interface{} with range: 0..4294967295.
    NeighborUnconfiguredTimeouts interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}
}

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetFilter() yfilter.YFilter { return bfdCountersMemberItem.YFilter }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) SetFilter(yf yfilter.YFilter) { bfdCountersMemberItem.YFilter = yf }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetGoName(yname string) string {
    if yname == "member-name" { return "MemberName" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "starting" { return "Starting" }
    if yname == "up" { return "Up" }
    if yname == "down" { return "Down" }
    if yname == "neighbor-unconfigured" { return "NeighborUnconfigured" }
    if yname == "start-timeouts" { return "StartTimeouts" }
    if yname == "neighbor-unconfigured-timeouts" { return "NeighborUnconfiguredTimeouts" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    return ""
}

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetSegmentPath() string {
    return "bfd-counters-member-item"
}

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-name"] = bfdCountersMemberItem.MemberName
    leafs["last-time-cleared"] = bfdCountersMemberItem.LastTimeCleared
    leafs["starting"] = bfdCountersMemberItem.Starting
    leafs["up"] = bfdCountersMemberItem.Up
    leafs["down"] = bfdCountersMemberItem.Down
    leafs["neighbor-unconfigured"] = bfdCountersMemberItem.NeighborUnconfigured
    leafs["start-timeouts"] = bfdCountersMemberItem.StartTimeouts
    leafs["neighbor-unconfigured-timeouts"] = bfdCountersMemberItem.NeighborUnconfiguredTimeouts
    leafs["time-since-cleared"] = bfdCountersMemberItem.TimeSinceCleared
    return leafs
}

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetBundleName() string { return "cisco_ios_xr" }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetYangName() string { return "bfd-counters-member-item" }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) SetParent(parent types.Entity) { bfdCountersMemberItem.parent = parent }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetParent() types.Entity { return bfdCountersMemberItem.parent }

func (bfdCountersMemberItem *BundleInformation_BfdCounters_BfdCountersMembers_BfdCountersMember_BfdCountersMemberItem) GetParentYangName() string { return "bfd-counters-member" }

// BundleInformation_ScheduledActions
// Scheduled actions on a bundle
type BundleInformation_ScheduledActions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundles with actions scheduled.
    ScheduledActionsBundles BundleInformation_ScheduledActions_ScheduledActionsBundles
}

func (scheduledActions *BundleInformation_ScheduledActions) GetFilter() yfilter.YFilter { return scheduledActions.YFilter }

func (scheduledActions *BundleInformation_ScheduledActions) SetFilter(yf yfilter.YFilter) { scheduledActions.YFilter = yf }

func (scheduledActions *BundleInformation_ScheduledActions) GetGoName(yname string) string {
    if yname == "scheduled-actions-bundles" { return "ScheduledActionsBundles" }
    return ""
}

func (scheduledActions *BundleInformation_ScheduledActions) GetSegmentPath() string {
    return "scheduled-actions"
}

func (scheduledActions *BundleInformation_ScheduledActions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "scheduled-actions-bundles" {
        return &scheduledActions.ScheduledActionsBundles
    }
    return nil
}

func (scheduledActions *BundleInformation_ScheduledActions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["scheduled-actions-bundles"] = &scheduledActions.ScheduledActionsBundles
    return children
}

func (scheduledActions *BundleInformation_ScheduledActions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (scheduledActions *BundleInformation_ScheduledActions) GetBundleName() string { return "cisco_ios_xr" }

func (scheduledActions *BundleInformation_ScheduledActions) GetYangName() string { return "scheduled-actions" }

func (scheduledActions *BundleInformation_ScheduledActions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (scheduledActions *BundleInformation_ScheduledActions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (scheduledActions *BundleInformation_ScheduledActions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (scheduledActions *BundleInformation_ScheduledActions) SetParent(parent types.Entity) { scheduledActions.parent = parent }

func (scheduledActions *BundleInformation_ScheduledActions) GetParent() types.Entity { return scheduledActions.parent }

func (scheduledActions *BundleInformation_ScheduledActions) GetParentYangName() string { return "bundle-information" }

// BundleInformation_ScheduledActions_ScheduledActionsBundles
// Bundles with actions scheduled
type BundleInformation_ScheduledActions_ScheduledActionsBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle.
    ScheduledActionsBundle []BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle
}

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetFilter() yfilter.YFilter { return scheduledActionsBundles.YFilter }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) SetFilter(yf yfilter.YFilter) { scheduledActionsBundles.YFilter = yf }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetGoName(yname string) string {
    if yname == "scheduled-actions-bundle" { return "ScheduledActionsBundle" }
    return ""
}

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetSegmentPath() string {
    return "scheduled-actions-bundles"
}

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "scheduled-actions-bundle" {
        for _, c := range scheduledActionsBundles.ScheduledActionsBundle {
            if scheduledActionsBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle{}
        scheduledActionsBundles.ScheduledActionsBundle = append(scheduledActionsBundles.ScheduledActionsBundle, child)
        return &scheduledActionsBundles.ScheduledActionsBundle[len(scheduledActionsBundles.ScheduledActionsBundle)-1]
    }
    return nil
}

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range scheduledActionsBundles.ScheduledActionsBundle {
        children[scheduledActionsBundles.ScheduledActionsBundle[i].GetSegmentPath()] = &scheduledActionsBundles.ScheduledActionsBundle[i]
    }
    return children
}

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetBundleName() string { return "cisco_ios_xr" }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetYangName() string { return "scheduled-actions-bundles" }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) SetParent(parent types.Entity) { scheduledActionsBundles.parent = parent }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetParent() types.Entity { return scheduledActionsBundles.parent }

func (scheduledActionsBundles *BundleInformation_ScheduledActions_ScheduledActionsBundles) GetParentYangName() string { return "scheduled-actions" }

// BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle
// Bundle interface
type BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    ScheduledActionsBundleItem BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem
}

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetFilter() yfilter.YFilter { return scheduledActionsBundle.YFilter }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) SetFilter(yf yfilter.YFilter) { scheduledActionsBundle.YFilter = yf }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "scheduled-actions-bundle-item" { return "ScheduledActionsBundleItem" }
    return ""
}

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetSegmentPath() string {
    return "scheduled-actions-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", scheduledActionsBundle.BundleInterface) + "']"
}

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "scheduled-actions-bundle-item" {
        return &scheduledActionsBundle.ScheduledActionsBundleItem
    }
    return nil
}

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["scheduled-actions-bundle-item"] = &scheduledActionsBundle.ScheduledActionsBundleItem
    return children
}

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = scheduledActionsBundle.BundleInterface
    return leafs
}

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetBundleName() string { return "cisco_ios_xr" }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetYangName() string { return "scheduled-actions-bundle" }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) SetParent(parent types.Entity) { scheduledActionsBundle.parent = parent }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetParent() types.Entity { return scheduledActionsBundle.parent }

func (scheduledActionsBundle *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle) GetParentYangName() string { return "scheduled-actions-bundles" }

// BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem
// Data for this item
type BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // Scheduled actions. The type is slice of
    // BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction.
    ScheduledAction []BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction
}

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetFilter() yfilter.YFilter { return scheduledActionsBundleItem.YFilter }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) SetFilter(yf yfilter.YFilter) { scheduledActionsBundleItem.YFilter = yf }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "scheduled-action" { return "ScheduledAction" }
    return ""
}

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetSegmentPath() string {
    return "scheduled-actions-bundle-item"
}

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "scheduled-action" {
        for _, c := range scheduledActionsBundleItem.ScheduledAction {
            if scheduledActionsBundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction{}
        scheduledActionsBundleItem.ScheduledAction = append(scheduledActionsBundleItem.ScheduledAction, child)
        return &scheduledActionsBundleItem.ScheduledAction[len(scheduledActionsBundleItem.ScheduledAction)-1]
    }
    return nil
}

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range scheduledActionsBundleItem.ScheduledAction {
        children[scheduledActionsBundleItem.ScheduledAction[i].GetSegmentPath()] = &scheduledActionsBundleItem.ScheduledAction[i]
    }
    return children
}

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = scheduledActionsBundleItem.BundleName
    return leafs
}

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetYangName() string { return "scheduled-actions-bundle-item" }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) SetParent(parent types.Entity) { scheduledActionsBundleItem.parent = parent }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetParent() types.Entity { return scheduledActionsBundleItem.parent }

func (scheduledActionsBundleItem *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem) GetParentYangName() string { return "scheduled-actions-bundle" }

// BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction
// Scheduled actions
type BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of mLACP scheduled action for a bundle. The type is
    // BmdBagMlacpSchActionItem.
    MlacpAction interface{}

    // Seconds left before action. The type is interface{} with range:
    // 0..18446744073709551615. Units are second.
    TimeRemaining interface{}

    // Details whether the switch action is viable. The type is BmdSwitchReason.
    ActionState interface{}
}

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetFilter() yfilter.YFilter { return scheduledAction.YFilter }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) SetFilter(yf yfilter.YFilter) { scheduledAction.YFilter = yf }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetGoName(yname string) string {
    if yname == "mlacp-action" { return "MlacpAction" }
    if yname == "time-remaining" { return "TimeRemaining" }
    if yname == "action-state" { return "ActionState" }
    return ""
}

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetSegmentPath() string {
    return "scheduled-action"
}

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mlacp-action"] = scheduledAction.MlacpAction
    leafs["time-remaining"] = scheduledAction.TimeRemaining
    leafs["action-state"] = scheduledAction.ActionState
    return leafs
}

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetBundleName() string { return "cisco_ios_xr" }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetYangName() string { return "scheduled-action" }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) SetParent(parent types.Entity) { scheduledAction.parent = parent }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetParent() types.Entity { return scheduledAction.parent }

func (scheduledAction *BundleInformation_ScheduledActions_ScheduledActionsBundles_ScheduledActionsBundle_ScheduledActionsBundleItem_ScheduledAction) GetParentYangName() string { return "scheduled-actions-bundle-item" }

// BundleInformation_Bundle
// Generic information for bundles and members
type BundleInformation_Bundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interfaces with common bundle information.
    BundleBundles BundleInformation_Bundle_BundleBundles

    // Member interfaces with common bundle information.
    BundleMembers BundleInformation_Bundle_BundleMembers
}

func (bundle *BundleInformation_Bundle) GetFilter() yfilter.YFilter { return bundle.YFilter }

func (bundle *BundleInformation_Bundle) SetFilter(yf yfilter.YFilter) { bundle.YFilter = yf }

func (bundle *BundleInformation_Bundle) GetGoName(yname string) string {
    if yname == "bundle-bundles" { return "BundleBundles" }
    if yname == "bundle-members" { return "BundleMembers" }
    return ""
}

func (bundle *BundleInformation_Bundle) GetSegmentPath() string {
    return "bundle"
}

func (bundle *BundleInformation_Bundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-bundles" {
        return &bundle.BundleBundles
    }
    if childYangName == "bundle-members" {
        return &bundle.BundleMembers
    }
    return nil
}

func (bundle *BundleInformation_Bundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-bundles"] = &bundle.BundleBundles
    children["bundle-members"] = &bundle.BundleMembers
    return children
}

func (bundle *BundleInformation_Bundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundle *BundleInformation_Bundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundle *BundleInformation_Bundle) GetYangName() string { return "bundle" }

func (bundle *BundleInformation_Bundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundle *BundleInformation_Bundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundle *BundleInformation_Bundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundle *BundleInformation_Bundle) SetParent(parent types.Entity) { bundle.parent = parent }

func (bundle *BundleInformation_Bundle) GetParent() types.Entity { return bundle.parent }

func (bundle *BundleInformation_Bundle) GetParentYangName() string { return "bundle-information" }

// BundleInformation_Bundle_BundleBundles
// Bundle interfaces with common bundle
// information
type BundleInformation_Bundle_BundleBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle.
    BundleBundle []BundleInformation_Bundle_BundleBundles_BundleBundle
}

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetFilter() yfilter.YFilter { return bundleBundles.YFilter }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) SetFilter(yf yfilter.YFilter) { bundleBundles.YFilter = yf }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetGoName(yname string) string {
    if yname == "bundle-bundle" { return "BundleBundle" }
    return ""
}

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetSegmentPath() string {
    return "bundle-bundles"
}

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-bundle" {
        for _, c := range bundleBundles.BundleBundle {
            if bundleBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleBundles_BundleBundle{}
        bundleBundles.BundleBundle = append(bundleBundles.BundleBundle, child)
        return &bundleBundles.BundleBundle[len(bundleBundles.BundleBundle)-1]
    }
    return nil
}

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleBundles.BundleBundle {
        children[bundleBundles.BundleBundle[i].GetSegmentPath()] = &bundleBundles.BundleBundle[i]
    }
    return children
}

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetYangName() string { return "bundle-bundles" }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) SetParent(parent types.Entity) { bundleBundles.parent = parent }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetParent() types.Entity { return bundleBundles.parent }

func (bundleBundles *BundleInformation_Bundle_BundleBundles) GetParentYangName() string { return "bundle" }

// BundleInformation_Bundle_BundleBundles_BundleBundle
// Bundle interface
type BundleInformation_Bundle_BundleBundles_BundleBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item and all its members.
    BundleBundleDescendant BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant

    // Children of bundle with common bundle information.
    BundleBundleChildrenMembers BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers

    // Data for this item.
    BundleBundleItem BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem
}

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetFilter() yfilter.YFilter { return bundleBundle.YFilter }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) SetFilter(yf yfilter.YFilter) { bundleBundle.YFilter = yf }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "bundle-bundle-descendant" { return "BundleBundleDescendant" }
    if yname == "bundle-bundle-children-members" { return "BundleBundleChildrenMembers" }
    if yname == "bundle-bundle-item" { return "BundleBundleItem" }
    return ""
}

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetSegmentPath() string {
    return "bundle-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundleBundle.BundleInterface) + "']"
}

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-bundle-descendant" {
        return &bundleBundle.BundleBundleDescendant
    }
    if childYangName == "bundle-bundle-children-members" {
        return &bundleBundle.BundleBundleChildrenMembers
    }
    if childYangName == "bundle-bundle-item" {
        return &bundleBundle.BundleBundleItem
    }
    return nil
}

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-bundle-descendant"] = &bundleBundle.BundleBundleDescendant
    children["bundle-bundle-children-members"] = &bundleBundle.BundleBundleChildrenMembers
    children["bundle-bundle-item"] = &bundleBundle.BundleBundleItem
    return children
}

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = bundleBundle.BundleInterface
    return leafs
}

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetYangName() string { return "bundle-bundle" }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) SetParent(parent types.Entity) { bundleBundle.parent = parent }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetParent() types.Entity { return bundleBundle.parent }

func (bundleBundle *BundleInformation_Bundle_BundleBundles_BundleBundle) GetParentYangName() string { return "bundle-bundles" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant
// Data for this item and all its members
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData

    // Member information. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData.
    MemberData []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData
}

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetFilter() yfilter.YFilter { return bundleBundleDescendant.YFilter }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) SetFilter(yf yfilter.YFilter) { bundleBundleDescendant.YFilter = yf }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetSegmentPath() string {
    return "bundle-bundle-descendant"
}

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &bundleBundleDescendant.BundleData
    }
    if childYangName == "member-data" {
        for _, c := range bundleBundleDescendant.MemberData {
            if bundleBundleDescendant.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData{}
        bundleBundleDescendant.MemberData = append(bundleBundleDescendant.MemberData, child)
        return &bundleBundleDescendant.MemberData[len(bundleBundleDescendant.MemberData)-1]
    }
    return nil
}

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &bundleBundleDescendant.BundleData
    for i := range bundleBundleDescendant.MemberData {
        children[bundleBundleDescendant.MemberData[i].GetSegmentPath()] = &bundleBundleDescendant.MemberData[i]
    }
    return children
}

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetYangName() string { return "bundle-bundle-descendant" }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) SetParent(parent types.Entity) { bundleBundleDescendant.parent = parent }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetParent() types.Entity { return bundleBundleDescendant.parent }

func (bundleBundleDescendant *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant) GetParentYangName() string { return "bundle-bundle" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData
// Bundle information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig.
    BfdConfig []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig
}

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &bundleData.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range bundleData.BfdConfig {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig{}
        bundleData.BfdConfig = append(bundleData.BfdConfig, child)
        return &bundleData.BfdConfig[len(bundleData.BfdConfig)-1]
    }
    return nil
}

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &bundleData.MacAddress
    for i := range bundleData.BfdConfig {
        children[bundleData.BfdConfig[i].GetSegmentPath()] = &bundleData.BfdConfig[i]
    }
    return children
}

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = bundleData.BundleInterfaceName
    leafs["available-bandwidth"] = bundleData.AvailableBandwidth
    leafs["effective-bandwidth"] = bundleData.EffectiveBandwidth
    leafs["configured-bandwidth"] = bundleData.ConfiguredBandwidth
    leafs["minimum-active-links"] = bundleData.MinimumActiveLinks
    leafs["maximum-active-links"] = bundleData.MaximumActiveLinks
    leafs["maximum-active-links-source"] = bundleData.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = bundleData.MinimumBandwidth
    leafs["primary-member"] = bundleData.PrimaryMember
    leafs["bundle-status"] = bundleData.BundleStatus
    leafs["active-member-count"] = bundleData.ActiveMemberCount
    leafs["standby-member-count"] = bundleData.StandbyMemberCount
    leafs["configured-member-count"] = bundleData.ConfiguredMemberCount
    leafs["mac-source"] = bundleData.MacSource
    leafs["mac-source-member"] = bundleData.MacSourceMember
    leafs["inter-chassis"] = bundleData.InterChassis
    leafs["is-active"] = bundleData.IsActive
    leafs["lacp-status"] = bundleData.LacpStatus
    leafs["mlacp-status"] = bundleData.MlacpStatus
    leafs["ipv4bfd-status"] = bundleData.Ipv4BfdStatus
    leafs["link-order-status"] = bundleData.LinkOrderStatus
    leafs["ipv6bfd-status"] = bundleData.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = bundleData.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = bundleData.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = bundleData.SuppressionTimer
    leafs["wait-while-timer"] = bundleData.WaitWhileTimer
    leafs["collector-max-delay"] = bundleData.CollectorMaxDelay
    leafs["cisco-extensions"] = bundleData.CiscoExtensions
    leafs["lacp-nonrevertive"] = bundleData.LacpNonrevertive
    leafs["iccp-group-id"] = bundleData.IccpGroupId
    leafs["active-foreign-member-count"] = bundleData.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = bundleData.ConfiguredForeignMemberCount
    leafs["switchover-type"] = bundleData.SwitchoverType
    leafs["maximize-threshold-value-links"] = bundleData.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = bundleData.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = bundleData.MlacpMode
    leafs["recovery-delay"] = bundleData.RecoveryDelay
    leafs["singleton"] = bundleData.Singleton
    return leafs
}

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData) GetParentYangName() string { return "bundle-bundle-descendant" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress
// MAC address of this member
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_MacAddress) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_BundleData_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData
// Member information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress
}

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "underlying-link-id" { return "UnderlyingLinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "iccp-node" { return "IccpNode" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "lacp-enabled" { return "LacpEnabled" }
    if yname == "member-type" { return "MemberType" }
    if yname == "member-name" { return "MemberName" }
    if yname == "counters" { return "Counters" }
    if yname == "link-data" { return "LinkData" }
    if yname == "member-mux-data" { return "MemberMuxData" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &memberData.Counters
    }
    if childYangName == "link-data" {
        return &memberData.LinkData
    }
    if childYangName == "member-mux-data" {
        return &memberData.MemberMuxData
    }
    if childYangName == "mac-address" {
        return &memberData.MacAddress
    }
    return nil
}

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &memberData.Counters
    children["link-data"] = &memberData.LinkData
    children["member-mux-data"] = &memberData.MemberMuxData
    children["mac-address"] = &memberData.MacAddress
    return children
}

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = memberData.InterfaceName
    leafs["port-priority"] = memberData.PortPriority
    leafs["port-number"] = memberData.PortNumber
    leafs["underlying-link-id"] = memberData.UnderlyingLinkId
    leafs["link-order-number"] = memberData.LinkOrderNumber
    leafs["iccp-node"] = memberData.IccpNode
    leafs["bandwidth"] = memberData.Bandwidth
    leafs["lacp-enabled"] = memberData.LacpEnabled
    leafs["member-type"] = memberData.MemberType
    leafs["member-name"] = memberData.MemberName
    return leafs
}

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData) GetParentYangName() string { return "bundle-bundle-descendant" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetGoName(yname string) string {
    if yname == "lacpd-us-received" { return "LacpdUsReceived" }
    if yname == "lacpd-us-transmitted" { return "LacpdUsTransmitted" }
    if yname == "marker-packets-received" { return "MarkerPacketsReceived" }
    if yname == "marker-responses-transmitted" { return "MarkerResponsesTransmitted" }
    if yname == "illegal-packets-received" { return "IllegalPacketsReceived" }
    if yname == "excess-lacpd-us-received" { return "ExcessLacpdUsReceived" }
    if yname == "excess-marker-packets-received" { return "ExcessMarkerPacketsReceived" }
    if yname == "defaulted" { return "Defaulted" }
    if yname == "expired" { return "Expired" }
    if yname == "last-cleared-sec" { return "LastClearedSec" }
    if yname == "last-cleared-nsec" { return "LastClearedNsec" }
    return ""
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacpd-us-received"] = counters.LacpdUsReceived
    leafs["lacpd-us-transmitted"] = counters.LacpdUsTransmitted
    leafs["marker-packets-received"] = counters.MarkerPacketsReceived
    leafs["marker-responses-transmitted"] = counters.MarkerResponsesTransmitted
    leafs["illegal-packets-received"] = counters.IllegalPacketsReceived
    leafs["excess-lacpd-us-received"] = counters.ExcessLacpdUsReceived
    leafs["excess-marker-packets-received"] = counters.ExcessMarkerPacketsReceived
    leafs["defaulted"] = counters.Defaulted
    leafs["expired"] = counters.Expired
    leafs["last-cleared-sec"] = counters.LastClearedSec
    leafs["last-cleared-nsec"] = counters.LastClearedNsec
    return leafs
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetYangName() string { return "counters" }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetParent() types.Entity { return counters.parent }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_Counters) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetFilter() yfilter.YFilter { return linkData.YFilter }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) SetFilter(yf yfilter.YFilter) { linkData.YFilter = yf }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "actor-system-priority" { return "ActorSystemPriority" }
    if yname == "actor-system-mac-address" { return "ActorSystemMacAddress" }
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "actor-port-id" { return "ActorPortId" }
    if yname == "actor-port-priority" { return "ActorPortPriority" }
    if yname == "partner-port-id" { return "PartnerPortId" }
    if yname == "partner-port-priority" { return "PartnerPortPriority" }
    if yname == "actor-port-state" { return "ActorPortState" }
    if yname == "partner-port-state" { return "PartnerPortState" }
    return ""
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetSegmentPath() string {
    return "link-data"
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = linkData.InterfaceHandle
    leafs["actor-system-priority"] = linkData.ActorSystemPriority
    leafs["actor-system-mac-address"] = linkData.ActorSystemMacAddress
    leafs["actor-operational-key"] = linkData.ActorOperationalKey
    leafs["partner-system-priority"] = linkData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = linkData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = linkData.PartnerOperationalKey
    leafs["selected-aggregator-id"] = linkData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = linkData.AttachedAggregatorId
    leafs["actor-port-id"] = linkData.ActorPortId
    leafs["actor-port-priority"] = linkData.ActorPortPriority
    leafs["partner-port-id"] = linkData.PartnerPortId
    leafs["partner-port-priority"] = linkData.PartnerPortPriority
    leafs["actor-port-state"] = linkData.ActorPortState
    leafs["partner-port-state"] = linkData.PartnerPortState
    return leafs
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetBundleName() string { return "cisco_ios_xr" }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetYangName() string { return "link-data" }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) SetParent(parent types.Entity) { linkData.parent = parent }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetParent() types.Entity { return linkData.parent }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_LinkData) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetFilter() yfilter.YFilter { return memberMuxData.YFilter }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) SetFilter(yf yfilter.YFilter) { memberMuxData.YFilter = yf }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetGoName(yname string) string {
    if yname == "mux-state" { return "MuxState" }
    if yname == "error" { return "Error" }
    if yname == "member-mux-state-reason" { return "MemberMuxStateReason" }
    if yname == "member-state" { return "MemberState" }
    if yname == "mux-state-reason" { return "MuxStateReason" }
    if yname == "member-mux-state-reason-data" { return "MemberMuxStateReasonData" }
    return ""
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetSegmentPath() string {
    return "member-mux-data"
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-mux-state-reason-data" {
        return &memberMuxData.MemberMuxStateReasonData
    }
    return nil
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-mux-state-reason-data"] = &memberMuxData.MemberMuxStateReasonData
    return children
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mux-state"] = memberMuxData.MuxState
    leafs["error"] = memberMuxData.Error
    leafs["member-mux-state-reason"] = memberMuxData.MemberMuxStateReason
    leafs["member-state"] = memberMuxData.MemberState
    leafs["mux-state-reason"] = memberMuxData.MuxStateReason
    return leafs
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetYangName() string { return "member-mux-data" }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) SetParent(parent types.Entity) { memberMuxData.parent = parent }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetParent() types.Entity { return memberMuxData.parent }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetFilter() yfilter.YFilter { return memberMuxStateReasonData.YFilter }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) SetFilter(yf yfilter.YFilter) { memberMuxStateReasonData.YFilter = yf }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetGoName(yname string) string {
    if yname == "reason-type" { return "ReasonType" }
    if yname == "severity" { return "Severity" }
    return ""
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetSegmentPath() string {
    return "member-mux-state-reason-data"
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-type"] = memberMuxStateReasonData.ReasonType
    leafs["severity"] = memberMuxStateReasonData.Severity
    return leafs
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetYangName() string { return "member-mux-state-reason-data" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) SetParent(parent types.Entity) { memberMuxStateReasonData.parent = parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetParent() types.Entity { return memberMuxStateReasonData.parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MemberMuxData_MemberMuxStateReasonData) GetParentYangName() string { return "member-mux-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleDescendant_MemberData_MacAddress) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers
// Children of bundle with common bundle
// information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle member item with common bundle information. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember.
    BundleBundleChildrenMember []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember
}

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetFilter() yfilter.YFilter { return bundleBundleChildrenMembers.YFilter }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) SetFilter(yf yfilter.YFilter) { bundleBundleChildrenMembers.YFilter = yf }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetGoName(yname string) string {
    if yname == "bundle-bundle-children-member" { return "BundleBundleChildrenMember" }
    return ""
}

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetSegmentPath() string {
    return "bundle-bundle-children-members"
}

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-bundle-children-member" {
        for _, c := range bundleBundleChildrenMembers.BundleBundleChildrenMember {
            if bundleBundleChildrenMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember{}
        bundleBundleChildrenMembers.BundleBundleChildrenMember = append(bundleBundleChildrenMembers.BundleBundleChildrenMember, child)
        return &bundleBundleChildrenMembers.BundleBundleChildrenMember[len(bundleBundleChildrenMembers.BundleBundleChildrenMember)-1]
    }
    return nil
}

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleBundleChildrenMembers.BundleBundleChildrenMember {
        children[bundleBundleChildrenMembers.BundleBundleChildrenMember[i].GetSegmentPath()] = &bundleBundleChildrenMembers.BundleBundleChildrenMember[i]
    }
    return children
}

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetYangName() string { return "bundle-bundle-children-members" }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) SetParent(parent types.Entity) { bundleBundleChildrenMembers.parent = parent }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetParent() types.Entity { return bundleBundleChildrenMembers.parent }

func (bundleBundleChildrenMembers *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers) GetParentYangName() string { return "bundle-bundle" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember
// Bundle member item with common bundle
// information
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Member's interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress
}

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetFilter() yfilter.YFilter { return bundleBundleChildrenMember.YFilter }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) SetFilter(yf yfilter.YFilter) { bundleBundleChildrenMember.YFilter = yf }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "underlying-link-id" { return "UnderlyingLinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "iccp-node" { return "IccpNode" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "lacp-enabled" { return "LacpEnabled" }
    if yname == "member-type" { return "MemberType" }
    if yname == "member-name" { return "MemberName" }
    if yname == "counters" { return "Counters" }
    if yname == "link-data" { return "LinkData" }
    if yname == "member-mux-data" { return "MemberMuxData" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetSegmentPath() string {
    return "bundle-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", bundleBundleChildrenMember.MemberInterface) + "']"
}

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &bundleBundleChildrenMember.Counters
    }
    if childYangName == "link-data" {
        return &bundleBundleChildrenMember.LinkData
    }
    if childYangName == "member-mux-data" {
        return &bundleBundleChildrenMember.MemberMuxData
    }
    if childYangName == "mac-address" {
        return &bundleBundleChildrenMember.MacAddress
    }
    return nil
}

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &bundleBundleChildrenMember.Counters
    children["link-data"] = &bundleBundleChildrenMember.LinkData
    children["member-mux-data"] = &bundleBundleChildrenMember.MemberMuxData
    children["mac-address"] = &bundleBundleChildrenMember.MacAddress
    return children
}

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = bundleBundleChildrenMember.MemberInterface
    leafs["interface-name"] = bundleBundleChildrenMember.InterfaceName
    leafs["port-priority"] = bundleBundleChildrenMember.PortPriority
    leafs["port-number"] = bundleBundleChildrenMember.PortNumber
    leafs["underlying-link-id"] = bundleBundleChildrenMember.UnderlyingLinkId
    leafs["link-order-number"] = bundleBundleChildrenMember.LinkOrderNumber
    leafs["iccp-node"] = bundleBundleChildrenMember.IccpNode
    leafs["bandwidth"] = bundleBundleChildrenMember.Bandwidth
    leafs["lacp-enabled"] = bundleBundleChildrenMember.LacpEnabled
    leafs["member-type"] = bundleBundleChildrenMember.MemberType
    leafs["member-name"] = bundleBundleChildrenMember.MemberName
    return leafs
}

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetYangName() string { return "bundle-bundle-children-member" }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) SetParent(parent types.Entity) { bundleBundleChildrenMember.parent = parent }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetParent() types.Entity { return bundleBundleChildrenMember.parent }

func (bundleBundleChildrenMember *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember) GetParentYangName() string { return "bundle-bundle-children-members" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetGoName(yname string) string {
    if yname == "lacpd-us-received" { return "LacpdUsReceived" }
    if yname == "lacpd-us-transmitted" { return "LacpdUsTransmitted" }
    if yname == "marker-packets-received" { return "MarkerPacketsReceived" }
    if yname == "marker-responses-transmitted" { return "MarkerResponsesTransmitted" }
    if yname == "illegal-packets-received" { return "IllegalPacketsReceived" }
    if yname == "excess-lacpd-us-received" { return "ExcessLacpdUsReceived" }
    if yname == "excess-marker-packets-received" { return "ExcessMarkerPacketsReceived" }
    if yname == "defaulted" { return "Defaulted" }
    if yname == "expired" { return "Expired" }
    if yname == "last-cleared-sec" { return "LastClearedSec" }
    if yname == "last-cleared-nsec" { return "LastClearedNsec" }
    return ""
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacpd-us-received"] = counters.LacpdUsReceived
    leafs["lacpd-us-transmitted"] = counters.LacpdUsTransmitted
    leafs["marker-packets-received"] = counters.MarkerPacketsReceived
    leafs["marker-responses-transmitted"] = counters.MarkerResponsesTransmitted
    leafs["illegal-packets-received"] = counters.IllegalPacketsReceived
    leafs["excess-lacpd-us-received"] = counters.ExcessLacpdUsReceived
    leafs["excess-marker-packets-received"] = counters.ExcessMarkerPacketsReceived
    leafs["defaulted"] = counters.Defaulted
    leafs["expired"] = counters.Expired
    leafs["last-cleared-sec"] = counters.LastClearedSec
    leafs["last-cleared-nsec"] = counters.LastClearedNsec
    return leafs
}

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetYangName() string { return "counters" }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetParent() types.Entity { return counters.parent }

func (counters *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_Counters) GetParentYangName() string { return "bundle-bundle-children-member" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetFilter() yfilter.YFilter { return linkData.YFilter }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) SetFilter(yf yfilter.YFilter) { linkData.YFilter = yf }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "actor-system-priority" { return "ActorSystemPriority" }
    if yname == "actor-system-mac-address" { return "ActorSystemMacAddress" }
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "actor-port-id" { return "ActorPortId" }
    if yname == "actor-port-priority" { return "ActorPortPriority" }
    if yname == "partner-port-id" { return "PartnerPortId" }
    if yname == "partner-port-priority" { return "PartnerPortPriority" }
    if yname == "actor-port-state" { return "ActorPortState" }
    if yname == "partner-port-state" { return "PartnerPortState" }
    return ""
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetSegmentPath() string {
    return "link-data"
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = linkData.InterfaceHandle
    leafs["actor-system-priority"] = linkData.ActorSystemPriority
    leafs["actor-system-mac-address"] = linkData.ActorSystemMacAddress
    leafs["actor-operational-key"] = linkData.ActorOperationalKey
    leafs["partner-system-priority"] = linkData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = linkData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = linkData.PartnerOperationalKey
    leafs["selected-aggregator-id"] = linkData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = linkData.AttachedAggregatorId
    leafs["actor-port-id"] = linkData.ActorPortId
    leafs["actor-port-priority"] = linkData.ActorPortPriority
    leafs["partner-port-id"] = linkData.PartnerPortId
    leafs["partner-port-priority"] = linkData.PartnerPortPriority
    leafs["actor-port-state"] = linkData.ActorPortState
    leafs["partner-port-state"] = linkData.PartnerPortState
    return leafs
}

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetBundleName() string { return "cisco_ios_xr" }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetYangName() string { return "link-data" }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) SetParent(parent types.Entity) { linkData.parent = parent }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetParent() types.Entity { return linkData.parent }

func (linkData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_LinkData) GetParentYangName() string { return "bundle-bundle-children-member" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetFilter() yfilter.YFilter { return memberMuxData.YFilter }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) SetFilter(yf yfilter.YFilter) { memberMuxData.YFilter = yf }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetGoName(yname string) string {
    if yname == "mux-state" { return "MuxState" }
    if yname == "error" { return "Error" }
    if yname == "member-mux-state-reason" { return "MemberMuxStateReason" }
    if yname == "member-state" { return "MemberState" }
    if yname == "mux-state-reason" { return "MuxStateReason" }
    if yname == "member-mux-state-reason-data" { return "MemberMuxStateReasonData" }
    return ""
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetSegmentPath() string {
    return "member-mux-data"
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-mux-state-reason-data" {
        return &memberMuxData.MemberMuxStateReasonData
    }
    return nil
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-mux-state-reason-data"] = &memberMuxData.MemberMuxStateReasonData
    return children
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mux-state"] = memberMuxData.MuxState
    leafs["error"] = memberMuxData.Error
    leafs["member-mux-state-reason"] = memberMuxData.MemberMuxStateReason
    leafs["member-state"] = memberMuxData.MemberState
    leafs["mux-state-reason"] = memberMuxData.MuxStateReason
    return leafs
}

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetYangName() string { return "member-mux-data" }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) SetParent(parent types.Entity) { memberMuxData.parent = parent }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetParent() types.Entity { return memberMuxData.parent }

func (memberMuxData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData) GetParentYangName() string { return "bundle-bundle-children-member" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetFilter() yfilter.YFilter { return memberMuxStateReasonData.YFilter }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) SetFilter(yf yfilter.YFilter) { memberMuxStateReasonData.YFilter = yf }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetGoName(yname string) string {
    if yname == "reason-type" { return "ReasonType" }
    if yname == "severity" { return "Severity" }
    return ""
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetSegmentPath() string {
    return "member-mux-state-reason-data"
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-type"] = memberMuxStateReasonData.ReasonType
    leafs["severity"] = memberMuxStateReasonData.Severity
    return leafs
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetYangName() string { return "member-mux-state-reason-data" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) SetParent(parent types.Entity) { memberMuxStateReasonData.parent = parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetParent() types.Entity { return memberMuxStateReasonData.parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MemberMuxData_MemberMuxStateReasonData) GetParentYangName() string { return "member-mux-data" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleChildrenMembers_BundleBundleChildrenMember_MacAddress) GetParentYangName() string { return "bundle-bundle-children-member" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem
// Data for this item
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig.
    BfdConfig []BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig
}

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetFilter() yfilter.YFilter { return bundleBundleItem.YFilter }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) SetFilter(yf yfilter.YFilter) { bundleBundleItem.YFilter = yf }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetSegmentPath() string {
    return "bundle-bundle-item"
}

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &bundleBundleItem.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range bundleBundleItem.BfdConfig {
            if bundleBundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig{}
        bundleBundleItem.BfdConfig = append(bundleBundleItem.BfdConfig, child)
        return &bundleBundleItem.BfdConfig[len(bundleBundleItem.BfdConfig)-1]
    }
    return nil
}

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &bundleBundleItem.MacAddress
    for i := range bundleBundleItem.BfdConfig {
        children[bundleBundleItem.BfdConfig[i].GetSegmentPath()] = &bundleBundleItem.BfdConfig[i]
    }
    return children
}

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = bundleBundleItem.BundleInterfaceName
    leafs["available-bandwidth"] = bundleBundleItem.AvailableBandwidth
    leafs["effective-bandwidth"] = bundleBundleItem.EffectiveBandwidth
    leafs["configured-bandwidth"] = bundleBundleItem.ConfiguredBandwidth
    leafs["minimum-active-links"] = bundleBundleItem.MinimumActiveLinks
    leafs["maximum-active-links"] = bundleBundleItem.MaximumActiveLinks
    leafs["maximum-active-links-source"] = bundleBundleItem.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = bundleBundleItem.MinimumBandwidth
    leafs["primary-member"] = bundleBundleItem.PrimaryMember
    leafs["bundle-status"] = bundleBundleItem.BundleStatus
    leafs["active-member-count"] = bundleBundleItem.ActiveMemberCount
    leafs["standby-member-count"] = bundleBundleItem.StandbyMemberCount
    leafs["configured-member-count"] = bundleBundleItem.ConfiguredMemberCount
    leafs["mac-source"] = bundleBundleItem.MacSource
    leafs["mac-source-member"] = bundleBundleItem.MacSourceMember
    leafs["inter-chassis"] = bundleBundleItem.InterChassis
    leafs["is-active"] = bundleBundleItem.IsActive
    leafs["lacp-status"] = bundleBundleItem.LacpStatus
    leafs["mlacp-status"] = bundleBundleItem.MlacpStatus
    leafs["ipv4bfd-status"] = bundleBundleItem.Ipv4BfdStatus
    leafs["link-order-status"] = bundleBundleItem.LinkOrderStatus
    leafs["ipv6bfd-status"] = bundleBundleItem.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = bundleBundleItem.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = bundleBundleItem.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = bundleBundleItem.SuppressionTimer
    leafs["wait-while-timer"] = bundleBundleItem.WaitWhileTimer
    leafs["collector-max-delay"] = bundleBundleItem.CollectorMaxDelay
    leafs["cisco-extensions"] = bundleBundleItem.CiscoExtensions
    leafs["lacp-nonrevertive"] = bundleBundleItem.LacpNonrevertive
    leafs["iccp-group-id"] = bundleBundleItem.IccpGroupId
    leafs["active-foreign-member-count"] = bundleBundleItem.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = bundleBundleItem.ConfiguredForeignMemberCount
    leafs["switchover-type"] = bundleBundleItem.SwitchoverType
    leafs["maximize-threshold-value-links"] = bundleBundleItem.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = bundleBundleItem.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = bundleBundleItem.MlacpMode
    leafs["recovery-delay"] = bundleBundleItem.RecoveryDelay
    leafs["singleton"] = bundleBundleItem.Singleton
    return leafs
}

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetYangName() string { return "bundle-bundle-item" }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) SetParent(parent types.Entity) { bundleBundleItem.parent = parent }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetParent() types.Entity { return bundleBundleItem.parent }

func (bundleBundleItem *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem) GetParentYangName() string { return "bundle-bundle" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress
// MAC address of this member
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_MacAddress) GetParentYangName() string { return "bundle-bundle-item" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig) GetParentYangName() string { return "bundle-bundle-item" }

// BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *BundleInformation_Bundle_BundleBundles_BundleBundle_BundleBundleItem_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// BundleInformation_Bundle_BundleMembers
// Member interfaces with common bundle
// information
type BundleInformation_Bundle_BundleMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_Bundle_BundleMembers_BundleMember.
    BundleMember []BundleInformation_Bundle_BundleMembers_BundleMember
}

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetFilter() yfilter.YFilter { return bundleMembers.YFilter }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) SetFilter(yf yfilter.YFilter) { bundleMembers.YFilter = yf }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetGoName(yname string) string {
    if yname == "bundle-member" { return "BundleMember" }
    return ""
}

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetSegmentPath() string {
    return "bundle-members"
}

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-member" {
        for _, c := range bundleMembers.BundleMember {
            if bundleMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleMembers_BundleMember{}
        bundleMembers.BundleMember = append(bundleMembers.BundleMember, child)
        return &bundleMembers.BundleMember[len(bundleMembers.BundleMember)-1]
    }
    return nil
}

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleMembers.BundleMember {
        children[bundleMembers.BundleMember[i].GetSegmentPath()] = &bundleMembers.BundleMember[i]
    }
    return children
}

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetBundleName() string { return "cisco_ios_xr" }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetYangName() string { return "bundle-members" }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) SetParent(parent types.Entity) { bundleMembers.parent = parent }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetParent() types.Entity { return bundleMembers.parent }

func (bundleMembers *BundleInformation_Bundle_BundleMembers) GetParentYangName() string { return "bundle" }

// BundleInformation_Bundle_BundleMembers_BundleMember
// Member interface
type BundleInformation_Bundle_BundleMembers_BundleMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    BundleMemberAncestor BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor

    // Data for this item.
    BundleMemberItem BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem
}

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetFilter() yfilter.YFilter { return bundleMember.YFilter }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) SetFilter(yf yfilter.YFilter) { bundleMember.YFilter = yf }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "bundle-member-ancestor" { return "BundleMemberAncestor" }
    if yname == "bundle-member-item" { return "BundleMemberItem" }
    return ""
}

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetSegmentPath() string {
    return "bundle-member" + "[member-interface='" + fmt.Sprintf("%v", bundleMember.MemberInterface) + "']"
}

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-member-ancestor" {
        return &bundleMember.BundleMemberAncestor
    }
    if childYangName == "bundle-member-item" {
        return &bundleMember.BundleMemberItem
    }
    return nil
}

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-member-ancestor"] = &bundleMember.BundleMemberAncestor
    children["bundle-member-item"] = &bundleMember.BundleMemberItem
    return children
}

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = bundleMember.MemberInterface
    return leafs
}

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetBundleName() string { return "cisco_ios_xr" }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetYangName() string { return "bundle-member" }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) SetParent(parent types.Entity) { bundleMember.parent = parent }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetParent() types.Entity { return bundleMember.parent }

func (bundleMember *BundleInformation_Bundle_BundleMembers_BundleMember) GetParentYangName() string { return "bundle-members" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData

    // Member information. The type is slice of
    // BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData.
    MemberData []BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData
}

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetFilter() yfilter.YFilter { return bundleMemberAncestor.YFilter }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) SetFilter(yf yfilter.YFilter) { bundleMemberAncestor.YFilter = yf }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetSegmentPath() string {
    return "bundle-member-ancestor"
}

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &bundleMemberAncestor.BundleData
    }
    if childYangName == "member-data" {
        for _, c := range bundleMemberAncestor.MemberData {
            if bundleMemberAncestor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData{}
        bundleMemberAncestor.MemberData = append(bundleMemberAncestor.MemberData, child)
        return &bundleMemberAncestor.MemberData[len(bundleMemberAncestor.MemberData)-1]
    }
    return nil
}

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &bundleMemberAncestor.BundleData
    for i := range bundleMemberAncestor.MemberData {
        children[bundleMemberAncestor.MemberData[i].GetSegmentPath()] = &bundleMemberAncestor.MemberData[i]
    }
    return children
}

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetBundleName() string { return "cisco_ios_xr" }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetYangName() string { return "bundle-member-ancestor" }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) SetParent(parent types.Entity) { bundleMemberAncestor.parent = parent }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetParent() types.Entity { return bundleMemberAncestor.parent }

func (bundleMemberAncestor *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor) GetParentYangName() string { return "bundle-member" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData
// Bundle information
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig.
    BfdConfig []BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig
}

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &bundleData.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range bundleData.BfdConfig {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig{}
        bundleData.BfdConfig = append(bundleData.BfdConfig, child)
        return &bundleData.BfdConfig[len(bundleData.BfdConfig)-1]
    }
    return nil
}

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &bundleData.MacAddress
    for i := range bundleData.BfdConfig {
        children[bundleData.BfdConfig[i].GetSegmentPath()] = &bundleData.BfdConfig[i]
    }
    return children
}

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = bundleData.BundleInterfaceName
    leafs["available-bandwidth"] = bundleData.AvailableBandwidth
    leafs["effective-bandwidth"] = bundleData.EffectiveBandwidth
    leafs["configured-bandwidth"] = bundleData.ConfiguredBandwidth
    leafs["minimum-active-links"] = bundleData.MinimumActiveLinks
    leafs["maximum-active-links"] = bundleData.MaximumActiveLinks
    leafs["maximum-active-links-source"] = bundleData.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = bundleData.MinimumBandwidth
    leafs["primary-member"] = bundleData.PrimaryMember
    leafs["bundle-status"] = bundleData.BundleStatus
    leafs["active-member-count"] = bundleData.ActiveMemberCount
    leafs["standby-member-count"] = bundleData.StandbyMemberCount
    leafs["configured-member-count"] = bundleData.ConfiguredMemberCount
    leafs["mac-source"] = bundleData.MacSource
    leafs["mac-source-member"] = bundleData.MacSourceMember
    leafs["inter-chassis"] = bundleData.InterChassis
    leafs["is-active"] = bundleData.IsActive
    leafs["lacp-status"] = bundleData.LacpStatus
    leafs["mlacp-status"] = bundleData.MlacpStatus
    leafs["ipv4bfd-status"] = bundleData.Ipv4BfdStatus
    leafs["link-order-status"] = bundleData.LinkOrderStatus
    leafs["ipv6bfd-status"] = bundleData.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = bundleData.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = bundleData.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = bundleData.SuppressionTimer
    leafs["wait-while-timer"] = bundleData.WaitWhileTimer
    leafs["collector-max-delay"] = bundleData.CollectorMaxDelay
    leafs["cisco-extensions"] = bundleData.CiscoExtensions
    leafs["lacp-nonrevertive"] = bundleData.LacpNonrevertive
    leafs["iccp-group-id"] = bundleData.IccpGroupId
    leafs["active-foreign-member-count"] = bundleData.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = bundleData.ConfiguredForeignMemberCount
    leafs["switchover-type"] = bundleData.SwitchoverType
    leafs["maximize-threshold-value-links"] = bundleData.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = bundleData.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = bundleData.MlacpMode
    leafs["recovery-delay"] = bundleData.RecoveryDelay
    leafs["singleton"] = bundleData.Singleton
    return leafs
}

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData) GetParentYangName() string { return "bundle-member-ancestor" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress
// MAC address of this member
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_MacAddress) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_BundleData_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData
// Member information
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress
}

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "underlying-link-id" { return "UnderlyingLinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "iccp-node" { return "IccpNode" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "lacp-enabled" { return "LacpEnabled" }
    if yname == "member-type" { return "MemberType" }
    if yname == "member-name" { return "MemberName" }
    if yname == "counters" { return "Counters" }
    if yname == "link-data" { return "LinkData" }
    if yname == "member-mux-data" { return "MemberMuxData" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &memberData.Counters
    }
    if childYangName == "link-data" {
        return &memberData.LinkData
    }
    if childYangName == "member-mux-data" {
        return &memberData.MemberMuxData
    }
    if childYangName == "mac-address" {
        return &memberData.MacAddress
    }
    return nil
}

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &memberData.Counters
    children["link-data"] = &memberData.LinkData
    children["member-mux-data"] = &memberData.MemberMuxData
    children["mac-address"] = &memberData.MacAddress
    return children
}

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = memberData.InterfaceName
    leafs["port-priority"] = memberData.PortPriority
    leafs["port-number"] = memberData.PortNumber
    leafs["underlying-link-id"] = memberData.UnderlyingLinkId
    leafs["link-order-number"] = memberData.LinkOrderNumber
    leafs["iccp-node"] = memberData.IccpNode
    leafs["bandwidth"] = memberData.Bandwidth
    leafs["lacp-enabled"] = memberData.LacpEnabled
    leafs["member-type"] = memberData.MemberType
    leafs["member-name"] = memberData.MemberName
    return leafs
}

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData) GetParentYangName() string { return "bundle-member-ancestor" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetGoName(yname string) string {
    if yname == "lacpd-us-received" { return "LacpdUsReceived" }
    if yname == "lacpd-us-transmitted" { return "LacpdUsTransmitted" }
    if yname == "marker-packets-received" { return "MarkerPacketsReceived" }
    if yname == "marker-responses-transmitted" { return "MarkerResponsesTransmitted" }
    if yname == "illegal-packets-received" { return "IllegalPacketsReceived" }
    if yname == "excess-lacpd-us-received" { return "ExcessLacpdUsReceived" }
    if yname == "excess-marker-packets-received" { return "ExcessMarkerPacketsReceived" }
    if yname == "defaulted" { return "Defaulted" }
    if yname == "expired" { return "Expired" }
    if yname == "last-cleared-sec" { return "LastClearedSec" }
    if yname == "last-cleared-nsec" { return "LastClearedNsec" }
    return ""
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacpd-us-received"] = counters.LacpdUsReceived
    leafs["lacpd-us-transmitted"] = counters.LacpdUsTransmitted
    leafs["marker-packets-received"] = counters.MarkerPacketsReceived
    leafs["marker-responses-transmitted"] = counters.MarkerResponsesTransmitted
    leafs["illegal-packets-received"] = counters.IllegalPacketsReceived
    leafs["excess-lacpd-us-received"] = counters.ExcessLacpdUsReceived
    leafs["excess-marker-packets-received"] = counters.ExcessMarkerPacketsReceived
    leafs["defaulted"] = counters.Defaulted
    leafs["expired"] = counters.Expired
    leafs["last-cleared-sec"] = counters.LastClearedSec
    leafs["last-cleared-nsec"] = counters.LastClearedNsec
    return leafs
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetYangName() string { return "counters" }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetParent() types.Entity { return counters.parent }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_Counters) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetFilter() yfilter.YFilter { return linkData.YFilter }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) SetFilter(yf yfilter.YFilter) { linkData.YFilter = yf }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "actor-system-priority" { return "ActorSystemPriority" }
    if yname == "actor-system-mac-address" { return "ActorSystemMacAddress" }
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "actor-port-id" { return "ActorPortId" }
    if yname == "actor-port-priority" { return "ActorPortPriority" }
    if yname == "partner-port-id" { return "PartnerPortId" }
    if yname == "partner-port-priority" { return "PartnerPortPriority" }
    if yname == "actor-port-state" { return "ActorPortState" }
    if yname == "partner-port-state" { return "PartnerPortState" }
    return ""
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetSegmentPath() string {
    return "link-data"
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = linkData.InterfaceHandle
    leafs["actor-system-priority"] = linkData.ActorSystemPriority
    leafs["actor-system-mac-address"] = linkData.ActorSystemMacAddress
    leafs["actor-operational-key"] = linkData.ActorOperationalKey
    leafs["partner-system-priority"] = linkData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = linkData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = linkData.PartnerOperationalKey
    leafs["selected-aggregator-id"] = linkData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = linkData.AttachedAggregatorId
    leafs["actor-port-id"] = linkData.ActorPortId
    leafs["actor-port-priority"] = linkData.ActorPortPriority
    leafs["partner-port-id"] = linkData.PartnerPortId
    leafs["partner-port-priority"] = linkData.PartnerPortPriority
    leafs["actor-port-state"] = linkData.ActorPortState
    leafs["partner-port-state"] = linkData.PartnerPortState
    return leafs
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetBundleName() string { return "cisco_ios_xr" }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetYangName() string { return "link-data" }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) SetParent(parent types.Entity) { linkData.parent = parent }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetParent() types.Entity { return linkData.parent }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_LinkData) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetFilter() yfilter.YFilter { return memberMuxData.YFilter }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) SetFilter(yf yfilter.YFilter) { memberMuxData.YFilter = yf }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetGoName(yname string) string {
    if yname == "mux-state" { return "MuxState" }
    if yname == "error" { return "Error" }
    if yname == "member-mux-state-reason" { return "MemberMuxStateReason" }
    if yname == "member-state" { return "MemberState" }
    if yname == "mux-state-reason" { return "MuxStateReason" }
    if yname == "member-mux-state-reason-data" { return "MemberMuxStateReasonData" }
    return ""
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetSegmentPath() string {
    return "member-mux-data"
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-mux-state-reason-data" {
        return &memberMuxData.MemberMuxStateReasonData
    }
    return nil
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-mux-state-reason-data"] = &memberMuxData.MemberMuxStateReasonData
    return children
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mux-state"] = memberMuxData.MuxState
    leafs["error"] = memberMuxData.Error
    leafs["member-mux-state-reason"] = memberMuxData.MemberMuxStateReason
    leafs["member-state"] = memberMuxData.MemberState
    leafs["mux-state-reason"] = memberMuxData.MuxStateReason
    return leafs
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetYangName() string { return "member-mux-data" }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) SetParent(parent types.Entity) { memberMuxData.parent = parent }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetParent() types.Entity { return memberMuxData.parent }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetFilter() yfilter.YFilter { return memberMuxStateReasonData.YFilter }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) SetFilter(yf yfilter.YFilter) { memberMuxStateReasonData.YFilter = yf }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetGoName(yname string) string {
    if yname == "reason-type" { return "ReasonType" }
    if yname == "severity" { return "Severity" }
    return ""
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetSegmentPath() string {
    return "member-mux-state-reason-data"
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-type"] = memberMuxStateReasonData.ReasonType
    leafs["severity"] = memberMuxStateReasonData.Severity
    return leafs
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetYangName() string { return "member-mux-state-reason-data" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) SetParent(parent types.Entity) { memberMuxStateReasonData.parent = parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetParent() types.Entity { return memberMuxStateReasonData.parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MemberMuxData_MemberMuxStateReasonData) GetParentYangName() string { return "member-mux-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberAncestor_MemberData_MacAddress) GetParentYangName() string { return "member-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem
// Data for this item
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters

    // Lacp data about member link.
    LinkData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData

    // Mux state machine data.
    MemberMuxData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress
}

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetFilter() yfilter.YFilter { return bundleMemberItem.YFilter }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) SetFilter(yf yfilter.YFilter) { bundleMemberItem.YFilter = yf }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "underlying-link-id" { return "UnderlyingLinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "iccp-node" { return "IccpNode" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "lacp-enabled" { return "LacpEnabled" }
    if yname == "member-type" { return "MemberType" }
    if yname == "member-name" { return "MemberName" }
    if yname == "counters" { return "Counters" }
    if yname == "link-data" { return "LinkData" }
    if yname == "member-mux-data" { return "MemberMuxData" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetSegmentPath() string {
    return "bundle-member-item"
}

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &bundleMemberItem.Counters
    }
    if childYangName == "link-data" {
        return &bundleMemberItem.LinkData
    }
    if childYangName == "member-mux-data" {
        return &bundleMemberItem.MemberMuxData
    }
    if childYangName == "mac-address" {
        return &bundleMemberItem.MacAddress
    }
    return nil
}

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &bundleMemberItem.Counters
    children["link-data"] = &bundleMemberItem.LinkData
    children["member-mux-data"] = &bundleMemberItem.MemberMuxData
    children["mac-address"] = &bundleMemberItem.MacAddress
    return children
}

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = bundleMemberItem.InterfaceName
    leafs["port-priority"] = bundleMemberItem.PortPriority
    leafs["port-number"] = bundleMemberItem.PortNumber
    leafs["underlying-link-id"] = bundleMemberItem.UnderlyingLinkId
    leafs["link-order-number"] = bundleMemberItem.LinkOrderNumber
    leafs["iccp-node"] = bundleMemberItem.IccpNode
    leafs["bandwidth"] = bundleMemberItem.Bandwidth
    leafs["lacp-enabled"] = bundleMemberItem.LacpEnabled
    leafs["member-type"] = bundleMemberItem.MemberType
    leafs["member-name"] = bundleMemberItem.MemberName
    return leafs
}

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetBundleName() string { return "cisco_ios_xr" }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetYangName() string { return "bundle-member-item" }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) SetParent(parent types.Entity) { bundleMemberItem.parent = parent }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetParent() types.Entity { return bundleMemberItem.parent }

func (bundleMemberItem *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem) GetParentYangName() string { return "bundle-member" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters
// Counters data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetGoName(yname string) string {
    if yname == "lacpd-us-received" { return "LacpdUsReceived" }
    if yname == "lacpd-us-transmitted" { return "LacpdUsTransmitted" }
    if yname == "marker-packets-received" { return "MarkerPacketsReceived" }
    if yname == "marker-responses-transmitted" { return "MarkerResponsesTransmitted" }
    if yname == "illegal-packets-received" { return "IllegalPacketsReceived" }
    if yname == "excess-lacpd-us-received" { return "ExcessLacpdUsReceived" }
    if yname == "excess-marker-packets-received" { return "ExcessMarkerPacketsReceived" }
    if yname == "defaulted" { return "Defaulted" }
    if yname == "expired" { return "Expired" }
    if yname == "last-cleared-sec" { return "LastClearedSec" }
    if yname == "last-cleared-nsec" { return "LastClearedNsec" }
    return ""
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacpd-us-received"] = counters.LacpdUsReceived
    leafs["lacpd-us-transmitted"] = counters.LacpdUsTransmitted
    leafs["marker-packets-received"] = counters.MarkerPacketsReceived
    leafs["marker-responses-transmitted"] = counters.MarkerResponsesTransmitted
    leafs["illegal-packets-received"] = counters.IllegalPacketsReceived
    leafs["excess-lacpd-us-received"] = counters.ExcessLacpdUsReceived
    leafs["excess-marker-packets-received"] = counters.ExcessMarkerPacketsReceived
    leafs["defaulted"] = counters.Defaulted
    leafs["expired"] = counters.Expired
    leafs["last-cleared-sec"] = counters.LastClearedSec
    leafs["last-cleared-nsec"] = counters.LastClearedNsec
    return leafs
}

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetYangName() string { return "counters" }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetParent() types.Entity { return counters.parent }

func (counters *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_Counters) GetParentYangName() string { return "bundle-member-item" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData
// Lacp data about member link
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetFilter() yfilter.YFilter { return linkData.YFilter }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) SetFilter(yf yfilter.YFilter) { linkData.YFilter = yf }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "actor-system-priority" { return "ActorSystemPriority" }
    if yname == "actor-system-mac-address" { return "ActorSystemMacAddress" }
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "actor-port-id" { return "ActorPortId" }
    if yname == "actor-port-priority" { return "ActorPortPriority" }
    if yname == "partner-port-id" { return "PartnerPortId" }
    if yname == "partner-port-priority" { return "PartnerPortPriority" }
    if yname == "actor-port-state" { return "ActorPortState" }
    if yname == "partner-port-state" { return "PartnerPortState" }
    return ""
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetSegmentPath() string {
    return "link-data"
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = linkData.InterfaceHandle
    leafs["actor-system-priority"] = linkData.ActorSystemPriority
    leafs["actor-system-mac-address"] = linkData.ActorSystemMacAddress
    leafs["actor-operational-key"] = linkData.ActorOperationalKey
    leafs["partner-system-priority"] = linkData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = linkData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = linkData.PartnerOperationalKey
    leafs["selected-aggregator-id"] = linkData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = linkData.AttachedAggregatorId
    leafs["actor-port-id"] = linkData.ActorPortId
    leafs["actor-port-priority"] = linkData.ActorPortPriority
    leafs["partner-port-id"] = linkData.PartnerPortId
    leafs["partner-port-priority"] = linkData.PartnerPortPriority
    leafs["actor-port-state"] = linkData.ActorPortState
    leafs["partner-port-state"] = linkData.PartnerPortState
    return leafs
}

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetBundleName() string { return "cisco_ios_xr" }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetYangName() string { return "link-data" }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) SetParent(parent types.Entity) { linkData.parent = parent }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetParent() types.Entity { return linkData.parent }

func (linkData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_LinkData) GetParentYangName() string { return "bundle-member-item" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData
// Mux state machine data
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetFilter() yfilter.YFilter { return memberMuxData.YFilter }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) SetFilter(yf yfilter.YFilter) { memberMuxData.YFilter = yf }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetGoName(yname string) string {
    if yname == "mux-state" { return "MuxState" }
    if yname == "error" { return "Error" }
    if yname == "member-mux-state-reason" { return "MemberMuxStateReason" }
    if yname == "member-state" { return "MemberState" }
    if yname == "mux-state-reason" { return "MuxStateReason" }
    if yname == "member-mux-state-reason-data" { return "MemberMuxStateReasonData" }
    return ""
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetSegmentPath() string {
    return "member-mux-data"
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-mux-state-reason-data" {
        return &memberMuxData.MemberMuxStateReasonData
    }
    return nil
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-mux-state-reason-data"] = &memberMuxData.MemberMuxStateReasonData
    return children
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mux-state"] = memberMuxData.MuxState
    leafs["error"] = memberMuxData.Error
    leafs["member-mux-state-reason"] = memberMuxData.MemberMuxStateReason
    leafs["member-state"] = memberMuxData.MemberState
    leafs["mux-state-reason"] = memberMuxData.MuxStateReason
    return leafs
}

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetYangName() string { return "member-mux-data" }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) SetParent(parent types.Entity) { memberMuxData.parent = parent }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetParent() types.Entity { return memberMuxData.parent }

func (memberMuxData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData) GetParentYangName() string { return "bundle-member-item" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetFilter() yfilter.YFilter { return memberMuxStateReasonData.YFilter }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) SetFilter(yf yfilter.YFilter) { memberMuxStateReasonData.YFilter = yf }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetGoName(yname string) string {
    if yname == "reason-type" { return "ReasonType" }
    if yname == "severity" { return "Severity" }
    return ""
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetSegmentPath() string {
    return "member-mux-state-reason-data"
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-type"] = memberMuxStateReasonData.ReasonType
    leafs["severity"] = memberMuxStateReasonData.Severity
    return leafs
}

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetYangName() string { return "member-mux-state-reason-data" }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) SetParent(parent types.Entity) { memberMuxStateReasonData.parent = parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetParent() types.Entity { return memberMuxStateReasonData.parent }

func (memberMuxStateReasonData *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MemberMuxData_MemberMuxStateReasonData) GetParentYangName() string { return "member-mux-data" }

// BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress
// MAC address of this member (deprecated)
type BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Bundle_BundleMembers_BundleMember_BundleMemberItem_MacAddress) GetParentYangName() string { return "bundle-member-item" }

// BundleInformation_EventsRg
// Bundle ICCP events information for bundles and
// members
type BundleInformation_EventsRg struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle Member interfaces with ICCP events information.
    EventsRgMembers BundleInformation_EventsRg_EventsRgMembers

    // ICCP events for all ICCP Groups.
    EventsRgIccpGroups BundleInformation_EventsRg_EventsRgIccpGroups

    // Bundle interfaces with ICCP events information.
    EventsRgBundles BundleInformation_EventsRg_EventsRgBundles
}

func (eventsRg *BundleInformation_EventsRg) GetFilter() yfilter.YFilter { return eventsRg.YFilter }

func (eventsRg *BundleInformation_EventsRg) SetFilter(yf yfilter.YFilter) { eventsRg.YFilter = yf }

func (eventsRg *BundleInformation_EventsRg) GetGoName(yname string) string {
    if yname == "events-rg-members" { return "EventsRgMembers" }
    if yname == "events-rg-iccp-groups" { return "EventsRgIccpGroups" }
    if yname == "events-rg-bundles" { return "EventsRgBundles" }
    return ""
}

func (eventsRg *BundleInformation_EventsRg) GetSegmentPath() string {
    return "events-rg"
}

func (eventsRg *BundleInformation_EventsRg) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-rg-members" {
        return &eventsRg.EventsRgMembers
    }
    if childYangName == "events-rg-iccp-groups" {
        return &eventsRg.EventsRgIccpGroups
    }
    if childYangName == "events-rg-bundles" {
        return &eventsRg.EventsRgBundles
    }
    return nil
}

func (eventsRg *BundleInformation_EventsRg) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-rg-members"] = &eventsRg.EventsRgMembers
    children["events-rg-iccp-groups"] = &eventsRg.EventsRgIccpGroups
    children["events-rg-bundles"] = &eventsRg.EventsRgBundles
    return children
}

func (eventsRg *BundleInformation_EventsRg) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsRg *BundleInformation_EventsRg) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRg *BundleInformation_EventsRg) GetYangName() string { return "events-rg" }

func (eventsRg *BundleInformation_EventsRg) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRg *BundleInformation_EventsRg) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRg *BundleInformation_EventsRg) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRg *BundleInformation_EventsRg) SetParent(parent types.Entity) { eventsRg.parent = parent }

func (eventsRg *BundleInformation_EventsRg) GetParent() types.Entity { return eventsRg.parent }

func (eventsRg *BundleInformation_EventsRg) GetParentYangName() string { return "bundle-information" }

// BundleInformation_EventsRg_EventsRgMembers
// Bundle Member interfaces with ICCP events
// information
type BundleInformation_EventsRg_EventsRgMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_EventsRg_EventsRgMembers_EventsRgMember.
    EventsRgMember []BundleInformation_EventsRg_EventsRgMembers_EventsRgMember
}

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetFilter() yfilter.YFilter { return eventsRgMembers.YFilter }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) SetFilter(yf yfilter.YFilter) { eventsRgMembers.YFilter = yf }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetGoName(yname string) string {
    if yname == "events-rg-member" { return "EventsRgMember" }
    return ""
}

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetSegmentPath() string {
    return "events-rg-members"
}

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-rg-member" {
        for _, c := range eventsRgMembers.EventsRgMember {
            if eventsRgMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsRg_EventsRgMembers_EventsRgMember{}
        eventsRgMembers.EventsRgMember = append(eventsRgMembers.EventsRgMember, child)
        return &eventsRgMembers.EventsRgMember[len(eventsRgMembers.EventsRgMember)-1]
    }
    return nil
}

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsRgMembers.EventsRgMember {
        children[eventsRgMembers.EventsRgMember[i].GetSegmentPath()] = &eventsRgMembers.EventsRgMember[i]
    }
    return children
}

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetYangName() string { return "events-rg-members" }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) SetParent(parent types.Entity) { eventsRgMembers.parent = parent }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetParent() types.Entity { return eventsRgMembers.parent }

func (eventsRgMembers *BundleInformation_EventsRg_EventsRgMembers) GetParentYangName() string { return "events-rg" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember
// Member interface
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    EventsRgMemberAncestor BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor
}

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetFilter() yfilter.YFilter { return eventsRgMember.YFilter }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) SetFilter(yf yfilter.YFilter) { eventsRgMember.YFilter = yf }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "events-rg-member-ancestor" { return "EventsRgMemberAncestor" }
    return ""
}

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetSegmentPath() string {
    return "events-rg-member" + "[member-interface='" + fmt.Sprintf("%v", eventsRgMember.MemberInterface) + "']"
}

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-rg-member-ancestor" {
        return &eventsRgMember.EventsRgMemberAncestor
    }
    return nil
}

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-rg-member-ancestor"] = &eventsRgMember.EventsRgMemberAncestor
    return children
}

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = eventsRgMember.MemberInterface
    return leafs
}

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetYangName() string { return "events-rg-member" }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) SetParent(parent types.Entity) { eventsRgMember.parent = parent }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetParent() types.Entity { return eventsRgMember.parent }

func (eventsRgMember *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember) GetParentYangName() string { return "events-rg-members" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items.
    Items []BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items
}

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetFilter() yfilter.YFilter { return eventsRgMemberAncestor.YFilter }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) SetFilter(yf yfilter.YFilter) { eventsRgMemberAncestor.YFilter = yf }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetSegmentPath() string {
    return "events-rg-member-ancestor"
}

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsRgMemberAncestor.Items {
            if eventsRgMemberAncestor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items{}
        eventsRgMemberAncestor.Items = append(eventsRgMemberAncestor.Items, child)
        return &eventsRgMemberAncestor.Items[len(eventsRgMemberAncestor.Items)-1]
    }
    return nil
}

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsRgMemberAncestor.Items {
        children[eventsRgMemberAncestor.Items[i].GetSegmentPath()] = &eventsRgMemberAncestor.Items[i]
    }
    return children
}

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsRgMemberAncestor.ItemName
    return leafs
}

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetYangName() string { return "events-rg-member-ancestor" }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) SetParent(parent types.Entity) { eventsRgMemberAncestor.parent = parent }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetParent() types.Entity { return eventsRgMemberAncestor.parent }

func (eventsRgMemberAncestor *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor) GetParentYangName() string { return "events-rg-member" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items
// Event items
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items) GetParentYangName() string { return "events-rg-member-ancestor" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgMembers_EventsRgMember_EventsRgMemberAncestor_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsRg_EventsRgIccpGroups
// ICCP events for all ICCP Groups
type BundleInformation_EventsRg_EventsRgIccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup.
    EventsRgIccpGroup []BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup
}

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetFilter() yfilter.YFilter { return eventsRgIccpGroups.YFilter }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) SetFilter(yf yfilter.YFilter) { eventsRgIccpGroups.YFilter = yf }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetGoName(yname string) string {
    if yname == "events-rg-iccp-group" { return "EventsRgIccpGroup" }
    return ""
}

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetSegmentPath() string {
    return "events-rg-iccp-groups"
}

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-rg-iccp-group" {
        for _, c := range eventsRgIccpGroups.EventsRgIccpGroup {
            if eventsRgIccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup{}
        eventsRgIccpGroups.EventsRgIccpGroup = append(eventsRgIccpGroups.EventsRgIccpGroup, child)
        return &eventsRgIccpGroups.EventsRgIccpGroup[len(eventsRgIccpGroups.EventsRgIccpGroup)-1]
    }
    return nil
}

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsRgIccpGroups.EventsRgIccpGroup {
        children[eventsRgIccpGroups.EventsRgIccpGroup[i].GetSegmentPath()] = &eventsRgIccpGroups.EventsRgIccpGroup[i]
    }
    return children
}

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetYangName() string { return "events-rg-iccp-groups" }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) SetParent(parent types.Entity) { eventsRgIccpGroups.parent = parent }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetParent() types.Entity { return eventsRgIccpGroups.parent }

func (eventsRgIccpGroups *BundleInformation_EventsRg_EventsRgIccpGroups) GetParentYangName() string { return "events-rg" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup
// ICCP Group ID
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    EventsRgBundleItemIccpGroup BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup
}

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetFilter() yfilter.YFilter { return eventsRgIccpGroup.YFilter }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) SetFilter(yf yfilter.YFilter) { eventsRgIccpGroup.YFilter = yf }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "events-rg-bundle-item-iccp-group" { return "EventsRgBundleItemIccpGroup" }
    return ""
}

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetSegmentPath() string {
    return "events-rg-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", eventsRgIccpGroup.IccpGroup) + "']"
}

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-rg-bundle-item-iccp-group" {
        return &eventsRgIccpGroup.EventsRgBundleItemIccpGroup
    }
    return nil
}

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-rg-bundle-item-iccp-group"] = &eventsRgIccpGroup.EventsRgBundleItemIccpGroup
    return children
}

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = eventsRgIccpGroup.IccpGroup
    return leafs
}

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetYangName() string { return "events-rg-iccp-group" }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) SetParent(parent types.Entity) { eventsRgIccpGroup.parent = parent }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetParent() types.Entity { return eventsRgIccpGroup.parent }

func (eventsRgIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup) GetParentYangName() string { return "events-rg-iccp-groups" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup
// Data for this item
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items.
    Items []BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items
}

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetFilter() yfilter.YFilter { return eventsRgBundleItemIccpGroup.YFilter }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) SetFilter(yf yfilter.YFilter) { eventsRgBundleItemIccpGroup.YFilter = yf }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetSegmentPath() string {
    return "events-rg-bundle-item-iccp-group"
}

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsRgBundleItemIccpGroup.Items {
            if eventsRgBundleItemIccpGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items{}
        eventsRgBundleItemIccpGroup.Items = append(eventsRgBundleItemIccpGroup.Items, child)
        return &eventsRgBundleItemIccpGroup.Items[len(eventsRgBundleItemIccpGroup.Items)-1]
    }
    return nil
}

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsRgBundleItemIccpGroup.Items {
        children[eventsRgBundleItemIccpGroup.Items[i].GetSegmentPath()] = &eventsRgBundleItemIccpGroup.Items[i]
    }
    return children
}

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsRgBundleItemIccpGroup.ItemName
    return leafs
}

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetYangName() string { return "events-rg-bundle-item-iccp-group" }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) SetParent(parent types.Entity) { eventsRgBundleItemIccpGroup.parent = parent }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetParent() types.Entity { return eventsRgBundleItemIccpGroup.parent }

func (eventsRgBundleItemIccpGroup *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup) GetParentYangName() string { return "events-rg-iccp-group" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items
// Event items
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo
}

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items) GetParentYangName() string { return "events-rg-bundle-item-iccp-group" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgIccpGroups_EventsRgIccpGroup_EventsRgBundleItemIccpGroup_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsRg_EventsRgBundles
// Bundle interfaces with ICCP events information
type BundleInformation_EventsRg_EventsRgBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle.
    EventsRgBundle []BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle
}

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetFilter() yfilter.YFilter { return eventsRgBundles.YFilter }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) SetFilter(yf yfilter.YFilter) { eventsRgBundles.YFilter = yf }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetGoName(yname string) string {
    if yname == "events-rg-bundle" { return "EventsRgBundle" }
    return ""
}

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetSegmentPath() string {
    return "events-rg-bundles"
}

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-rg-bundle" {
        for _, c := range eventsRgBundles.EventsRgBundle {
            if eventsRgBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle{}
        eventsRgBundles.EventsRgBundle = append(eventsRgBundles.EventsRgBundle, child)
        return &eventsRgBundles.EventsRgBundle[len(eventsRgBundles.EventsRgBundle)-1]
    }
    return nil
}

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsRgBundles.EventsRgBundle {
        children[eventsRgBundles.EventsRgBundle[i].GetSegmentPath()] = &eventsRgBundles.EventsRgBundle[i]
    }
    return children
}

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetYangName() string { return "events-rg-bundles" }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) SetParent(parent types.Entity) { eventsRgBundles.parent = parent }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetParent() types.Entity { return eventsRgBundles.parent }

func (eventsRgBundles *BundleInformation_EventsRg_EventsRgBundles) GetParentYangName() string { return "events-rg" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle
// Bundle interface
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item and its parent bundle.
    EventsRgBundleAncestor BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor
}

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetFilter() yfilter.YFilter { return eventsRgBundle.YFilter }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) SetFilter(yf yfilter.YFilter) { eventsRgBundle.YFilter = yf }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "events-rg-bundle-ancestor" { return "EventsRgBundleAncestor" }
    return ""
}

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetSegmentPath() string {
    return "events-rg-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsRgBundle.BundleInterface) + "']"
}

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-rg-bundle-ancestor" {
        return &eventsRgBundle.EventsRgBundleAncestor
    }
    return nil
}

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-rg-bundle-ancestor"] = &eventsRgBundle.EventsRgBundleAncestor
    return children
}

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = eventsRgBundle.BundleInterface
    return leafs
}

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetYangName() string { return "events-rg-bundle" }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) SetParent(parent types.Entity) { eventsRgBundle.parent = parent }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetParent() types.Entity { return eventsRgBundle.parent }

func (eventsRgBundle *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle) GetParentYangName() string { return "events-rg-bundles" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor
// Data for this item and its parent bundle
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items.
    Items []BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items
}

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetFilter() yfilter.YFilter { return eventsRgBundleAncestor.YFilter }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) SetFilter(yf yfilter.YFilter) { eventsRgBundleAncestor.YFilter = yf }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetSegmentPath() string {
    return "events-rg-bundle-ancestor"
}

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsRgBundleAncestor.Items {
            if eventsRgBundleAncestor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items{}
        eventsRgBundleAncestor.Items = append(eventsRgBundleAncestor.Items, child)
        return &eventsRgBundleAncestor.Items[len(eventsRgBundleAncestor.Items)-1]
    }
    return nil
}

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsRgBundleAncestor.Items {
        children[eventsRgBundleAncestor.Items[i].GetSegmentPath()] = &eventsRgBundleAncestor.Items[i]
    }
    return children
}

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsRgBundleAncestor.ItemName
    return leafs
}

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetBundleName() string { return "cisco_ios_xr" }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetYangName() string { return "events-rg-bundle-ancestor" }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) SetParent(parent types.Entity) { eventsRgBundleAncestor.parent = parent }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetParent() types.Entity { return eventsRgBundleAncestor.parent }

func (eventsRgBundleAncestor *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor) GetParentYangName() string { return "events-rg-bundle" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items
// Event items
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items) GetParentYangName() string { return "events-rg-bundle-ancestor" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsRg_EventsRgBundles_EventsRgBundle_EventsRgBundleAncestor_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_Lacp
// LACP information for bundles and members
type BundleInformation_Lacp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interfaces with LACP information.
    LacpBundles BundleInformation_Lacp_LacpBundles

    // Member interfaces with LACP information.
    LacpMembers BundleInformation_Lacp_LacpMembers
}

func (lacp *BundleInformation_Lacp) GetFilter() yfilter.YFilter { return lacp.YFilter }

func (lacp *BundleInformation_Lacp) SetFilter(yf yfilter.YFilter) { lacp.YFilter = yf }

func (lacp *BundleInformation_Lacp) GetGoName(yname string) string {
    if yname == "lacp-bundles" { return "LacpBundles" }
    if yname == "lacp-members" { return "LacpMembers" }
    return ""
}

func (lacp *BundleInformation_Lacp) GetSegmentPath() string {
    return "lacp"
}

func (lacp *BundleInformation_Lacp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lacp-bundles" {
        return &lacp.LacpBundles
    }
    if childYangName == "lacp-members" {
        return &lacp.LacpMembers
    }
    return nil
}

func (lacp *BundleInformation_Lacp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lacp-bundles"] = &lacp.LacpBundles
    children["lacp-members"] = &lacp.LacpMembers
    return children
}

func (lacp *BundleInformation_Lacp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacp *BundleInformation_Lacp) GetBundleName() string { return "cisco_ios_xr" }

func (lacp *BundleInformation_Lacp) GetYangName() string { return "lacp" }

func (lacp *BundleInformation_Lacp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacp *BundleInformation_Lacp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacp *BundleInformation_Lacp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacp *BundleInformation_Lacp) SetParent(parent types.Entity) { lacp.parent = parent }

func (lacp *BundleInformation_Lacp) GetParent() types.Entity { return lacp.parent }

func (lacp *BundleInformation_Lacp) GetParentYangName() string { return "bundle-information" }

// BundleInformation_Lacp_LacpBundles
// Bundle interfaces with LACP information
type BundleInformation_Lacp_LacpBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle.
    LacpBundle []BundleInformation_Lacp_LacpBundles_LacpBundle
}

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetFilter() yfilter.YFilter { return lacpBundles.YFilter }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) SetFilter(yf yfilter.YFilter) { lacpBundles.YFilter = yf }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetGoName(yname string) string {
    if yname == "lacp-bundle" { return "LacpBundle" }
    return ""
}

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetSegmentPath() string {
    return "lacp-bundles"
}

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lacp-bundle" {
        for _, c := range lacpBundles.LacpBundle {
            if lacpBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpBundles_LacpBundle{}
        lacpBundles.LacpBundle = append(lacpBundles.LacpBundle, child)
        return &lacpBundles.LacpBundle[len(lacpBundles.LacpBundle)-1]
    }
    return nil
}

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lacpBundles.LacpBundle {
        children[lacpBundles.LacpBundle[i].GetSegmentPath()] = &lacpBundles.LacpBundle[i]
    }
    return children
}

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetYangName() string { return "lacp-bundles" }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) SetParent(parent types.Entity) { lacpBundles.parent = parent }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetParent() types.Entity { return lacpBundles.parent }

func (lacpBundles *BundleInformation_Lacp_LacpBundles) GetParentYangName() string { return "lacp" }

// BundleInformation_Lacp_LacpBundles_LacpBundle
// Bundle interface
type BundleInformation_Lacp_LacpBundles_LacpBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    LacpBundleItem BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem

    // Data for this item and all its members.
    LacpBundleDescendant BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant

    // Children of bundle with LACP information.
    LacpBundleChildrenMembers BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers
}

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetFilter() yfilter.YFilter { return lacpBundle.YFilter }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) SetFilter(yf yfilter.YFilter) { lacpBundle.YFilter = yf }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "lacp-bundle-item" { return "LacpBundleItem" }
    if yname == "lacp-bundle-descendant" { return "LacpBundleDescendant" }
    if yname == "lacp-bundle-children-members" { return "LacpBundleChildrenMembers" }
    return ""
}

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetSegmentPath() string {
    return "lacp-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", lacpBundle.BundleInterface) + "']"
}

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lacp-bundle-item" {
        return &lacpBundle.LacpBundleItem
    }
    if childYangName == "lacp-bundle-descendant" {
        return &lacpBundle.LacpBundleDescendant
    }
    if childYangName == "lacp-bundle-children-members" {
        return &lacpBundle.LacpBundleChildrenMembers
    }
    return nil
}

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lacp-bundle-item"] = &lacpBundle.LacpBundleItem
    children["lacp-bundle-descendant"] = &lacpBundle.LacpBundleDescendant
    children["lacp-bundle-children-members"] = &lacpBundle.LacpBundleChildrenMembers
    return children
}

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = lacpBundle.BundleInterface
    return leafs
}

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetYangName() string { return "lacp-bundle" }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) SetParent(parent types.Entity) { lacpBundle.parent = parent }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetParent() types.Entity { return lacpBundle.parent }

func (lacpBundle *BundleInformation_Lacp_LacpBundles_LacpBundle) GetParentYangName() string { return "lacp-bundles" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem
// Data for this item
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData

    // System ID for the bundle.
    BundleSystemId BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId
}

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetFilter() yfilter.YFilter { return lacpBundleItem.YFilter }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) SetFilter(yf yfilter.YFilter) { lacpBundleItem.YFilter = yf }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetGoName(yname string) string {
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "actor-bundle-data" { return "ActorBundleData" }
    if yname == "bundle-system-id" { return "BundleSystemId" }
    return ""
}

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetSegmentPath() string {
    return "lacp-bundle-item"
}

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-bundle-data" {
        return &lacpBundleItem.ActorBundleData
    }
    if childYangName == "bundle-system-id" {
        return &lacpBundleItem.BundleSystemId
    }
    return nil
}

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-bundle-data"] = &lacpBundleItem.ActorBundleData
    children["bundle-system-id"] = &lacpBundleItem.BundleSystemId
    return children
}

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["actor-operational-key"] = lacpBundleItem.ActorOperationalKey
    leafs["partner-system-priority"] = lacpBundleItem.PartnerSystemPriority
    leafs["partner-system-mac-address"] = lacpBundleItem.PartnerSystemMacAddress
    leafs["partner-operational-key"] = lacpBundleItem.PartnerOperationalKey
    return leafs
}

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetYangName() string { return "lacp-bundle-item" }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) SetParent(parent types.Entity) { lacpBundleItem.parent = parent }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetParent() types.Entity { return lacpBundleItem.parent }

func (lacpBundleItem *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem) GetParentYangName() string { return "lacp-bundle" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData
// Basic bundle information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig.
    BfdConfig []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetFilter() yfilter.YFilter { return actorBundleData.YFilter }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) SetFilter(yf yfilter.YFilter) { actorBundleData.YFilter = yf }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetSegmentPath() string {
    return "actor-bundle-data"
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &actorBundleData.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range actorBundleData.BfdConfig {
            if actorBundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig{}
        actorBundleData.BfdConfig = append(actorBundleData.BfdConfig, child)
        return &actorBundleData.BfdConfig[len(actorBundleData.BfdConfig)-1]
    }
    return nil
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &actorBundleData.MacAddress
    for i := range actorBundleData.BfdConfig {
        children[actorBundleData.BfdConfig[i].GetSegmentPath()] = &actorBundleData.BfdConfig[i]
    }
    return children
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = actorBundleData.BundleInterfaceName
    leafs["available-bandwidth"] = actorBundleData.AvailableBandwidth
    leafs["effective-bandwidth"] = actorBundleData.EffectiveBandwidth
    leafs["configured-bandwidth"] = actorBundleData.ConfiguredBandwidth
    leafs["minimum-active-links"] = actorBundleData.MinimumActiveLinks
    leafs["maximum-active-links"] = actorBundleData.MaximumActiveLinks
    leafs["maximum-active-links-source"] = actorBundleData.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = actorBundleData.MinimumBandwidth
    leafs["primary-member"] = actorBundleData.PrimaryMember
    leafs["bundle-status"] = actorBundleData.BundleStatus
    leafs["active-member-count"] = actorBundleData.ActiveMemberCount
    leafs["standby-member-count"] = actorBundleData.StandbyMemberCount
    leafs["configured-member-count"] = actorBundleData.ConfiguredMemberCount
    leafs["mac-source"] = actorBundleData.MacSource
    leafs["mac-source-member"] = actorBundleData.MacSourceMember
    leafs["inter-chassis"] = actorBundleData.InterChassis
    leafs["is-active"] = actorBundleData.IsActive
    leafs["lacp-status"] = actorBundleData.LacpStatus
    leafs["mlacp-status"] = actorBundleData.MlacpStatus
    leafs["ipv4bfd-status"] = actorBundleData.Ipv4BfdStatus
    leafs["link-order-status"] = actorBundleData.LinkOrderStatus
    leafs["ipv6bfd-status"] = actorBundleData.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = actorBundleData.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = actorBundleData.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = actorBundleData.SuppressionTimer
    leafs["wait-while-timer"] = actorBundleData.WaitWhileTimer
    leafs["collector-max-delay"] = actorBundleData.CollectorMaxDelay
    leafs["cisco-extensions"] = actorBundleData.CiscoExtensions
    leafs["lacp-nonrevertive"] = actorBundleData.LacpNonrevertive
    leafs["iccp-group-id"] = actorBundleData.IccpGroupId
    leafs["active-foreign-member-count"] = actorBundleData.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = actorBundleData.ConfiguredForeignMemberCount
    leafs["switchover-type"] = actorBundleData.SwitchoverType
    leafs["maximize-threshold-value-links"] = actorBundleData.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = actorBundleData.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = actorBundleData.MlacpMode
    leafs["recovery-delay"] = actorBundleData.RecoveryDelay
    leafs["singleton"] = actorBundleData.Singleton
    return leafs
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetYangName() string { return "actor-bundle-data" }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) SetParent(parent types.Entity) { actorBundleData.parent = parent }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetParent() types.Entity { return actorBundleData.parent }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData) GetParentYangName() string { return "lacp-bundle-item" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress
// MAC address of this member
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_MacAddress) GetParentYangName() string { return "actor-bundle-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig) GetParentYangName() string { return "actor-bundle-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_ActorBundleData_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId
// System ID for the bundle
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetFilter() yfilter.YFilter { return bundleSystemId.YFilter }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) SetFilter(yf yfilter.YFilter) { bundleSystemId.YFilter = yf }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetSegmentPath() string {
    return "bundle-system-id"
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &bundleSystemId.SystemMacAddr
    }
    return nil
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &bundleSystemId.SystemMacAddr
    return children
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = bundleSystemId.SystemPrio
    return leafs
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetBundleName() string { return "cisco_ios_xr" }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetYangName() string { return "bundle-system-id" }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) SetParent(parent types.Entity) { bundleSystemId.parent = parent }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetParent() types.Entity { return bundleSystemId.parent }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId) GetParentYangName() string { return "lacp-bundle-item" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleItem_BundleSystemId_SystemMacAddr) GetParentYangName() string { return "bundle-system-id" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant
// Data for this item and all its members
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData

    // Member information. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData.
    MemberData []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData
}

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetFilter() yfilter.YFilter { return lacpBundleDescendant.YFilter }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) SetFilter(yf yfilter.YFilter) { lacpBundleDescendant.YFilter = yf }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetSegmentPath() string {
    return "lacp-bundle-descendant"
}

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &lacpBundleDescendant.BundleData
    }
    if childYangName == "member-data" {
        for _, c := range lacpBundleDescendant.MemberData {
            if lacpBundleDescendant.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData{}
        lacpBundleDescendant.MemberData = append(lacpBundleDescendant.MemberData, child)
        return &lacpBundleDescendant.MemberData[len(lacpBundleDescendant.MemberData)-1]
    }
    return nil
}

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &lacpBundleDescendant.BundleData
    for i := range lacpBundleDescendant.MemberData {
        children[lacpBundleDescendant.MemberData[i].GetSegmentPath()] = &lacpBundleDescendant.MemberData[i]
    }
    return children
}

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetYangName() string { return "lacp-bundle-descendant" }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) SetParent(parent types.Entity) { lacpBundleDescendant.parent = parent }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetParent() types.Entity { return lacpBundleDescendant.parent }

func (lacpBundleDescendant *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant) GetParentYangName() string { return "lacp-bundle" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData
// Bundle information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData

    // System ID for the bundle.
    BundleSystemId BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId
}

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetGoName(yname string) string {
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "actor-bundle-data" { return "ActorBundleData" }
    if yname == "bundle-system-id" { return "BundleSystemId" }
    return ""
}

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-bundle-data" {
        return &bundleData.ActorBundleData
    }
    if childYangName == "bundle-system-id" {
        return &bundleData.BundleSystemId
    }
    return nil
}

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-bundle-data"] = &bundleData.ActorBundleData
    children["bundle-system-id"] = &bundleData.BundleSystemId
    return children
}

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["actor-operational-key"] = bundleData.ActorOperationalKey
    leafs["partner-system-priority"] = bundleData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = bundleData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = bundleData.PartnerOperationalKey
    return leafs
}

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData) GetParentYangName() string { return "lacp-bundle-descendant" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData
// Basic bundle information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig.
    BfdConfig []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetFilter() yfilter.YFilter { return actorBundleData.YFilter }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) SetFilter(yf yfilter.YFilter) { actorBundleData.YFilter = yf }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetSegmentPath() string {
    return "actor-bundle-data"
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &actorBundleData.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range actorBundleData.BfdConfig {
            if actorBundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig{}
        actorBundleData.BfdConfig = append(actorBundleData.BfdConfig, child)
        return &actorBundleData.BfdConfig[len(actorBundleData.BfdConfig)-1]
    }
    return nil
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &actorBundleData.MacAddress
    for i := range actorBundleData.BfdConfig {
        children[actorBundleData.BfdConfig[i].GetSegmentPath()] = &actorBundleData.BfdConfig[i]
    }
    return children
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = actorBundleData.BundleInterfaceName
    leafs["available-bandwidth"] = actorBundleData.AvailableBandwidth
    leafs["effective-bandwidth"] = actorBundleData.EffectiveBandwidth
    leafs["configured-bandwidth"] = actorBundleData.ConfiguredBandwidth
    leafs["minimum-active-links"] = actorBundleData.MinimumActiveLinks
    leafs["maximum-active-links"] = actorBundleData.MaximumActiveLinks
    leafs["maximum-active-links-source"] = actorBundleData.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = actorBundleData.MinimumBandwidth
    leafs["primary-member"] = actorBundleData.PrimaryMember
    leafs["bundle-status"] = actorBundleData.BundleStatus
    leafs["active-member-count"] = actorBundleData.ActiveMemberCount
    leafs["standby-member-count"] = actorBundleData.StandbyMemberCount
    leafs["configured-member-count"] = actorBundleData.ConfiguredMemberCount
    leafs["mac-source"] = actorBundleData.MacSource
    leafs["mac-source-member"] = actorBundleData.MacSourceMember
    leafs["inter-chassis"] = actorBundleData.InterChassis
    leafs["is-active"] = actorBundleData.IsActive
    leafs["lacp-status"] = actorBundleData.LacpStatus
    leafs["mlacp-status"] = actorBundleData.MlacpStatus
    leafs["ipv4bfd-status"] = actorBundleData.Ipv4BfdStatus
    leafs["link-order-status"] = actorBundleData.LinkOrderStatus
    leafs["ipv6bfd-status"] = actorBundleData.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = actorBundleData.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = actorBundleData.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = actorBundleData.SuppressionTimer
    leafs["wait-while-timer"] = actorBundleData.WaitWhileTimer
    leafs["collector-max-delay"] = actorBundleData.CollectorMaxDelay
    leafs["cisco-extensions"] = actorBundleData.CiscoExtensions
    leafs["lacp-nonrevertive"] = actorBundleData.LacpNonrevertive
    leafs["iccp-group-id"] = actorBundleData.IccpGroupId
    leafs["active-foreign-member-count"] = actorBundleData.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = actorBundleData.ConfiguredForeignMemberCount
    leafs["switchover-type"] = actorBundleData.SwitchoverType
    leafs["maximize-threshold-value-links"] = actorBundleData.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = actorBundleData.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = actorBundleData.MlacpMode
    leafs["recovery-delay"] = actorBundleData.RecoveryDelay
    leafs["singleton"] = actorBundleData.Singleton
    return leafs
}

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetYangName() string { return "actor-bundle-data" }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) SetParent(parent types.Entity) { actorBundleData.parent = parent }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetParent() types.Entity { return actorBundleData.parent }

func (actorBundleData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress
// MAC address of this member
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_MacAddress) GetParentYangName() string { return "actor-bundle-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig) GetParentYangName() string { return "actor-bundle-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId
// System ID for the bundle
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetFilter() yfilter.YFilter { return bundleSystemId.YFilter }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) SetFilter(yf yfilter.YFilter) { bundleSystemId.YFilter = yf }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetSegmentPath() string {
    return "bundle-system-id"
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &bundleSystemId.SystemMacAddr
    }
    return nil
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &bundleSystemId.SystemMacAddr
    return children
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = bundleSystemId.SystemPrio
    return leafs
}

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetBundleName() string { return "cisco_ios_xr" }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetYangName() string { return "bundle-system-id" }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) SetParent(parent types.Entity) { bundleSystemId.parent = parent }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetParent() types.Entity { return bundleSystemId.parent }

func (bundleSystemId *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_BundleData_BundleSystemId_SystemMacAddr) GetParentYangName() string { return "bundle-system-id" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData
// Member information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo
}

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetGoName(yname string) string {
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "selection-state" { return "SelectionState" }
    if yname == "period-state" { return "PeriodState" }
    if yname == "receive-machine-state" { return "ReceiveMachineState" }
    if yname == "mux-state" { return "MuxState" }
    if yname == "actor-churn-state" { return "ActorChurnState" }
    if yname == "partner-churn-state" { return "PartnerChurnState" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "actor-info" { return "ActorInfo" }
    if yname == "partner-info" { return "PartnerInfo" }
    if yname == "additional-info" { return "AdditionalInfo" }
    return ""
}

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-info" {
        return &memberData.ActorInfo
    }
    if childYangName == "partner-info" {
        return &memberData.PartnerInfo
    }
    if childYangName == "additional-info" {
        return &memberData.AdditionalInfo
    }
    return nil
}

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-info"] = &memberData.ActorInfo
    children["partner-info"] = &memberData.PartnerInfo
    children["additional-info"] = &memberData.AdditionalInfo
    return children
}

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["selected-aggregator-id"] = memberData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = memberData.AttachedAggregatorId
    leafs["selection-state"] = memberData.SelectionState
    leafs["period-state"] = memberData.PeriodState
    leafs["receive-machine-state"] = memberData.ReceiveMachineState
    leafs["mux-state"] = memberData.MuxState
    leafs["actor-churn-state"] = memberData.ActorChurnState
    leafs["partner-churn-state"] = memberData.PartnerChurnState
    leafs["iccp-group-id"] = memberData.IccpGroupId
    return leafs
}

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData) GetParentYangName() string { return "lacp-bundle-descendant" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetFilter() yfilter.YFilter { return actorInfo.YFilter }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) SetFilter(yf yfilter.YFilter) { actorInfo.YFilter = yf }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetSegmentPath() string {
    return "actor-info"
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &actorInfo.PortInfo
    }
    return nil
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &actorInfo.PortInfo
    return children
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = actorInfo.TxPeriod
    return leafs
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetBundleName() string { return "cisco_ios_xr" }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetYangName() string { return "actor-info" }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) SetParent(parent types.Entity) { actorInfo.parent = parent }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetParent() types.Entity { return actorInfo.parent }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo) GetParentYangName() string { return "member-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo) GetParentYangName() string { return "actor-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_ActorInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetFilter() yfilter.YFilter { return partnerInfo.YFilter }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) SetFilter(yf yfilter.YFilter) { partnerInfo.YFilter = yf }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetSegmentPath() string {
    return "partner-info"
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &partnerInfo.PortInfo
    }
    return nil
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &partnerInfo.PortInfo
    return children
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = partnerInfo.TxPeriod
    return leafs
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetBundleName() string { return "cisco_ios_xr" }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetYangName() string { return "partner-info" }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) SetParent(parent types.Entity) { partnerInfo.parent = parent }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetParent() types.Entity { return partnerInfo.parent }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo) GetParentYangName() string { return "member-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo) GetParentYangName() string { return "partner-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_PartnerInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetFilter() yfilter.YFilter { return additionalInfo.YFilter }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) SetFilter(yf yfilter.YFilter) { additionalInfo.YFilter = yf }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetGoName(yname string) string {
    if yname == "mbr-type" { return "MbrType" }
    if yname == "local" { return "Local" }
    if yname == "foreign" { return "Foreign" }
    return ""
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetSegmentPath() string {
    return "additional-info"
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local" {
        return &additionalInfo.Local
    }
    if childYangName == "foreign" {
        return &additionalInfo.Foreign
    }
    return nil
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local"] = &additionalInfo.Local
    children["foreign"] = &additionalInfo.Foreign
    return children
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mbr-type"] = additionalInfo.MbrType
    return leafs
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetBundleName() string { return "cisco_ios_xr" }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetYangName() string { return "additional-info" }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) SetParent(parent types.Entity) { additionalInfo.parent = parent }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetParent() types.Entity { return additionalInfo.parent }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo) GetParentYangName() string { return "member-data" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetFilter() yfilter.YFilter { return local.YFilter }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) SetFilter(yf yfilter.YFilter) { local.YFilter = yf }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    return ""
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetSegmentPath() string {
    return "local"
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = local.InterfaceHandle
    return leafs
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetBundleName() string { return "cisco_ios_xr" }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetYangName() string { return "local" }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) SetParent(parent types.Entity) { local.parent = parent }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetParent() types.Entity { return local.parent }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Local) GetParentYangName() string { return "additional-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetFilter() yfilter.YFilter { return foreign.YFilter }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) SetFilter(yf yfilter.YFilter) { foreign.YFilter = yf }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetGoName(yname string) string {
    if yname == "peer-address" { return "PeerAddress" }
    if yname == "member-name" { return "MemberName" }
    return ""
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetSegmentPath() string {
    return "foreign"
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-address"] = foreign.PeerAddress
    leafs["member-name"] = foreign.MemberName
    return leafs
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetBundleName() string { return "cisco_ios_xr" }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetYangName() string { return "foreign" }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) SetParent(parent types.Entity) { foreign.parent = parent }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetParent() types.Entity { return foreign.parent }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleDescendant_MemberData_AdditionalInfo_Foreign) GetParentYangName() string { return "additional-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers
// Children of bundle with LACP information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle member item with LACP information. The type is slice of
    // BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember.
    LacpBundleChildrenMember []BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember
}

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetFilter() yfilter.YFilter { return lacpBundleChildrenMembers.YFilter }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) SetFilter(yf yfilter.YFilter) { lacpBundleChildrenMembers.YFilter = yf }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetGoName(yname string) string {
    if yname == "lacp-bundle-children-member" { return "LacpBundleChildrenMember" }
    return ""
}

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetSegmentPath() string {
    return "lacp-bundle-children-members"
}

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lacp-bundle-children-member" {
        for _, c := range lacpBundleChildrenMembers.LacpBundleChildrenMember {
            if lacpBundleChildrenMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember{}
        lacpBundleChildrenMembers.LacpBundleChildrenMember = append(lacpBundleChildrenMembers.LacpBundleChildrenMember, child)
        return &lacpBundleChildrenMembers.LacpBundleChildrenMember[len(lacpBundleChildrenMembers.LacpBundleChildrenMember)-1]
    }
    return nil
}

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lacpBundleChildrenMembers.LacpBundleChildrenMember {
        children[lacpBundleChildrenMembers.LacpBundleChildrenMember[i].GetSegmentPath()] = &lacpBundleChildrenMembers.LacpBundleChildrenMember[i]
    }
    return children
}

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetYangName() string { return "lacp-bundle-children-members" }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) SetParent(parent types.Entity) { lacpBundleChildrenMembers.parent = parent }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetParent() types.Entity { return lacpBundleChildrenMembers.parent }

func (lacpBundleChildrenMembers *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers) GetParentYangName() string { return "lacp-bundle" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember
// Bundle member item with LACP information
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo
}

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetFilter() yfilter.YFilter { return lacpBundleChildrenMember.YFilter }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) SetFilter(yf yfilter.YFilter) { lacpBundleChildrenMember.YFilter = yf }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "selection-state" { return "SelectionState" }
    if yname == "period-state" { return "PeriodState" }
    if yname == "receive-machine-state" { return "ReceiveMachineState" }
    if yname == "mux-state" { return "MuxState" }
    if yname == "actor-churn-state" { return "ActorChurnState" }
    if yname == "partner-churn-state" { return "PartnerChurnState" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "actor-info" { return "ActorInfo" }
    if yname == "partner-info" { return "PartnerInfo" }
    if yname == "additional-info" { return "AdditionalInfo" }
    return ""
}

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetSegmentPath() string {
    return "lacp-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", lacpBundleChildrenMember.MemberInterface) + "']"
}

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-info" {
        return &lacpBundleChildrenMember.ActorInfo
    }
    if childYangName == "partner-info" {
        return &lacpBundleChildrenMember.PartnerInfo
    }
    if childYangName == "additional-info" {
        return &lacpBundleChildrenMember.AdditionalInfo
    }
    return nil
}

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-info"] = &lacpBundleChildrenMember.ActorInfo
    children["partner-info"] = &lacpBundleChildrenMember.PartnerInfo
    children["additional-info"] = &lacpBundleChildrenMember.AdditionalInfo
    return children
}

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = lacpBundleChildrenMember.MemberInterface
    leafs["selected-aggregator-id"] = lacpBundleChildrenMember.SelectedAggregatorId
    leafs["attached-aggregator-id"] = lacpBundleChildrenMember.AttachedAggregatorId
    leafs["selection-state"] = lacpBundleChildrenMember.SelectionState
    leafs["period-state"] = lacpBundleChildrenMember.PeriodState
    leafs["receive-machine-state"] = lacpBundleChildrenMember.ReceiveMachineState
    leafs["mux-state"] = lacpBundleChildrenMember.MuxState
    leafs["actor-churn-state"] = lacpBundleChildrenMember.ActorChurnState
    leafs["partner-churn-state"] = lacpBundleChildrenMember.PartnerChurnState
    leafs["iccp-group-id"] = lacpBundleChildrenMember.IccpGroupId
    return leafs
}

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetYangName() string { return "lacp-bundle-children-member" }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) SetParent(parent types.Entity) { lacpBundleChildrenMember.parent = parent }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetParent() types.Entity { return lacpBundleChildrenMember.parent }

func (lacpBundleChildrenMember *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember) GetParentYangName() string { return "lacp-bundle-children-members" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetFilter() yfilter.YFilter { return actorInfo.YFilter }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) SetFilter(yf yfilter.YFilter) { actorInfo.YFilter = yf }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetSegmentPath() string {
    return "actor-info"
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &actorInfo.PortInfo
    }
    return nil
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &actorInfo.PortInfo
    return children
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = actorInfo.TxPeriod
    return leafs
}

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetBundleName() string { return "cisco_ios_xr" }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetYangName() string { return "actor-info" }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) SetParent(parent types.Entity) { actorInfo.parent = parent }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetParent() types.Entity { return actorInfo.parent }

func (actorInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo) GetParentYangName() string { return "lacp-bundle-children-member" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo) GetParentYangName() string { return "actor-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_ActorInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetFilter() yfilter.YFilter { return partnerInfo.YFilter }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) SetFilter(yf yfilter.YFilter) { partnerInfo.YFilter = yf }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetSegmentPath() string {
    return "partner-info"
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &partnerInfo.PortInfo
    }
    return nil
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &partnerInfo.PortInfo
    return children
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = partnerInfo.TxPeriod
    return leafs
}

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetBundleName() string { return "cisco_ios_xr" }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetYangName() string { return "partner-info" }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) SetParent(parent types.Entity) { partnerInfo.parent = parent }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetParent() types.Entity { return partnerInfo.parent }

func (partnerInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo) GetParentYangName() string { return "lacp-bundle-children-member" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo) GetParentYangName() string { return "partner-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_PartnerInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetFilter() yfilter.YFilter { return additionalInfo.YFilter }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) SetFilter(yf yfilter.YFilter) { additionalInfo.YFilter = yf }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetGoName(yname string) string {
    if yname == "mbr-type" { return "MbrType" }
    if yname == "local" { return "Local" }
    if yname == "foreign" { return "Foreign" }
    return ""
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetSegmentPath() string {
    return "additional-info"
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local" {
        return &additionalInfo.Local
    }
    if childYangName == "foreign" {
        return &additionalInfo.Foreign
    }
    return nil
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local"] = &additionalInfo.Local
    children["foreign"] = &additionalInfo.Foreign
    return children
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mbr-type"] = additionalInfo.MbrType
    return leafs
}

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetBundleName() string { return "cisco_ios_xr" }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetYangName() string { return "additional-info" }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) SetParent(parent types.Entity) { additionalInfo.parent = parent }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetParent() types.Entity { return additionalInfo.parent }

func (additionalInfo *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo) GetParentYangName() string { return "lacp-bundle-children-member" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetFilter() yfilter.YFilter { return local.YFilter }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) SetFilter(yf yfilter.YFilter) { local.YFilter = yf }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    return ""
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetSegmentPath() string {
    return "local"
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = local.InterfaceHandle
    return leafs
}

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetBundleName() string { return "cisco_ios_xr" }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetYangName() string { return "local" }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) SetParent(parent types.Entity) { local.parent = parent }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetParent() types.Entity { return local.parent }

func (local *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Local) GetParentYangName() string { return "additional-info" }

// BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetFilter() yfilter.YFilter { return foreign.YFilter }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) SetFilter(yf yfilter.YFilter) { foreign.YFilter = yf }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetGoName(yname string) string {
    if yname == "peer-address" { return "PeerAddress" }
    if yname == "member-name" { return "MemberName" }
    return ""
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetSegmentPath() string {
    return "foreign"
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-address"] = foreign.PeerAddress
    leafs["member-name"] = foreign.MemberName
    return leafs
}

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetBundleName() string { return "cisco_ios_xr" }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetYangName() string { return "foreign" }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) SetParent(parent types.Entity) { foreign.parent = parent }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetParent() types.Entity { return foreign.parent }

func (foreign *BundleInformation_Lacp_LacpBundles_LacpBundle_LacpBundleChildrenMembers_LacpBundleChildrenMember_AdditionalInfo_Foreign) GetParentYangName() string { return "additional-info" }

// BundleInformation_Lacp_LacpMembers
// Member interfaces with LACP information
type BundleInformation_Lacp_LacpMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_Lacp_LacpMembers_LacpMember.
    LacpMember []BundleInformation_Lacp_LacpMembers_LacpMember
}

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetFilter() yfilter.YFilter { return lacpMembers.YFilter }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) SetFilter(yf yfilter.YFilter) { lacpMembers.YFilter = yf }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetGoName(yname string) string {
    if yname == "lacp-member" { return "LacpMember" }
    return ""
}

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetSegmentPath() string {
    return "lacp-members"
}

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lacp-member" {
        for _, c := range lacpMembers.LacpMember {
            if lacpMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpMembers_LacpMember{}
        lacpMembers.LacpMember = append(lacpMembers.LacpMember, child)
        return &lacpMembers.LacpMember[len(lacpMembers.LacpMember)-1]
    }
    return nil
}

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lacpMembers.LacpMember {
        children[lacpMembers.LacpMember[i].GetSegmentPath()] = &lacpMembers.LacpMember[i]
    }
    return children
}

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetBundleName() string { return "cisco_ios_xr" }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetYangName() string { return "lacp-members" }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) SetParent(parent types.Entity) { lacpMembers.parent = parent }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetParent() types.Entity { return lacpMembers.parent }

func (lacpMembers *BundleInformation_Lacp_LacpMembers) GetParentYangName() string { return "lacp" }

// BundleInformation_Lacp_LacpMembers_LacpMember
// Member interface
type BundleInformation_Lacp_LacpMembers_LacpMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    LacpMemberAncestor BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor

    // Data for this item.
    LacpMemberItem BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem
}

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetFilter() yfilter.YFilter { return lacpMember.YFilter }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) SetFilter(yf yfilter.YFilter) { lacpMember.YFilter = yf }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "lacp-member-ancestor" { return "LacpMemberAncestor" }
    if yname == "lacp-member-item" { return "LacpMemberItem" }
    return ""
}

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetSegmentPath() string {
    return "lacp-member" + "[member-interface='" + fmt.Sprintf("%v", lacpMember.MemberInterface) + "']"
}

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lacp-member-ancestor" {
        return &lacpMember.LacpMemberAncestor
    }
    if childYangName == "lacp-member-item" {
        return &lacpMember.LacpMemberItem
    }
    return nil
}

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lacp-member-ancestor"] = &lacpMember.LacpMemberAncestor
    children["lacp-member-item"] = &lacpMember.LacpMemberItem
    return children
}

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = lacpMember.MemberInterface
    return leafs
}

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetBundleName() string { return "cisco_ios_xr" }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetYangName() string { return "lacp-member" }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) SetParent(parent types.Entity) { lacpMember.parent = parent }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetParent() types.Entity { return lacpMember.parent }

func (lacpMember *BundleInformation_Lacp_LacpMembers_LacpMember) GetParentYangName() string { return "lacp-members" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle information.
    BundleData BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData

    // Member information. The type is slice of
    // BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData.
    MemberData []BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData
}

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetFilter() yfilter.YFilter { return lacpMemberAncestor.YFilter }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) SetFilter(yf yfilter.YFilter) { lacpMemberAncestor.YFilter = yf }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetSegmentPath() string {
    return "lacp-member-ancestor"
}

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &lacpMemberAncestor.BundleData
    }
    if childYangName == "member-data" {
        for _, c := range lacpMemberAncestor.MemberData {
            if lacpMemberAncestor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData{}
        lacpMemberAncestor.MemberData = append(lacpMemberAncestor.MemberData, child)
        return &lacpMemberAncestor.MemberData[len(lacpMemberAncestor.MemberData)-1]
    }
    return nil
}

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &lacpMemberAncestor.BundleData
    for i := range lacpMemberAncestor.MemberData {
        children[lacpMemberAncestor.MemberData[i].GetSegmentPath()] = &lacpMemberAncestor.MemberData[i]
    }
    return children
}

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetBundleName() string { return "cisco_ios_xr" }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetYangName() string { return "lacp-member-ancestor" }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) SetParent(parent types.Entity) { lacpMemberAncestor.parent = parent }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetParent() types.Entity { return lacpMemberAncestor.parent }

func (lacpMemberAncestor *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor) GetParentYangName() string { return "lacp-member" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData
// Bundle information
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational key of the interface. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // Priority of the partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key of the partner. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // Basic bundle information.
    ActorBundleData BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData

    // System ID for the bundle.
    BundleSystemId BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId
}

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetGoName(yname string) string {
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "actor-bundle-data" { return "ActorBundleData" }
    if yname == "bundle-system-id" { return "BundleSystemId" }
    return ""
}

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-bundle-data" {
        return &bundleData.ActorBundleData
    }
    if childYangName == "bundle-system-id" {
        return &bundleData.BundleSystemId
    }
    return nil
}

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-bundle-data"] = &bundleData.ActorBundleData
    children["bundle-system-id"] = &bundleData.BundleSystemId
    return children
}

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["actor-operational-key"] = bundleData.ActorOperationalKey
    leafs["partner-system-priority"] = bundleData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = bundleData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = bundleData.PartnerOperationalKey
    return leafs
}

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData) GetParentYangName() string { return "lacp-member-ancestor" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData
// Basic bundle information
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig.
    BfdConfig []BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig
}

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetFilter() yfilter.YFilter { return actorBundleData.YFilter }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) SetFilter(yf yfilter.YFilter) { actorBundleData.YFilter = yf }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetSegmentPath() string {
    return "actor-bundle-data"
}

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &actorBundleData.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range actorBundleData.BfdConfig {
            if actorBundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig{}
        actorBundleData.BfdConfig = append(actorBundleData.BfdConfig, child)
        return &actorBundleData.BfdConfig[len(actorBundleData.BfdConfig)-1]
    }
    return nil
}

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &actorBundleData.MacAddress
    for i := range actorBundleData.BfdConfig {
        children[actorBundleData.BfdConfig[i].GetSegmentPath()] = &actorBundleData.BfdConfig[i]
    }
    return children
}

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = actorBundleData.BundleInterfaceName
    leafs["available-bandwidth"] = actorBundleData.AvailableBandwidth
    leafs["effective-bandwidth"] = actorBundleData.EffectiveBandwidth
    leafs["configured-bandwidth"] = actorBundleData.ConfiguredBandwidth
    leafs["minimum-active-links"] = actorBundleData.MinimumActiveLinks
    leafs["maximum-active-links"] = actorBundleData.MaximumActiveLinks
    leafs["maximum-active-links-source"] = actorBundleData.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = actorBundleData.MinimumBandwidth
    leafs["primary-member"] = actorBundleData.PrimaryMember
    leafs["bundle-status"] = actorBundleData.BundleStatus
    leafs["active-member-count"] = actorBundleData.ActiveMemberCount
    leafs["standby-member-count"] = actorBundleData.StandbyMemberCount
    leafs["configured-member-count"] = actorBundleData.ConfiguredMemberCount
    leafs["mac-source"] = actorBundleData.MacSource
    leafs["mac-source-member"] = actorBundleData.MacSourceMember
    leafs["inter-chassis"] = actorBundleData.InterChassis
    leafs["is-active"] = actorBundleData.IsActive
    leafs["lacp-status"] = actorBundleData.LacpStatus
    leafs["mlacp-status"] = actorBundleData.MlacpStatus
    leafs["ipv4bfd-status"] = actorBundleData.Ipv4BfdStatus
    leafs["link-order-status"] = actorBundleData.LinkOrderStatus
    leafs["ipv6bfd-status"] = actorBundleData.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = actorBundleData.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = actorBundleData.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = actorBundleData.SuppressionTimer
    leafs["wait-while-timer"] = actorBundleData.WaitWhileTimer
    leafs["collector-max-delay"] = actorBundleData.CollectorMaxDelay
    leafs["cisco-extensions"] = actorBundleData.CiscoExtensions
    leafs["lacp-nonrevertive"] = actorBundleData.LacpNonrevertive
    leafs["iccp-group-id"] = actorBundleData.IccpGroupId
    leafs["active-foreign-member-count"] = actorBundleData.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = actorBundleData.ConfiguredForeignMemberCount
    leafs["switchover-type"] = actorBundleData.SwitchoverType
    leafs["maximize-threshold-value-links"] = actorBundleData.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = actorBundleData.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = actorBundleData.MlacpMode
    leafs["recovery-delay"] = actorBundleData.RecoveryDelay
    leafs["singleton"] = actorBundleData.Singleton
    return leafs
}

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetYangName() string { return "actor-bundle-data" }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) SetParent(parent types.Entity) { actorBundleData.parent = parent }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetParent() types.Entity { return actorBundleData.parent }

func (actorBundleData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress
// MAC address of this member
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_MacAddress) GetParentYangName() string { return "actor-bundle-data" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig) GetParentYangName() string { return "actor-bundle-data" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_ActorBundleData_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId
// System ID for the bundle
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr
}

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetFilter() yfilter.YFilter { return bundleSystemId.YFilter }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) SetFilter(yf yfilter.YFilter) { bundleSystemId.YFilter = yf }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetSegmentPath() string {
    return "bundle-system-id"
}

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &bundleSystemId.SystemMacAddr
    }
    return nil
}

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &bundleSystemId.SystemMacAddr
    return children
}

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = bundleSystemId.SystemPrio
    return leafs
}

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetBundleName() string { return "cisco_ios_xr" }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetYangName() string { return "bundle-system-id" }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) SetParent(parent types.Entity) { bundleSystemId.parent = parent }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetParent() types.Entity { return bundleSystemId.parent }

func (bundleSystemId *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_BundleData_BundleSystemId_SystemMacAddr) GetParentYangName() string { return "bundle-system-id" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData
// Member information
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo
}

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetGoName(yname string) string {
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "selection-state" { return "SelectionState" }
    if yname == "period-state" { return "PeriodState" }
    if yname == "receive-machine-state" { return "ReceiveMachineState" }
    if yname == "mux-state" { return "MuxState" }
    if yname == "actor-churn-state" { return "ActorChurnState" }
    if yname == "partner-churn-state" { return "PartnerChurnState" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "actor-info" { return "ActorInfo" }
    if yname == "partner-info" { return "PartnerInfo" }
    if yname == "additional-info" { return "AdditionalInfo" }
    return ""
}

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-info" {
        return &memberData.ActorInfo
    }
    if childYangName == "partner-info" {
        return &memberData.PartnerInfo
    }
    if childYangName == "additional-info" {
        return &memberData.AdditionalInfo
    }
    return nil
}

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-info"] = &memberData.ActorInfo
    children["partner-info"] = &memberData.PartnerInfo
    children["additional-info"] = &memberData.AdditionalInfo
    return children
}

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["selected-aggregator-id"] = memberData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = memberData.AttachedAggregatorId
    leafs["selection-state"] = memberData.SelectionState
    leafs["period-state"] = memberData.PeriodState
    leafs["receive-machine-state"] = memberData.ReceiveMachineState
    leafs["mux-state"] = memberData.MuxState
    leafs["actor-churn-state"] = memberData.ActorChurnState
    leafs["partner-churn-state"] = memberData.PartnerChurnState
    leafs["iccp-group-id"] = memberData.IccpGroupId
    return leafs
}

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData) GetParentYangName() string { return "lacp-member-ancestor" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetFilter() yfilter.YFilter { return actorInfo.YFilter }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) SetFilter(yf yfilter.YFilter) { actorInfo.YFilter = yf }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetSegmentPath() string {
    return "actor-info"
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &actorInfo.PortInfo
    }
    return nil
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &actorInfo.PortInfo
    return children
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = actorInfo.TxPeriod
    return leafs
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetBundleName() string { return "cisco_ios_xr" }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetYangName() string { return "actor-info" }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) SetParent(parent types.Entity) { actorInfo.parent = parent }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetParent() types.Entity { return actorInfo.parent }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo) GetParentYangName() string { return "member-data" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo) GetParentYangName() string { return "actor-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_ActorInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetFilter() yfilter.YFilter { return partnerInfo.YFilter }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) SetFilter(yf yfilter.YFilter) { partnerInfo.YFilter = yf }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetSegmentPath() string {
    return "partner-info"
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &partnerInfo.PortInfo
    }
    return nil
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &partnerInfo.PortInfo
    return children
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = partnerInfo.TxPeriod
    return leafs
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetBundleName() string { return "cisco_ios_xr" }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetYangName() string { return "partner-info" }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) SetParent(parent types.Entity) { partnerInfo.parent = parent }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetParent() types.Entity { return partnerInfo.parent }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo) GetParentYangName() string { return "member-data" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo) GetParentYangName() string { return "partner-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_PartnerInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetFilter() yfilter.YFilter { return additionalInfo.YFilter }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) SetFilter(yf yfilter.YFilter) { additionalInfo.YFilter = yf }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetGoName(yname string) string {
    if yname == "mbr-type" { return "MbrType" }
    if yname == "local" { return "Local" }
    if yname == "foreign" { return "Foreign" }
    return ""
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetSegmentPath() string {
    return "additional-info"
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local" {
        return &additionalInfo.Local
    }
    if childYangName == "foreign" {
        return &additionalInfo.Foreign
    }
    return nil
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local"] = &additionalInfo.Local
    children["foreign"] = &additionalInfo.Foreign
    return children
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mbr-type"] = additionalInfo.MbrType
    return leafs
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetBundleName() string { return "cisco_ios_xr" }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetYangName() string { return "additional-info" }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) SetParent(parent types.Entity) { additionalInfo.parent = parent }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetParent() types.Entity { return additionalInfo.parent }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo) GetParentYangName() string { return "member-data" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetFilter() yfilter.YFilter { return local.YFilter }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) SetFilter(yf yfilter.YFilter) { local.YFilter = yf }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    return ""
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetSegmentPath() string {
    return "local"
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = local.InterfaceHandle
    return leafs
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetBundleName() string { return "cisco_ios_xr" }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetYangName() string { return "local" }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) SetParent(parent types.Entity) { local.parent = parent }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetParent() types.Entity { return local.parent }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Local) GetParentYangName() string { return "additional-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetFilter() yfilter.YFilter { return foreign.YFilter }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) SetFilter(yf yfilter.YFilter) { foreign.YFilter = yf }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetGoName(yname string) string {
    if yname == "peer-address" { return "PeerAddress" }
    if yname == "member-name" { return "MemberName" }
    return ""
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetSegmentPath() string {
    return "foreign"
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-address"] = foreign.PeerAddress
    leafs["member-name"] = foreign.MemberName
    return leafs
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetBundleName() string { return "cisco_ios_xr" }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetYangName() string { return "foreign" }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) SetParent(parent types.Entity) { foreign.parent = parent }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetParent() types.Entity { return foreign.parent }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberAncestor_MemberData_AdditionalInfo_Foreign) GetParentYangName() string { return "additional-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem
// Data for this item
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // State of the Selection Logic state machine. The type is LacpSelState.
    SelectionState interface{}

    // State of the Period state machine. The type is LacpPeriodState.
    PeriodState interface{}

    // State of the RX state machine. The type is Rxstates.
    ReceiveMachineState interface{}

    // State of the Mux state machine. The type is BmMuxstate.
    MuxState interface{}

    // State of the Churn state machine for the Actor. The type is
    // LacpChurnstates.
    ActorChurnState interface{}

    // State of the Churn state machine for the Partner. The type is
    // LacpChurnstates.
    PartnerChurnState interface{}

    // The ID of the ICCP group that the link is configured on. The type is
    // interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // LACP information for the port from the actor.
    ActorInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo

    // LACP information for the port from the partner.
    PartnerInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo

    // Additional information for the link.
    AdditionalInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo
}

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetFilter() yfilter.YFilter { return lacpMemberItem.YFilter }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) SetFilter(yf yfilter.YFilter) { lacpMemberItem.YFilter = yf }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetGoName(yname string) string {
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "selection-state" { return "SelectionState" }
    if yname == "period-state" { return "PeriodState" }
    if yname == "receive-machine-state" { return "ReceiveMachineState" }
    if yname == "mux-state" { return "MuxState" }
    if yname == "actor-churn-state" { return "ActorChurnState" }
    if yname == "partner-churn-state" { return "PartnerChurnState" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "actor-info" { return "ActorInfo" }
    if yname == "partner-info" { return "PartnerInfo" }
    if yname == "additional-info" { return "AdditionalInfo" }
    return ""
}

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetSegmentPath() string {
    return "lacp-member-item"
}

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "actor-info" {
        return &lacpMemberItem.ActorInfo
    }
    if childYangName == "partner-info" {
        return &lacpMemberItem.PartnerInfo
    }
    if childYangName == "additional-info" {
        return &lacpMemberItem.AdditionalInfo
    }
    return nil
}

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["actor-info"] = &lacpMemberItem.ActorInfo
    children["partner-info"] = &lacpMemberItem.PartnerInfo
    children["additional-info"] = &lacpMemberItem.AdditionalInfo
    return children
}

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["selected-aggregator-id"] = lacpMemberItem.SelectedAggregatorId
    leafs["attached-aggregator-id"] = lacpMemberItem.AttachedAggregatorId
    leafs["selection-state"] = lacpMemberItem.SelectionState
    leafs["period-state"] = lacpMemberItem.PeriodState
    leafs["receive-machine-state"] = lacpMemberItem.ReceiveMachineState
    leafs["mux-state"] = lacpMemberItem.MuxState
    leafs["actor-churn-state"] = lacpMemberItem.ActorChurnState
    leafs["partner-churn-state"] = lacpMemberItem.PartnerChurnState
    leafs["iccp-group-id"] = lacpMemberItem.IccpGroupId
    return leafs
}

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetBundleName() string { return "cisco_ios_xr" }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetYangName() string { return "lacp-member-item" }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) SetParent(parent types.Entity) { lacpMemberItem.parent = parent }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetParent() types.Entity { return lacpMemberItem.parent }

func (lacpMemberItem *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem) GetParentYangName() string { return "lacp-member" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo
// LACP information for the port from the actor
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetFilter() yfilter.YFilter { return actorInfo.YFilter }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) SetFilter(yf yfilter.YFilter) { actorInfo.YFilter = yf }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetSegmentPath() string {
    return "actor-info"
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &actorInfo.PortInfo
    }
    return nil
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &actorInfo.PortInfo
    return children
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = actorInfo.TxPeriod
    return leafs
}

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetBundleName() string { return "cisco_ios_xr" }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetYangName() string { return "actor-info" }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) SetParent(parent types.Entity) { actorInfo.parent = parent }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetParent() types.Entity { return actorInfo.parent }

func (actorInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo) GetParentYangName() string { return "lacp-member-item" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo) GetParentYangName() string { return "actor-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_ActorInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo
// LACP information for the port from the partner
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time (in ms) between transmitting LACPDUs. The type is interface{} with
    // range: 0..4294967295.
    TxPeriod interface{}

    // LACP parameters for this device.
    PortInfo BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetFilter() yfilter.YFilter { return partnerInfo.YFilter }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) SetFilter(yf yfilter.YFilter) { partnerInfo.YFilter = yf }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetGoName(yname string) string {
    if yname == "tx-period" { return "TxPeriod" }
    if yname == "port-info" { return "PortInfo" }
    return ""
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetSegmentPath() string {
    return "partner-info"
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "port-info" {
        return &partnerInfo.PortInfo
    }
    return nil
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["port-info"] = &partnerInfo.PortInfo
    return children
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tx-period"] = partnerInfo.TxPeriod
    return leafs
}

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetBundleName() string { return "cisco_ios_xr" }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetYangName() string { return "partner-info" }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) SetParent(parent types.Entity) { partnerInfo.parent = parent }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetParent() types.Entity { return partnerInfo.parent }

func (partnerInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo) GetParentYangName() string { return "lacp-member-item" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo
// LACP parameters for this device
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // key. The type is interface{} with range: 0..65535.
    Key interface{}

    // state. The type is interface{} with range: 0..255.
    State interface{}

    // system.
    System BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System

    // port.
    Port BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetFilter() yfilter.YFilter { return portInfo.YFilter }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) SetFilter(yf yfilter.YFilter) { portInfo.YFilter = yf }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetGoName(yname string) string {
    if yname == "key" { return "Key" }
    if yname == "state" { return "State" }
    if yname == "system" { return "System" }
    if yname == "port" { return "Port" }
    return ""
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetSegmentPath() string {
    return "port-info"
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system" {
        return &portInfo.System
    }
    if childYangName == "port" {
        return &portInfo.Port
    }
    return nil
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system"] = &portInfo.System
    children["port"] = &portInfo.Port
    return children
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["key"] = portInfo.Key
    leafs["state"] = portInfo.State
    return leafs
}

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetBundleName() string { return "cisco_ios_xr" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetYangName() string { return "port-info" }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) SetParent(parent types.Entity) { portInfo.parent = parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetParent() types.Entity { return portInfo.parent }

func (portInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo) GetParentYangName() string { return "partner-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System
// system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetFilter() yfilter.YFilter { return system.YFilter }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) SetFilter(yf yfilter.YFilter) { system.YFilter = yf }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetSegmentPath() string {
    return "system"
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &system.SystemMacAddr
    }
    return nil
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &system.SystemMacAddr
    return children
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = system.SystemPrio
    return leafs
}

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetBundleName() string { return "cisco_ios_xr" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetYangName() string { return "system" }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) SetParent(parent types.Entity) { system.parent = parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetParent() types.Entity { return system.parent }

func (system *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_System_SystemMacAddr) GetParentYangName() string { return "system" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port
// port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // link priority. The type is interface{} with range: 0..65535.
    LinkPriority interface{}

    // link number. The type is interface{} with range: 0..65535.
    LinkNumber interface{}
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetFilter() yfilter.YFilter { return port.YFilter }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) SetFilter(yf yfilter.YFilter) { port.YFilter = yf }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetGoName(yname string) string {
    if yname == "link-priority" { return "LinkPriority" }
    if yname == "link-number" { return "LinkNumber" }
    return ""
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetSegmentPath() string {
    return "port"
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-priority"] = port.LinkPriority
    leafs["link-number"] = port.LinkNumber
    return leafs
}

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetBundleName() string { return "cisco_ios_xr" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetYangName() string { return "port" }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) SetParent(parent types.Entity) { port.parent = parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetParent() types.Entity { return port.parent }

func (port *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_PartnerInfo_PortInfo_Port) GetParentYangName() string { return "port-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo
// Additional information for the link
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MbrType. The type is BmdMemberTypeEnum.
    MbrType interface{}

    // Information for a local port.
    Local BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local

    // Information for a foreign port.
    Foreign BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetFilter() yfilter.YFilter { return additionalInfo.YFilter }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) SetFilter(yf yfilter.YFilter) { additionalInfo.YFilter = yf }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetGoName(yname string) string {
    if yname == "mbr-type" { return "MbrType" }
    if yname == "local" { return "Local" }
    if yname == "foreign" { return "Foreign" }
    return ""
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetSegmentPath() string {
    return "additional-info"
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local" {
        return &additionalInfo.Local
    }
    if childYangName == "foreign" {
        return &additionalInfo.Foreign
    }
    return nil
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local"] = &additionalInfo.Local
    children["foreign"] = &additionalInfo.Foreign
    return children
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mbr-type"] = additionalInfo.MbrType
    return leafs
}

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetBundleName() string { return "cisco_ios_xr" }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetYangName() string { return "additional-info" }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) SetParent(parent types.Entity) { additionalInfo.parent = parent }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetParent() types.Entity { return additionalInfo.parent }

func (additionalInfo *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo) GetParentYangName() string { return "lacp-member-item" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local
// Information for a local port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetFilter() yfilter.YFilter { return local.YFilter }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) SetFilter(yf yfilter.YFilter) { local.YFilter = yf }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    return ""
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetSegmentPath() string {
    return "local"
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = local.InterfaceHandle
    return leafs
}

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetBundleName() string { return "cisco_ios_xr" }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetYangName() string { return "local" }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) SetParent(parent types.Entity) { local.parent = parent }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetParent() types.Entity { return local.parent }

func (local *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Local) GetParentYangName() string { return "additional-info" }

// BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign
// Information for a foreign port
type BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The LDP address of the device that the link is configured on. The type is
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PeerAddress interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetFilter() yfilter.YFilter { return foreign.YFilter }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) SetFilter(yf yfilter.YFilter) { foreign.YFilter = yf }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetGoName(yname string) string {
    if yname == "peer-address" { return "PeerAddress" }
    if yname == "member-name" { return "MemberName" }
    return ""
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetSegmentPath() string {
    return "foreign"
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["peer-address"] = foreign.PeerAddress
    leafs["member-name"] = foreign.MemberName
    return leafs
}

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetBundleName() string { return "cisco_ios_xr" }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetYangName() string { return "foreign" }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) SetParent(parent types.Entity) { foreign.parent = parent }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetParent() types.Entity { return foreign.parent }

func (foreign *BundleInformation_Lacp_LacpMembers_LacpMember_LacpMemberItem_AdditionalInfo_Foreign) GetParentYangName() string { return "additional-info" }

// BundleInformation_MlacpBundleCounters
// Bundle specific counters of mLACP events
type BundleInformation_MlacpBundleCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Groups with counters of their bundle's mLACP events.
    IccpGroups BundleInformation_MlacpBundleCounters_IccpGroups

    // Bundle interfaces with counters of mLACP events.
    Bundles BundleInformation_MlacpBundleCounters_Bundles

    // Devices with counters of their bundle's mLACP events.
    Nodes BundleInformation_MlacpBundleCounters_Nodes
}

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetFilter() yfilter.YFilter { return mlacpBundleCounters.YFilter }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) SetFilter(yf yfilter.YFilter) { mlacpBundleCounters.YFilter = yf }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetGoName(yname string) string {
    if yname == "iccp-groups" { return "IccpGroups" }
    if yname == "bundles" { return "Bundles" }
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetSegmentPath() string {
    return "mlacp-bundle-counters"
}

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-groups" {
        return &mlacpBundleCounters.IccpGroups
    }
    if childYangName == "bundles" {
        return &mlacpBundleCounters.Bundles
    }
    if childYangName == "nodes" {
        return &mlacpBundleCounters.Nodes
    }
    return nil
}

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-groups"] = &mlacpBundleCounters.IccpGroups
    children["bundles"] = &mlacpBundleCounters.Bundles
    children["nodes"] = &mlacpBundleCounters.Nodes
    return children
}

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetYangName() string { return "mlacp-bundle-counters" }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) SetParent(parent types.Entity) { mlacpBundleCounters.parent = parent }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetParent() types.Entity { return mlacpBundleCounters.parent }

func (mlacpBundleCounters *BundleInformation_MlacpBundleCounters) GetParentYangName() string { return "bundle-information" }

// BundleInformation_MlacpBundleCounters_IccpGroups
// ICCP Groups with counters of their bundle's
// mLACP events
type BundleInformation_MlacpBundleCounters_IccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup.
    IccpGroup []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup
}

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetFilter() yfilter.YFilter { return iccpGroups.YFilter }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) SetFilter(yf yfilter.YFilter) { iccpGroups.YFilter = yf }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    return ""
}

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetSegmentPath() string {
    return "iccp-groups"
}

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group" {
        for _, c := range iccpGroups.IccpGroup {
            if iccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup{}
        iccpGroups.IccpGroup = append(iccpGroups.IccpGroup, child)
        return &iccpGroups.IccpGroup[len(iccpGroups.IccpGroup)-1]
    }
    return nil
}

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroups.IccpGroup {
        children[iccpGroups.IccpGroup[i].GetSegmentPath()] = &iccpGroups.IccpGroup[i]
    }
    return children
}

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetYangName() string { return "iccp-groups" }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) SetParent(parent types.Entity) { iccpGroups.parent = parent }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetParent() types.Entity { return iccpGroups.parent }

func (iccpGroups *BundleInformation_MlacpBundleCounters_IccpGroups) GetParentYangName() string { return "mlacp-bundle-counters" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup
// ICCP Group ID
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    IccpGroupItem BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetFilter() yfilter.YFilter { return iccpGroup.YFilter }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) SetFilter(yf yfilter.YFilter) { iccpGroup.YFilter = yf }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "iccp-group-item" { return "IccpGroupItem" }
    return ""
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetSegmentPath() string {
    return "iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", iccpGroup.IccpGroup) + "']"
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-item" {
        return &iccpGroup.IccpGroupItem
    }
    return nil
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-item"] = &iccpGroup.IccpGroupItem
    return children
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = iccpGroup.IccpGroup
    return leafs
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetYangName() string { return "iccp-group" }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) SetParent(parent types.Entity) { iccpGroup.parent = parent }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetParent() types.Entity { return iccpGroup.parent }

func (iccpGroup *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup) GetParentYangName() string { return "iccp-groups" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem
// Data for this item
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information.
    IccpGroupData BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData

    // Peer device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData.
    NodeData []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData
}

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetFilter() yfilter.YFilter { return iccpGroupItem.YFilter }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) SetFilter(yf yfilter.YFilter) { iccpGroupItem.YFilter = yf }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetGoName(yname string) string {
    if yname == "iccp-group-data" { return "IccpGroupData" }
    if yname == "node-data" { return "NodeData" }
    return ""
}

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetSegmentPath() string {
    return "iccp-group-item"
}

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-data" {
        return &iccpGroupItem.IccpGroupData
    }
    if childYangName == "node-data" {
        for _, c := range iccpGroupItem.NodeData {
            if iccpGroupItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData{}
        iccpGroupItem.NodeData = append(iccpGroupItem.NodeData, child)
        return &iccpGroupItem.NodeData[len(iccpGroupItem.NodeData)-1]
    }
    return nil
}

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-data"] = &iccpGroupItem.IccpGroupData
    for i := range iccpGroupItem.NodeData {
        children[iccpGroupItem.NodeData[i].GetSegmentPath()] = &iccpGroupItem.NodeData[i]
    }
    return children
}

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetYangName() string { return "iccp-group-item" }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) SetParent(parent types.Entity) { iccpGroupItem.parent = parent }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetParent() types.Entity { return iccpGroupItem.parent }

func (iccpGroupItem *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllLocalBundles BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles

    // Local device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetFilter() yfilter.YFilter { return iccpGroupData.YFilter }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) SetFilter(yf yfilter.YFilter) { iccpGroupData.YFilter = yf }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "mlacp-sync-requests-on-all-local-ports" { return "MlacpSyncRequestsOnAllLocalPorts" }
    if yname == "mlacp-sync-requests-on-all-local-bundles" { return "MlacpSyncRequestsOnAllLocalBundles" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetSegmentPath() string {
    return "iccp-group-data"
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-local-ports" {
        return &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts
    }
    if childYangName == "mlacp-sync-requests-on-all-local-bundles" {
        return &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles
    }
    if childYangName == "bundle-data" {
        for _, c := range iccpGroupData.BundleData {
            if iccpGroupData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData{}
        iccpGroupData.BundleData = append(iccpGroupData.BundleData, child)
        return &iccpGroupData.BundleData[len(iccpGroupData.BundleData)-1]
    }
    return nil
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-local-ports"] = &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts
    children["mlacp-sync-requests-on-all-local-bundles"] = &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles
    for i := range iccpGroupData.BundleData {
        children[iccpGroupData.BundleData[i].GetSegmentPath()] = &iccpGroupData.BundleData[i]
    }
    return children
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupData.IccpGroupId
    return leafs
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetYangName() string { return "iccp-group-data" }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) SetParent(parent types.Entity) { iccpGroupData.parent = parent }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetParent() types.Entity { return iccpGroupData.parent }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData) GetParentYangName() string { return "iccp-group-item" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalPorts.YFilter }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-ports"
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalPorts.parent = parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalPorts.parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalBundles.YFilter }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalBundles.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-bundles"
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalBundles.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalBundles.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetYangName() string { return "mlacp-sync-requests-on-all-local-bundles" }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalBundles.parent = parent }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalBundles.parent }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-bundles" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData
// Local device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &bundleData.MlacpTlvCounters
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &bundleData.MlacpTlvCounters
    return children
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    return leafs
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData
// Peer device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData

    // Peer device bundle mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetGoName(yname string) string {
    if yname == "node-data" { return "NodeData" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        return &nodeData.NodeData
    }
    if childYangName == "bundle-data" {
        for _, c := range nodeData.BundleData {
            if nodeData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData{}
        nodeData.BundleData = append(nodeData.BundleData, child)
        return &nodeData.BundleData[len(nodeData.BundleData)-1]
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-data"] = &nodeData.NodeData
    for i := range nodeData.BundleData {
        children[nodeData.BundleData[i].GetSegmentPath()] = &nodeData.BundleData[i]
    }
    return children
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData) GetParentYangName() string { return "iccp-group-item" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllForeignBundles BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "mlacp-sync-requests-on-all-foreign-ports" { return "MlacpSyncRequestsOnAllForeignPorts" }
    if yname == "mlacp-sync-requests-on-all-foreign-bundles" { return "MlacpSyncRequestsOnAllForeignBundles" }
    return ""
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-foreign-ports" {
        return &nodeData.MlacpSyncRequestsOnAllForeignPorts
    }
    if childYangName == "mlacp-sync-requests-on-all-foreign-bundles" {
        return &nodeData.MlacpSyncRequestsOnAllForeignBundles
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-foreign-ports"] = &nodeData.MlacpSyncRequestsOnAllForeignPorts
    children["mlacp-sync-requests-on-all-foreign-bundles"] = &nodeData.MlacpSyncRequestsOnAllForeignBundles
    return children
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeData.NodeId
    return leafs
}

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignPorts.YFilter }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-ports"
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignPorts.parent = parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignPorts.parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignBundles.YFilter }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignBundles.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-bundles"
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignBundles.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignBundles.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-bundles" }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignBundles.parent = parent }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignBundles.parent }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-bundles" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData
// Peer device bundle mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &bundleData.MlacpTlvCounters
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &bundleData.MlacpTlvCounters
    return children
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    return leafs
}

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_IccpGroups_IccpGroup_IccpGroupItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpBundleCounters_Bundles
// Bundle interfaces with counters of mLACP events
type BundleInformation_MlacpBundleCounters_Bundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle.
    Bundle []BundleInformation_MlacpBundleCounters_Bundles_Bundle
}

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetFilter() yfilter.YFilter { return bundles.YFilter }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) SetFilter(yf yfilter.YFilter) { bundles.YFilter = yf }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetGoName(yname string) string {
    if yname == "bundle" { return "Bundle" }
    return ""
}

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetSegmentPath() string {
    return "bundles"
}

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle" {
        for _, c := range bundles.Bundle {
            if bundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Bundles_Bundle{}
        bundles.Bundle = append(bundles.Bundle, child)
        return &bundles.Bundle[len(bundles.Bundle)-1]
    }
    return nil
}

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundles.Bundle {
        children[bundles.Bundle[i].GetSegmentPath()] = &bundles.Bundle[i]
    }
    return children
}

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetBundleName() string { return "cisco_ios_xr" }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetYangName() string { return "bundles" }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) SetParent(parent types.Entity) { bundles.parent = parent }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetParent() types.Entity { return bundles.parent }

func (bundles *BundleInformation_MlacpBundleCounters_Bundles) GetParentYangName() string { return "mlacp-bundle-counters" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle
// Bundle interface
type BundleInformation_MlacpBundleCounters_Bundles_Bundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    BundleItem BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem
}

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetFilter() yfilter.YFilter { return bundle.YFilter }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) SetFilter(yf yfilter.YFilter) { bundle.YFilter = yf }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "bundle-item" { return "BundleItem" }
    return ""
}

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetSegmentPath() string {
    return "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
}

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-item" {
        return &bundle.BundleItem
    }
    return nil
}

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-item"] = &bundle.BundleItem
    return children
}

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = bundle.BundleInterface
    return leafs
}

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetYangName() string { return "bundle" }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) SetParent(parent types.Entity) { bundle.parent = parent }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetParent() types.Entity { return bundle.parent }

func (bundle *BundleInformation_MlacpBundleCounters_Bundles_Bundle) GetParentYangName() string { return "bundles" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem
// Data for this item
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup.
    IccpGroup []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup
}

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetFilter() yfilter.YFilter { return bundleItem.YFilter }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) SetFilter(yf yfilter.YFilter) { bundleItem.YFilter = yf }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    return ""
}

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetSegmentPath() string {
    return "bundle-item"
}

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group" {
        for _, c := range bundleItem.IccpGroup {
            if bundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup{}
        bundleItem.IccpGroup = append(bundleItem.IccpGroup, child)
        return &bundleItem.IccpGroup[len(bundleItem.IccpGroup)-1]
    }
    return nil
}

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleItem.IccpGroup {
        children[bundleItem.IccpGroup[i].GetSegmentPath()] = &bundleItem.IccpGroup[i]
    }
    return children
}

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetYangName() string { return "bundle-item" }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) SetParent(parent types.Entity) { bundleItem.parent = parent }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetParent() types.Entity { return bundleItem.parent }

func (bundleItem *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem) GetParentYangName() string { return "bundle" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information.
    IccpGroupData BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData

    // Peer device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData.
    NodeData []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetFilter() yfilter.YFilter { return iccpGroup.YFilter }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) SetFilter(yf yfilter.YFilter) { iccpGroup.YFilter = yf }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group-data" { return "IccpGroupData" }
    if yname == "node-data" { return "NodeData" }
    return ""
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetSegmentPath() string {
    return "iccp-group"
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-data" {
        return &iccpGroup.IccpGroupData
    }
    if childYangName == "node-data" {
        for _, c := range iccpGroup.NodeData {
            if iccpGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData{}
        iccpGroup.NodeData = append(iccpGroup.NodeData, child)
        return &iccpGroup.NodeData[len(iccpGroup.NodeData)-1]
    }
    return nil
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-data"] = &iccpGroup.IccpGroupData
    for i := range iccpGroup.NodeData {
        children[iccpGroup.NodeData[i].GetSegmentPath()] = &iccpGroup.NodeData[i]
    }
    return children
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetYangName() string { return "iccp-group" }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) SetParent(parent types.Entity) { iccpGroup.parent = parent }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetParent() types.Entity { return iccpGroup.parent }

func (iccpGroup *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup) GetParentYangName() string { return "bundle-item" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllLocalBundles BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles

    // Local device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetFilter() yfilter.YFilter { return iccpGroupData.YFilter }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) SetFilter(yf yfilter.YFilter) { iccpGroupData.YFilter = yf }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "mlacp-sync-requests-on-all-local-ports" { return "MlacpSyncRequestsOnAllLocalPorts" }
    if yname == "mlacp-sync-requests-on-all-local-bundles" { return "MlacpSyncRequestsOnAllLocalBundles" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetSegmentPath() string {
    return "iccp-group-data"
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-local-ports" {
        return &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts
    }
    if childYangName == "mlacp-sync-requests-on-all-local-bundles" {
        return &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles
    }
    if childYangName == "bundle-data" {
        for _, c := range iccpGroupData.BundleData {
            if iccpGroupData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData{}
        iccpGroupData.BundleData = append(iccpGroupData.BundleData, child)
        return &iccpGroupData.BundleData[len(iccpGroupData.BundleData)-1]
    }
    return nil
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-local-ports"] = &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts
    children["mlacp-sync-requests-on-all-local-bundles"] = &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles
    for i := range iccpGroupData.BundleData {
        children[iccpGroupData.BundleData[i].GetSegmentPath()] = &iccpGroupData.BundleData[i]
    }
    return children
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupData.IccpGroupId
    return leafs
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetYangName() string { return "iccp-group-data" }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) SetParent(parent types.Entity) { iccpGroupData.parent = parent }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetParent() types.Entity { return iccpGroupData.parent }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalPorts.YFilter }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-ports"
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalPorts.parent = parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalPorts.parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalBundles.YFilter }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalBundles.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-bundles"
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalBundles.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalBundles.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetYangName() string { return "mlacp-sync-requests-on-all-local-bundles" }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalBundles.parent = parent }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalBundles.parent }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-bundles" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData
// Local device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &bundleData.MlacpTlvCounters
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &bundleData.MlacpTlvCounters
    return children
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    return leafs
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData
// Peer device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData

    // Peer device bundle mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetGoName(yname string) string {
    if yname == "node-data" { return "NodeData" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        return &nodeData.NodeData
    }
    if childYangName == "bundle-data" {
        for _, c := range nodeData.BundleData {
            if nodeData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData{}
        nodeData.BundleData = append(nodeData.BundleData, child)
        return &nodeData.BundleData[len(nodeData.BundleData)-1]
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-data"] = &nodeData.NodeData
    for i := range nodeData.BundleData {
        children[nodeData.BundleData[i].GetSegmentPath()] = &nodeData.BundleData[i]
    }
    return children
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllForeignBundles BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "mlacp-sync-requests-on-all-foreign-ports" { return "MlacpSyncRequestsOnAllForeignPorts" }
    if yname == "mlacp-sync-requests-on-all-foreign-bundles" { return "MlacpSyncRequestsOnAllForeignBundles" }
    return ""
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-foreign-ports" {
        return &nodeData.MlacpSyncRequestsOnAllForeignPorts
    }
    if childYangName == "mlacp-sync-requests-on-all-foreign-bundles" {
        return &nodeData.MlacpSyncRequestsOnAllForeignBundles
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-foreign-ports"] = &nodeData.MlacpSyncRequestsOnAllForeignPorts
    children["mlacp-sync-requests-on-all-foreign-bundles"] = &nodeData.MlacpSyncRequestsOnAllForeignBundles
    return children
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeData.NodeId
    return leafs
}

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignPorts.YFilter }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-ports"
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignPorts.parent = parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignPorts.parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignBundles.YFilter }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignBundles.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-bundles"
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignBundles.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignBundles.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-bundles" }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignBundles.parent = parent }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignBundles.parent }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-bundles" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData
// Peer device bundle mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &bundleData.MlacpTlvCounters
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &bundleData.MlacpTlvCounters
    return children
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    return leafs
}

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Bundles_Bundle_BundleItem_IccpGroup_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpBundleCounters_Nodes
// Devices with counters of their bundle's mLACP
// events
type BundleInformation_MlacpBundleCounters_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node ID. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node.
    Node []BundleInformation_MlacpBundleCounters_Nodes_Node
}

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetYangName() string { return "nodes" }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *BundleInformation_MlacpBundleCounters_Nodes) GetParentYangName() string { return "mlacp-bundle-counters" }

// BundleInformation_MlacpBundleCounters_Nodes_Node
// Node ID
type BundleInformation_MlacpBundleCounters_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. For a local device the Node ID e.g. '0_0_CPU0',
    // for a peer device the LDP ID followed by the ICCP Group ID e.g. '5.4.3.2
    // ,4'. The type is string.
    Node interface{}

    // Data for this item.
    NodeItem BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem
}

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    if yname == "node-item" { return "NodeItem" }
    return ""
}

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node='" + fmt.Sprintf("%v", node.Node) + "']"
}

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-item" {
        return &node.NodeItem
    }
    return nil
}

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-item"] = &node.NodeItem
    return children
}

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node"] = node.Node
    return leafs
}

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetYangName() string { return "node" }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *BundleInformation_MlacpBundleCounters_Nodes_Node) GetParentYangName() string { return "nodes" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem
// Data for this item
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group mLACP TLV counter information.
    IccpGroupData BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData

    // Peer device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData.
    NodeData []BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData
}

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetFilter() yfilter.YFilter { return nodeItem.YFilter }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) SetFilter(yf yfilter.YFilter) { nodeItem.YFilter = yf }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetGoName(yname string) string {
    if yname == "iccp-group-data" { return "IccpGroupData" }
    if yname == "node-data" { return "NodeData" }
    return ""
}

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetSegmentPath() string {
    return "node-item"
}

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-data" {
        return &nodeItem.IccpGroupData
    }
    if childYangName == "node-data" {
        for _, c := range nodeItem.NodeData {
            if nodeItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData{}
        nodeItem.NodeData = append(nodeItem.NodeData, child)
        return &nodeItem.NodeData[len(nodeItem.NodeData)-1]
    }
    return nil
}

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-data"] = &nodeItem.IccpGroupData
    for i := range nodeItem.NodeData {
        children[nodeItem.NodeData[i].GetSegmentPath()] = &nodeItem.NodeData[i]
    }
    return children
}

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetBundleName() string { return "cisco_ios_xr" }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetYangName() string { return "node-item" }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) SetParent(parent types.Entity) { nodeItem.parent = parent }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetParent() types.Entity { return nodeItem.parent }

func (nodeItem *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem) GetParentYangName() string { return "node" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData
// ICCP Group mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllLocalBundles BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles

    // Local device bundle mLACP counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetFilter() yfilter.YFilter { return iccpGroupData.YFilter }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) SetFilter(yf yfilter.YFilter) { iccpGroupData.YFilter = yf }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "mlacp-sync-requests-on-all-local-ports" { return "MlacpSyncRequestsOnAllLocalPorts" }
    if yname == "mlacp-sync-requests-on-all-local-bundles" { return "MlacpSyncRequestsOnAllLocalBundles" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetSegmentPath() string {
    return "iccp-group-data"
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-local-ports" {
        return &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts
    }
    if childYangName == "mlacp-sync-requests-on-all-local-bundles" {
        return &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles
    }
    if childYangName == "bundle-data" {
        for _, c := range iccpGroupData.BundleData {
            if iccpGroupData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData{}
        iccpGroupData.BundleData = append(iccpGroupData.BundleData, child)
        return &iccpGroupData.BundleData[len(iccpGroupData.BundleData)-1]
    }
    return nil
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-local-ports"] = &iccpGroupData.MlacpSyncRequestsOnAllLocalPorts
    children["mlacp-sync-requests-on-all-local-bundles"] = &iccpGroupData.MlacpSyncRequestsOnAllLocalBundles
    for i := range iccpGroupData.BundleData {
        children[iccpGroupData.BundleData[i].GetSegmentPath()] = &iccpGroupData.BundleData[i]
    }
    return children
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupData.IccpGroupId
    return leafs
}

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetYangName() string { return "iccp-group-data" }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) SetParent(parent types.Entity) { iccpGroupData.parent = parent }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetParent() types.Entity { return iccpGroupData.parent }

func (iccpGroupData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData) GetParentYangName() string { return "node-item" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalPorts.YFilter }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-ports"
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalPorts.parent = parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalPorts.parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalBundles.YFilter }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalBundles.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-bundles"
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalBundles.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalBundles.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalBundles.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetYangName() string { return "mlacp-sync-requests-on-all-local-bundles" }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalBundles.parent = parent }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalBundles.parent }

func (mlacpSyncRequestsOnAllLocalBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_MlacpSyncRequestsOnAllLocalBundles_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-bundles" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData
// Local device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &bundleData.MlacpTlvCounters
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &bundleData.MlacpTlvCounters
    return children
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    return leafs
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_IccpGroupData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData
// Peer device bundle mLACP counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData

    // Peer device bundle mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData.
    BundleData []BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetGoName(yname string) string {
    if yname == "node-data" { return "NodeData" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        return &nodeData.NodeData
    }
    if childYangName == "bundle-data" {
        for _, c := range nodeData.BundleData {
            if nodeData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData{}
        nodeData.BundleData = append(nodeData.BundleData, child)
        return &nodeData.BundleData[len(nodeData.BundleData)-1]
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-data"] = &nodeData.NodeData
    for i := range nodeData.BundleData {
        children[nodeData.BundleData[i].GetSegmentPath()] = &nodeData.BundleData[i]
    }
    return children
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData) GetParentYangName() string { return "node-item" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Counts of mLACP sync request TLVs on all bundles.
    MlacpSyncRequestsOnAllForeignBundles BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "mlacp-sync-requests-on-all-foreign-ports" { return "MlacpSyncRequestsOnAllForeignPorts" }
    if yname == "mlacp-sync-requests-on-all-foreign-bundles" { return "MlacpSyncRequestsOnAllForeignBundles" }
    return ""
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-foreign-ports" {
        return &nodeData.MlacpSyncRequestsOnAllForeignPorts
    }
    if childYangName == "mlacp-sync-requests-on-all-foreign-bundles" {
        return &nodeData.MlacpSyncRequestsOnAllForeignBundles
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-foreign-ports"] = &nodeData.MlacpSyncRequestsOnAllForeignPorts
    children["mlacp-sync-requests-on-all-foreign-bundles"] = &nodeData.MlacpSyncRequestsOnAllForeignBundles
    return children
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeData.NodeId
    return leafs
}

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignPorts.YFilter }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-ports"
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignPorts.parent = parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignPorts.parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles
// Counts of mLACP sync request TLVs on all bundles
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignBundles.YFilter }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignBundles.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-bundles"
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignBundles.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignBundles.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignBundles.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-bundles" }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignBundles.parent = parent }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignBundles.parent }

func (mlacpSyncRequestsOnAllForeignBundles *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_NodeData_MlacpSyncRequestsOnAllForeignBundles_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-bundles" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData
// Peer device bundle mLACP TLV counter information
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &bundleData.MlacpTlvCounters
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &bundleData.MlacpTlvCounters
    return children
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    return leafs
}

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpBundleCounters_Nodes_Node_NodeItem_NodeData_BundleData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_Protect
// Information for bundles and members that are in
// the protect database
type BundleInformation_Protect struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interfaces with information in the protect database.
    ProtectBundles BundleInformation_Protect_ProtectBundles
}

func (protect *BundleInformation_Protect) GetFilter() yfilter.YFilter { return protect.YFilter }

func (protect *BundleInformation_Protect) SetFilter(yf yfilter.YFilter) { protect.YFilter = yf }

func (protect *BundleInformation_Protect) GetGoName(yname string) string {
    if yname == "protect-bundles" { return "ProtectBundles" }
    return ""
}

func (protect *BundleInformation_Protect) GetSegmentPath() string {
    return "protect"
}

func (protect *BundleInformation_Protect) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protect-bundles" {
        return &protect.ProtectBundles
    }
    return nil
}

func (protect *BundleInformation_Protect) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protect-bundles"] = &protect.ProtectBundles
    return children
}

func (protect *BundleInformation_Protect) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protect *BundleInformation_Protect) GetBundleName() string { return "cisco_ios_xr" }

func (protect *BundleInformation_Protect) GetYangName() string { return "protect" }

func (protect *BundleInformation_Protect) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protect *BundleInformation_Protect) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protect *BundleInformation_Protect) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protect *BundleInformation_Protect) SetParent(parent types.Entity) { protect.parent = parent }

func (protect *BundleInformation_Protect) GetParent() types.Entity { return protect.parent }

func (protect *BundleInformation_Protect) GetParentYangName() string { return "bundle-information" }

// BundleInformation_Protect_ProtectBundles
// Bundle interfaces with information in the
// protect database
type BundleInformation_Protect_ProtectBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Protect_ProtectBundles_ProtectBundle.
    ProtectBundle []BundleInformation_Protect_ProtectBundles_ProtectBundle
}

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetFilter() yfilter.YFilter { return protectBundles.YFilter }

func (protectBundles *BundleInformation_Protect_ProtectBundles) SetFilter(yf yfilter.YFilter) { protectBundles.YFilter = yf }

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetGoName(yname string) string {
    if yname == "protect-bundle" { return "ProtectBundle" }
    return ""
}

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetSegmentPath() string {
    return "protect-bundles"
}

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protect-bundle" {
        for _, c := range protectBundles.ProtectBundle {
            if protectBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Protect_ProtectBundles_ProtectBundle{}
        protectBundles.ProtectBundle = append(protectBundles.ProtectBundle, child)
        return &protectBundles.ProtectBundle[len(protectBundles.ProtectBundle)-1]
    }
    return nil
}

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protectBundles.ProtectBundle {
        children[protectBundles.ProtectBundle[i].GetSegmentPath()] = &protectBundles.ProtectBundle[i]
    }
    return children
}

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetBundleName() string { return "cisco_ios_xr" }

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetYangName() string { return "protect-bundles" }

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protectBundles *BundleInformation_Protect_ProtectBundles) SetParent(parent types.Entity) { protectBundles.parent = parent }

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetParent() types.Entity { return protectBundles.parent }

func (protectBundles *BundleInformation_Protect_ProtectBundles) GetParentYangName() string { return "protect" }

// BundleInformation_Protect_ProtectBundles_ProtectBundle
// Bundle interface
type BundleInformation_Protect_ProtectBundles_ProtectBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    ProtectBundleItem BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem
}

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetFilter() yfilter.YFilter { return protectBundle.YFilter }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) SetFilter(yf yfilter.YFilter) { protectBundle.YFilter = yf }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "protect-bundle-item" { return "ProtectBundleItem" }
    return ""
}

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetSegmentPath() string {
    return "protect-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", protectBundle.BundleInterface) + "']"
}

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protect-bundle-item" {
        return &protectBundle.ProtectBundleItem
    }
    return nil
}

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protect-bundle-item"] = &protectBundle.ProtectBundleItem
    return children
}

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = protectBundle.BundleInterface
    return leafs
}

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetBundleName() string { return "cisco_ios_xr" }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetYangName() string { return "protect-bundle" }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) SetParent(parent types.Entity) { protectBundle.parent = parent }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetParent() types.Entity { return protectBundle.parent }

func (protectBundle *BundleInformation_Protect_ProtectBundles_ProtectBundle) GetParentYangName() string { return "protect-bundles" }

// BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem
// Data for this item
type BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterfaceHandle interface{}

    // Whether the bundle interface is up. The type is bool.
    InterfaceUp interface{}

    // Whether there is a client protect registration on the bundle interface. The
    // type is bool.
    Registered interface{}

    // Bundle is up in the slow path. The type is bool.
    SlowPathUp interface{}

    // Whether the last protect trigger originated in the slow path. The type is
    // bool.
    SlowPathTrigger interface{}

    // Minimum active links threshold. The type is interface{} with range:
    // 0..4294967295.
    MinimumActiveLinks interface{}

    // Minimum bandwidth threshold. The type is interface{} with range:
    // 0..4294967295.
    MinimumBandwidth interface{}

    // Scope of the last event that impacted the bundle. The type is BmdBagTarget.
    EventType interface{}

    // Last event for the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Information about the members. The type is slice of
    // BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo.
    MemberInfo []BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo
}

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetFilter() yfilter.YFilter { return protectBundleItem.YFilter }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) SetFilter(yf yfilter.YFilter) { protectBundleItem.YFilter = yf }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetGoName(yname string) string {
    if yname == "bundle-interface-handle" { return "BundleInterfaceHandle" }
    if yname == "interface-up" { return "InterfaceUp" }
    if yname == "registered" { return "Registered" }
    if yname == "slow-path-up" { return "SlowPathUp" }
    if yname == "slow-path-trigger" { return "SlowPathTrigger" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "event-type" { return "EventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "member-info" { return "MemberInfo" }
    return ""
}

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetSegmentPath() string {
    return "protect-bundle-item"
}

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-info" {
        for _, c := range protectBundleItem.MemberInfo {
            if protectBundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo{}
        protectBundleItem.MemberInfo = append(protectBundleItem.MemberInfo, child)
        return &protectBundleItem.MemberInfo[len(protectBundleItem.MemberInfo)-1]
    }
    return nil
}

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protectBundleItem.MemberInfo {
        children[protectBundleItem.MemberInfo[i].GetSegmentPath()] = &protectBundleItem.MemberInfo[i]
    }
    return children
}

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-handle"] = protectBundleItem.BundleInterfaceHandle
    leafs["interface-up"] = protectBundleItem.InterfaceUp
    leafs["registered"] = protectBundleItem.Registered
    leafs["slow-path-up"] = protectBundleItem.SlowPathUp
    leafs["slow-path-trigger"] = protectBundleItem.SlowPathTrigger
    leafs["minimum-active-links"] = protectBundleItem.MinimumActiveLinks
    leafs["minimum-bandwidth"] = protectBundleItem.MinimumBandwidth
    leafs["event-type"] = protectBundleItem.EventType
    leafs["time-stamp"] = protectBundleItem.TimeStamp
    return leafs
}

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetYangName() string { return "protect-bundle-item" }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) SetParent(parent types.Entity) { protectBundleItem.parent = parent }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetParent() types.Entity { return protectBundleItem.parent }

func (protectBundleItem *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem) GetParentYangName() string { return "protect-bundle" }

// BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo
// Information about the members
type BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Member's bandwidth. The type is interface{} with range: 0..4294967295.
    Bandwidth interface{}

    // Member's node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    Node interface{}

    // Member is active within its bundle. The type is bool.
    Active interface{}

    // Received a notification on the member. The type is bool.
    NotificationReceived interface{}

    // Member is up in the slow path. The type is bool.
    SlowPathUp interface{}

    // Last event for the member. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}
}

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetFilter() yfilter.YFilter { return memberInfo.YFilter }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) SetFilter(yf yfilter.YFilter) { memberInfo.YFilter = yf }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "underlying-link-id" { return "UnderlyingLinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "node" { return "Node" }
    if yname == "active" { return "Active" }
    if yname == "notification-received" { return "NotificationReceived" }
    if yname == "slow-path-up" { return "SlowPathUp" }
    if yname == "time-stamp" { return "TimeStamp" }
    return ""
}

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetSegmentPath() string {
    return "member-info"
}

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = memberInfo.InterfaceHandle
    leafs["underlying-link-id"] = memberInfo.UnderlyingLinkId
    leafs["link-order-number"] = memberInfo.LinkOrderNumber
    leafs["bandwidth"] = memberInfo.Bandwidth
    leafs["node"] = memberInfo.Node
    leafs["active"] = memberInfo.Active
    leafs["notification-received"] = memberInfo.NotificationReceived
    leafs["slow-path-up"] = memberInfo.SlowPathUp
    leafs["time-stamp"] = memberInfo.TimeStamp
    return leafs
}

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetYangName() string { return "member-info" }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) SetParent(parent types.Entity) { memberInfo.parent = parent }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetParent() types.Entity { return memberInfo.parent }

func (memberInfo *BundleInformation_Protect_ProtectBundles_ProtectBundle_ProtectBundleItem_MemberInfo) GetParentYangName() string { return "protect-bundle-item" }

// BundleInformation_MlacpBrief
// mLACP Information for Interchassis Groups and
// bundles
type BundleInformation_MlacpBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interfaces with brief mLACP information.
    MlacpBundleBriefs BundleInformation_MlacpBrief_MlacpBundleBriefs

    // ICCP Groups with brief mLACP information.
    MlacpBriefIccpGroups BundleInformation_MlacpBrief_MlacpBriefIccpGroups
}

func (mlacpBrief *BundleInformation_MlacpBrief) GetFilter() yfilter.YFilter { return mlacpBrief.YFilter }

func (mlacpBrief *BundleInformation_MlacpBrief) SetFilter(yf yfilter.YFilter) { mlacpBrief.YFilter = yf }

func (mlacpBrief *BundleInformation_MlacpBrief) GetGoName(yname string) string {
    if yname == "mlacp-bundle-briefs" { return "MlacpBundleBriefs" }
    if yname == "mlacp-brief-iccp-groups" { return "MlacpBriefIccpGroups" }
    return ""
}

func (mlacpBrief *BundleInformation_MlacpBrief) GetSegmentPath() string {
    return "mlacp-brief"
}

func (mlacpBrief *BundleInformation_MlacpBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-briefs" {
        return &mlacpBrief.MlacpBundleBriefs
    }
    if childYangName == "mlacp-brief-iccp-groups" {
        return &mlacpBrief.MlacpBriefIccpGroups
    }
    return nil
}

func (mlacpBrief *BundleInformation_MlacpBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-bundle-briefs"] = &mlacpBrief.MlacpBundleBriefs
    children["mlacp-brief-iccp-groups"] = &mlacpBrief.MlacpBriefIccpGroups
    return children
}

func (mlacpBrief *BundleInformation_MlacpBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBrief *BundleInformation_MlacpBrief) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBrief *BundleInformation_MlacpBrief) GetYangName() string { return "mlacp-brief" }

func (mlacpBrief *BundleInformation_MlacpBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBrief *BundleInformation_MlacpBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBrief *BundleInformation_MlacpBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBrief *BundleInformation_MlacpBrief) SetParent(parent types.Entity) { mlacpBrief.parent = parent }

func (mlacpBrief *BundleInformation_MlacpBrief) GetParent() types.Entity { return mlacpBrief.parent }

func (mlacpBrief *BundleInformation_MlacpBrief) GetParentYangName() string { return "bundle-information" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs
// Bundle interfaces with brief mLACP information
type BundleInformation_MlacpBrief_MlacpBundleBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief.
    MlacpBundleBrief []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief
}

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetFilter() yfilter.YFilter { return mlacpBundleBriefs.YFilter }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) SetFilter(yf yfilter.YFilter) { mlacpBundleBriefs.YFilter = yf }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetGoName(yname string) string {
    if yname == "mlacp-bundle-brief" { return "MlacpBundleBrief" }
    return ""
}

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetSegmentPath() string {
    return "mlacp-bundle-briefs"
}

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-brief" {
        for _, c := range mlacpBundleBriefs.MlacpBundleBrief {
            if mlacpBundleBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief{}
        mlacpBundleBriefs.MlacpBundleBrief = append(mlacpBundleBriefs.MlacpBundleBrief, child)
        return &mlacpBundleBriefs.MlacpBundleBrief[len(mlacpBundleBriefs.MlacpBundleBrief)-1]
    }
    return nil
}

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mlacpBundleBriefs.MlacpBundleBrief {
        children[mlacpBundleBriefs.MlacpBundleBrief[i].GetSegmentPath()] = &mlacpBundleBriefs.MlacpBundleBrief[i]
    }
    return children
}

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetYangName() string { return "mlacp-bundle-briefs" }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) SetParent(parent types.Entity) { mlacpBundleBriefs.parent = parent }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetParent() types.Entity { return mlacpBundleBriefs.parent }

func (mlacpBundleBriefs *BundleInformation_MlacpBrief_MlacpBundleBriefs) GetParentYangName() string { return "mlacp-brief" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief
// Bundle interface
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    MlacpBundleItemBrief BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief
}

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetFilter() yfilter.YFilter { return mlacpBundleBrief.YFilter }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) SetFilter(yf yfilter.YFilter) { mlacpBundleBrief.YFilter = yf }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "mlacp-bundle-item-brief" { return "MlacpBundleItemBrief" }
    return ""
}

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetSegmentPath() string {
    return "mlacp-bundle-brief" + "[bundle-interface='" + fmt.Sprintf("%v", mlacpBundleBrief.BundleInterface) + "']"
}

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-item-brief" {
        return &mlacpBundleBrief.MlacpBundleItemBrief
    }
    return nil
}

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-bundle-item-brief"] = &mlacpBundleBrief.MlacpBundleItemBrief
    return children
}

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = mlacpBundleBrief.BundleInterface
    return leafs
}

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetYangName() string { return "mlacp-bundle-brief" }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) SetParent(parent types.Entity) { mlacpBundleBrief.parent = parent }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetParent() types.Entity { return mlacpBundleBrief.parent }

func (mlacpBundleBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief) GetParentYangName() string { return "mlacp-bundle-briefs" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief
// Data for this item
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP data for multiple ICCP Groups. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData.
    MlacpData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData
}

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetFilter() yfilter.YFilter { return mlacpBundleItemBrief.YFilter }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) SetFilter(yf yfilter.YFilter) { mlacpBundleItemBrief.YFilter = yf }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetGoName(yname string) string {
    if yname == "mlacp-data" { return "MlacpData" }
    return ""
}

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetSegmentPath() string {
    return "mlacp-bundle-item-brief"
}

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-data" {
        for _, c := range mlacpBundleItemBrief.MlacpData {
            if mlacpBundleItemBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData{}
        mlacpBundleItemBrief.MlacpData = append(mlacpBundleItemBrief.MlacpData, child)
        return &mlacpBundleItemBrief.MlacpData[len(mlacpBundleItemBrief.MlacpData)-1]
    }
    return nil
}

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mlacpBundleItemBrief.MlacpData {
        children[mlacpBundleItemBrief.MlacpData[i].GetSegmentPath()] = &mlacpBundleItemBrief.MlacpData[i]
    }
    return children
}

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetYangName() string { return "mlacp-bundle-item-brief" }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) SetParent(parent types.Entity) { mlacpBundleItemBrief.parent = parent }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetParent() types.Entity { return mlacpBundleItemBrief.parent }

func (mlacpBundleItemBrief *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief) GetParentYangName() string { return "mlacp-bundle-brief" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData
// mLACP data for multiple ICCP Groups
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData.
    BundleData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData
}

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetFilter() yfilter.YFilter { return mlacpData.YFilter }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) SetFilter(yf yfilter.YFilter) { mlacpData.YFilter = yf }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetGoName(yname string) string {
    if yname == "iccp-group-data" { return "IccpGroupData" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetSegmentPath() string {
    return "mlacp-data"
}

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-data" {
        return &mlacpData.IccpGroupData
    }
    if childYangName == "bundle-data" {
        for _, c := range mlacpData.BundleData {
            if mlacpData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData{}
        mlacpData.BundleData = append(mlacpData.BundleData, child)
        return &mlacpData.BundleData[len(mlacpData.BundleData)-1]
    }
    return nil
}

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-data"] = &mlacpData.IccpGroupData
    for i := range mlacpData.BundleData {
        children[mlacpData.BundleData[i].GetSegmentPath()] = &mlacpData.BundleData[i]
    }
    return children
}

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetYangName() string { return "mlacp-data" }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) SetParent(parent types.Entity) { mlacpData.parent = parent }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetParent() types.Entity { return mlacpData.parent }

func (mlacpData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData) GetParentYangName() string { return "mlacp-bundle-item-brief" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData
// ICCP Group information
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData.
    NodeData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetFilter() yfilter.YFilter { return iccpGroupData.YFilter }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) SetFilter(yf yfilter.YFilter) { iccpGroupData.YFilter = yf }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "singleton" { return "Singleton" }
    if yname == "connect-timer-running" { return "ConnectTimerRunning" }
    if yname == "node-data" { return "NodeData" }
    return ""
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetSegmentPath() string {
    return "iccp-group-data"
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        for _, c := range iccpGroupData.NodeData {
            if iccpGroupData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData{}
        iccpGroupData.NodeData = append(iccpGroupData.NodeData, child)
        return &iccpGroupData.NodeData[len(iccpGroupData.NodeData)-1]
    }
    return nil
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroupData.NodeData {
        children[iccpGroupData.NodeData[i].GetSegmentPath()] = &iccpGroupData.NodeData[i]
    }
    return children
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupData.IccpGroupId
    leafs["singleton"] = iccpGroupData.Singleton
    leafs["connect-timer-running"] = iccpGroupData.ConnectTimerRunning
    return leafs
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetYangName() string { return "iccp-group-data" }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) SetParent(parent types.Entity) { iccpGroupData.parent = parent }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetParent() types.Entity { return iccpGroupData.parent }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData) GetParentYangName() string { return "mlacp-data" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetGoName(yname string) string {
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "ldp-id" { return "LdpId" }
    if yname == "version-number" { return "VersionNumber" }
    if yname == "node-state" { return "NodeState" }
    if yname == "iccp-group-state" { return "IccpGroupState" }
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &nodeData.SystemId
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &nodeData.SystemId
    return children
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mlacp-node-id"] = nodeData.MlacpNodeId
    leafs["ldp-id"] = nodeData.LdpId
    leafs["version-number"] = nodeData.VersionNumber
    leafs["node-state"] = nodeData.NodeState
    leafs["iccp-group-state"] = nodeData.IccpGroupState
    return leafs
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &systemId.SystemMacAddr
    }
    return nil
}

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &systemId.SystemMacAddr
    return children
}

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = systemId.SystemPrio
    return leafs
}

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetYangName() string { return "system-id" }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParentYangName() string { return "system-id" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData
// Bundle information
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-key" { return "BundleInterfaceKey" }
    if yname == "media-type" { return "MediaType" }
    if yname == "redundancy-object-id" { return "RedundancyObjectId" }
    if yname == "mlacp-bundle-data" { return "MlacpBundleData" }
    if yname == "mlacp-member-data" { return "MlacpMemberData" }
    return ""
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-data" {
        for _, c := range bundleData.MlacpBundleData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData{}
        bundleData.MlacpBundleData = append(bundleData.MlacpBundleData, child)
        return &bundleData.MlacpBundleData[len(bundleData.MlacpBundleData)-1]
    }
    if childYangName == "mlacp-member-data" {
        for _, c := range bundleData.MlacpMemberData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData{}
        bundleData.MlacpMemberData = append(bundleData.MlacpMemberData, child)
        return &bundleData.MlacpMemberData[len(bundleData.MlacpMemberData)-1]
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleData.MlacpBundleData {
        children[bundleData.MlacpBundleData[i].GetSegmentPath()] = &bundleData.MlacpBundleData[i]
    }
    for i := range bundleData.MlacpMemberData {
        children[bundleData.MlacpMemberData[i].GetSegmentPath()] = &bundleData.MlacpMemberData[i]
    }
    return children
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-key"] = bundleData.BundleInterfaceKey
    leafs["media-type"] = bundleData.MediaType
    leafs["redundancy-object-id"] = bundleData.RedundancyObjectId
    return leafs
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData) GetParentYangName() string { return "mlacp-data" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetFilter() yfilter.YFilter { return mlacpBundleData.YFilter }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) SetFilter(yf yfilter.YFilter) { mlacpBundleData.YFilter = yf }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "aggregator-id" { return "AggregatorId" }
    if yname == "bundle-state" { return "BundleState" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetSegmentPath() string {
    return "mlacp-bundle-data"
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &mlacpBundleData.MacAddress
    }
    return nil
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &mlacpBundleData.MacAddress
    return children
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = mlacpBundleData.BundleName
    leafs["mlacp-node-id"] = mlacpBundleData.MlacpNodeId
    leafs["aggregator-id"] = mlacpBundleData.AggregatorId
    leafs["bundle-state"] = mlacpBundleData.BundleState
    leafs["port-priority"] = mlacpBundleData.PortPriority
    return leafs
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetYangName() string { return "mlacp-bundle-data" }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) SetParent(parent types.Entity) { mlacpBundleData.parent = parent }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetParent() types.Entity { return mlacpBundleData.parent }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpBundleData_MacAddress) GetParentYangName() string { return "mlacp-bundle-data" }

// BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetFilter() yfilter.YFilter { return mlacpMemberData.YFilter }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) SetFilter(yf yfilter.YFilter) { mlacpMemberData.YFilter = yf }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "operational-priority" { return "OperationalPriority" }
    if yname == "configured-priority" { return "ConfiguredPriority" }
    if yname == "member-state" { return "MemberState" }
    return ""
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetSegmentPath() string {
    return "mlacp-member-data"
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = mlacpMemberData.PortName
    leafs["interface-handle"] = mlacpMemberData.InterfaceHandle
    leafs["mlacp-node-id"] = mlacpMemberData.MlacpNodeId
    leafs["port-number"] = mlacpMemberData.PortNumber
    leafs["operational-priority"] = mlacpMemberData.OperationalPriority
    leafs["configured-priority"] = mlacpMemberData.ConfiguredPriority
    leafs["member-state"] = mlacpMemberData.MemberState
    return leafs
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetYangName() string { return "mlacp-member-data" }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) SetParent(parent types.Entity) { mlacpMemberData.parent = parent }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetParent() types.Entity { return mlacpMemberData.parent }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBundleBriefs_MlacpBundleBrief_MlacpBundleItemBrief_MlacpData_BundleData_MlacpMemberData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups
// ICCP Groups with brief mLACP information
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup.
    MlacpBriefIccpGroup []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup
}

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetFilter() yfilter.YFilter { return mlacpBriefIccpGroups.YFilter }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) SetFilter(yf yfilter.YFilter) { mlacpBriefIccpGroups.YFilter = yf }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetGoName(yname string) string {
    if yname == "mlacp-brief-iccp-group" { return "MlacpBriefIccpGroup" }
    return ""
}

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetSegmentPath() string {
    return "mlacp-brief-iccp-groups"
}

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-brief-iccp-group" {
        for _, c := range mlacpBriefIccpGroups.MlacpBriefIccpGroup {
            if mlacpBriefIccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup{}
        mlacpBriefIccpGroups.MlacpBriefIccpGroup = append(mlacpBriefIccpGroups.MlacpBriefIccpGroup, child)
        return &mlacpBriefIccpGroups.MlacpBriefIccpGroup[len(mlacpBriefIccpGroups.MlacpBriefIccpGroup)-1]
    }
    return nil
}

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mlacpBriefIccpGroups.MlacpBriefIccpGroup {
        children[mlacpBriefIccpGroups.MlacpBriefIccpGroup[i].GetSegmentPath()] = &mlacpBriefIccpGroups.MlacpBriefIccpGroup[i]
    }
    return children
}

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetYangName() string { return "mlacp-brief-iccp-groups" }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) SetParent(parent types.Entity) { mlacpBriefIccpGroups.parent = parent }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetParent() types.Entity { return mlacpBriefIccpGroups.parent }

func (mlacpBriefIccpGroups *BundleInformation_MlacpBrief_MlacpBriefIccpGroups) GetParentYangName() string { return "mlacp-brief" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup
// ICCP Group ID
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    MlacpBriefIccpGroupItem BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem
}

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetFilter() yfilter.YFilter { return mlacpBriefIccpGroup.YFilter }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) SetFilter(yf yfilter.YFilter) { mlacpBriefIccpGroup.YFilter = yf }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "mlacp-brief-iccp-group-item" { return "MlacpBriefIccpGroupItem" }
    return ""
}

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetSegmentPath() string {
    return "mlacp-brief-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", mlacpBriefIccpGroup.IccpGroup) + "']"
}

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-brief-iccp-group-item" {
        return &mlacpBriefIccpGroup.MlacpBriefIccpGroupItem
    }
    return nil
}

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-brief-iccp-group-item"] = &mlacpBriefIccpGroup.MlacpBriefIccpGroupItem
    return children
}

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = mlacpBriefIccpGroup.IccpGroup
    return leafs
}

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetYangName() string { return "mlacp-brief-iccp-group" }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) SetParent(parent types.Entity) { mlacpBriefIccpGroup.parent = parent }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetParent() types.Entity { return mlacpBriefIccpGroup.parent }

func (mlacpBriefIccpGroup *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup) GetParentYangName() string { return "mlacp-brief-iccp-groups" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem
// Data for this item
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData.
    BundleData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData
}

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetFilter() yfilter.YFilter { return mlacpBriefIccpGroupItem.YFilter }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) SetFilter(yf yfilter.YFilter) { mlacpBriefIccpGroupItem.YFilter = yf }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetGoName(yname string) string {
    if yname == "iccp-group-data" { return "IccpGroupData" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetSegmentPath() string {
    return "mlacp-brief-iccp-group-item"
}

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-data" {
        return &mlacpBriefIccpGroupItem.IccpGroupData
    }
    if childYangName == "bundle-data" {
        for _, c := range mlacpBriefIccpGroupItem.BundleData {
            if mlacpBriefIccpGroupItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData{}
        mlacpBriefIccpGroupItem.BundleData = append(mlacpBriefIccpGroupItem.BundleData, child)
        return &mlacpBriefIccpGroupItem.BundleData[len(mlacpBriefIccpGroupItem.BundleData)-1]
    }
    return nil
}

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-data"] = &mlacpBriefIccpGroupItem.IccpGroupData
    for i := range mlacpBriefIccpGroupItem.BundleData {
        children[mlacpBriefIccpGroupItem.BundleData[i].GetSegmentPath()] = &mlacpBriefIccpGroupItem.BundleData[i]
    }
    return children
}

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetYangName() string { return "mlacp-brief-iccp-group-item" }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) SetParent(parent types.Entity) { mlacpBriefIccpGroupItem.parent = parent }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetParent() types.Entity { return mlacpBriefIccpGroupItem.parent }

func (mlacpBriefIccpGroupItem *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem) GetParentYangName() string { return "mlacp-brief-iccp-group" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData
// ICCP Group information
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData.
    NodeData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetFilter() yfilter.YFilter { return iccpGroupData.YFilter }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) SetFilter(yf yfilter.YFilter) { iccpGroupData.YFilter = yf }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "singleton" { return "Singleton" }
    if yname == "connect-timer-running" { return "ConnectTimerRunning" }
    if yname == "node-data" { return "NodeData" }
    return ""
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetSegmentPath() string {
    return "iccp-group-data"
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        for _, c := range iccpGroupData.NodeData {
            if iccpGroupData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData{}
        iccpGroupData.NodeData = append(iccpGroupData.NodeData, child)
        return &iccpGroupData.NodeData[len(iccpGroupData.NodeData)-1]
    }
    return nil
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroupData.NodeData {
        children[iccpGroupData.NodeData[i].GetSegmentPath()] = &iccpGroupData.NodeData[i]
    }
    return children
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupData.IccpGroupId
    leafs["singleton"] = iccpGroupData.Singleton
    leafs["connect-timer-running"] = iccpGroupData.ConnectTimerRunning
    return leafs
}

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetYangName() string { return "iccp-group-data" }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) SetParent(parent types.Entity) { iccpGroupData.parent = parent }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetParent() types.Entity { return iccpGroupData.parent }

func (iccpGroupData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData) GetParentYangName() string { return "mlacp-brief-iccp-group-item" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetGoName(yname string) string {
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "ldp-id" { return "LdpId" }
    if yname == "version-number" { return "VersionNumber" }
    if yname == "node-state" { return "NodeState" }
    if yname == "iccp-group-state" { return "IccpGroupState" }
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &nodeData.SystemId
    }
    return nil
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &nodeData.SystemId
    return children
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mlacp-node-id"] = nodeData.MlacpNodeId
    leafs["ldp-id"] = nodeData.LdpId
    leafs["version-number"] = nodeData.VersionNumber
    leafs["node-state"] = nodeData.NodeState
    leafs["iccp-group-state"] = nodeData.IccpGroupState
    return leafs
}

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &systemId.SystemMacAddr
    }
    return nil
}

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &systemId.SystemMacAddr
    return children
}

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = systemId.SystemPrio
    return leafs
}

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetYangName() string { return "system-id" }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParentYangName() string { return "system-id" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData
// Bundle information
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-key" { return "BundleInterfaceKey" }
    if yname == "media-type" { return "MediaType" }
    if yname == "redundancy-object-id" { return "RedundancyObjectId" }
    if yname == "mlacp-bundle-data" { return "MlacpBundleData" }
    if yname == "mlacp-member-data" { return "MlacpMemberData" }
    return ""
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-data" {
        for _, c := range bundleData.MlacpBundleData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData{}
        bundleData.MlacpBundleData = append(bundleData.MlacpBundleData, child)
        return &bundleData.MlacpBundleData[len(bundleData.MlacpBundleData)-1]
    }
    if childYangName == "mlacp-member-data" {
        for _, c := range bundleData.MlacpMemberData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData{}
        bundleData.MlacpMemberData = append(bundleData.MlacpMemberData, child)
        return &bundleData.MlacpMemberData[len(bundleData.MlacpMemberData)-1]
    }
    return nil
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleData.MlacpBundleData {
        children[bundleData.MlacpBundleData[i].GetSegmentPath()] = &bundleData.MlacpBundleData[i]
    }
    for i := range bundleData.MlacpMemberData {
        children[bundleData.MlacpMemberData[i].GetSegmentPath()] = &bundleData.MlacpMemberData[i]
    }
    return children
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-key"] = bundleData.BundleInterfaceKey
    leafs["media-type"] = bundleData.MediaType
    leafs["redundancy-object-id"] = bundleData.RedundancyObjectId
    return leafs
}

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData) GetParentYangName() string { return "mlacp-brief-iccp-group-item" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetFilter() yfilter.YFilter { return mlacpBundleData.YFilter }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) SetFilter(yf yfilter.YFilter) { mlacpBundleData.YFilter = yf }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "aggregator-id" { return "AggregatorId" }
    if yname == "bundle-state" { return "BundleState" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetSegmentPath() string {
    return "mlacp-bundle-data"
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &mlacpBundleData.MacAddress
    }
    return nil
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &mlacpBundleData.MacAddress
    return children
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = mlacpBundleData.BundleName
    leafs["mlacp-node-id"] = mlacpBundleData.MlacpNodeId
    leafs["aggregator-id"] = mlacpBundleData.AggregatorId
    leafs["bundle-state"] = mlacpBundleData.BundleState
    leafs["port-priority"] = mlacpBundleData.PortPriority
    return leafs
}

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetYangName() string { return "mlacp-bundle-data" }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) SetParent(parent types.Entity) { mlacpBundleData.parent = parent }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetParent() types.Entity { return mlacpBundleData.parent }

func (mlacpBundleData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetParentYangName() string { return "mlacp-bundle-data" }

// BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetFilter() yfilter.YFilter { return mlacpMemberData.YFilter }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) SetFilter(yf yfilter.YFilter) { mlacpMemberData.YFilter = yf }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "operational-priority" { return "OperationalPriority" }
    if yname == "configured-priority" { return "ConfiguredPriority" }
    if yname == "member-state" { return "MemberState" }
    return ""
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetSegmentPath() string {
    return "mlacp-member-data"
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = mlacpMemberData.PortName
    leafs["interface-handle"] = mlacpMemberData.InterfaceHandle
    leafs["mlacp-node-id"] = mlacpMemberData.MlacpNodeId
    leafs["port-number"] = mlacpMemberData.PortNumber
    leafs["operational-priority"] = mlacpMemberData.OperationalPriority
    leafs["configured-priority"] = mlacpMemberData.ConfiguredPriority
    leafs["member-state"] = mlacpMemberData.MemberState
    return leafs
}

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetYangName() string { return "mlacp-member-data" }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) SetParent(parent types.Entity) { mlacpMemberData.parent = parent }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetParent() types.Entity { return mlacpMemberData.parent }

func (mlacpMemberData *BundleInformation_MlacpBrief_MlacpBriefIccpGroups_MlacpBriefIccpGroup_MlacpBriefIccpGroupItem_BundleData_MlacpMemberData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Mlacp
// mLACP Information for Interchassis Groups and
// bundles
type BundleInformation_Mlacp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interfaces with mLACP information.
    MlacpBundles BundleInformation_Mlacp_MlacpBundles

    // ICCP Groups with mLACP information.
    MlacpIccpGroups BundleInformation_Mlacp_MlacpIccpGroups
}

func (mlacp *BundleInformation_Mlacp) GetFilter() yfilter.YFilter { return mlacp.YFilter }

func (mlacp *BundleInformation_Mlacp) SetFilter(yf yfilter.YFilter) { mlacp.YFilter = yf }

func (mlacp *BundleInformation_Mlacp) GetGoName(yname string) string {
    if yname == "mlacp-bundles" { return "MlacpBundles" }
    if yname == "mlacp-iccp-groups" { return "MlacpIccpGroups" }
    return ""
}

func (mlacp *BundleInformation_Mlacp) GetSegmentPath() string {
    return "mlacp"
}

func (mlacp *BundleInformation_Mlacp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundles" {
        return &mlacp.MlacpBundles
    }
    if childYangName == "mlacp-iccp-groups" {
        return &mlacp.MlacpIccpGroups
    }
    return nil
}

func (mlacp *BundleInformation_Mlacp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-bundles"] = &mlacp.MlacpBundles
    children["mlacp-iccp-groups"] = &mlacp.MlacpIccpGroups
    return children
}

func (mlacp *BundleInformation_Mlacp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacp *BundleInformation_Mlacp) GetBundleName() string { return "cisco_ios_xr" }

func (mlacp *BundleInformation_Mlacp) GetYangName() string { return "mlacp" }

func (mlacp *BundleInformation_Mlacp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacp *BundleInformation_Mlacp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacp *BundleInformation_Mlacp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacp *BundleInformation_Mlacp) SetParent(parent types.Entity) { mlacp.parent = parent }

func (mlacp *BundleInformation_Mlacp) GetParent() types.Entity { return mlacp.parent }

func (mlacp *BundleInformation_Mlacp) GetParentYangName() string { return "bundle-information" }

// BundleInformation_Mlacp_MlacpBundles
// Bundle interfaces with mLACP information
type BundleInformation_Mlacp_MlacpBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle.
    MlacpBundle []BundleInformation_Mlacp_MlacpBundles_MlacpBundle
}

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetFilter() yfilter.YFilter { return mlacpBundles.YFilter }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) SetFilter(yf yfilter.YFilter) { mlacpBundles.YFilter = yf }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetGoName(yname string) string {
    if yname == "mlacp-bundle" { return "MlacpBundle" }
    return ""
}

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetSegmentPath() string {
    return "mlacp-bundles"
}

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle" {
        for _, c := range mlacpBundles.MlacpBundle {
            if mlacpBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpBundles_MlacpBundle{}
        mlacpBundles.MlacpBundle = append(mlacpBundles.MlacpBundle, child)
        return &mlacpBundles.MlacpBundle[len(mlacpBundles.MlacpBundle)-1]
    }
    return nil
}

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mlacpBundles.MlacpBundle {
        children[mlacpBundles.MlacpBundle[i].GetSegmentPath()] = &mlacpBundles.MlacpBundle[i]
    }
    return children
}

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetYangName() string { return "mlacp-bundles" }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) SetParent(parent types.Entity) { mlacpBundles.parent = parent }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetParent() types.Entity { return mlacpBundles.parent }

func (mlacpBundles *BundleInformation_Mlacp_MlacpBundles) GetParentYangName() string { return "mlacp" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle
// Bundle interface
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    MlacpBundleItem BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem
}

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetFilter() yfilter.YFilter { return mlacpBundle.YFilter }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) SetFilter(yf yfilter.YFilter) { mlacpBundle.YFilter = yf }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "mlacp-bundle-item" { return "MlacpBundleItem" }
    return ""
}

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetSegmentPath() string {
    return "mlacp-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", mlacpBundle.BundleInterface) + "']"
}

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-item" {
        return &mlacpBundle.MlacpBundleItem
    }
    return nil
}

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-bundle-item"] = &mlacpBundle.MlacpBundleItem
    return children
}

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = mlacpBundle.BundleInterface
    return leafs
}

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetYangName() string { return "mlacp-bundle" }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) SetParent(parent types.Entity) { mlacpBundle.parent = parent }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetParent() types.Entity { return mlacpBundle.parent }

func (mlacpBundle *BundleInformation_Mlacp_MlacpBundles_MlacpBundle) GetParentYangName() string { return "mlacp-bundles" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem
// Data for this item
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP data for multiple ICCP Groups. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData.
    MlacpData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData
}

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetFilter() yfilter.YFilter { return mlacpBundleItem.YFilter }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) SetFilter(yf yfilter.YFilter) { mlacpBundleItem.YFilter = yf }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetGoName(yname string) string {
    if yname == "mlacp-data" { return "MlacpData" }
    return ""
}

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetSegmentPath() string {
    return "mlacp-bundle-item"
}

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-data" {
        for _, c := range mlacpBundleItem.MlacpData {
            if mlacpBundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData{}
        mlacpBundleItem.MlacpData = append(mlacpBundleItem.MlacpData, child)
        return &mlacpBundleItem.MlacpData[len(mlacpBundleItem.MlacpData)-1]
    }
    return nil
}

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mlacpBundleItem.MlacpData {
        children[mlacpBundleItem.MlacpData[i].GetSegmentPath()] = &mlacpBundleItem.MlacpData[i]
    }
    return children
}

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetYangName() string { return "mlacp-bundle-item" }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) SetParent(parent types.Entity) { mlacpBundleItem.parent = parent }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetParent() types.Entity { return mlacpBundleItem.parent }

func (mlacpBundleItem *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem) GetParentYangName() string { return "mlacp-bundle" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData
// mLACP data for multiple ICCP Groups
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData.
    BundleData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData
}

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetFilter() yfilter.YFilter { return mlacpData.YFilter }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) SetFilter(yf yfilter.YFilter) { mlacpData.YFilter = yf }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetGoName(yname string) string {
    if yname == "iccp-group-data" { return "IccpGroupData" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetSegmentPath() string {
    return "mlacp-data"
}

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-data" {
        return &mlacpData.IccpGroupData
    }
    if childYangName == "bundle-data" {
        for _, c := range mlacpData.BundleData {
            if mlacpData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData{}
        mlacpData.BundleData = append(mlacpData.BundleData, child)
        return &mlacpData.BundleData[len(mlacpData.BundleData)-1]
    }
    return nil
}

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-data"] = &mlacpData.IccpGroupData
    for i := range mlacpData.BundleData {
        children[mlacpData.BundleData[i].GetSegmentPath()] = &mlacpData.BundleData[i]
    }
    return children
}

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetYangName() string { return "mlacp-data" }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) SetParent(parent types.Entity) { mlacpData.parent = parent }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetParent() types.Entity { return mlacpData.parent }

func (mlacpData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData) GetParentYangName() string { return "mlacp-bundle-item" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData
// ICCP Group information
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData.
    NodeData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetFilter() yfilter.YFilter { return iccpGroupData.YFilter }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) SetFilter(yf yfilter.YFilter) { iccpGroupData.YFilter = yf }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "singleton" { return "Singleton" }
    if yname == "connect-timer-running" { return "ConnectTimerRunning" }
    if yname == "node-data" { return "NodeData" }
    return ""
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetSegmentPath() string {
    return "iccp-group-data"
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        for _, c := range iccpGroupData.NodeData {
            if iccpGroupData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData{}
        iccpGroupData.NodeData = append(iccpGroupData.NodeData, child)
        return &iccpGroupData.NodeData[len(iccpGroupData.NodeData)-1]
    }
    return nil
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroupData.NodeData {
        children[iccpGroupData.NodeData[i].GetSegmentPath()] = &iccpGroupData.NodeData[i]
    }
    return children
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupData.IccpGroupId
    leafs["singleton"] = iccpGroupData.Singleton
    leafs["connect-timer-running"] = iccpGroupData.ConnectTimerRunning
    return leafs
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetYangName() string { return "iccp-group-data" }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) SetParent(parent types.Entity) { iccpGroupData.parent = parent }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetParent() types.Entity { return iccpGroupData.parent }

func (iccpGroupData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData) GetParentYangName() string { return "mlacp-data" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetGoName(yname string) string {
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "ldp-id" { return "LdpId" }
    if yname == "version-number" { return "VersionNumber" }
    if yname == "node-state" { return "NodeState" }
    if yname == "iccp-group-state" { return "IccpGroupState" }
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &nodeData.SystemId
    }
    return nil
}

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &nodeData.SystemId
    return children
}

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mlacp-node-id"] = nodeData.MlacpNodeId
    leafs["ldp-id"] = nodeData.LdpId
    leafs["version-number"] = nodeData.VersionNumber
    leafs["node-state"] = nodeData.NodeState
    leafs["iccp-group-state"] = nodeData.IccpGroupState
    return leafs
}

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &systemId.SystemMacAddr
    }
    return nil
}

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &systemId.SystemMacAddr
    return children
}

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = systemId.SystemPrio
    return leafs
}

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetYangName() string { return "system-id" }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId) GetParentYangName() string { return "node-data" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParentYangName() string { return "system-id" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData
// Bundle information
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-key" { return "BundleInterfaceKey" }
    if yname == "media-type" { return "MediaType" }
    if yname == "redundancy-object-id" { return "RedundancyObjectId" }
    if yname == "mlacp-bundle-data" { return "MlacpBundleData" }
    if yname == "mlacp-member-data" { return "MlacpMemberData" }
    return ""
}

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-data" {
        for _, c := range bundleData.MlacpBundleData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData{}
        bundleData.MlacpBundleData = append(bundleData.MlacpBundleData, child)
        return &bundleData.MlacpBundleData[len(bundleData.MlacpBundleData)-1]
    }
    if childYangName == "mlacp-member-data" {
        for _, c := range bundleData.MlacpMemberData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData{}
        bundleData.MlacpMemberData = append(bundleData.MlacpMemberData, child)
        return &bundleData.MlacpMemberData[len(bundleData.MlacpMemberData)-1]
    }
    return nil
}

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleData.MlacpBundleData {
        children[bundleData.MlacpBundleData[i].GetSegmentPath()] = &bundleData.MlacpBundleData[i]
    }
    for i := range bundleData.MlacpMemberData {
        children[bundleData.MlacpMemberData[i].GetSegmentPath()] = &bundleData.MlacpMemberData[i]
    }
    return children
}

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-key"] = bundleData.BundleInterfaceKey
    leafs["media-type"] = bundleData.MediaType
    leafs["redundancy-object-id"] = bundleData.RedundancyObjectId
    return leafs
}

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData) GetParentYangName() string { return "mlacp-data" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetFilter() yfilter.YFilter { return mlacpBundleData.YFilter }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) SetFilter(yf yfilter.YFilter) { mlacpBundleData.YFilter = yf }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "aggregator-id" { return "AggregatorId" }
    if yname == "bundle-state" { return "BundleState" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetSegmentPath() string {
    return "mlacp-bundle-data"
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &mlacpBundleData.MacAddress
    }
    return nil
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &mlacpBundleData.MacAddress
    return children
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = mlacpBundleData.BundleName
    leafs["mlacp-node-id"] = mlacpBundleData.MlacpNodeId
    leafs["aggregator-id"] = mlacpBundleData.AggregatorId
    leafs["bundle-state"] = mlacpBundleData.BundleState
    leafs["port-priority"] = mlacpBundleData.PortPriority
    return leafs
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetYangName() string { return "mlacp-bundle-data" }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) SetParent(parent types.Entity) { mlacpBundleData.parent = parent }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetParent() types.Entity { return mlacpBundleData.parent }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpBundleData_MacAddress) GetParentYangName() string { return "mlacp-bundle-data" }

// BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetFilter() yfilter.YFilter { return mlacpMemberData.YFilter }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) SetFilter(yf yfilter.YFilter) { mlacpMemberData.YFilter = yf }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "operational-priority" { return "OperationalPriority" }
    if yname == "configured-priority" { return "ConfiguredPriority" }
    if yname == "member-state" { return "MemberState" }
    return ""
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetSegmentPath() string {
    return "mlacp-member-data"
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = mlacpMemberData.PortName
    leafs["interface-handle"] = mlacpMemberData.InterfaceHandle
    leafs["mlacp-node-id"] = mlacpMemberData.MlacpNodeId
    leafs["port-number"] = mlacpMemberData.PortNumber
    leafs["operational-priority"] = mlacpMemberData.OperationalPriority
    leafs["configured-priority"] = mlacpMemberData.ConfiguredPriority
    leafs["member-state"] = mlacpMemberData.MemberState
    return leafs
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetYangName() string { return "mlacp-member-data" }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) SetParent(parent types.Entity) { mlacpMemberData.parent = parent }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetParent() types.Entity { return mlacpMemberData.parent }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpBundles_MlacpBundle_MlacpBundleItem_MlacpData_BundleData_MlacpMemberData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Mlacp_MlacpIccpGroups
// ICCP Groups with mLACP information
type BundleInformation_Mlacp_MlacpIccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup.
    MlacpIccpGroup []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup
}

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetFilter() yfilter.YFilter { return mlacpIccpGroups.YFilter }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) SetFilter(yf yfilter.YFilter) { mlacpIccpGroups.YFilter = yf }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetGoName(yname string) string {
    if yname == "mlacp-iccp-group" { return "MlacpIccpGroup" }
    return ""
}

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetSegmentPath() string {
    return "mlacp-iccp-groups"
}

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-iccp-group" {
        for _, c := range mlacpIccpGroups.MlacpIccpGroup {
            if mlacpIccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup{}
        mlacpIccpGroups.MlacpIccpGroup = append(mlacpIccpGroups.MlacpIccpGroup, child)
        return &mlacpIccpGroups.MlacpIccpGroup[len(mlacpIccpGroups.MlacpIccpGroup)-1]
    }
    return nil
}

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mlacpIccpGroups.MlacpIccpGroup {
        children[mlacpIccpGroups.MlacpIccpGroup[i].GetSegmentPath()] = &mlacpIccpGroups.MlacpIccpGroup[i]
    }
    return children
}

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetYangName() string { return "mlacp-iccp-groups" }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) SetParent(parent types.Entity) { mlacpIccpGroups.parent = parent }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetParent() types.Entity { return mlacpIccpGroups.parent }

func (mlacpIccpGroups *BundleInformation_Mlacp_MlacpIccpGroups) GetParentYangName() string { return "mlacp" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup
// ICCP Group ID
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    MlacpIccpGroupItem BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem
}

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetFilter() yfilter.YFilter { return mlacpIccpGroup.YFilter }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) SetFilter(yf yfilter.YFilter) { mlacpIccpGroup.YFilter = yf }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "mlacp-iccp-group-item" { return "MlacpIccpGroupItem" }
    return ""
}

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetSegmentPath() string {
    return "mlacp-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", mlacpIccpGroup.IccpGroup) + "']"
}

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-iccp-group-item" {
        return &mlacpIccpGroup.MlacpIccpGroupItem
    }
    return nil
}

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-iccp-group-item"] = &mlacpIccpGroup.MlacpIccpGroupItem
    return children
}

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = mlacpIccpGroup.IccpGroup
    return leafs
}

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetYangName() string { return "mlacp-iccp-group" }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) SetParent(parent types.Entity) { mlacpIccpGroup.parent = parent }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetParent() types.Entity { return mlacpIccpGroup.parent }

func (mlacpIccpGroup *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup) GetParentYangName() string { return "mlacp-iccp-groups" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem
// Data for this item
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group information.
    IccpGroupData BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData

    // Bundle information. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData.
    BundleData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData
}

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetFilter() yfilter.YFilter { return mlacpIccpGroupItem.YFilter }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) SetFilter(yf yfilter.YFilter) { mlacpIccpGroupItem.YFilter = yf }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetGoName(yname string) string {
    if yname == "iccp-group-data" { return "IccpGroupData" }
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetSegmentPath() string {
    return "mlacp-iccp-group-item"
}

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-data" {
        return &mlacpIccpGroupItem.IccpGroupData
    }
    if childYangName == "bundle-data" {
        for _, c := range mlacpIccpGroupItem.BundleData {
            if mlacpIccpGroupItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData{}
        mlacpIccpGroupItem.BundleData = append(mlacpIccpGroupItem.BundleData, child)
        return &mlacpIccpGroupItem.BundleData[len(mlacpIccpGroupItem.BundleData)-1]
    }
    return nil
}

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-data"] = &mlacpIccpGroupItem.IccpGroupData
    for i := range mlacpIccpGroupItem.BundleData {
        children[mlacpIccpGroupItem.BundleData[i].GetSegmentPath()] = &mlacpIccpGroupItem.BundleData[i]
    }
    return children
}

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetYangName() string { return "mlacp-iccp-group-item" }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) SetParent(parent types.Entity) { mlacpIccpGroupItem.parent = parent }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetParent() types.Entity { return mlacpIccpGroupItem.parent }

func (mlacpIccpGroupItem *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem) GetParentYangName() string { return "mlacp-iccp-group" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData
// ICCP Group information
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group that the mLACP information is for. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // Is the ICCP group in singleton mode (1 = singleton; 0 = not singleton). The
    // type is bool.
    Singleton interface{}

    // Time remaining on connect timer innsecs. The type is interface{} with
    // range: 0..18446744073709551615. Units are nanosecond.
    ConnectTimerRunning interface{}

    // Information for the IG from the local and peer devices. The type is slice
    // of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData.
    NodeData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetFilter() yfilter.YFilter { return iccpGroupData.YFilter }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) SetFilter(yf yfilter.YFilter) { iccpGroupData.YFilter = yf }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "singleton" { return "Singleton" }
    if yname == "connect-timer-running" { return "ConnectTimerRunning" }
    if yname == "node-data" { return "NodeData" }
    return ""
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetSegmentPath() string {
    return "iccp-group-data"
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        for _, c := range iccpGroupData.NodeData {
            if iccpGroupData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData{}
        iccpGroupData.NodeData = append(iccpGroupData.NodeData, child)
        return &iccpGroupData.NodeData[len(iccpGroupData.NodeData)-1]
    }
    return nil
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroupData.NodeData {
        children[iccpGroupData.NodeData[i].GetSegmentPath()] = &iccpGroupData.NodeData[i]
    }
    return children
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupData.IccpGroupId
    leafs["singleton"] = iccpGroupData.Singleton
    leafs["connect-timer-running"] = iccpGroupData.ConnectTimerRunning
    return leafs
}

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetYangName() string { return "iccp-group-data" }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) SetParent(parent types.Entity) { iccpGroupData.parent = parent }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetParent() types.Entity { return iccpGroupData.parent }

func (iccpGroupData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData) GetParentYangName() string { return "mlacp-iccp-group-item" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData
// Information for the IG from the local and peer
// devices
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // LDP ID of the device. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LdpId interface{}

    // Version of the protocol being used. The type is interface{} with range:
    // 0..4294967295.
    VersionNumber interface{}

    // Node state. The type is BmdMlacpNodeStateEnum.
    NodeState interface{}

    // Node synchronization state. The type is BmdMlacpNodeSyncEnum.
    IccpGroupState interface{}

    // System ID for the ICCP Group.
    SystemId BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId
}

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetGoName(yname string) string {
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "ldp-id" { return "LdpId" }
    if yname == "version-number" { return "VersionNumber" }
    if yname == "node-state" { return "NodeState" }
    if yname == "iccp-group-state" { return "IccpGroupState" }
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &nodeData.SystemId
    }
    return nil
}

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &nodeData.SystemId
    return children
}

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mlacp-node-id"] = nodeData.MlacpNodeId
    leafs["ldp-id"] = nodeData.LdpId
    leafs["version-number"] = nodeData.VersionNumber
    leafs["node-state"] = nodeData.NodeState
    leafs["iccp-group-state"] = nodeData.IccpGroupState
    return leafs
}

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData) GetParentYangName() string { return "iccp-group-data" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId
// System ID for the ICCP Group
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &systemId.SystemMacAddr
    }
    return nil
}

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &systemId.SystemMacAddr
    return children
}

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = systemId.SystemPrio
    return leafs
}

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetYangName() string { return "system-id" }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId) GetParentYangName() string { return "node-data" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_IccpGroupData_NodeData_SystemId_SystemMacAddr) GetParentYangName() string { return "system-id" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData
// Bundle information
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface key. The type is interface{} with range: 0..65535.
    BundleInterfaceKey interface{}

    // The media type of the bundle interface. The type is BundleMedia.
    MediaType interface{}

    // Redundancy Object ID of the bundle. The type is interface{} with range:
    // 0..18446744073709551615.
    RedundancyObjectId interface{}

    // mLACP information for the bundle. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData.
    MlacpBundleData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData

    // mLACP information for the member. The type is slice of
    // BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData.
    MlacpMemberData []BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData
}

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetGoName(yname string) string {
    if yname == "bundle-interface-key" { return "BundleInterfaceKey" }
    if yname == "media-type" { return "MediaType" }
    if yname == "redundancy-object-id" { return "RedundancyObjectId" }
    if yname == "mlacp-bundle-data" { return "MlacpBundleData" }
    if yname == "mlacp-member-data" { return "MlacpMemberData" }
    return ""
}

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-bundle-data" {
        for _, c := range bundleData.MlacpBundleData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData{}
        bundleData.MlacpBundleData = append(bundleData.MlacpBundleData, child)
        return &bundleData.MlacpBundleData[len(bundleData.MlacpBundleData)-1]
    }
    if childYangName == "mlacp-member-data" {
        for _, c := range bundleData.MlacpMemberData {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData{}
        bundleData.MlacpMemberData = append(bundleData.MlacpMemberData, child)
        return &bundleData.MlacpMemberData[len(bundleData.MlacpMemberData)-1]
    }
    return nil
}

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleData.MlacpBundleData {
        children[bundleData.MlacpBundleData[i].GetSegmentPath()] = &bundleData.MlacpBundleData[i]
    }
    for i := range bundleData.MlacpMemberData {
        children[bundleData.MlacpMemberData[i].GetSegmentPath()] = &bundleData.MlacpMemberData[i]
    }
    return children
}

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-key"] = bundleData.BundleInterfaceKey
    leafs["media-type"] = bundleData.MediaType
    leafs["redundancy-object-id"] = bundleData.RedundancyObjectId
    return leafs
}

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData) GetParentYangName() string { return "mlacp-iccp-group-item" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData
// mLACP information for the bundle
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle name. The type is string.
    BundleName interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Bundle aggregrator ID. The type is interface{} with range: 0..65535.
    AggregatorId interface{}

    // Bundle state. The type is BmdMlacpBdlStateEnum.
    BundleState interface{}

    // Bundle port priority. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Bundle MAC address.
    MacAddress BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetFilter() yfilter.YFilter { return mlacpBundleData.YFilter }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) SetFilter(yf yfilter.YFilter) { mlacpBundleData.YFilter = yf }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "aggregator-id" { return "AggregatorId" }
    if yname == "bundle-state" { return "BundleState" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetSegmentPath() string {
    return "mlacp-bundle-data"
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &mlacpBundleData.MacAddress
    }
    return nil
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &mlacpBundleData.MacAddress
    return children
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = mlacpBundleData.BundleName
    leafs["mlacp-node-id"] = mlacpBundleData.MlacpNodeId
    leafs["aggregator-id"] = mlacpBundleData.AggregatorId
    leafs["bundle-state"] = mlacpBundleData.BundleState
    leafs["port-priority"] = mlacpBundleData.PortPriority
    return leafs
}

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetYangName() string { return "mlacp-bundle-data" }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) SetParent(parent types.Entity) { mlacpBundleData.parent = parent }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetParent() types.Entity { return mlacpBundleData.parent }

func (mlacpBundleData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress
// Bundle MAC address
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpBundleData_MacAddress) GetParentYangName() string { return "mlacp-bundle-data" }

// BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData
// mLACP information for the member
type BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port Name. The type is string.
    PortName interface{}

    // Member's interface handle (local device's members only). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // mLACP Device ID. The type is interface{} with range: 0..255.
    MlacpNodeId interface{}

    // Port number of the member. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Operational priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    OperationalPriority interface{}

    // Configured priority of the member in the bundle. The type is interface{}
    // with range: 0..65535.
    ConfiguredPriority interface{}

    // Member state. The type is BmdMlacpMbrStateEnum.
    MemberState interface{}
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetFilter() yfilter.YFilter { return mlacpMemberData.YFilter }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) SetFilter(yf yfilter.YFilter) { mlacpMemberData.YFilter = yf }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "mlacp-node-id" { return "MlacpNodeId" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "operational-priority" { return "OperationalPriority" }
    if yname == "configured-priority" { return "ConfiguredPriority" }
    if yname == "member-state" { return "MemberState" }
    return ""
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetSegmentPath() string {
    return "mlacp-member-data"
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = mlacpMemberData.PortName
    leafs["interface-handle"] = mlacpMemberData.InterfaceHandle
    leafs["mlacp-node-id"] = mlacpMemberData.MlacpNodeId
    leafs["port-number"] = mlacpMemberData.PortNumber
    leafs["operational-priority"] = mlacpMemberData.OperationalPriority
    leafs["configured-priority"] = mlacpMemberData.ConfiguredPriority
    leafs["member-state"] = mlacpMemberData.MemberState
    return leafs
}

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetYangName() string { return "mlacp-member-data" }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) SetParent(parent types.Entity) { mlacpMemberData.parent = parent }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetParent() types.Entity { return mlacpMemberData.parent }

func (mlacpMemberData *BundleInformation_Mlacp_MlacpIccpGroups_MlacpIccpGroup_MlacpIccpGroupItem_BundleData_MlacpMemberData) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MacAllocation
// Information about allocated MAC addresses that
// are not in use
type BundleInformation_MacAllocation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // All MAC addresses that are allocated but currently not in use.
    MacAllocationGlobal BundleInformation_MacAllocation_MacAllocationGlobal
}

func (macAllocation *BundleInformation_MacAllocation) GetFilter() yfilter.YFilter { return macAllocation.YFilter }

func (macAllocation *BundleInformation_MacAllocation) SetFilter(yf yfilter.YFilter) { macAllocation.YFilter = yf }

func (macAllocation *BundleInformation_MacAllocation) GetGoName(yname string) string {
    if yname == "mac-allocation-global" { return "MacAllocationGlobal" }
    return ""
}

func (macAllocation *BundleInformation_MacAllocation) GetSegmentPath() string {
    return "mac-allocation"
}

func (macAllocation *BundleInformation_MacAllocation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-allocation-global" {
        return &macAllocation.MacAllocationGlobal
    }
    return nil
}

func (macAllocation *BundleInformation_MacAllocation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-allocation-global"] = &macAllocation.MacAllocationGlobal
    return children
}

func (macAllocation *BundleInformation_MacAllocation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (macAllocation *BundleInformation_MacAllocation) GetBundleName() string { return "cisco_ios_xr" }

func (macAllocation *BundleInformation_MacAllocation) GetYangName() string { return "mac-allocation" }

func (macAllocation *BundleInformation_MacAllocation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAllocation *BundleInformation_MacAllocation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAllocation *BundleInformation_MacAllocation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAllocation *BundleInformation_MacAllocation) SetParent(parent types.Entity) { macAllocation.parent = parent }

func (macAllocation *BundleInformation_MacAllocation) GetParent() types.Entity { return macAllocation.parent }

func (macAllocation *BundleInformation_MacAllocation) GetParentYangName() string { return "bundle-information" }

// BundleInformation_MacAllocation_MacAllocationGlobal
// All MAC addresses that are allocated but
// currently not in use
type BundleInformation_MacAllocation_MacAllocationGlobal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for this item.
    MacAllocationGlobalItem BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem
}

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetFilter() yfilter.YFilter { return macAllocationGlobal.YFilter }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) SetFilter(yf yfilter.YFilter) { macAllocationGlobal.YFilter = yf }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetGoName(yname string) string {
    if yname == "mac-allocation-global-item" { return "MacAllocationGlobalItem" }
    return ""
}

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetSegmentPath() string {
    return "mac-allocation-global"
}

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-allocation-global-item" {
        return &macAllocationGlobal.MacAllocationGlobalItem
    }
    return nil
}

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-allocation-global-item"] = &macAllocationGlobal.MacAllocationGlobalItem
    return children
}

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetBundleName() string { return "cisco_ios_xr" }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetYangName() string { return "mac-allocation-global" }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) SetParent(parent types.Entity) { macAllocationGlobal.parent = parent }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetParent() types.Entity { return macAllocationGlobal.parent }

func (macAllocationGlobal *BundleInformation_MacAllocation_MacAllocationGlobal) GetParentYangName() string { return "mac-allocation" }

// BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem
// Data for this item
type BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC addresses allocated but unused. The type is slice of
    // BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress.
    MacAddress []BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress
}

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetFilter() yfilter.YFilter { return macAllocationGlobalItem.YFilter }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) SetFilter(yf yfilter.YFilter) { macAllocationGlobalItem.YFilter = yf }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetGoName(yname string) string {
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetSegmentPath() string {
    return "mac-allocation-global-item"
}

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        for _, c := range macAllocationGlobalItem.MacAddress {
            if macAllocationGlobalItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress{}
        macAllocationGlobalItem.MacAddress = append(macAllocationGlobalItem.MacAddress, child)
        return &macAllocationGlobalItem.MacAddress[len(macAllocationGlobalItem.MacAddress)-1]
    }
    return nil
}

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range macAllocationGlobalItem.MacAddress {
        children[macAllocationGlobalItem.MacAddress[i].GetSegmentPath()] = &macAllocationGlobalItem.MacAddress[i]
    }
    return children
}

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetBundleName() string { return "cisco_ios_xr" }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetYangName() string { return "mac-allocation-global-item" }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) SetParent(parent types.Entity) { macAllocationGlobalItem.parent = parent }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetParent() types.Entity { return macAllocationGlobalItem.parent }

func (macAllocationGlobalItem *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem) GetParentYangName() string { return "mac-allocation-global" }

// BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress
// MAC addresses allocated but unused
type BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_MacAllocation_MacAllocationGlobal_MacAllocationGlobalItem_MacAddress) GetParentYangName() string { return "mac-allocation-global-item" }

// BundleInformation_Events
// Events information for bundles and members
type BundleInformation_Events struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interfaces with events information.
    EventsMembers BundleInformation_Events_EventsMembers

    // Bundle interfaces with events information.
    EventsBundles BundleInformation_Events_EventsBundles
}

func (events *BundleInformation_Events) GetFilter() yfilter.YFilter { return events.YFilter }

func (events *BundleInformation_Events) SetFilter(yf yfilter.YFilter) { events.YFilter = yf }

func (events *BundleInformation_Events) GetGoName(yname string) string {
    if yname == "events-members" { return "EventsMembers" }
    if yname == "events-bundles" { return "EventsBundles" }
    return ""
}

func (events *BundleInformation_Events) GetSegmentPath() string {
    return "events"
}

func (events *BundleInformation_Events) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-members" {
        return &events.EventsMembers
    }
    if childYangName == "events-bundles" {
        return &events.EventsBundles
    }
    return nil
}

func (events *BundleInformation_Events) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-members"] = &events.EventsMembers
    children["events-bundles"] = &events.EventsBundles
    return children
}

func (events *BundleInformation_Events) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (events *BundleInformation_Events) GetBundleName() string { return "cisco_ios_xr" }

func (events *BundleInformation_Events) GetYangName() string { return "events" }

func (events *BundleInformation_Events) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (events *BundleInformation_Events) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (events *BundleInformation_Events) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (events *BundleInformation_Events) SetParent(parent types.Entity) { events.parent = parent }

func (events *BundleInformation_Events) GetParent() types.Entity { return events.parent }

func (events *BundleInformation_Events) GetParentYangName() string { return "bundle-information" }

// BundleInformation_Events_EventsMembers
// Member interfaces with events information
type BundleInformation_Events_EventsMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_Events_EventsMembers_EventsMember.
    EventsMember []BundleInformation_Events_EventsMembers_EventsMember
}

func (eventsMembers *BundleInformation_Events_EventsMembers) GetFilter() yfilter.YFilter { return eventsMembers.YFilter }

func (eventsMembers *BundleInformation_Events_EventsMembers) SetFilter(yf yfilter.YFilter) { eventsMembers.YFilter = yf }

func (eventsMembers *BundleInformation_Events_EventsMembers) GetGoName(yname string) string {
    if yname == "events-member" { return "EventsMember" }
    return ""
}

func (eventsMembers *BundleInformation_Events_EventsMembers) GetSegmentPath() string {
    return "events-members"
}

func (eventsMembers *BundleInformation_Events_EventsMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-member" {
        for _, c := range eventsMembers.EventsMember {
            if eventsMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsMembers_EventsMember{}
        eventsMembers.EventsMember = append(eventsMembers.EventsMember, child)
        return &eventsMembers.EventsMember[len(eventsMembers.EventsMember)-1]
    }
    return nil
}

func (eventsMembers *BundleInformation_Events_EventsMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMembers.EventsMember {
        children[eventsMembers.EventsMember[i].GetSegmentPath()] = &eventsMembers.EventsMember[i]
    }
    return children
}

func (eventsMembers *BundleInformation_Events_EventsMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMembers *BundleInformation_Events_EventsMembers) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMembers *BundleInformation_Events_EventsMembers) GetYangName() string { return "events-members" }

func (eventsMembers *BundleInformation_Events_EventsMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMembers *BundleInformation_Events_EventsMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMembers *BundleInformation_Events_EventsMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMembers *BundleInformation_Events_EventsMembers) SetParent(parent types.Entity) { eventsMembers.parent = parent }

func (eventsMembers *BundleInformation_Events_EventsMembers) GetParent() types.Entity { return eventsMembers.parent }

func (eventsMembers *BundleInformation_Events_EventsMembers) GetParentYangName() string { return "events" }

// BundleInformation_Events_EventsMembers_EventsMember
// Member interface
type BundleInformation_Events_EventsMembers_EventsMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    EventsMemberItem BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem

    // Data for this item and its parent bundle.
    EventsMemberAncestor BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor
}

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetFilter() yfilter.YFilter { return eventsMember.YFilter }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) SetFilter(yf yfilter.YFilter) { eventsMember.YFilter = yf }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "events-member-item" { return "EventsMemberItem" }
    if yname == "events-member-ancestor" { return "EventsMemberAncestor" }
    return ""
}

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetSegmentPath() string {
    return "events-member" + "[member-interface='" + fmt.Sprintf("%v", eventsMember.MemberInterface) + "']"
}

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-member-item" {
        return &eventsMember.EventsMemberItem
    }
    if childYangName == "events-member-ancestor" {
        return &eventsMember.EventsMemberAncestor
    }
    return nil
}

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-member-item"] = &eventsMember.EventsMemberItem
    children["events-member-ancestor"] = &eventsMember.EventsMemberAncestor
    return children
}

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = eventsMember.MemberInterface
    return leafs
}

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetYangName() string { return "events-member" }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) SetParent(parent types.Entity) { eventsMember.parent = parent }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetParent() types.Entity { return eventsMember.parent }

func (eventsMember *BundleInformation_Events_EventsMembers_EventsMember) GetParentYangName() string { return "events-members" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem
// Data for this item
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items.
    Items []BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items
}

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetFilter() yfilter.YFilter { return eventsMemberItem.YFilter }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) SetFilter(yf yfilter.YFilter) { eventsMemberItem.YFilter = yf }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetSegmentPath() string {
    return "events-member-item"
}

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsMemberItem.Items {
            if eventsMemberItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items{}
        eventsMemberItem.Items = append(eventsMemberItem.Items, child)
        return &eventsMemberItem.Items[len(eventsMemberItem.Items)-1]
    }
    return nil
}

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMemberItem.Items {
        children[eventsMemberItem.Items[i].GetSegmentPath()] = &eventsMemberItem.Items[i]
    }
    return children
}

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsMemberItem.ItemName
    return leafs
}

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetYangName() string { return "events-member-item" }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) SetParent(parent types.Entity) { eventsMemberItem.parent = parent }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetParent() types.Entity { return eventsMemberItem.parent }

func (eventsMemberItem *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem) GetParentYangName() string { return "events-member" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items
// Event items
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items) GetParentYangName() string { return "events-member-item" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items.
    Items []BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items
}

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetFilter() yfilter.YFilter { return eventsMemberAncestor.YFilter }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) SetFilter(yf yfilter.YFilter) { eventsMemberAncestor.YFilter = yf }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetSegmentPath() string {
    return "events-member-ancestor"
}

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsMemberAncestor.Items {
            if eventsMemberAncestor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items{}
        eventsMemberAncestor.Items = append(eventsMemberAncestor.Items, child)
        return &eventsMemberAncestor.Items[len(eventsMemberAncestor.Items)-1]
    }
    return nil
}

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMemberAncestor.Items {
        children[eventsMemberAncestor.Items[i].GetSegmentPath()] = &eventsMemberAncestor.Items[i]
    }
    return children
}

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsMemberAncestor.ItemName
    return leafs
}

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetYangName() string { return "events-member-ancestor" }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) SetParent(parent types.Entity) { eventsMemberAncestor.parent = parent }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetParent() types.Entity { return eventsMemberAncestor.parent }

func (eventsMemberAncestor *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor) GetParentYangName() string { return "events-member" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items
// Event items
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetYangName() string { return "items" }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items) GetParentYangName() string { return "events-member-ancestor" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsMembers_EventsMember_EventsMemberAncestor_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_Events_EventsBundles
// Bundle interfaces with events information
type BundleInformation_Events_EventsBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle.
    EventsBundle []BundleInformation_Events_EventsBundles_EventsBundle
}

func (eventsBundles *BundleInformation_Events_EventsBundles) GetFilter() yfilter.YFilter { return eventsBundles.YFilter }

func (eventsBundles *BundleInformation_Events_EventsBundles) SetFilter(yf yfilter.YFilter) { eventsBundles.YFilter = yf }

func (eventsBundles *BundleInformation_Events_EventsBundles) GetGoName(yname string) string {
    if yname == "events-bundle" { return "EventsBundle" }
    return ""
}

func (eventsBundles *BundleInformation_Events_EventsBundles) GetSegmentPath() string {
    return "events-bundles"
}

func (eventsBundles *BundleInformation_Events_EventsBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bundle" {
        for _, c := range eventsBundles.EventsBundle {
            if eventsBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsBundles_EventsBundle{}
        eventsBundles.EventsBundle = append(eventsBundles.EventsBundle, child)
        return &eventsBundles.EventsBundle[len(eventsBundles.EventsBundle)-1]
    }
    return nil
}

func (eventsBundles *BundleInformation_Events_EventsBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBundles.EventsBundle {
        children[eventsBundles.EventsBundle[i].GetSegmentPath()] = &eventsBundles.EventsBundle[i]
    }
    return children
}

func (eventsBundles *BundleInformation_Events_EventsBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBundles *BundleInformation_Events_EventsBundles) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBundles *BundleInformation_Events_EventsBundles) GetYangName() string { return "events-bundles" }

func (eventsBundles *BundleInformation_Events_EventsBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBundles *BundleInformation_Events_EventsBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBundles *BundleInformation_Events_EventsBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBundles *BundleInformation_Events_EventsBundles) SetParent(parent types.Entity) { eventsBundles.parent = parent }

func (eventsBundles *BundleInformation_Events_EventsBundles) GetParent() types.Entity { return eventsBundles.parent }

func (eventsBundles *BundleInformation_Events_EventsBundles) GetParentYangName() string { return "events" }

// BundleInformation_Events_EventsBundles_EventsBundle
// Bundle interface
type BundleInformation_Events_EventsBundles_EventsBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item and its parent bundle.
    EventsBundleAncestor BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor

    // Data for this item.
    EventsBundleItem BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem

    // Data for this item and all its members.
    EventsBundleDescendant BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant

    // Children of bundle with events information.
    EventsBundleChildrenMembers BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers
}

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetFilter() yfilter.YFilter { return eventsBundle.YFilter }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) SetFilter(yf yfilter.YFilter) { eventsBundle.YFilter = yf }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "events-bundle-ancestor" { return "EventsBundleAncestor" }
    if yname == "events-bundle-item" { return "EventsBundleItem" }
    if yname == "events-bundle-descendant" { return "EventsBundleDescendant" }
    if yname == "events-bundle-children-members" { return "EventsBundleChildrenMembers" }
    return ""
}

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetSegmentPath() string {
    return "events-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsBundle.BundleInterface) + "']"
}

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bundle-ancestor" {
        return &eventsBundle.EventsBundleAncestor
    }
    if childYangName == "events-bundle-item" {
        return &eventsBundle.EventsBundleItem
    }
    if childYangName == "events-bundle-descendant" {
        return &eventsBundle.EventsBundleDescendant
    }
    if childYangName == "events-bundle-children-members" {
        return &eventsBundle.EventsBundleChildrenMembers
    }
    return nil
}

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-bundle-ancestor"] = &eventsBundle.EventsBundleAncestor
    children["events-bundle-item"] = &eventsBundle.EventsBundleItem
    children["events-bundle-descendant"] = &eventsBundle.EventsBundleDescendant
    children["events-bundle-children-members"] = &eventsBundle.EventsBundleChildrenMembers
    return children
}

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = eventsBundle.BundleInterface
    return leafs
}

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetYangName() string { return "events-bundle" }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) SetParent(parent types.Entity) { eventsBundle.parent = parent }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetParent() types.Entity { return eventsBundle.parent }

func (eventsBundle *BundleInformation_Events_EventsBundles_EventsBundle) GetParentYangName() string { return "events-bundles" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor
// Data for this item and its parent bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items
}

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetFilter() yfilter.YFilter { return eventsBundleAncestor.YFilter }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) SetFilter(yf yfilter.YFilter) { eventsBundleAncestor.YFilter = yf }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetSegmentPath() string {
    return "events-bundle-ancestor"
}

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsBundleAncestor.Items {
            if eventsBundleAncestor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items{}
        eventsBundleAncestor.Items = append(eventsBundleAncestor.Items, child)
        return &eventsBundleAncestor.Items[len(eventsBundleAncestor.Items)-1]
    }
    return nil
}

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBundleAncestor.Items {
        children[eventsBundleAncestor.Items[i].GetSegmentPath()] = &eventsBundleAncestor.Items[i]
    }
    return children
}

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsBundleAncestor.ItemName
    return leafs
}

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetYangName() string { return "events-bundle-ancestor" }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) SetParent(parent types.Entity) { eventsBundleAncestor.parent = parent }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetParent() types.Entity { return eventsBundleAncestor.parent }

func (eventsBundleAncestor *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor) GetParentYangName() string { return "events-bundle" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetYangName() string { return "items" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items) GetParentYangName() string { return "events-bundle-ancestor" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleAncestor_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem
// Data for this item
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items
}

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetFilter() yfilter.YFilter { return eventsBundleItem.YFilter }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) SetFilter(yf yfilter.YFilter) { eventsBundleItem.YFilter = yf }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetSegmentPath() string {
    return "events-bundle-item"
}

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsBundleItem.Items {
            if eventsBundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items{}
        eventsBundleItem.Items = append(eventsBundleItem.Items, child)
        return &eventsBundleItem.Items[len(eventsBundleItem.Items)-1]
    }
    return nil
}

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBundleItem.Items {
        children[eventsBundleItem.Items[i].GetSegmentPath()] = &eventsBundleItem.Items[i]
    }
    return children
}

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsBundleItem.ItemName
    return leafs
}

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetYangName() string { return "events-bundle-item" }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) SetParent(parent types.Entity) { eventsBundleItem.parent = parent }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetParent() types.Entity { return eventsBundleItem.parent }

func (eventsBundleItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem) GetParentYangName() string { return "events-bundle" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items) GetParentYangName() string { return "events-bundle-item" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant
// Data for this item and all its members
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem.
    EventsItem []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem
}

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetFilter() yfilter.YFilter { return eventsBundleDescendant.YFilter }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) SetFilter(yf yfilter.YFilter) { eventsBundleDescendant.YFilter = yf }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetGoName(yname string) string {
    if yname == "events-item" { return "EventsItem" }
    return ""
}

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetSegmentPath() string {
    return "events-bundle-descendant"
}

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-item" {
        for _, c := range eventsBundleDescendant.EventsItem {
            if eventsBundleDescendant.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem{}
        eventsBundleDescendant.EventsItem = append(eventsBundleDescendant.EventsItem, child)
        return &eventsBundleDescendant.EventsItem[len(eventsBundleDescendant.EventsItem)-1]
    }
    return nil
}

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBundleDescendant.EventsItem {
        children[eventsBundleDescendant.EventsItem[i].GetSegmentPath()] = &eventsBundleDescendant.EventsItem[i]
    }
    return children
}

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetYangName() string { return "events-bundle-descendant" }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) SetParent(parent types.Entity) { eventsBundleDescendant.parent = parent }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetParent() types.Entity { return eventsBundleDescendant.parent }

func (eventsBundleDescendant *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant) GetParentYangName() string { return "events-bundle" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items
}

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetFilter() yfilter.YFilter { return eventsItem.YFilter }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) SetFilter(yf yfilter.YFilter) { eventsItem.YFilter = yf }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetSegmentPath() string {
    return "events-item"
}

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsItem.Items {
            if eventsItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items{}
        eventsItem.Items = append(eventsItem.Items, child)
        return &eventsItem.Items[len(eventsItem.Items)-1]
    }
    return nil
}

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsItem.Items {
        children[eventsItem.Items[i].GetSegmentPath()] = &eventsItem.Items[i]
    }
    return children
}

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsItem.ItemName
    return leafs
}

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetYangName() string { return "events-item" }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) SetParent(parent types.Entity) { eventsItem.parent = parent }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetParent() types.Entity { return eventsItem.parent }

func (eventsItem *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem) GetParentYangName() string { return "events-bundle-descendant" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items) GetParentYangName() string { return "events-item" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers
// Children of bundle with events information
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle member item with events information. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember.
    EventsBundleChildrenMember []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember
}

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetFilter() yfilter.YFilter { return eventsBundleChildrenMembers.YFilter }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) SetFilter(yf yfilter.YFilter) { eventsBundleChildrenMembers.YFilter = yf }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetGoName(yname string) string {
    if yname == "events-bundle-children-member" { return "EventsBundleChildrenMember" }
    return ""
}

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetSegmentPath() string {
    return "events-bundle-children-members"
}

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bundle-children-member" {
        for _, c := range eventsBundleChildrenMembers.EventsBundleChildrenMember {
            if eventsBundleChildrenMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember{}
        eventsBundleChildrenMembers.EventsBundleChildrenMember = append(eventsBundleChildrenMembers.EventsBundleChildrenMember, child)
        return &eventsBundleChildrenMembers.EventsBundleChildrenMember[len(eventsBundleChildrenMembers.EventsBundleChildrenMember)-1]
    }
    return nil
}

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBundleChildrenMembers.EventsBundleChildrenMember {
        children[eventsBundleChildrenMembers.EventsBundleChildrenMember[i].GetSegmentPath()] = &eventsBundleChildrenMembers.EventsBundleChildrenMember[i]
    }
    return children
}

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetYangName() string { return "events-bundle-children-members" }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) SetParent(parent types.Entity) { eventsBundleChildrenMembers.parent = parent }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetParent() types.Entity { return eventsBundleChildrenMembers.parent }

func (eventsBundleChildrenMembers *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers) GetParentYangName() string { return "events-bundle" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember
// Bundle member item with events information
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items.
    Items []BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items
}

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetFilter() yfilter.YFilter { return eventsBundleChildrenMember.YFilter }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) SetFilter(yf yfilter.YFilter) { eventsBundleChildrenMember.YFilter = yf }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetSegmentPath() string {
    return "events-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", eventsBundleChildrenMember.MemberInterface) + "']"
}

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsBundleChildrenMember.Items {
            if eventsBundleChildrenMember.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items{}
        eventsBundleChildrenMember.Items = append(eventsBundleChildrenMember.Items, child)
        return &eventsBundleChildrenMember.Items[len(eventsBundleChildrenMember.Items)-1]
    }
    return nil
}

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBundleChildrenMember.Items {
        children[eventsBundleChildrenMember.Items[i].GetSegmentPath()] = &eventsBundleChildrenMember.Items[i]
    }
    return children
}

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = eventsBundleChildrenMember.MemberInterface
    leafs["item-name"] = eventsBundleChildrenMember.ItemName
    return leafs
}

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetYangName() string { return "events-bundle-children-member" }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) SetParent(parent types.Entity) { eventsBundleChildrenMember.parent = parent }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetParent() types.Entity { return eventsBundleChildrenMember.parent }

func (eventsBundleChildrenMember *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember) GetParentYangName() string { return "events-bundle-children-members" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items
// Event items
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetYangName() string { return "items" }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items) GetParentYangName() string { return "events-bundle-children-member" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_Events_EventsBundles_EventsBundle_EventsBundleChildrenMembers_EventsBundleChildrenMember_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsBdl
// Bundle events information for bundles and
// members
type BundleInformation_EventsBdl struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interfaces with bundle events information.
    EventsBdlMembers BundleInformation_EventsBdl_EventsBdlMembers

    // Bundle interfaces with bundle events information.
    EventsBdlBundles BundleInformation_EventsBdl_EventsBdlBundles

    // Bundle events for all ICCP Groups.
    EventsBdlIccpGroups BundleInformation_EventsBdl_EventsBdlIccpGroups
}

func (eventsBdl *BundleInformation_EventsBdl) GetFilter() yfilter.YFilter { return eventsBdl.YFilter }

func (eventsBdl *BundleInformation_EventsBdl) SetFilter(yf yfilter.YFilter) { eventsBdl.YFilter = yf }

func (eventsBdl *BundleInformation_EventsBdl) GetGoName(yname string) string {
    if yname == "events-bdl-members" { return "EventsBdlMembers" }
    if yname == "events-bdl-bundles" { return "EventsBdlBundles" }
    if yname == "events-bdl-iccp-groups" { return "EventsBdlIccpGroups" }
    return ""
}

func (eventsBdl *BundleInformation_EventsBdl) GetSegmentPath() string {
    return "events-bdl"
}

func (eventsBdl *BundleInformation_EventsBdl) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bdl-members" {
        return &eventsBdl.EventsBdlMembers
    }
    if childYangName == "events-bdl-bundles" {
        return &eventsBdl.EventsBdlBundles
    }
    if childYangName == "events-bdl-iccp-groups" {
        return &eventsBdl.EventsBdlIccpGroups
    }
    return nil
}

func (eventsBdl *BundleInformation_EventsBdl) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-bdl-members"] = &eventsBdl.EventsBdlMembers
    children["events-bdl-bundles"] = &eventsBdl.EventsBdlBundles
    children["events-bdl-iccp-groups"] = &eventsBdl.EventsBdlIccpGroups
    return children
}

func (eventsBdl *BundleInformation_EventsBdl) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBdl *BundleInformation_EventsBdl) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdl *BundleInformation_EventsBdl) GetYangName() string { return "events-bdl" }

func (eventsBdl *BundleInformation_EventsBdl) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdl *BundleInformation_EventsBdl) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdl *BundleInformation_EventsBdl) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdl *BundleInformation_EventsBdl) SetParent(parent types.Entity) { eventsBdl.parent = parent }

func (eventsBdl *BundleInformation_EventsBdl) GetParent() types.Entity { return eventsBdl.parent }

func (eventsBdl *BundleInformation_EventsBdl) GetParentYangName() string { return "bundle-information" }

// BundleInformation_EventsBdl_EventsBdlMembers
// Member interfaces with bundle events
// information
type BundleInformation_EventsBdl_EventsBdlMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember.
    EventsBdlMember []BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember
}

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetFilter() yfilter.YFilter { return eventsBdlMembers.YFilter }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) SetFilter(yf yfilter.YFilter) { eventsBdlMembers.YFilter = yf }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetGoName(yname string) string {
    if yname == "events-bdl-member" { return "EventsBdlMember" }
    return ""
}

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetSegmentPath() string {
    return "events-bdl-members"
}

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bdl-member" {
        for _, c := range eventsBdlMembers.EventsBdlMember {
            if eventsBdlMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember{}
        eventsBdlMembers.EventsBdlMember = append(eventsBdlMembers.EventsBdlMember, child)
        return &eventsBdlMembers.EventsBdlMember[len(eventsBdlMembers.EventsBdlMember)-1]
    }
    return nil
}

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBdlMembers.EventsBdlMember {
        children[eventsBdlMembers.EventsBdlMember[i].GetSegmentPath()] = &eventsBdlMembers.EventsBdlMember[i]
    }
    return children
}

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetYangName() string { return "events-bdl-members" }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) SetParent(parent types.Entity) { eventsBdlMembers.parent = parent }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetParent() types.Entity { return eventsBdlMembers.parent }

func (eventsBdlMembers *BundleInformation_EventsBdl_EventsBdlMembers) GetParentYangName() string { return "events-bdl" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember
// Member interface
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item and its parent bundle.
    EventsBdlMemberAncestor BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor
}

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetFilter() yfilter.YFilter { return eventsBdlMember.YFilter }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) SetFilter(yf yfilter.YFilter) { eventsBdlMember.YFilter = yf }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "events-bdl-member-ancestor" { return "EventsBdlMemberAncestor" }
    return ""
}

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetSegmentPath() string {
    return "events-bdl-member" + "[member-interface='" + fmt.Sprintf("%v", eventsBdlMember.MemberInterface) + "']"
}

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bdl-member-ancestor" {
        return &eventsBdlMember.EventsBdlMemberAncestor
    }
    return nil
}

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-bdl-member-ancestor"] = &eventsBdlMember.EventsBdlMemberAncestor
    return children
}

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = eventsBdlMember.MemberInterface
    return leafs
}

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetYangName() string { return "events-bdl-member" }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) SetParent(parent types.Entity) { eventsBdlMember.parent = parent }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetParent() types.Entity { return eventsBdlMember.parent }

func (eventsBdlMember *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember) GetParentYangName() string { return "events-bdl-members" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor
// Data for this item and its parent bundle
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items.
    Items []BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items
}

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetFilter() yfilter.YFilter { return eventsBdlMemberAncestor.YFilter }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) SetFilter(yf yfilter.YFilter) { eventsBdlMemberAncestor.YFilter = yf }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetSegmentPath() string {
    return "events-bdl-member-ancestor"
}

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsBdlMemberAncestor.Items {
            if eventsBdlMemberAncestor.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items{}
        eventsBdlMemberAncestor.Items = append(eventsBdlMemberAncestor.Items, child)
        return &eventsBdlMemberAncestor.Items[len(eventsBdlMemberAncestor.Items)-1]
    }
    return nil
}

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBdlMemberAncestor.Items {
        children[eventsBdlMemberAncestor.Items[i].GetSegmentPath()] = &eventsBdlMemberAncestor.Items[i]
    }
    return children
}

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsBdlMemberAncestor.ItemName
    return leafs
}

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetYangName() string { return "events-bdl-member-ancestor" }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) SetParent(parent types.Entity) { eventsBdlMemberAncestor.parent = parent }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetParent() types.Entity { return eventsBdlMemberAncestor.parent }

func (eventsBdlMemberAncestor *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor) GetParentYangName() string { return "events-bdl-member" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items
// Event items
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo
}

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items) GetParentYangName() string { return "events-bdl-member-ancestor" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlMembers_EventsBdlMember_EventsBdlMemberAncestor_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsBdl_EventsBdlBundles
// Bundle interfaces with bundle events
// information
type BundleInformation_EventsBdl_EventsBdlBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle.
    EventsBdlBundle []BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle
}

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetFilter() yfilter.YFilter { return eventsBdlBundles.YFilter }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) SetFilter(yf yfilter.YFilter) { eventsBdlBundles.YFilter = yf }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetGoName(yname string) string {
    if yname == "events-bdl-bundle" { return "EventsBdlBundle" }
    return ""
}

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetSegmentPath() string {
    return "events-bdl-bundles"
}

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bdl-bundle" {
        for _, c := range eventsBdlBundles.EventsBdlBundle {
            if eventsBdlBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle{}
        eventsBdlBundles.EventsBdlBundle = append(eventsBdlBundles.EventsBdlBundle, child)
        return &eventsBdlBundles.EventsBdlBundle[len(eventsBdlBundles.EventsBdlBundle)-1]
    }
    return nil
}

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBdlBundles.EventsBdlBundle {
        children[eventsBdlBundles.EventsBdlBundle[i].GetSegmentPath()] = &eventsBdlBundles.EventsBdlBundle[i]
    }
    return children
}

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetYangName() string { return "events-bdl-bundles" }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) SetParent(parent types.Entity) { eventsBdlBundles.parent = parent }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetParent() types.Entity { return eventsBdlBundles.parent }

func (eventsBdlBundles *BundleInformation_EventsBdl_EventsBdlBundles) GetParentYangName() string { return "events-bdl" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle
// Bundle interface
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    EventsBdlBundleItem BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem
}

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetFilter() yfilter.YFilter { return eventsBdlBundle.YFilter }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) SetFilter(yf yfilter.YFilter) { eventsBdlBundle.YFilter = yf }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "events-bdl-bundle-item" { return "EventsBdlBundleItem" }
    return ""
}

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetSegmentPath() string {
    return "events-bdl-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsBdlBundle.BundleInterface) + "']"
}

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bdl-bundle-item" {
        return &eventsBdlBundle.EventsBdlBundleItem
    }
    return nil
}

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-bdl-bundle-item"] = &eventsBdlBundle.EventsBdlBundleItem
    return children
}

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = eventsBdlBundle.BundleInterface
    return leafs
}

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetYangName() string { return "events-bdl-bundle" }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) SetParent(parent types.Entity) { eventsBdlBundle.parent = parent }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetParent() types.Entity { return eventsBdlBundle.parent }

func (eventsBdlBundle *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle) GetParentYangName() string { return "events-bdl-bundles" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem
// Data for this item
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items.
    Items []BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items
}

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetFilter() yfilter.YFilter { return eventsBdlBundleItem.YFilter }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) SetFilter(yf yfilter.YFilter) { eventsBdlBundleItem.YFilter = yf }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetSegmentPath() string {
    return "events-bdl-bundle-item"
}

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsBdlBundleItem.Items {
            if eventsBdlBundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items{}
        eventsBdlBundleItem.Items = append(eventsBdlBundleItem.Items, child)
        return &eventsBdlBundleItem.Items[len(eventsBdlBundleItem.Items)-1]
    }
    return nil
}

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBdlBundleItem.Items {
        children[eventsBdlBundleItem.Items[i].GetSegmentPath()] = &eventsBdlBundleItem.Items[i]
    }
    return children
}

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsBdlBundleItem.ItemName
    return leafs
}

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetYangName() string { return "events-bdl-bundle-item" }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) SetParent(parent types.Entity) { eventsBdlBundleItem.parent = parent }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetParent() types.Entity { return eventsBdlBundleItem.parent }

func (eventsBdlBundleItem *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem) GetParentYangName() string { return "events-bdl-bundle" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items
// Event items
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items) GetParentYangName() string { return "events-bdl-bundle-item" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlBundles_EventsBdlBundle_EventsBdlBundleItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups
// Bundle events for all ICCP Groups
type BundleInformation_EventsBdl_EventsBdlIccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup.
    EventsBdlIccpGroup []BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup
}

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetFilter() yfilter.YFilter { return eventsBdlIccpGroups.YFilter }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) SetFilter(yf yfilter.YFilter) { eventsBdlIccpGroups.YFilter = yf }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetGoName(yname string) string {
    if yname == "events-bdl-iccp-group" { return "EventsBdlIccpGroup" }
    return ""
}

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetSegmentPath() string {
    return "events-bdl-iccp-groups"
}

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bdl-iccp-group" {
        for _, c := range eventsBdlIccpGroups.EventsBdlIccpGroup {
            if eventsBdlIccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup{}
        eventsBdlIccpGroups.EventsBdlIccpGroup = append(eventsBdlIccpGroups.EventsBdlIccpGroup, child)
        return &eventsBdlIccpGroups.EventsBdlIccpGroup[len(eventsBdlIccpGroups.EventsBdlIccpGroup)-1]
    }
    return nil
}

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBdlIccpGroups.EventsBdlIccpGroup {
        children[eventsBdlIccpGroups.EventsBdlIccpGroup[i].GetSegmentPath()] = &eventsBdlIccpGroups.EventsBdlIccpGroup[i]
    }
    return children
}

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetYangName() string { return "events-bdl-iccp-groups" }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) SetParent(parent types.Entity) { eventsBdlIccpGroups.parent = parent }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetParent() types.Entity { return eventsBdlIccpGroups.parent }

func (eventsBdlIccpGroups *BundleInformation_EventsBdl_EventsBdlIccpGroups) GetParentYangName() string { return "events-bdl" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup
// ICCP Group ID
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item and all its members.
    EventsBdlBundleDescendantIccpGroup BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup
}

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetFilter() yfilter.YFilter { return eventsBdlIccpGroup.YFilter }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) SetFilter(yf yfilter.YFilter) { eventsBdlIccpGroup.YFilter = yf }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "events-bdl-bundle-descendant-iccp-group" { return "EventsBdlBundleDescendantIccpGroup" }
    return ""
}

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetSegmentPath() string {
    return "events-bdl-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", eventsBdlIccpGroup.IccpGroup) + "']"
}

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-bdl-bundle-descendant-iccp-group" {
        return &eventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup
    }
    return nil
}

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-bdl-bundle-descendant-iccp-group"] = &eventsBdlIccpGroup.EventsBdlBundleDescendantIccpGroup
    return children
}

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = eventsBdlIccpGroup.IccpGroup
    return leafs
}

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetYangName() string { return "events-bdl-iccp-group" }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) SetParent(parent types.Entity) { eventsBdlIccpGroup.parent = parent }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetParent() types.Entity { return eventsBdlIccpGroup.parent }

func (eventsBdlIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup) GetParentYangName() string { return "events-bdl-iccp-groups" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup
// Data for this item and all its members
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem.
    EventsItem []BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem
}

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetFilter() yfilter.YFilter { return eventsBdlBundleDescendantIccpGroup.YFilter }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) SetFilter(yf yfilter.YFilter) { eventsBdlBundleDescendantIccpGroup.YFilter = yf }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetGoName(yname string) string {
    if yname == "events-item" { return "EventsItem" }
    return ""
}

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetSegmentPath() string {
    return "events-bdl-bundle-descendant-iccp-group"
}

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-item" {
        for _, c := range eventsBdlBundleDescendantIccpGroup.EventsItem {
            if eventsBdlBundleDescendantIccpGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem{}
        eventsBdlBundleDescendantIccpGroup.EventsItem = append(eventsBdlBundleDescendantIccpGroup.EventsItem, child)
        return &eventsBdlBundleDescendantIccpGroup.EventsItem[len(eventsBdlBundleDescendantIccpGroup.EventsItem)-1]
    }
    return nil
}

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsBdlBundleDescendantIccpGroup.EventsItem {
        children[eventsBdlBundleDescendantIccpGroup.EventsItem[i].GetSegmentPath()] = &eventsBdlBundleDescendantIccpGroup.EventsItem[i]
    }
    return children
}

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetYangName() string { return "events-bdl-bundle-descendant-iccp-group" }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) SetParent(parent types.Entity) { eventsBdlBundleDescendantIccpGroup.parent = parent }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetParent() types.Entity { return eventsBdlBundleDescendantIccpGroup.parent }

func (eventsBdlBundleDescendantIccpGroup *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup) GetParentYangName() string { return "events-bdl-iccp-group" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem
// Event items
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items.
    Items []BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items
}

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetFilter() yfilter.YFilter { return eventsItem.YFilter }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) SetFilter(yf yfilter.YFilter) { eventsItem.YFilter = yf }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetSegmentPath() string {
    return "events-item"
}

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsItem.Items {
            if eventsItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items{}
        eventsItem.Items = append(eventsItem.Items, child)
        return &eventsItem.Items[len(eventsItem.Items)-1]
    }
    return nil
}

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsItem.Items {
        children[eventsItem.Items[i].GetSegmentPath()] = &eventsItem.Items[i]
    }
    return children
}

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsItem.ItemName
    return leafs
}

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetYangName() string { return "events-item" }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) SetParent(parent types.Entity) { eventsItem.parent = parent }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetParent() types.Entity { return eventsItem.parent }

func (eventsItem *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem) GetParentYangName() string { return "events-bdl-bundle-descendant-iccp-group" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items
// Event items
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items) GetParentYangName() string { return "events-item" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsBdl_EventsBdlIccpGroups_EventsBdlIccpGroup_EventsBdlBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_BundleBriefs
// Bundle interfaces with common bundle information
type BundleInformation_BundleBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_BundleBriefs_BundleBrief.
    BundleBrief []BundleInformation_BundleBriefs_BundleBrief
}

func (bundleBriefs *BundleInformation_BundleBriefs) GetFilter() yfilter.YFilter { return bundleBriefs.YFilter }

func (bundleBriefs *BundleInformation_BundleBriefs) SetFilter(yf yfilter.YFilter) { bundleBriefs.YFilter = yf }

func (bundleBriefs *BundleInformation_BundleBriefs) GetGoName(yname string) string {
    if yname == "bundle-brief" { return "BundleBrief" }
    return ""
}

func (bundleBriefs *BundleInformation_BundleBriefs) GetSegmentPath() string {
    return "bundle-briefs"
}

func (bundleBriefs *BundleInformation_BundleBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-brief" {
        for _, c := range bundleBriefs.BundleBrief {
            if bundleBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_BundleBriefs_BundleBrief{}
        bundleBriefs.BundleBrief = append(bundleBriefs.BundleBrief, child)
        return &bundleBriefs.BundleBrief[len(bundleBriefs.BundleBrief)-1]
    }
    return nil
}

func (bundleBriefs *BundleInformation_BundleBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleBriefs.BundleBrief {
        children[bundleBriefs.BundleBrief[i].GetSegmentPath()] = &bundleBriefs.BundleBrief[i]
    }
    return children
}

func (bundleBriefs *BundleInformation_BundleBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleBriefs *BundleInformation_BundleBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBriefs *BundleInformation_BundleBriefs) GetYangName() string { return "bundle-briefs" }

func (bundleBriefs *BundleInformation_BundleBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBriefs *BundleInformation_BundleBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBriefs *BundleInformation_BundleBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBriefs *BundleInformation_BundleBriefs) SetParent(parent types.Entity) { bundleBriefs.parent = parent }

func (bundleBriefs *BundleInformation_BundleBriefs) GetParent() types.Entity { return bundleBriefs.parent }

func (bundleBriefs *BundleInformation_BundleBriefs) GetParentYangName() string { return "bundle-information" }

// BundleInformation_BundleBriefs_BundleBrief
// Bundle interface
type BundleInformation_BundleBriefs_BundleBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    BundleBriefItem BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem
}

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetFilter() yfilter.YFilter { return bundleBrief.YFilter }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) SetFilter(yf yfilter.YFilter) { bundleBrief.YFilter = yf }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "bundle-brief-item" { return "BundleBriefItem" }
    return ""
}

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetSegmentPath() string {
    return "bundle-brief" + "[bundle-interface='" + fmt.Sprintf("%v", bundleBrief.BundleInterface) + "']"
}

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-brief-item" {
        return &bundleBrief.BundleBriefItem
    }
    return nil
}

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-brief-item"] = &bundleBrief.BundleBriefItem
    return children
}

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = bundleBrief.BundleInterface
    return leafs
}

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetYangName() string { return "bundle-brief" }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) SetParent(parent types.Entity) { bundleBrief.parent = parent }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetParent() types.Entity { return bundleBrief.parent }

func (bundleBrief *BundleInformation_BundleBriefs_BundleBrief) GetParentYangName() string { return "bundle-briefs" }

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem
// Data for this item
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig.
    BfdConfig []BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig
}

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetFilter() yfilter.YFilter { return bundleBriefItem.YFilter }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) SetFilter(yf yfilter.YFilter) { bundleBriefItem.YFilter = yf }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetSegmentPath() string {
    return "bundle-brief-item"
}

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &bundleBriefItem.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range bundleBriefItem.BfdConfig {
            if bundleBriefItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig{}
        bundleBriefItem.BfdConfig = append(bundleBriefItem.BfdConfig, child)
        return &bundleBriefItem.BfdConfig[len(bundleBriefItem.BfdConfig)-1]
    }
    return nil
}

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &bundleBriefItem.MacAddress
    for i := range bundleBriefItem.BfdConfig {
        children[bundleBriefItem.BfdConfig[i].GetSegmentPath()] = &bundleBriefItem.BfdConfig[i]
    }
    return children
}

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = bundleBriefItem.BundleInterfaceName
    leafs["available-bandwidth"] = bundleBriefItem.AvailableBandwidth
    leafs["effective-bandwidth"] = bundleBriefItem.EffectiveBandwidth
    leafs["configured-bandwidth"] = bundleBriefItem.ConfiguredBandwidth
    leafs["minimum-active-links"] = bundleBriefItem.MinimumActiveLinks
    leafs["maximum-active-links"] = bundleBriefItem.MaximumActiveLinks
    leafs["maximum-active-links-source"] = bundleBriefItem.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = bundleBriefItem.MinimumBandwidth
    leafs["primary-member"] = bundleBriefItem.PrimaryMember
    leafs["bundle-status"] = bundleBriefItem.BundleStatus
    leafs["active-member-count"] = bundleBriefItem.ActiveMemberCount
    leafs["standby-member-count"] = bundleBriefItem.StandbyMemberCount
    leafs["configured-member-count"] = bundleBriefItem.ConfiguredMemberCount
    leafs["mac-source"] = bundleBriefItem.MacSource
    leafs["mac-source-member"] = bundleBriefItem.MacSourceMember
    leafs["inter-chassis"] = bundleBriefItem.InterChassis
    leafs["is-active"] = bundleBriefItem.IsActive
    leafs["lacp-status"] = bundleBriefItem.LacpStatus
    leafs["mlacp-status"] = bundleBriefItem.MlacpStatus
    leafs["ipv4bfd-status"] = bundleBriefItem.Ipv4BfdStatus
    leafs["link-order-status"] = bundleBriefItem.LinkOrderStatus
    leafs["ipv6bfd-status"] = bundleBriefItem.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = bundleBriefItem.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = bundleBriefItem.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = bundleBriefItem.SuppressionTimer
    leafs["wait-while-timer"] = bundleBriefItem.WaitWhileTimer
    leafs["collector-max-delay"] = bundleBriefItem.CollectorMaxDelay
    leafs["cisco-extensions"] = bundleBriefItem.CiscoExtensions
    leafs["lacp-nonrevertive"] = bundleBriefItem.LacpNonrevertive
    leafs["iccp-group-id"] = bundleBriefItem.IccpGroupId
    leafs["active-foreign-member-count"] = bundleBriefItem.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = bundleBriefItem.ConfiguredForeignMemberCount
    leafs["switchover-type"] = bundleBriefItem.SwitchoverType
    leafs["maximize-threshold-value-links"] = bundleBriefItem.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = bundleBriefItem.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = bundleBriefItem.MlacpMode
    leafs["recovery-delay"] = bundleBriefItem.RecoveryDelay
    leafs["singleton"] = bundleBriefItem.Singleton
    return leafs
}

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetBundleName() string { return "cisco_ios_xr" }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetYangName() string { return "bundle-brief-item" }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) SetParent(parent types.Entity) { bundleBriefItem.parent = parent }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetParent() types.Entity { return bundleBriefItem.parent }

func (bundleBriefItem *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem) GetParentYangName() string { return "bundle-brief" }

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress
// MAC address of this member
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_MacAddress) GetParentYangName() string { return "bundle-brief-item" }

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig
// Configuration values for BFD on bundle members
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress
}

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig) GetParentYangName() string { return "bundle-brief-item" }

// BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *BundleInformation_BundleBriefs_BundleBrief_BundleBriefItem_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// BundleInformation_EventsMbr
// Bundle member events information for bundles and
// members
type BundleInformation_EventsMbr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interfaces with member events information.
    EventsMbrBundles BundleInformation_EventsMbr_EventsMbrBundles

    // Member interfaces with bundle member events information.
    EventsMbrMembers BundleInformation_EventsMbr_EventsMbrMembers

    // Member events for all ICCP Groups.
    EventsMbrIccpGroups BundleInformation_EventsMbr_EventsMbrIccpGroups
}

func (eventsMbr *BundleInformation_EventsMbr) GetFilter() yfilter.YFilter { return eventsMbr.YFilter }

func (eventsMbr *BundleInformation_EventsMbr) SetFilter(yf yfilter.YFilter) { eventsMbr.YFilter = yf }

func (eventsMbr *BundleInformation_EventsMbr) GetGoName(yname string) string {
    if yname == "events-mbr-bundles" { return "EventsMbrBundles" }
    if yname == "events-mbr-members" { return "EventsMbrMembers" }
    if yname == "events-mbr-iccp-groups" { return "EventsMbrIccpGroups" }
    return ""
}

func (eventsMbr *BundleInformation_EventsMbr) GetSegmentPath() string {
    return "events-mbr"
}

func (eventsMbr *BundleInformation_EventsMbr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-bundles" {
        return &eventsMbr.EventsMbrBundles
    }
    if childYangName == "events-mbr-members" {
        return &eventsMbr.EventsMbrMembers
    }
    if childYangName == "events-mbr-iccp-groups" {
        return &eventsMbr.EventsMbrIccpGroups
    }
    return nil
}

func (eventsMbr *BundleInformation_EventsMbr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-mbr-bundles"] = &eventsMbr.EventsMbrBundles
    children["events-mbr-members"] = &eventsMbr.EventsMbrMembers
    children["events-mbr-iccp-groups"] = &eventsMbr.EventsMbrIccpGroups
    return children
}

func (eventsMbr *BundleInformation_EventsMbr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbr *BundleInformation_EventsMbr) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbr *BundleInformation_EventsMbr) GetYangName() string { return "events-mbr" }

func (eventsMbr *BundleInformation_EventsMbr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbr *BundleInformation_EventsMbr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbr *BundleInformation_EventsMbr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbr *BundleInformation_EventsMbr) SetParent(parent types.Entity) { eventsMbr.parent = parent }

func (eventsMbr *BundleInformation_EventsMbr) GetParent() types.Entity { return eventsMbr.parent }

func (eventsMbr *BundleInformation_EventsMbr) GetParentYangName() string { return "bundle-information" }

// BundleInformation_EventsMbr_EventsMbrBundles
// Bundle interfaces with member events
// information
type BundleInformation_EventsMbr_EventsMbrBundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle.
    EventsMbrBundle []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle
}

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetFilter() yfilter.YFilter { return eventsMbrBundles.YFilter }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) SetFilter(yf yfilter.YFilter) { eventsMbrBundles.YFilter = yf }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetGoName(yname string) string {
    if yname == "events-mbr-bundle" { return "EventsMbrBundle" }
    return ""
}

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetSegmentPath() string {
    return "events-mbr-bundles"
}

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-bundle" {
        for _, c := range eventsMbrBundles.EventsMbrBundle {
            if eventsMbrBundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle{}
        eventsMbrBundles.EventsMbrBundle = append(eventsMbrBundles.EventsMbrBundle, child)
        return &eventsMbrBundles.EventsMbrBundle[len(eventsMbrBundles.EventsMbrBundle)-1]
    }
    return nil
}

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrBundles.EventsMbrBundle {
        children[eventsMbrBundles.EventsMbrBundle[i].GetSegmentPath()] = &eventsMbrBundles.EventsMbrBundle[i]
    }
    return children
}

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetYangName() string { return "events-mbr-bundles" }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) SetParent(parent types.Entity) { eventsMbrBundles.parent = parent }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetParent() types.Entity { return eventsMbrBundles.parent }

func (eventsMbrBundles *BundleInformation_EventsMbr_EventsMbrBundles) GetParentYangName() string { return "events-mbr" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle
// Bundle interface
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Children of bundle with member events information.
    EventsMbrBundleChildrenMembers BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers

    // Data for this item and all its members.
    EventsMbrBundleDescendant BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant
}

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetFilter() yfilter.YFilter { return eventsMbrBundle.YFilter }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) SetFilter(yf yfilter.YFilter) { eventsMbrBundle.YFilter = yf }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "events-mbr-bundle-children-members" { return "EventsMbrBundleChildrenMembers" }
    if yname == "events-mbr-bundle-descendant" { return "EventsMbrBundleDescendant" }
    return ""
}

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetSegmentPath() string {
    return "events-mbr-bundle" + "[bundle-interface='" + fmt.Sprintf("%v", eventsMbrBundle.BundleInterface) + "']"
}

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-bundle-children-members" {
        return &eventsMbrBundle.EventsMbrBundleChildrenMembers
    }
    if childYangName == "events-mbr-bundle-descendant" {
        return &eventsMbrBundle.EventsMbrBundleDescendant
    }
    return nil
}

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-mbr-bundle-children-members"] = &eventsMbrBundle.EventsMbrBundleChildrenMembers
    children["events-mbr-bundle-descendant"] = &eventsMbrBundle.EventsMbrBundleDescendant
    return children
}

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = eventsMbrBundle.BundleInterface
    return leafs
}

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetYangName() string { return "events-mbr-bundle" }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) SetParent(parent types.Entity) { eventsMbrBundle.parent = parent }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetParent() types.Entity { return eventsMbrBundle.parent }

func (eventsMbrBundle *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle) GetParentYangName() string { return "events-mbr-bundles" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers
// Children of bundle with member events
// information
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle member item with member events information. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember.
    EventsMbrBundleChildrenMember []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember
}

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetFilter() yfilter.YFilter { return eventsMbrBundleChildrenMembers.YFilter }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) SetFilter(yf yfilter.YFilter) { eventsMbrBundleChildrenMembers.YFilter = yf }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetGoName(yname string) string {
    if yname == "events-mbr-bundle-children-member" { return "EventsMbrBundleChildrenMember" }
    return ""
}

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetSegmentPath() string {
    return "events-mbr-bundle-children-members"
}

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-bundle-children-member" {
        for _, c := range eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember {
            if eventsMbrBundleChildrenMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember{}
        eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember = append(eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember, child)
        return &eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember[len(eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember)-1]
    }
    return nil
}

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember {
        children[eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember[i].GetSegmentPath()] = &eventsMbrBundleChildrenMembers.EventsMbrBundleChildrenMember[i]
    }
    return children
}

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetYangName() string { return "events-mbr-bundle-children-members" }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) SetParent(parent types.Entity) { eventsMbrBundleChildrenMembers.parent = parent }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetParent() types.Entity { return eventsMbrBundleChildrenMembers.parent }

func (eventsMbrBundleChildrenMembers *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers) GetParentYangName() string { return "events-mbr-bundle" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember
// Bundle member item with member events
// information
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items.
    Items []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items
}

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetFilter() yfilter.YFilter { return eventsMbrBundleChildrenMember.YFilter }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) SetFilter(yf yfilter.YFilter) { eventsMbrBundleChildrenMember.YFilter = yf }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetSegmentPath() string {
    return "events-mbr-bundle-children-member" + "[member-interface='" + fmt.Sprintf("%v", eventsMbrBundleChildrenMember.MemberInterface) + "']"
}

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsMbrBundleChildrenMember.Items {
            if eventsMbrBundleChildrenMember.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items{}
        eventsMbrBundleChildrenMember.Items = append(eventsMbrBundleChildrenMember.Items, child)
        return &eventsMbrBundleChildrenMember.Items[len(eventsMbrBundleChildrenMember.Items)-1]
    }
    return nil
}

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrBundleChildrenMember.Items {
        children[eventsMbrBundleChildrenMember.Items[i].GetSegmentPath()] = &eventsMbrBundleChildrenMember.Items[i]
    }
    return children
}

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = eventsMbrBundleChildrenMember.MemberInterface
    leafs["item-name"] = eventsMbrBundleChildrenMember.ItemName
    return leafs
}

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetYangName() string { return "events-mbr-bundle-children-member" }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) SetParent(parent types.Entity) { eventsMbrBundleChildrenMember.parent = parent }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetParent() types.Entity { return eventsMbrBundleChildrenMember.parent }

func (eventsMbrBundleChildrenMember *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember) GetParentYangName() string { return "events-mbr-bundle-children-members" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items) GetParentYangName() string { return "events-mbr-bundle-children-member" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleChildrenMembers_EventsMbrBundleChildrenMember_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant
// Data for this item and all its members
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem.
    EventsItem []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem
}

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetFilter() yfilter.YFilter { return eventsMbrBundleDescendant.YFilter }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) SetFilter(yf yfilter.YFilter) { eventsMbrBundleDescendant.YFilter = yf }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetGoName(yname string) string {
    if yname == "events-item" { return "EventsItem" }
    return ""
}

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetSegmentPath() string {
    return "events-mbr-bundle-descendant"
}

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-item" {
        for _, c := range eventsMbrBundleDescendant.EventsItem {
            if eventsMbrBundleDescendant.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem{}
        eventsMbrBundleDescendant.EventsItem = append(eventsMbrBundleDescendant.EventsItem, child)
        return &eventsMbrBundleDescendant.EventsItem[len(eventsMbrBundleDescendant.EventsItem)-1]
    }
    return nil
}

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrBundleDescendant.EventsItem {
        children[eventsMbrBundleDescendant.EventsItem[i].GetSegmentPath()] = &eventsMbrBundleDescendant.EventsItem[i]
    }
    return children
}

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetYangName() string { return "events-mbr-bundle-descendant" }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) SetParent(parent types.Entity) { eventsMbrBundleDescendant.parent = parent }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetParent() types.Entity { return eventsMbrBundleDescendant.parent }

func (eventsMbrBundleDescendant *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant) GetParentYangName() string { return "events-mbr-bundle" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem
// Event items
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items.
    Items []BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetFilter() yfilter.YFilter { return eventsItem.YFilter }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) SetFilter(yf yfilter.YFilter) { eventsItem.YFilter = yf }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetSegmentPath() string {
    return "events-item"
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsItem.Items {
            if eventsItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items{}
        eventsItem.Items = append(eventsItem.Items, child)
        return &eventsItem.Items[len(eventsItem.Items)-1]
    }
    return nil
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsItem.Items {
        children[eventsItem.Items[i].GetSegmentPath()] = &eventsItem.Items[i]
    }
    return children
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsItem.ItemName
    return leafs
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetYangName() string { return "events-item" }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) SetParent(parent types.Entity) { eventsItem.parent = parent }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetParent() types.Entity { return eventsItem.parent }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem) GetParentYangName() string { return "events-mbr-bundle-descendant" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items) GetParentYangName() string { return "events-item" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrBundles_EventsMbrBundle_EventsMbrBundleDescendant_EventsItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsMbr_EventsMbrMembers
// Member interfaces with bundle member events
// information
type BundleInformation_EventsMbr_EventsMbrMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember.
    EventsMbrMember []BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember
}

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetFilter() yfilter.YFilter { return eventsMbrMembers.YFilter }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) SetFilter(yf yfilter.YFilter) { eventsMbrMembers.YFilter = yf }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetGoName(yname string) string {
    if yname == "events-mbr-member" { return "EventsMbrMember" }
    return ""
}

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetSegmentPath() string {
    return "events-mbr-members"
}

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-member" {
        for _, c := range eventsMbrMembers.EventsMbrMember {
            if eventsMbrMembers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember{}
        eventsMbrMembers.EventsMbrMember = append(eventsMbrMembers.EventsMbrMember, child)
        return &eventsMbrMembers.EventsMbrMember[len(eventsMbrMembers.EventsMbrMember)-1]
    }
    return nil
}

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrMembers.EventsMbrMember {
        children[eventsMbrMembers.EventsMbrMember[i].GetSegmentPath()] = &eventsMbrMembers.EventsMbrMember[i]
    }
    return children
}

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetYangName() string { return "events-mbr-members" }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) SetParent(parent types.Entity) { eventsMbrMembers.parent = parent }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetParent() types.Entity { return eventsMbrMembers.parent }

func (eventsMbrMembers *BundleInformation_EventsMbr_EventsMbrMembers) GetParentYangName() string { return "events-mbr" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember
// Member interface
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    EventsMbrMemberItem BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem
}

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetFilter() yfilter.YFilter { return eventsMbrMember.YFilter }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) SetFilter(yf yfilter.YFilter) { eventsMbrMember.YFilter = yf }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "events-mbr-member-item" { return "EventsMbrMemberItem" }
    return ""
}

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetSegmentPath() string {
    return "events-mbr-member" + "[member-interface='" + fmt.Sprintf("%v", eventsMbrMember.MemberInterface) + "']"
}

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-member-item" {
        return &eventsMbrMember.EventsMbrMemberItem
    }
    return nil
}

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-mbr-member-item"] = &eventsMbrMember.EventsMbrMemberItem
    return children
}

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = eventsMbrMember.MemberInterface
    return leafs
}

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetYangName() string { return "events-mbr-member" }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) SetParent(parent types.Entity) { eventsMbrMember.parent = parent }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetParent() types.Entity { return eventsMbrMember.parent }

func (eventsMbrMember *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember) GetParentYangName() string { return "events-mbr-members" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem
// Data for this item
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items.
    Items []BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items
}

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetFilter() yfilter.YFilter { return eventsMbrMemberItem.YFilter }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) SetFilter(yf yfilter.YFilter) { eventsMbrMemberItem.YFilter = yf }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetSegmentPath() string {
    return "events-mbr-member-item"
}

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsMbrMemberItem.Items {
            if eventsMbrMemberItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items{}
        eventsMbrMemberItem.Items = append(eventsMbrMemberItem.Items, child)
        return &eventsMbrMemberItem.Items[len(eventsMbrMemberItem.Items)-1]
    }
    return nil
}

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrMemberItem.Items {
        children[eventsMbrMemberItem.Items[i].GetSegmentPath()] = &eventsMbrMemberItem.Items[i]
    }
    return children
}

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsMbrMemberItem.ItemName
    return leafs
}

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetYangName() string { return "events-mbr-member-item" }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) SetParent(parent types.Entity) { eventsMbrMemberItem.parent = parent }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetParent() types.Entity { return eventsMbrMemberItem.parent }

func (eventsMbrMemberItem *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem) GetParentYangName() string { return "events-mbr-member" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items) GetParentYangName() string { return "events-mbr-member-item" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrMembers_EventsMbrMember_EventsMbrMemberItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups
// Member events for all ICCP Groups
type BundleInformation_EventsMbr_EventsMbrIccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup.
    EventsMbrIccpGroup []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup
}

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetFilter() yfilter.YFilter { return eventsMbrIccpGroups.YFilter }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) SetFilter(yf yfilter.YFilter) { eventsMbrIccpGroups.YFilter = yf }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetGoName(yname string) string {
    if yname == "events-mbr-iccp-group" { return "EventsMbrIccpGroup" }
    return ""
}

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetSegmentPath() string {
    return "events-mbr-iccp-groups"
}

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-iccp-group" {
        for _, c := range eventsMbrIccpGroups.EventsMbrIccpGroup {
            if eventsMbrIccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup{}
        eventsMbrIccpGroups.EventsMbrIccpGroup = append(eventsMbrIccpGroups.EventsMbrIccpGroup, child)
        return &eventsMbrIccpGroups.EventsMbrIccpGroup[len(eventsMbrIccpGroups.EventsMbrIccpGroup)-1]
    }
    return nil
}

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrIccpGroups.EventsMbrIccpGroup {
        children[eventsMbrIccpGroups.EventsMbrIccpGroup[i].GetSegmentPath()] = &eventsMbrIccpGroups.EventsMbrIccpGroup[i]
    }
    return children
}

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetYangName() string { return "events-mbr-iccp-groups" }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) SetParent(parent types.Entity) { eventsMbrIccpGroups.parent = parent }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetParent() types.Entity { return eventsMbrIccpGroups.parent }

func (eventsMbrIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups) GetParentYangName() string { return "events-mbr" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup
// ICCP Group ID
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Children of bundle with member events information.
    EventsMbrBundleChildrenMemberIccpGroups BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups

    // Data for this item and all its members.
    EventsMbrBundleDescendantIccpGroup BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup
}

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetFilter() yfilter.YFilter { return eventsMbrIccpGroup.YFilter }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) SetFilter(yf yfilter.YFilter) { eventsMbrIccpGroup.YFilter = yf }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "events-mbr-bundle-children-member-iccp-groups" { return "EventsMbrBundleChildrenMemberIccpGroups" }
    if yname == "events-mbr-bundle-descendant-iccp-group" { return "EventsMbrBundleDescendantIccpGroup" }
    return ""
}

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetSegmentPath() string {
    return "events-mbr-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", eventsMbrIccpGroup.IccpGroup) + "']"
}

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-bundle-children-member-iccp-groups" {
        return &eventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups
    }
    if childYangName == "events-mbr-bundle-descendant-iccp-group" {
        return &eventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup
    }
    return nil
}

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events-mbr-bundle-children-member-iccp-groups"] = &eventsMbrIccpGroup.EventsMbrBundleChildrenMemberIccpGroups
    children["events-mbr-bundle-descendant-iccp-group"] = &eventsMbrIccpGroup.EventsMbrBundleDescendantIccpGroup
    return children
}

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = eventsMbrIccpGroup.IccpGroup
    return leafs
}

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetYangName() string { return "events-mbr-iccp-group" }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) SetParent(parent types.Entity) { eventsMbrIccpGroup.parent = parent }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetParent() types.Entity { return eventsMbrIccpGroup.parent }

func (eventsMbrIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup) GetParentYangName() string { return "events-mbr-iccp-groups" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups
// Children of bundle with member events
// information
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle member item with ICCP events information. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup.
    EventsMbrBundleChildrenMemberIccpGroup []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup
}

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetFilter() yfilter.YFilter { return eventsMbrBundleChildrenMemberIccpGroups.YFilter }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) SetFilter(yf yfilter.YFilter) { eventsMbrBundleChildrenMemberIccpGroups.YFilter = yf }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetGoName(yname string) string {
    if yname == "events-mbr-bundle-children-member-iccp-group" { return "EventsMbrBundleChildrenMemberIccpGroup" }
    return ""
}

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetSegmentPath() string {
    return "events-mbr-bundle-children-member-iccp-groups"
}

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-mbr-bundle-children-member-iccp-group" {
        for _, c := range eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup {
            if eventsMbrBundleChildrenMemberIccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup{}
        eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup = append(eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup, child)
        return &eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup[len(eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup)-1]
    }
    return nil
}

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup {
        children[eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup[i].GetSegmentPath()] = &eventsMbrBundleChildrenMemberIccpGroups.EventsMbrBundleChildrenMemberIccpGroup[i]
    }
    return children
}

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetYangName() string { return "events-mbr-bundle-children-member-iccp-groups" }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) SetParent(parent types.Entity) { eventsMbrBundleChildrenMemberIccpGroups.parent = parent }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetParent() types.Entity { return eventsMbrBundleChildrenMemberIccpGroups.parent }

func (eventsMbrBundleChildrenMemberIccpGroups *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups) GetParentYangName() string { return "events-mbr-iccp-group" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup
// Bundle member item with ICCP events
// information
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items.
    Items []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items
}

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetFilter() yfilter.YFilter { return eventsMbrBundleChildrenMemberIccpGroup.YFilter }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) SetFilter(yf yfilter.YFilter) { eventsMbrBundleChildrenMemberIccpGroup.YFilter = yf }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetSegmentPath() string {
    return "events-mbr-bundle-children-member-iccp-group" + "[member-interface='" + fmt.Sprintf("%v", eventsMbrBundleChildrenMemberIccpGroup.MemberInterface) + "']"
}

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsMbrBundleChildrenMemberIccpGroup.Items {
            if eventsMbrBundleChildrenMemberIccpGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items{}
        eventsMbrBundleChildrenMemberIccpGroup.Items = append(eventsMbrBundleChildrenMemberIccpGroup.Items, child)
        return &eventsMbrBundleChildrenMemberIccpGroup.Items[len(eventsMbrBundleChildrenMemberIccpGroup.Items)-1]
    }
    return nil
}

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrBundleChildrenMemberIccpGroup.Items {
        children[eventsMbrBundleChildrenMemberIccpGroup.Items[i].GetSegmentPath()] = &eventsMbrBundleChildrenMemberIccpGroup.Items[i]
    }
    return children
}

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = eventsMbrBundleChildrenMemberIccpGroup.MemberInterface
    leafs["item-name"] = eventsMbrBundleChildrenMemberIccpGroup.ItemName
    return leafs
}

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetYangName() string { return "events-mbr-bundle-children-member-iccp-group" }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) SetParent(parent types.Entity) { eventsMbrBundleChildrenMemberIccpGroup.parent = parent }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetParent() types.Entity { return eventsMbrBundleChildrenMemberIccpGroup.parent }

func (eventsMbrBundleChildrenMemberIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup) GetParentYangName() string { return "events-mbr-bundle-children-member-iccp-groups" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items) GetParentYangName() string { return "events-mbr-bundle-children-member-iccp-group" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleChildrenMemberIccpGroups_EventsMbrBundleChildrenMemberIccpGroup_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup
// Data for this item and all its members
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem.
    EventsItem []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem
}

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetFilter() yfilter.YFilter { return eventsMbrBundleDescendantIccpGroup.YFilter }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) SetFilter(yf yfilter.YFilter) { eventsMbrBundleDescendantIccpGroup.YFilter = yf }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetGoName(yname string) string {
    if yname == "events-item" { return "EventsItem" }
    return ""
}

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetSegmentPath() string {
    return "events-mbr-bundle-descendant-iccp-group"
}

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events-item" {
        for _, c := range eventsMbrBundleDescendantIccpGroup.EventsItem {
            if eventsMbrBundleDescendantIccpGroup.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem{}
        eventsMbrBundleDescendantIccpGroup.EventsItem = append(eventsMbrBundleDescendantIccpGroup.EventsItem, child)
        return &eventsMbrBundleDescendantIccpGroup.EventsItem[len(eventsMbrBundleDescendantIccpGroup.EventsItem)-1]
    }
    return nil
}

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsMbrBundleDescendantIccpGroup.EventsItem {
        children[eventsMbrBundleDescendantIccpGroup.EventsItem[i].GetSegmentPath()] = &eventsMbrBundleDescendantIccpGroup.EventsItem[i]
    }
    return children
}

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetYangName() string { return "events-mbr-bundle-descendant-iccp-group" }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) SetParent(parent types.Entity) { eventsMbrBundleDescendantIccpGroup.parent = parent }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetParent() types.Entity { return eventsMbrBundleDescendantIccpGroup.parent }

func (eventsMbrBundleDescendantIccpGroup *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup) GetParentYangName() string { return "events-mbr-iccp-group" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem
// Event items
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name for the current item to use. The type is string.
    ItemName interface{}

    // Event items. The type is slice of
    // BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items.
    Items []BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetFilter() yfilter.YFilter { return eventsItem.YFilter }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) SetFilter(yf yfilter.YFilter) { eventsItem.YFilter = yf }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetGoName(yname string) string {
    if yname == "item-name" { return "ItemName" }
    if yname == "items" { return "Items" }
    return ""
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetSegmentPath() string {
    return "events-item"
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range eventsItem.Items {
            if eventsItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items{}
        eventsItem.Items = append(eventsItem.Items, child)
        return &eventsItem.Items[len(eventsItem.Items)-1]
    }
    return nil
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventsItem.Items {
        children[eventsItem.Items[i].GetSegmentPath()] = &eventsItem.Items[i]
    }
    return children
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["item-name"] = eventsItem.ItemName
    return leafs
}

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetBundleName() string { return "cisco_ios_xr" }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetYangName() string { return "events-item" }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) SetParent(parent types.Entity) { eventsItem.parent = parent }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetParent() types.Entity { return eventsItem.parent }

func (eventsItem *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem) GetParentYangName() string { return "events-mbr-bundle-descendant-iccp-group" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items
// Event items
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EventType. The type is BmdBagTarget.
    EventType interface{}

    // Event information for a member.
    MemberEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo

    // Event information for a bundle.
    BundleEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo

    // Event information for an RG.
    RgEvtInfo BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetGoName(yname string) string {
    if yname == "event-type" { return "EventType" }
    if yname == "member-evt-info" { return "MemberEvtInfo" }
    if yname == "bundle-evt-info" { return "BundleEvtInfo" }
    if yname == "rg-evt-info" { return "RgEvtInfo" }
    return ""
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-evt-info" {
        return &items.MemberEvtInfo
    }
    if childYangName == "bundle-evt-info" {
        return &items.BundleEvtInfo
    }
    if childYangName == "rg-evt-info" {
        return &items.RgEvtInfo
    }
    return nil
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-evt-info"] = &items.MemberEvtInfo
    children["bundle-evt-info"] = &items.BundleEvtInfo
    children["rg-evt-info"] = &items.RgEvtInfo
    return children
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-type"] = items.EventType
    return leafs
}

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items) GetParentYangName() string { return "events-item" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo
// Event information for a member
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for member. The type is BmdBagEventMbrItem.
    MemberEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetFilter() yfilter.YFilter { return memberEvtInfo.YFilter }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) SetFilter(yf yfilter.YFilter) { memberEvtInfo.YFilter = yf }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetGoName(yname string) string {
    if yname == "member-event-type" { return "MemberEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetSegmentPath() string {
    return "member-evt-info"
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &memberEvtInfo.Data
    }
    return nil
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &memberEvtInfo.Data
    return children
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-event-type"] = memberEvtInfo.MemberEventType
    leafs["time-stamp"] = memberEvtInfo.TimeStamp
    return leafs
}

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetYangName() string { return "member-evt-info" }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) SetParent(parent types.Entity) { memberEvtInfo.parent = parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetParent() types.Entity { return memberEvtInfo.parent }

func (memberEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_MemberEvtInfo_Data) GetParentYangName() string { return "member-evt-info" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo
// Event information for a bundle
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for bundle. The type is BmdBagEventBdlItem.
    BundleEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetFilter() yfilter.YFilter { return bundleEvtInfo.YFilter }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) SetFilter(yf yfilter.YFilter) { bundleEvtInfo.YFilter = yf }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetGoName(yname string) string {
    if yname == "bundle-event-type" { return "BundleEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetSegmentPath() string {
    return "bundle-evt-info"
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundleEvtInfo.Data
    }
    return nil
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundleEvtInfo.Data
    return children
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-event-type"] = bundleEvtInfo.BundleEventType
    leafs["time-stamp"] = bundleEvtInfo.TimeStamp
    return leafs
}

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetYangName() string { return "bundle-evt-info" }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) SetParent(parent types.Entity) { bundleEvtInfo.parent = parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetParent() types.Entity { return bundleEvtInfo.parent }

func (bundleEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_BundleEvtInfo_Data) GetParentYangName() string { return "bundle-evt-info" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo
// Event information for an RG
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of event for RG. The type is BmdBagEventRgItem.
    RgEventType interface{}

    // Time stamp of the event. The type is interface{} with range:
    // 0..18446744073709551615.
    TimeStamp interface{}

    // Additional data for the event.
    Data BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetFilter() yfilter.YFilter { return rgEvtInfo.YFilter }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) SetFilter(yf yfilter.YFilter) { rgEvtInfo.YFilter = yf }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetGoName(yname string) string {
    if yname == "rg-event-type" { return "RgEventType" }
    if yname == "time-stamp" { return "TimeStamp" }
    if yname == "data" { return "Data" }
    return ""
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetSegmentPath() string {
    return "rg-evt-info"
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &rgEvtInfo.Data
    }
    return nil
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &rgEvtInfo.Data
    return children
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rg-event-type"] = rgEvtInfo.RgEventType
    leafs["time-stamp"] = rgEvtInfo.TimeStamp
    return leafs
}

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetYangName() string { return "rg-evt-info" }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) SetParent(parent types.Entity) { rgEvtInfo.parent = parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetParent() types.Entity { return rgEvtInfo.parent }

func (rgEvtInfo *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo) GetParentYangName() string { return "items" }

// BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data
// Additional data for the event
type BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DataType. The type is BmdBagEventData.
    DataType interface{}

    // NoData. The type is interface{} with range: 0..255.
    NoData interface{}

    // Error. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // StringData. The type is string.
    StringData interface{}
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetGoName(yname string) string {
    if yname == "data-type" { return "DataType" }
    if yname == "no-data" { return "NoData" }
    if yname == "error" { return "Error" }
    if yname == "string-data" { return "StringData" }
    return ""
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetSegmentPath() string {
    return "data"
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["data-type"] = data.DataType
    leafs["no-data"] = data.NoData
    leafs["error"] = data.Error
    leafs["string-data"] = data.StringData
    return leafs
}

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetYangName() string { return "data" }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetParent() types.Entity { return data.parent }

func (data *BundleInformation_EventsMbr_EventsMbrIccpGroups_EventsMbrIccpGroup_EventsMbrBundleDescendantIccpGroup_EventsItem_Items_RgEvtInfo_Data) GetParentYangName() string { return "rg-evt-info" }

// BundleInformation_MlacpIccpGroupCounters
// ICCP Group specific counters of mLACP events
type BundleInformation_MlacpIccpGroupCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Groups with counters of mLACP events.
    IccpGroups BundleInformation_MlacpIccpGroupCounters_IccpGroups
}

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetFilter() yfilter.YFilter { return mlacpIccpGroupCounters.YFilter }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) SetFilter(yf yfilter.YFilter) { mlacpIccpGroupCounters.YFilter = yf }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetGoName(yname string) string {
    if yname == "iccp-groups" { return "IccpGroups" }
    return ""
}

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetSegmentPath() string {
    return "mlacp-iccp-group-counters"
}

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-groups" {
        return &mlacpIccpGroupCounters.IccpGroups
    }
    return nil
}

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-groups"] = &mlacpIccpGroupCounters.IccpGroups
    return children
}

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetYangName() string { return "mlacp-iccp-group-counters" }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) SetParent(parent types.Entity) { mlacpIccpGroupCounters.parent = parent }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetParent() types.Entity { return mlacpIccpGroupCounters.parent }

func (mlacpIccpGroupCounters *BundleInformation_MlacpIccpGroupCounters) GetParentYangName() string { return "bundle-information" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups
// ICCP Groups with counters of mLACP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup.
    IccpGroup []BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup
}

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetFilter() yfilter.YFilter { return iccpGroups.YFilter }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) SetFilter(yf yfilter.YFilter) { iccpGroups.YFilter = yf }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    return ""
}

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetSegmentPath() string {
    return "iccp-groups"
}

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group" {
        for _, c := range iccpGroups.IccpGroup {
            if iccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup{}
        iccpGroups.IccpGroup = append(iccpGroups.IccpGroup, child)
        return &iccpGroups.IccpGroup[len(iccpGroups.IccpGroup)-1]
    }
    return nil
}

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroups.IccpGroup {
        children[iccpGroups.IccpGroup[i].GetSegmentPath()] = &iccpGroups.IccpGroup[i]
    }
    return children
}

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetYangName() string { return "iccp-groups" }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) SetParent(parent types.Entity) { iccpGroups.parent = parent }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetParent() types.Entity { return iccpGroups.parent }

func (iccpGroups *BundleInformation_MlacpIccpGroupCounters_IccpGroups) GetParentYangName() string { return "mlacp-iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup
// ICCP Group ID
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item and its parent RG.
    IccpGroupAncestorBundle BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle

    // Data for this item and its parent RG.
    IccpGroupAncestorMember BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember

    // Data for this item and its parent RG.
    IccpGroupAncestorNode BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode

    // Data for this item.
    IccpGroupItem BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem
}

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetFilter() yfilter.YFilter { return iccpGroup.YFilter }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) SetFilter(yf yfilter.YFilter) { iccpGroup.YFilter = yf }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "iccp-group-ancestor-bundle" { return "IccpGroupAncestorBundle" }
    if yname == "iccp-group-ancestor-member" { return "IccpGroupAncestorMember" }
    if yname == "iccp-group-ancestor-node" { return "IccpGroupAncestorNode" }
    if yname == "iccp-group-item" { return "IccpGroupItem" }
    return ""
}

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetSegmentPath() string {
    return "iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", iccpGroup.IccpGroup) + "']"
}

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-ancestor-bundle" {
        return &iccpGroup.IccpGroupAncestorBundle
    }
    if childYangName == "iccp-group-ancestor-member" {
        return &iccpGroup.IccpGroupAncestorMember
    }
    if childYangName == "iccp-group-ancestor-node" {
        return &iccpGroup.IccpGroupAncestorNode
    }
    if childYangName == "iccp-group-item" {
        return &iccpGroup.IccpGroupItem
    }
    return nil
}

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-ancestor-bundle"] = &iccpGroup.IccpGroupAncestorBundle
    children["iccp-group-ancestor-member"] = &iccpGroup.IccpGroupAncestorMember
    children["iccp-group-ancestor-node"] = &iccpGroup.IccpGroupAncestorNode
    children["iccp-group-item"] = &iccpGroup.IccpGroupItem
    return children
}

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = iccpGroup.IccpGroup
    return leafs
}

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetYangName() string { return "iccp-group" }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) SetParent(parent types.Entity) { iccpGroup.parent = parent }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetParent() types.Entity { return iccpGroup.parent }

func (iccpGroup *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup) GetParentYangName() string { return "iccp-groups" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle
// Data for this item and its parent RG
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters
}

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetFilter() yfilter.YFilter { return iccpGroupAncestorBundle.YFilter }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) SetFilter(yf yfilter.YFilter) { iccpGroupAncestorBundle.YFilter = yf }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "iccp-group-counters" { return "IccpGroupCounters" }
    return ""
}

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetSegmentPath() string {
    return "iccp-group-ancestor-bundle"
}

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-counters" {
        return &iccpGroupAncestorBundle.IccpGroupCounters
    }
    return nil
}

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-counters"] = &iccpGroupAncestorBundle.IccpGroupCounters
    return children
}

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupAncestorBundle.IccpGroupId
    return leafs
}

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetYangName() string { return "iccp-group-ancestor-bundle" }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) SetParent(parent types.Entity) { iccpGroupAncestorBundle.parent = parent }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetParent() types.Entity { return iccpGroupAncestorBundle.parent }

func (iccpGroupAncestorBundle *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetFilter() yfilter.YFilter { return iccpGroupCounters.YFilter }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) SetFilter(yf yfilter.YFilter) { iccpGroupCounters.YFilter = yf }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "connection" { return "Connection" }
    if yname == "tl-vs" { return "TlVs" }
    if yname == "invalid-tl-vs" { return "InvalidTlVs" }
    if yname == "iccp-messages" { return "IccpMessages" }
    if yname == "iccp-events" { return "IccpEvents" }
    return ""
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetSegmentPath() string {
    return "iccp-group-counters"
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connection" {
        return &iccpGroupCounters.Connection
    }
    if childYangName == "tl-vs" {
        return &iccpGroupCounters.TlVs
    }
    if childYangName == "invalid-tl-vs" {
        return &iccpGroupCounters.InvalidTlVs
    }
    if childYangName == "iccp-messages" {
        return &iccpGroupCounters.IccpMessages
    }
    if childYangName == "iccp-events" {
        return &iccpGroupCounters.IccpEvents
    }
    return nil
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connection"] = &iccpGroupCounters.Connection
    children["tl-vs"] = &iccpGroupCounters.TlVs
    children["invalid-tl-vs"] = &iccpGroupCounters.InvalidTlVs
    children["iccp-messages"] = &iccpGroupCounters.IccpMessages
    children["iccp-events"] = &iccpGroupCounters.IccpEvents
    return children
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = iccpGroupCounters.LastTimeCleared
    leafs["time-since-cleared"] = iccpGroupCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = iccpGroupCounters.LastUnexpectedEvent
    return leafs
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetYangName() string { return "iccp-group-counters" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) SetParent(parent types.Entity) { iccpGroupCounters.parent = parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetParent() types.Entity { return iccpGroupCounters.parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters) GetParentYangName() string { return "iccp-group-ancestor-bundle" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetFilter() yfilter.YFilter { return connection.YFilter }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) SetFilter(yf yfilter.YFilter) { connection.YFilter = yf }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetGoName(yname string) string {
    if yname == "sent-connects" { return "SentConnects" }
    if yname == "received-connects" { return "ReceivedConnects" }
    if yname == "iccp-invalid-connects" { return "IccpInvalidConnects" }
    if yname == "iccp-config-connect-errors" { return "IccpConfigConnectErrors" }
    if yname == "iccp-count-connect-errors" { return "IccpCountConnectErrors" }
    if yname == "sent-wrong-versions" { return "SentWrongVersions" }
    if yname == "received-wrong-versions" { return "ReceivedWrongVersions" }
    if yname == "sent-disconnects" { return "SentDisconnects" }
    if yname == "received-disconnects" { return "ReceivedDisconnects" }
    if yname == "iccp-invalid-disconnects" { return "IccpInvalidDisconnects" }
    return ""
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetSegmentPath() string {
    return "connection"
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-connects"] = connection.SentConnects
    leafs["received-connects"] = connection.ReceivedConnects
    leafs["iccp-invalid-connects"] = connection.IccpInvalidConnects
    leafs["iccp-config-connect-errors"] = connection.IccpConfigConnectErrors
    leafs["iccp-count-connect-errors"] = connection.IccpCountConnectErrors
    leafs["sent-wrong-versions"] = connection.SentWrongVersions
    leafs["received-wrong-versions"] = connection.ReceivedWrongVersions
    leafs["sent-disconnects"] = connection.SentDisconnects
    leafs["received-disconnects"] = connection.ReceivedDisconnects
    leafs["iccp-invalid-disconnects"] = connection.IccpInvalidDisconnects
    return leafs
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetBundleName() string { return "cisco_ios_xr" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetYangName() string { return "connection" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) SetParent(parent types.Entity) { connection.parent = parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetParent() types.Entity { return connection.parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_Connection) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetFilter() yfilter.YFilter { return tlVs.YFilter }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) SetFilter(yf yfilter.YFilter) { tlVs.YFilter = yf }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetGoName(yname string) string {
    if yname == "sent-config" { return "SentConfig" }
    if yname == "received-config" { return "ReceivedConfig" }
    if yname == "sent-state" { return "SentState" }
    if yname == "received-state" { return "ReceivedState" }
    if yname == "sent-na-ks" { return "SentNaKs" }
    if yname == "received-na-ks" { return "ReceivedNaKs" }
    if yname == "sent-sync-requests" { return "SentSyncRequests" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    if yname == "sent-state-sync-requests" { return "SentStateSyncRequests" }
    if yname == "received-state-sync-requests" { return "ReceivedStateSyncRequests" }
    if yname == "sent-config-sync-requests" { return "SentConfigSyncRequests" }
    if yname == "received-config-sync-requests" { return "ReceivedConfigSyncRequests" }
    if yname == "sent-solicited-sync-data" { return "SentSolicitedSyncData" }
    if yname == "received-solicited-sync-data" { return "ReceivedSolicitedSyncData" }
    if yname == "sent-unsolicited-sync-data" { return "SentUnsolicitedSyncData" }
    if yname == "received-unsolicited-sync-data" { return "ReceivedUnsolicitedSyncData" }
    return ""
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetSegmentPath() string {
    return "tl-vs"
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config"] = tlVs.SentConfig
    leafs["received-config"] = tlVs.ReceivedConfig
    leafs["sent-state"] = tlVs.SentState
    leafs["received-state"] = tlVs.ReceivedState
    leafs["sent-na-ks"] = tlVs.SentNaKs
    leafs["received-na-ks"] = tlVs.ReceivedNaKs
    leafs["sent-sync-requests"] = tlVs.SentSyncRequests
    leafs["received-sync-requests"] = tlVs.ReceivedSyncRequests
    leafs["sent-state-sync-requests"] = tlVs.SentStateSyncRequests
    leafs["received-state-sync-requests"] = tlVs.ReceivedStateSyncRequests
    leafs["sent-config-sync-requests"] = tlVs.SentConfigSyncRequests
    leafs["received-config-sync-requests"] = tlVs.ReceivedConfigSyncRequests
    leafs["sent-solicited-sync-data"] = tlVs.SentSolicitedSyncData
    leafs["received-solicited-sync-data"] = tlVs.ReceivedSolicitedSyncData
    leafs["sent-unsolicited-sync-data"] = tlVs.SentUnsolicitedSyncData
    leafs["received-unsolicited-sync-data"] = tlVs.ReceivedUnsolicitedSyncData
    return leafs
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetBundleName() string { return "cisco_ios_xr" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetYangName() string { return "tl-vs" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) SetParent(parent types.Entity) { tlVs.parent = parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetParent() types.Entity { return tlVs.parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_TlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetFilter() yfilter.YFilter { return invalidTlVs.YFilter }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) SetFilter(yf yfilter.YFilter) { invalidTlVs.YFilter = yf }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetGoName(yname string) string {
    if yname == "incorrect-length" { return "IncorrectLength" }
    if yname == "invalid-type" { return "InvalidType" }
    if yname == "invalid-data" { return "InvalidData" }
    if yname == "unknown-bundle" { return "UnknownBundle" }
    if yname == "unknown-port" { return "UnknownPort" }
    return ""
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetSegmentPath() string {
    return "invalid-tl-vs"
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["incorrect-length"] = invalidTlVs.IncorrectLength
    leafs["invalid-type"] = invalidTlVs.InvalidType
    leafs["invalid-data"] = invalidTlVs.InvalidData
    leafs["unknown-bundle"] = invalidTlVs.UnknownBundle
    leafs["unknown-port"] = invalidTlVs.UnknownPort
    return leafs
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetBundleName() string { return "cisco_ios_xr" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetYangName() string { return "invalid-tl-vs" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) SetParent(parent types.Entity) { invalidTlVs.parent = parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetParent() types.Entity { return invalidTlVs.parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_InvalidTlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetFilter() yfilter.YFilter { return iccpMessages.YFilter }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) SetFilter(yf yfilter.YFilter) { iccpMessages.YFilter = yf }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetGoName(yname string) string {
    if yname == "sent-messages" { return "SentMessages" }
    if yname == "sent-buffer-messages" { return "SentBufferMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmission-errors" { return "TransmissionErrors" }
    return ""
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetSegmentPath() string {
    return "iccp-messages"
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-messages"] = iccpMessages.SentMessages
    leafs["sent-buffer-messages"] = iccpMessages.SentBufferMessages
    leafs["received-messages"] = iccpMessages.ReceivedMessages
    leafs["transmission-errors"] = iccpMessages.TransmissionErrors
    return leafs
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetBundleName() string { return "cisco_ios_xr" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetYangName() string { return "iccp-messages" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) SetParent(parent types.Entity) { iccpMessages.parent = parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetParent() types.Entity { return iccpMessages.parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpMessages) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetFilter() yfilter.YFilter { return iccpEvents.YFilter }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) SetFilter(yf yfilter.YFilter) { iccpEvents.YFilter = yf }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetGoName(yname string) string {
    if yname == "transport-up" { return "TransportUp" }
    if yname == "transport-down" { return "TransportDown" }
    if yname == "transport-unavailable" { return "TransportUnavailable" }
    if yname == "configured-set" { return "ConfiguredSet" }
    if yname == "configured-clear" { return "ConfiguredClear" }
    if yname == "reachability-set" { return "ReachabilitySet" }
    if yname == "reachability-cleared" { return "ReachabilityCleared" }
    if yname == "member-status-up" { return "MemberStatusUp" }
    if yname == "member-status-down" { return "MemberStatusDown" }
    if yname == "pe-isolated" { return "PeIsolated" }
    if yname == "pe-isolated-clear" { return "PeIsolatedClear" }
    return ""
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetSegmentPath() string {
    return "iccp-events"
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport-up"] = iccpEvents.TransportUp
    leafs["transport-down"] = iccpEvents.TransportDown
    leafs["transport-unavailable"] = iccpEvents.TransportUnavailable
    leafs["configured-set"] = iccpEvents.ConfiguredSet
    leafs["configured-clear"] = iccpEvents.ConfiguredClear
    leafs["reachability-set"] = iccpEvents.ReachabilitySet
    leafs["reachability-cleared"] = iccpEvents.ReachabilityCleared
    leafs["member-status-up"] = iccpEvents.MemberStatusUp
    leafs["member-status-down"] = iccpEvents.MemberStatusDown
    leafs["pe-isolated"] = iccpEvents.PeIsolated
    leafs["pe-isolated-clear"] = iccpEvents.PeIsolatedClear
    return leafs
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetBundleName() string { return "cisco_ios_xr" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetYangName() string { return "iccp-events" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) SetParent(parent types.Entity) { iccpEvents.parent = parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetParent() types.Entity { return iccpEvents.parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorBundle_IccpGroupCounters_IccpEvents) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember
// Data for this item and its parent RG
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters
}

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetFilter() yfilter.YFilter { return iccpGroupAncestorMember.YFilter }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) SetFilter(yf yfilter.YFilter) { iccpGroupAncestorMember.YFilter = yf }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "iccp-group-counters" { return "IccpGroupCounters" }
    return ""
}

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetSegmentPath() string {
    return "iccp-group-ancestor-member"
}

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-counters" {
        return &iccpGroupAncestorMember.IccpGroupCounters
    }
    return nil
}

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-counters"] = &iccpGroupAncestorMember.IccpGroupCounters
    return children
}

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupAncestorMember.IccpGroupId
    return leafs
}

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetYangName() string { return "iccp-group-ancestor-member" }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) SetParent(parent types.Entity) { iccpGroupAncestorMember.parent = parent }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetParent() types.Entity { return iccpGroupAncestorMember.parent }

func (iccpGroupAncestorMember *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetFilter() yfilter.YFilter { return iccpGroupCounters.YFilter }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) SetFilter(yf yfilter.YFilter) { iccpGroupCounters.YFilter = yf }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "connection" { return "Connection" }
    if yname == "tl-vs" { return "TlVs" }
    if yname == "invalid-tl-vs" { return "InvalidTlVs" }
    if yname == "iccp-messages" { return "IccpMessages" }
    if yname == "iccp-events" { return "IccpEvents" }
    return ""
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetSegmentPath() string {
    return "iccp-group-counters"
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connection" {
        return &iccpGroupCounters.Connection
    }
    if childYangName == "tl-vs" {
        return &iccpGroupCounters.TlVs
    }
    if childYangName == "invalid-tl-vs" {
        return &iccpGroupCounters.InvalidTlVs
    }
    if childYangName == "iccp-messages" {
        return &iccpGroupCounters.IccpMessages
    }
    if childYangName == "iccp-events" {
        return &iccpGroupCounters.IccpEvents
    }
    return nil
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connection"] = &iccpGroupCounters.Connection
    children["tl-vs"] = &iccpGroupCounters.TlVs
    children["invalid-tl-vs"] = &iccpGroupCounters.InvalidTlVs
    children["iccp-messages"] = &iccpGroupCounters.IccpMessages
    children["iccp-events"] = &iccpGroupCounters.IccpEvents
    return children
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = iccpGroupCounters.LastTimeCleared
    leafs["time-since-cleared"] = iccpGroupCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = iccpGroupCounters.LastUnexpectedEvent
    return leafs
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetYangName() string { return "iccp-group-counters" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) SetParent(parent types.Entity) { iccpGroupCounters.parent = parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetParent() types.Entity { return iccpGroupCounters.parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters) GetParentYangName() string { return "iccp-group-ancestor-member" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetFilter() yfilter.YFilter { return connection.YFilter }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) SetFilter(yf yfilter.YFilter) { connection.YFilter = yf }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetGoName(yname string) string {
    if yname == "sent-connects" { return "SentConnects" }
    if yname == "received-connects" { return "ReceivedConnects" }
    if yname == "iccp-invalid-connects" { return "IccpInvalidConnects" }
    if yname == "iccp-config-connect-errors" { return "IccpConfigConnectErrors" }
    if yname == "iccp-count-connect-errors" { return "IccpCountConnectErrors" }
    if yname == "sent-wrong-versions" { return "SentWrongVersions" }
    if yname == "received-wrong-versions" { return "ReceivedWrongVersions" }
    if yname == "sent-disconnects" { return "SentDisconnects" }
    if yname == "received-disconnects" { return "ReceivedDisconnects" }
    if yname == "iccp-invalid-disconnects" { return "IccpInvalidDisconnects" }
    return ""
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetSegmentPath() string {
    return "connection"
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-connects"] = connection.SentConnects
    leafs["received-connects"] = connection.ReceivedConnects
    leafs["iccp-invalid-connects"] = connection.IccpInvalidConnects
    leafs["iccp-config-connect-errors"] = connection.IccpConfigConnectErrors
    leafs["iccp-count-connect-errors"] = connection.IccpCountConnectErrors
    leafs["sent-wrong-versions"] = connection.SentWrongVersions
    leafs["received-wrong-versions"] = connection.ReceivedWrongVersions
    leafs["sent-disconnects"] = connection.SentDisconnects
    leafs["received-disconnects"] = connection.ReceivedDisconnects
    leafs["iccp-invalid-disconnects"] = connection.IccpInvalidDisconnects
    return leafs
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetBundleName() string { return "cisco_ios_xr" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetYangName() string { return "connection" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) SetParent(parent types.Entity) { connection.parent = parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetParent() types.Entity { return connection.parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_Connection) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetFilter() yfilter.YFilter { return tlVs.YFilter }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) SetFilter(yf yfilter.YFilter) { tlVs.YFilter = yf }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetGoName(yname string) string {
    if yname == "sent-config" { return "SentConfig" }
    if yname == "received-config" { return "ReceivedConfig" }
    if yname == "sent-state" { return "SentState" }
    if yname == "received-state" { return "ReceivedState" }
    if yname == "sent-na-ks" { return "SentNaKs" }
    if yname == "received-na-ks" { return "ReceivedNaKs" }
    if yname == "sent-sync-requests" { return "SentSyncRequests" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    if yname == "sent-state-sync-requests" { return "SentStateSyncRequests" }
    if yname == "received-state-sync-requests" { return "ReceivedStateSyncRequests" }
    if yname == "sent-config-sync-requests" { return "SentConfigSyncRequests" }
    if yname == "received-config-sync-requests" { return "ReceivedConfigSyncRequests" }
    if yname == "sent-solicited-sync-data" { return "SentSolicitedSyncData" }
    if yname == "received-solicited-sync-data" { return "ReceivedSolicitedSyncData" }
    if yname == "sent-unsolicited-sync-data" { return "SentUnsolicitedSyncData" }
    if yname == "received-unsolicited-sync-data" { return "ReceivedUnsolicitedSyncData" }
    return ""
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetSegmentPath() string {
    return "tl-vs"
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config"] = tlVs.SentConfig
    leafs["received-config"] = tlVs.ReceivedConfig
    leafs["sent-state"] = tlVs.SentState
    leafs["received-state"] = tlVs.ReceivedState
    leafs["sent-na-ks"] = tlVs.SentNaKs
    leafs["received-na-ks"] = tlVs.ReceivedNaKs
    leafs["sent-sync-requests"] = tlVs.SentSyncRequests
    leafs["received-sync-requests"] = tlVs.ReceivedSyncRequests
    leafs["sent-state-sync-requests"] = tlVs.SentStateSyncRequests
    leafs["received-state-sync-requests"] = tlVs.ReceivedStateSyncRequests
    leafs["sent-config-sync-requests"] = tlVs.SentConfigSyncRequests
    leafs["received-config-sync-requests"] = tlVs.ReceivedConfigSyncRequests
    leafs["sent-solicited-sync-data"] = tlVs.SentSolicitedSyncData
    leafs["received-solicited-sync-data"] = tlVs.ReceivedSolicitedSyncData
    leafs["sent-unsolicited-sync-data"] = tlVs.SentUnsolicitedSyncData
    leafs["received-unsolicited-sync-data"] = tlVs.ReceivedUnsolicitedSyncData
    return leafs
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetBundleName() string { return "cisco_ios_xr" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetYangName() string { return "tl-vs" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) SetParent(parent types.Entity) { tlVs.parent = parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetParent() types.Entity { return tlVs.parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_TlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetFilter() yfilter.YFilter { return invalidTlVs.YFilter }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) SetFilter(yf yfilter.YFilter) { invalidTlVs.YFilter = yf }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetGoName(yname string) string {
    if yname == "incorrect-length" { return "IncorrectLength" }
    if yname == "invalid-type" { return "InvalidType" }
    if yname == "invalid-data" { return "InvalidData" }
    if yname == "unknown-bundle" { return "UnknownBundle" }
    if yname == "unknown-port" { return "UnknownPort" }
    return ""
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetSegmentPath() string {
    return "invalid-tl-vs"
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["incorrect-length"] = invalidTlVs.IncorrectLength
    leafs["invalid-type"] = invalidTlVs.InvalidType
    leafs["invalid-data"] = invalidTlVs.InvalidData
    leafs["unknown-bundle"] = invalidTlVs.UnknownBundle
    leafs["unknown-port"] = invalidTlVs.UnknownPort
    return leafs
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetBundleName() string { return "cisco_ios_xr" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetYangName() string { return "invalid-tl-vs" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) SetParent(parent types.Entity) { invalidTlVs.parent = parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetParent() types.Entity { return invalidTlVs.parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_InvalidTlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetFilter() yfilter.YFilter { return iccpMessages.YFilter }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) SetFilter(yf yfilter.YFilter) { iccpMessages.YFilter = yf }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetGoName(yname string) string {
    if yname == "sent-messages" { return "SentMessages" }
    if yname == "sent-buffer-messages" { return "SentBufferMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmission-errors" { return "TransmissionErrors" }
    return ""
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetSegmentPath() string {
    return "iccp-messages"
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-messages"] = iccpMessages.SentMessages
    leafs["sent-buffer-messages"] = iccpMessages.SentBufferMessages
    leafs["received-messages"] = iccpMessages.ReceivedMessages
    leafs["transmission-errors"] = iccpMessages.TransmissionErrors
    return leafs
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetBundleName() string { return "cisco_ios_xr" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetYangName() string { return "iccp-messages" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) SetParent(parent types.Entity) { iccpMessages.parent = parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetParent() types.Entity { return iccpMessages.parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpMessages) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetFilter() yfilter.YFilter { return iccpEvents.YFilter }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) SetFilter(yf yfilter.YFilter) { iccpEvents.YFilter = yf }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetGoName(yname string) string {
    if yname == "transport-up" { return "TransportUp" }
    if yname == "transport-down" { return "TransportDown" }
    if yname == "transport-unavailable" { return "TransportUnavailable" }
    if yname == "configured-set" { return "ConfiguredSet" }
    if yname == "configured-clear" { return "ConfiguredClear" }
    if yname == "reachability-set" { return "ReachabilitySet" }
    if yname == "reachability-cleared" { return "ReachabilityCleared" }
    if yname == "member-status-up" { return "MemberStatusUp" }
    if yname == "member-status-down" { return "MemberStatusDown" }
    if yname == "pe-isolated" { return "PeIsolated" }
    if yname == "pe-isolated-clear" { return "PeIsolatedClear" }
    return ""
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetSegmentPath() string {
    return "iccp-events"
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport-up"] = iccpEvents.TransportUp
    leafs["transport-down"] = iccpEvents.TransportDown
    leafs["transport-unavailable"] = iccpEvents.TransportUnavailable
    leafs["configured-set"] = iccpEvents.ConfiguredSet
    leafs["configured-clear"] = iccpEvents.ConfiguredClear
    leafs["reachability-set"] = iccpEvents.ReachabilitySet
    leafs["reachability-cleared"] = iccpEvents.ReachabilityCleared
    leafs["member-status-up"] = iccpEvents.MemberStatusUp
    leafs["member-status-down"] = iccpEvents.MemberStatusDown
    leafs["pe-isolated"] = iccpEvents.PeIsolated
    leafs["pe-isolated-clear"] = iccpEvents.PeIsolatedClear
    return leafs
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetBundleName() string { return "cisco_ios_xr" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetYangName() string { return "iccp-events" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) SetParent(parent types.Entity) { iccpEvents.parent = parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetParent() types.Entity { return iccpEvents.parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorMember_IccpGroupCounters_IccpEvents) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode
// Data for this item and its parent RG
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters
}

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetFilter() yfilter.YFilter { return iccpGroupAncestorNode.YFilter }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) SetFilter(yf yfilter.YFilter) { iccpGroupAncestorNode.YFilter = yf }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "iccp-group-counters" { return "IccpGroupCounters" }
    return ""
}

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetSegmentPath() string {
    return "iccp-group-ancestor-node"
}

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-counters" {
        return &iccpGroupAncestorNode.IccpGroupCounters
    }
    return nil
}

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-counters"] = &iccpGroupAncestorNode.IccpGroupCounters
    return children
}

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupAncestorNode.IccpGroupId
    return leafs
}

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetYangName() string { return "iccp-group-ancestor-node" }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) SetParent(parent types.Entity) { iccpGroupAncestorNode.parent = parent }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetParent() types.Entity { return iccpGroupAncestorNode.parent }

func (iccpGroupAncestorNode *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetFilter() yfilter.YFilter { return iccpGroupCounters.YFilter }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) SetFilter(yf yfilter.YFilter) { iccpGroupCounters.YFilter = yf }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "connection" { return "Connection" }
    if yname == "tl-vs" { return "TlVs" }
    if yname == "invalid-tl-vs" { return "InvalidTlVs" }
    if yname == "iccp-messages" { return "IccpMessages" }
    if yname == "iccp-events" { return "IccpEvents" }
    return ""
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetSegmentPath() string {
    return "iccp-group-counters"
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connection" {
        return &iccpGroupCounters.Connection
    }
    if childYangName == "tl-vs" {
        return &iccpGroupCounters.TlVs
    }
    if childYangName == "invalid-tl-vs" {
        return &iccpGroupCounters.InvalidTlVs
    }
    if childYangName == "iccp-messages" {
        return &iccpGroupCounters.IccpMessages
    }
    if childYangName == "iccp-events" {
        return &iccpGroupCounters.IccpEvents
    }
    return nil
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connection"] = &iccpGroupCounters.Connection
    children["tl-vs"] = &iccpGroupCounters.TlVs
    children["invalid-tl-vs"] = &iccpGroupCounters.InvalidTlVs
    children["iccp-messages"] = &iccpGroupCounters.IccpMessages
    children["iccp-events"] = &iccpGroupCounters.IccpEvents
    return children
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = iccpGroupCounters.LastTimeCleared
    leafs["time-since-cleared"] = iccpGroupCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = iccpGroupCounters.LastUnexpectedEvent
    return leafs
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetYangName() string { return "iccp-group-counters" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) SetParent(parent types.Entity) { iccpGroupCounters.parent = parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetParent() types.Entity { return iccpGroupCounters.parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters) GetParentYangName() string { return "iccp-group-ancestor-node" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetFilter() yfilter.YFilter { return connection.YFilter }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) SetFilter(yf yfilter.YFilter) { connection.YFilter = yf }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetGoName(yname string) string {
    if yname == "sent-connects" { return "SentConnects" }
    if yname == "received-connects" { return "ReceivedConnects" }
    if yname == "iccp-invalid-connects" { return "IccpInvalidConnects" }
    if yname == "iccp-config-connect-errors" { return "IccpConfigConnectErrors" }
    if yname == "iccp-count-connect-errors" { return "IccpCountConnectErrors" }
    if yname == "sent-wrong-versions" { return "SentWrongVersions" }
    if yname == "received-wrong-versions" { return "ReceivedWrongVersions" }
    if yname == "sent-disconnects" { return "SentDisconnects" }
    if yname == "received-disconnects" { return "ReceivedDisconnects" }
    if yname == "iccp-invalid-disconnects" { return "IccpInvalidDisconnects" }
    return ""
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetSegmentPath() string {
    return "connection"
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-connects"] = connection.SentConnects
    leafs["received-connects"] = connection.ReceivedConnects
    leafs["iccp-invalid-connects"] = connection.IccpInvalidConnects
    leafs["iccp-config-connect-errors"] = connection.IccpConfigConnectErrors
    leafs["iccp-count-connect-errors"] = connection.IccpCountConnectErrors
    leafs["sent-wrong-versions"] = connection.SentWrongVersions
    leafs["received-wrong-versions"] = connection.ReceivedWrongVersions
    leafs["sent-disconnects"] = connection.SentDisconnects
    leafs["received-disconnects"] = connection.ReceivedDisconnects
    leafs["iccp-invalid-disconnects"] = connection.IccpInvalidDisconnects
    return leafs
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetBundleName() string { return "cisco_ios_xr" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetYangName() string { return "connection" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) SetParent(parent types.Entity) { connection.parent = parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetParent() types.Entity { return connection.parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_Connection) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetFilter() yfilter.YFilter { return tlVs.YFilter }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) SetFilter(yf yfilter.YFilter) { tlVs.YFilter = yf }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetGoName(yname string) string {
    if yname == "sent-config" { return "SentConfig" }
    if yname == "received-config" { return "ReceivedConfig" }
    if yname == "sent-state" { return "SentState" }
    if yname == "received-state" { return "ReceivedState" }
    if yname == "sent-na-ks" { return "SentNaKs" }
    if yname == "received-na-ks" { return "ReceivedNaKs" }
    if yname == "sent-sync-requests" { return "SentSyncRequests" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    if yname == "sent-state-sync-requests" { return "SentStateSyncRequests" }
    if yname == "received-state-sync-requests" { return "ReceivedStateSyncRequests" }
    if yname == "sent-config-sync-requests" { return "SentConfigSyncRequests" }
    if yname == "received-config-sync-requests" { return "ReceivedConfigSyncRequests" }
    if yname == "sent-solicited-sync-data" { return "SentSolicitedSyncData" }
    if yname == "received-solicited-sync-data" { return "ReceivedSolicitedSyncData" }
    if yname == "sent-unsolicited-sync-data" { return "SentUnsolicitedSyncData" }
    if yname == "received-unsolicited-sync-data" { return "ReceivedUnsolicitedSyncData" }
    return ""
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetSegmentPath() string {
    return "tl-vs"
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config"] = tlVs.SentConfig
    leafs["received-config"] = tlVs.ReceivedConfig
    leafs["sent-state"] = tlVs.SentState
    leafs["received-state"] = tlVs.ReceivedState
    leafs["sent-na-ks"] = tlVs.SentNaKs
    leafs["received-na-ks"] = tlVs.ReceivedNaKs
    leafs["sent-sync-requests"] = tlVs.SentSyncRequests
    leafs["received-sync-requests"] = tlVs.ReceivedSyncRequests
    leafs["sent-state-sync-requests"] = tlVs.SentStateSyncRequests
    leafs["received-state-sync-requests"] = tlVs.ReceivedStateSyncRequests
    leafs["sent-config-sync-requests"] = tlVs.SentConfigSyncRequests
    leafs["received-config-sync-requests"] = tlVs.ReceivedConfigSyncRequests
    leafs["sent-solicited-sync-data"] = tlVs.SentSolicitedSyncData
    leafs["received-solicited-sync-data"] = tlVs.ReceivedSolicitedSyncData
    leafs["sent-unsolicited-sync-data"] = tlVs.SentUnsolicitedSyncData
    leafs["received-unsolicited-sync-data"] = tlVs.ReceivedUnsolicitedSyncData
    return leafs
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetBundleName() string { return "cisco_ios_xr" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetYangName() string { return "tl-vs" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) SetParent(parent types.Entity) { tlVs.parent = parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetParent() types.Entity { return tlVs.parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_TlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetFilter() yfilter.YFilter { return invalidTlVs.YFilter }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) SetFilter(yf yfilter.YFilter) { invalidTlVs.YFilter = yf }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetGoName(yname string) string {
    if yname == "incorrect-length" { return "IncorrectLength" }
    if yname == "invalid-type" { return "InvalidType" }
    if yname == "invalid-data" { return "InvalidData" }
    if yname == "unknown-bundle" { return "UnknownBundle" }
    if yname == "unknown-port" { return "UnknownPort" }
    return ""
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetSegmentPath() string {
    return "invalid-tl-vs"
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["incorrect-length"] = invalidTlVs.IncorrectLength
    leafs["invalid-type"] = invalidTlVs.InvalidType
    leafs["invalid-data"] = invalidTlVs.InvalidData
    leafs["unknown-bundle"] = invalidTlVs.UnknownBundle
    leafs["unknown-port"] = invalidTlVs.UnknownPort
    return leafs
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetBundleName() string { return "cisco_ios_xr" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetYangName() string { return "invalid-tl-vs" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) SetParent(parent types.Entity) { invalidTlVs.parent = parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetParent() types.Entity { return invalidTlVs.parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_InvalidTlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetFilter() yfilter.YFilter { return iccpMessages.YFilter }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) SetFilter(yf yfilter.YFilter) { iccpMessages.YFilter = yf }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetGoName(yname string) string {
    if yname == "sent-messages" { return "SentMessages" }
    if yname == "sent-buffer-messages" { return "SentBufferMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmission-errors" { return "TransmissionErrors" }
    return ""
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetSegmentPath() string {
    return "iccp-messages"
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-messages"] = iccpMessages.SentMessages
    leafs["sent-buffer-messages"] = iccpMessages.SentBufferMessages
    leafs["received-messages"] = iccpMessages.ReceivedMessages
    leafs["transmission-errors"] = iccpMessages.TransmissionErrors
    return leafs
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetBundleName() string { return "cisco_ios_xr" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetYangName() string { return "iccp-messages" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) SetParent(parent types.Entity) { iccpMessages.parent = parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetParent() types.Entity { return iccpMessages.parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpMessages) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetFilter() yfilter.YFilter { return iccpEvents.YFilter }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) SetFilter(yf yfilter.YFilter) { iccpEvents.YFilter = yf }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetGoName(yname string) string {
    if yname == "transport-up" { return "TransportUp" }
    if yname == "transport-down" { return "TransportDown" }
    if yname == "transport-unavailable" { return "TransportUnavailable" }
    if yname == "configured-set" { return "ConfiguredSet" }
    if yname == "configured-clear" { return "ConfiguredClear" }
    if yname == "reachability-set" { return "ReachabilitySet" }
    if yname == "reachability-cleared" { return "ReachabilityCleared" }
    if yname == "member-status-up" { return "MemberStatusUp" }
    if yname == "member-status-down" { return "MemberStatusDown" }
    if yname == "pe-isolated" { return "PeIsolated" }
    if yname == "pe-isolated-clear" { return "PeIsolatedClear" }
    return ""
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetSegmentPath() string {
    return "iccp-events"
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport-up"] = iccpEvents.TransportUp
    leafs["transport-down"] = iccpEvents.TransportDown
    leafs["transport-unavailable"] = iccpEvents.TransportUnavailable
    leafs["configured-set"] = iccpEvents.ConfiguredSet
    leafs["configured-clear"] = iccpEvents.ConfiguredClear
    leafs["reachability-set"] = iccpEvents.ReachabilitySet
    leafs["reachability-cleared"] = iccpEvents.ReachabilityCleared
    leafs["member-status-up"] = iccpEvents.MemberStatusUp
    leafs["member-status-down"] = iccpEvents.MemberStatusDown
    leafs["pe-isolated"] = iccpEvents.PeIsolated
    leafs["pe-isolated-clear"] = iccpEvents.PeIsolatedClear
    return leafs
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetBundleName() string { return "cisco_ios_xr" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetYangName() string { return "iccp-events" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) SetParent(parent types.Entity) { iccpEvents.parent = parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetParent() types.Entity { return iccpEvents.parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupAncestorNode_IccpGroupCounters_IccpEvents) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem
// Data for this item
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // ICCP Group counters.
    IccpGroupCounters BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters
}

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetFilter() yfilter.YFilter { return iccpGroupItem.YFilter }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) SetFilter(yf yfilter.YFilter) { iccpGroupItem.YFilter = yf }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "iccp-group-counters" { return "IccpGroupCounters" }
    return ""
}

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetSegmentPath() string {
    return "iccp-group-item"
}

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-counters" {
        return &iccpGroupItem.IccpGroupCounters
    }
    return nil
}

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-counters"] = &iccpGroupItem.IccpGroupCounters
    return children
}

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = iccpGroupItem.IccpGroupId
    return leafs
}

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetYangName() string { return "iccp-group-item" }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) SetParent(parent types.Entity) { iccpGroupItem.parent = parent }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetParent() types.Entity { return iccpGroupItem.parent }

func (iccpGroupItem *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters
// ICCP Group counters
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of connection events.
    Connection BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection

    // Number TLVs sent and received.
    TlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs

    // Number invalid TLVs received.
    InvalidTlVs BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs

    // Number ICCP messages sent and received.
    IccpMessages BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages

    // Number of ICCP events.
    IccpEvents BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetFilter() yfilter.YFilter { return iccpGroupCounters.YFilter }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) SetFilter(yf yfilter.YFilter) { iccpGroupCounters.YFilter = yf }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "connection" { return "Connection" }
    if yname == "tl-vs" { return "TlVs" }
    if yname == "invalid-tl-vs" { return "InvalidTlVs" }
    if yname == "iccp-messages" { return "IccpMessages" }
    if yname == "iccp-events" { return "IccpEvents" }
    return ""
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetSegmentPath() string {
    return "iccp-group-counters"
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connection" {
        return &iccpGroupCounters.Connection
    }
    if childYangName == "tl-vs" {
        return &iccpGroupCounters.TlVs
    }
    if childYangName == "invalid-tl-vs" {
        return &iccpGroupCounters.InvalidTlVs
    }
    if childYangName == "iccp-messages" {
        return &iccpGroupCounters.IccpMessages
    }
    if childYangName == "iccp-events" {
        return &iccpGroupCounters.IccpEvents
    }
    return nil
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["connection"] = &iccpGroupCounters.Connection
    children["tl-vs"] = &iccpGroupCounters.TlVs
    children["invalid-tl-vs"] = &iccpGroupCounters.InvalidTlVs
    children["iccp-messages"] = &iccpGroupCounters.IccpMessages
    children["iccp-events"] = &iccpGroupCounters.IccpEvents
    return children
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = iccpGroupCounters.LastTimeCleared
    leafs["time-since-cleared"] = iccpGroupCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = iccpGroupCounters.LastUnexpectedEvent
    return leafs
}

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetYangName() string { return "iccp-group-counters" }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) SetParent(parent types.Entity) { iccpGroupCounters.parent = parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetParent() types.Entity { return iccpGroupCounters.parent }

func (iccpGroupCounters *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters) GetParentYangName() string { return "iccp-group-item" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection
// Number of connection events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of connect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConnects interface{}

    // Number of connect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConnects interface{}

    // Number of invalid ICCP connects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidConnects interface{}

    // Number of ICCP connection errors due to config. The type is interface{}
    // with range: 0..4294967295.
    IccpConfigConnectErrors interface{}

    // Number of ICCP connection errors due to max ICCP group count. The type is
    // interface{} with range: 0..4294967295.
    IccpCountConnectErrors interface{}

    // Number of wrong version TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentWrongVersions interface{}

    // Number of wrong version TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedWrongVersions interface{}

    // Number of disconnect TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentDisconnects interface{}

    // Number of disconnect TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedDisconnects interface{}

    // Number of invalid ICCP disconnects. The type is interface{} with range:
    // 0..4294967295.
    IccpInvalidDisconnects interface{}
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetFilter() yfilter.YFilter { return connection.YFilter }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) SetFilter(yf yfilter.YFilter) { connection.YFilter = yf }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetGoName(yname string) string {
    if yname == "sent-connects" { return "SentConnects" }
    if yname == "received-connects" { return "ReceivedConnects" }
    if yname == "iccp-invalid-connects" { return "IccpInvalidConnects" }
    if yname == "iccp-config-connect-errors" { return "IccpConfigConnectErrors" }
    if yname == "iccp-count-connect-errors" { return "IccpCountConnectErrors" }
    if yname == "sent-wrong-versions" { return "SentWrongVersions" }
    if yname == "received-wrong-versions" { return "ReceivedWrongVersions" }
    if yname == "sent-disconnects" { return "SentDisconnects" }
    if yname == "received-disconnects" { return "ReceivedDisconnects" }
    if yname == "iccp-invalid-disconnects" { return "IccpInvalidDisconnects" }
    return ""
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetSegmentPath() string {
    return "connection"
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-connects"] = connection.SentConnects
    leafs["received-connects"] = connection.ReceivedConnects
    leafs["iccp-invalid-connects"] = connection.IccpInvalidConnects
    leafs["iccp-config-connect-errors"] = connection.IccpConfigConnectErrors
    leafs["iccp-count-connect-errors"] = connection.IccpCountConnectErrors
    leafs["sent-wrong-versions"] = connection.SentWrongVersions
    leafs["received-wrong-versions"] = connection.ReceivedWrongVersions
    leafs["sent-disconnects"] = connection.SentDisconnects
    leafs["received-disconnects"] = connection.ReceivedDisconnects
    leafs["iccp-invalid-disconnects"] = connection.IccpInvalidDisconnects
    return leafs
}

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetBundleName() string { return "cisco_ios_xr" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetYangName() string { return "connection" }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) SetParent(parent types.Entity) { connection.parent = parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetParent() types.Entity { return connection.parent }

func (connection *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_Connection) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs
// Number TLVs sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfig interface{}

    // Number of config TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedConfig interface{}

    // Number of state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentState interface{}

    // Number of state TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedState interface{}

    // Number of NAK TLVs sent. The type is interface{} with range: 0..4294967295.
    SentNaKs interface{}

    // Number of NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNaKs interface{}

    // Number of sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentSyncRequests interface{}

    // Number of sync request TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedSyncRequests interface{}

    // Number of state sync request TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateSyncRequests interface{}

    // Number of state sync request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedStateSyncRequests interface{}

    // Number of config sync request TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentConfigSyncRequests interface{}

    // Number of state config request TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedConfigSyncRequests interface{}

    // Number of solicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentSolicitedSyncData interface{}

    // Number of solicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedSolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs sent. The type is interface{} with
    // range: 0..4294967295.
    SentUnsolicitedSyncData interface{}

    // Number of unsolicited sync data TLVs received. The type is interface{} with
    // range: 0..4294967295.
    ReceivedUnsolicitedSyncData interface{}
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetFilter() yfilter.YFilter { return tlVs.YFilter }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) SetFilter(yf yfilter.YFilter) { tlVs.YFilter = yf }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetGoName(yname string) string {
    if yname == "sent-config" { return "SentConfig" }
    if yname == "received-config" { return "ReceivedConfig" }
    if yname == "sent-state" { return "SentState" }
    if yname == "received-state" { return "ReceivedState" }
    if yname == "sent-na-ks" { return "SentNaKs" }
    if yname == "received-na-ks" { return "ReceivedNaKs" }
    if yname == "sent-sync-requests" { return "SentSyncRequests" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    if yname == "sent-state-sync-requests" { return "SentStateSyncRequests" }
    if yname == "received-state-sync-requests" { return "ReceivedStateSyncRequests" }
    if yname == "sent-config-sync-requests" { return "SentConfigSyncRequests" }
    if yname == "received-config-sync-requests" { return "ReceivedConfigSyncRequests" }
    if yname == "sent-solicited-sync-data" { return "SentSolicitedSyncData" }
    if yname == "received-solicited-sync-data" { return "ReceivedSolicitedSyncData" }
    if yname == "sent-unsolicited-sync-data" { return "SentUnsolicitedSyncData" }
    if yname == "received-unsolicited-sync-data" { return "ReceivedUnsolicitedSyncData" }
    return ""
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetSegmentPath() string {
    return "tl-vs"
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config"] = tlVs.SentConfig
    leafs["received-config"] = tlVs.ReceivedConfig
    leafs["sent-state"] = tlVs.SentState
    leafs["received-state"] = tlVs.ReceivedState
    leafs["sent-na-ks"] = tlVs.SentNaKs
    leafs["received-na-ks"] = tlVs.ReceivedNaKs
    leafs["sent-sync-requests"] = tlVs.SentSyncRequests
    leafs["received-sync-requests"] = tlVs.ReceivedSyncRequests
    leafs["sent-state-sync-requests"] = tlVs.SentStateSyncRequests
    leafs["received-state-sync-requests"] = tlVs.ReceivedStateSyncRequests
    leafs["sent-config-sync-requests"] = tlVs.SentConfigSyncRequests
    leafs["received-config-sync-requests"] = tlVs.ReceivedConfigSyncRequests
    leafs["sent-solicited-sync-data"] = tlVs.SentSolicitedSyncData
    leafs["received-solicited-sync-data"] = tlVs.ReceivedSolicitedSyncData
    leafs["sent-unsolicited-sync-data"] = tlVs.SentUnsolicitedSyncData
    leafs["received-unsolicited-sync-data"] = tlVs.ReceivedUnsolicitedSyncData
    return leafs
}

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetBundleName() string { return "cisco_ios_xr" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetYangName() string { return "tl-vs" }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) SetParent(parent types.Entity) { tlVs.parent = parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetParent() types.Entity { return tlVs.parent }

func (tlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_TlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs
// Number invalid TLVs received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages received of an incorrect length. The type is interface{}
    // with range: 0..4294967295.
    IncorrectLength interface{}

    // Number of messages received with an invalid mLACP TLV type. The type is
    // interface{} with range: 0..4294967295.
    InvalidType interface{}

    // Number of messages received containing invalid data. The type is
    // interface{} with range: 0..4294967295.
    InvalidData interface{}

    // Number of messages received for an unknown bundle. The type is interface{}
    // with range: 0..4294967295.
    UnknownBundle interface{}

    // Number of messages received for an unknown port. The type is interface{}
    // with range: 0..4294967295.
    UnknownPort interface{}
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetFilter() yfilter.YFilter { return invalidTlVs.YFilter }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) SetFilter(yf yfilter.YFilter) { invalidTlVs.YFilter = yf }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetGoName(yname string) string {
    if yname == "incorrect-length" { return "IncorrectLength" }
    if yname == "invalid-type" { return "InvalidType" }
    if yname == "invalid-data" { return "InvalidData" }
    if yname == "unknown-bundle" { return "UnknownBundle" }
    if yname == "unknown-port" { return "UnknownPort" }
    return ""
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetSegmentPath() string {
    return "invalid-tl-vs"
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["incorrect-length"] = invalidTlVs.IncorrectLength
    leafs["invalid-type"] = invalidTlVs.InvalidType
    leafs["invalid-data"] = invalidTlVs.InvalidData
    leafs["unknown-bundle"] = invalidTlVs.UnknownBundle
    leafs["unknown-port"] = invalidTlVs.UnknownPort
    return leafs
}

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetBundleName() string { return "cisco_ios_xr" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetYangName() string { return "invalid-tl-vs" }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) SetParent(parent types.Entity) { invalidTlVs.parent = parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetParent() types.Entity { return invalidTlVs.parent }

func (invalidTlVs *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_InvalidTlVs) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages
// Number ICCP messages sent and received
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages sent. The type is interface{} with range: 0..4294967295.
    SentMessages interface{}

    // Number of buffers sent (may be multiple per message). The type is
    // interface{} with range: 0..4294967295.
    SentBufferMessages interface{}

    // Number of messages received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedMessages interface{}

    // Number of transmission errors. The type is interface{} with range:
    // 0..4294967295.
    TransmissionErrors interface{}
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetFilter() yfilter.YFilter { return iccpMessages.YFilter }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) SetFilter(yf yfilter.YFilter) { iccpMessages.YFilter = yf }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetGoName(yname string) string {
    if yname == "sent-messages" { return "SentMessages" }
    if yname == "sent-buffer-messages" { return "SentBufferMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmission-errors" { return "TransmissionErrors" }
    return ""
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetSegmentPath() string {
    return "iccp-messages"
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-messages"] = iccpMessages.SentMessages
    leafs["sent-buffer-messages"] = iccpMessages.SentBufferMessages
    leafs["received-messages"] = iccpMessages.ReceivedMessages
    leafs["transmission-errors"] = iccpMessages.TransmissionErrors
    return leafs
}

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetBundleName() string { return "cisco_ios_xr" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetYangName() string { return "iccp-messages" }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) SetParent(parent types.Entity) { iccpMessages.parent = parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetParent() types.Entity { return iccpMessages.parent }

func (iccpMessages *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpMessages) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents
// Number of ICCP events
type BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of transport up events. The type is interface{} with range:
    // 0..4294967295.
    TransportUp interface{}

    // Number of transport down events. The type is interface{} with range:
    // 0..4294967295.
    TransportDown interface{}

    // Number of transport unavailable events. The type is interface{} with range:
    // 0..4294967295.
    TransportUnavailable interface{}

    // Number of configure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredSet interface{}

    // Number of unconfigure events. The type is interface{} with range:
    // 0..4294967295.
    ConfiguredClear interface{}

    // Number of reachability events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilitySet interface{}

    // Number of reachability cleared events. The type is interface{} with range:
    // 0..4294967295.
    ReachabilityCleared interface{}

    // Number of member status up events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusUp interface{}

    // Number of member status down events. The type is interface{} with range:
    // 0..4294967295.
    MemberStatusDown interface{}

    // Number of PE isolation events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolated interface{}

    // Number of PE isolation cleared events. The type is interface{} with range:
    // 0..4294967295.
    PeIsolatedClear interface{}
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetFilter() yfilter.YFilter { return iccpEvents.YFilter }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) SetFilter(yf yfilter.YFilter) { iccpEvents.YFilter = yf }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetGoName(yname string) string {
    if yname == "transport-up" { return "TransportUp" }
    if yname == "transport-down" { return "TransportDown" }
    if yname == "transport-unavailable" { return "TransportUnavailable" }
    if yname == "configured-set" { return "ConfiguredSet" }
    if yname == "configured-clear" { return "ConfiguredClear" }
    if yname == "reachability-set" { return "ReachabilitySet" }
    if yname == "reachability-cleared" { return "ReachabilityCleared" }
    if yname == "member-status-up" { return "MemberStatusUp" }
    if yname == "member-status-down" { return "MemberStatusDown" }
    if yname == "pe-isolated" { return "PeIsolated" }
    if yname == "pe-isolated-clear" { return "PeIsolatedClear" }
    return ""
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetSegmentPath() string {
    return "iccp-events"
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport-up"] = iccpEvents.TransportUp
    leafs["transport-down"] = iccpEvents.TransportDown
    leafs["transport-unavailable"] = iccpEvents.TransportUnavailable
    leafs["configured-set"] = iccpEvents.ConfiguredSet
    leafs["configured-clear"] = iccpEvents.ConfiguredClear
    leafs["reachability-set"] = iccpEvents.ReachabilitySet
    leafs["reachability-cleared"] = iccpEvents.ReachabilityCleared
    leafs["member-status-up"] = iccpEvents.MemberStatusUp
    leafs["member-status-down"] = iccpEvents.MemberStatusDown
    leafs["pe-isolated"] = iccpEvents.PeIsolated
    leafs["pe-isolated-clear"] = iccpEvents.PeIsolatedClear
    return leafs
}

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetBundleName() string { return "cisco_ios_xr" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetYangName() string { return "iccp-events" }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) SetParent(parent types.Entity) { iccpEvents.parent = parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetParent() types.Entity { return iccpEvents.parent }

func (iccpEvents *BundleInformation_MlacpIccpGroupCounters_IccpGroups_IccpGroup_IccpGroupItem_IccpGroupCounters_IccpEvents) GetParentYangName() string { return "iccp-group-counters" }

// BundleInformation_SystemId
// System Identifiers for the local system and all
// ICCP Groups
type BundleInformation_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // System Identifier for the local system.
    SystemIdGlobal BundleInformation_SystemId_SystemIdGlobal

    // System Identifiers for all ICCP Groups.
    SystemIdIccpGroups BundleInformation_SystemId_SystemIdIccpGroups
}

func (systemId *BundleInformation_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *BundleInformation_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *BundleInformation_SystemId) GetGoName(yname string) string {
    if yname == "system-id-global" { return "SystemIdGlobal" }
    if yname == "system-id-iccp-groups" { return "SystemIdIccpGroups" }
    return ""
}

func (systemId *BundleInformation_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *BundleInformation_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id-global" {
        return &systemId.SystemIdGlobal
    }
    if childYangName == "system-id-iccp-groups" {
        return &systemId.SystemIdIccpGroups
    }
    return nil
}

func (systemId *BundleInformation_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id-global"] = &systemId.SystemIdGlobal
    children["system-id-iccp-groups"] = &systemId.SystemIdIccpGroups
    return children
}

func (systemId *BundleInformation_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (systemId *BundleInformation_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *BundleInformation_SystemId) GetYangName() string { return "system-id" }

func (systemId *BundleInformation_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *BundleInformation_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *BundleInformation_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *BundleInformation_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *BundleInformation_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *BundleInformation_SystemId) GetParentYangName() string { return "bundle-information" }

// BundleInformation_SystemId_SystemIdGlobal
// System Identifier for the local system
type BundleInformation_SystemId_SystemIdGlobal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for this item.
    SystemIdGlobalItem BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem
}

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetFilter() yfilter.YFilter { return systemIdGlobal.YFilter }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) SetFilter(yf yfilter.YFilter) { systemIdGlobal.YFilter = yf }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetGoName(yname string) string {
    if yname == "system-id-global-item" { return "SystemIdGlobalItem" }
    return ""
}

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetSegmentPath() string {
    return "system-id-global"
}

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id-global-item" {
        return &systemIdGlobal.SystemIdGlobalItem
    }
    return nil
}

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id-global-item"] = &systemIdGlobal.SystemIdGlobalItem
    return children
}

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetBundleName() string { return "cisco_ios_xr" }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetYangName() string { return "system-id-global" }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) SetParent(parent types.Entity) { systemIdGlobal.parent = parent }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetParent() types.Entity { return systemIdGlobal.parent }

func (systemIdGlobal *BundleInformation_SystemId_SystemIdGlobal) GetParentYangName() string { return "system-id" }

// BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem
// Data for this item
type BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group that the system ID is for. The type is interface{} with range:
    // 0..4294967295.
    IccpGroupId interface{}

    // Priority of the system (deprecated). The type is interface{} with range:
    // 0..65535.
    SystemPriority interface{}

    // MAC Address used to identify the system (deprecated). The type is string
    // with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    SystemMacAddress interface{}

    // System ID.
    SystemId BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId
}

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetFilter() yfilter.YFilter { return systemIdGlobalItem.YFilter }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) SetFilter(yf yfilter.YFilter) { systemIdGlobalItem.YFilter = yf }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "system-priority" { return "SystemPriority" }
    if yname == "system-mac-address" { return "SystemMacAddress" }
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetSegmentPath() string {
    return "system-id-global-item"
}

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &systemIdGlobalItem.SystemId
    }
    return nil
}

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &systemIdGlobalItem.SystemId
    return children
}

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = systemIdGlobalItem.IccpGroupId
    leafs["system-priority"] = systemIdGlobalItem.SystemPriority
    leafs["system-mac-address"] = systemIdGlobalItem.SystemMacAddress
    return leafs
}

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetBundleName() string { return "cisco_ios_xr" }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetYangName() string { return "system-id-global-item" }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) SetParent(parent types.Entity) { systemIdGlobalItem.parent = parent }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetParent() types.Entity { return systemIdGlobalItem.parent }

func (systemIdGlobalItem *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem) GetParentYangName() string { return "system-id-global" }

// BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId
// System ID
type BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &systemId.SystemMacAddr
    }
    return nil
}

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &systemId.SystemMacAddr
    return children
}

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = systemId.SystemPrio
    return leafs
}

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetYangName() string { return "system-id" }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId) GetParentYangName() string { return "system-id-global-item" }

// BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_SystemId_SystemIdGlobal_SystemIdGlobalItem_SystemId_SystemMacAddr) GetParentYangName() string { return "system-id" }

// BundleInformation_SystemId_SystemIdIccpGroups
// System Identifiers for all ICCP Groups
type BundleInformation_SystemId_SystemIdIccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup.
    SystemIdIccpGroup []BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup
}

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetFilter() yfilter.YFilter { return systemIdIccpGroups.YFilter }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) SetFilter(yf yfilter.YFilter) { systemIdIccpGroups.YFilter = yf }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetGoName(yname string) string {
    if yname == "system-id-iccp-group" { return "SystemIdIccpGroup" }
    return ""
}

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetSegmentPath() string {
    return "system-id-iccp-groups"
}

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id-iccp-group" {
        for _, c := range systemIdIccpGroups.SystemIdIccpGroup {
            if systemIdIccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup{}
        systemIdIccpGroups.SystemIdIccpGroup = append(systemIdIccpGroups.SystemIdIccpGroup, child)
        return &systemIdIccpGroups.SystemIdIccpGroup[len(systemIdIccpGroups.SystemIdIccpGroup)-1]
    }
    return nil
}

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range systemIdIccpGroups.SystemIdIccpGroup {
        children[systemIdIccpGroups.SystemIdIccpGroup[i].GetSegmentPath()] = &systemIdIccpGroups.SystemIdIccpGroup[i]
    }
    return children
}

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetYangName() string { return "system-id-iccp-groups" }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) SetParent(parent types.Entity) { systemIdIccpGroups.parent = parent }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetParent() types.Entity { return systemIdIccpGroups.parent }

func (systemIdIccpGroups *BundleInformation_SystemId_SystemIdIccpGroups) GetParentYangName() string { return "system-id" }

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup
// ICCP Group ID
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item.
    SystemIdIccpGroupItem BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem
}

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetFilter() yfilter.YFilter { return systemIdIccpGroup.YFilter }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) SetFilter(yf yfilter.YFilter) { systemIdIccpGroup.YFilter = yf }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "system-id-iccp-group-item" { return "SystemIdIccpGroupItem" }
    return ""
}

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetSegmentPath() string {
    return "system-id-iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", systemIdIccpGroup.IccpGroup) + "']"
}

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id-iccp-group-item" {
        return &systemIdIccpGroup.SystemIdIccpGroupItem
    }
    return nil
}

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id-iccp-group-item"] = &systemIdIccpGroup.SystemIdIccpGroupItem
    return children
}

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = systemIdIccpGroup.IccpGroup
    return leafs
}

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetYangName() string { return "system-id-iccp-group" }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) SetParent(parent types.Entity) { systemIdIccpGroup.parent = parent }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetParent() types.Entity { return systemIdIccpGroup.parent }

func (systemIdIccpGroup *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup) GetParentYangName() string { return "system-id-iccp-groups" }

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem
// Data for this item
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group that the system ID is for. The type is interface{} with range:
    // 0..4294967295.
    IccpGroupId interface{}

    // Priority of the system (deprecated). The type is interface{} with range:
    // 0..65535.
    SystemPriority interface{}

    // MAC Address used to identify the system (deprecated). The type is string
    // with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    SystemMacAddress interface{}

    // System ID.
    SystemId BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId
}

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetFilter() yfilter.YFilter { return systemIdIccpGroupItem.YFilter }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) SetFilter(yf yfilter.YFilter) { systemIdIccpGroupItem.YFilter = yf }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "system-priority" { return "SystemPriority" }
    if yname == "system-mac-address" { return "SystemMacAddress" }
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetSegmentPath() string {
    return "system-id-iccp-group-item"
}

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &systemIdIccpGroupItem.SystemId
    }
    return nil
}

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &systemIdIccpGroupItem.SystemId
    return children
}

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = systemIdIccpGroupItem.IccpGroupId
    leafs["system-priority"] = systemIdIccpGroupItem.SystemPriority
    leafs["system-mac-address"] = systemIdIccpGroupItem.SystemMacAddress
    return leafs
}

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetBundleName() string { return "cisco_ios_xr" }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetYangName() string { return "system-id-iccp-group-item" }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) SetParent(parent types.Entity) { systemIdIccpGroupItem.parent = parent }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetParent() types.Entity { return systemIdIccpGroupItem.parent }

func (systemIdIccpGroupItem *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem) GetParentYangName() string { return "system-id-iccp-group" }

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId
// System ID
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr
}

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &systemId.SystemMacAddr
    }
    return nil
}

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &systemId.SystemMacAddr
    return children
}

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = systemId.SystemPrio
    return leafs
}

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetYangName() string { return "system-id" }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId) GetParentYangName() string { return "system-id-iccp-group-item" }

// BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr
// MAC Address used to identify the system
type BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *BundleInformation_SystemId_SystemIdIccpGroups_SystemIdIccpGroup_SystemIdIccpGroupItem_SystemId_SystemMacAddr) GetParentYangName() string { return "system-id" }

// BundleInformation_MlacpMemberCounters
// Member specific counters of mLACP events
type BundleInformation_MlacpMemberCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Groups with counters of their member's mLACP events.
    IccpGroups BundleInformation_MlacpMemberCounters_IccpGroups

    // Member interfaces with counters of mLACP events.
    Members BundleInformation_MlacpMemberCounters_Members

    // Bundle interfaces with counters of their member's mLACP events.
    Bundles BundleInformation_MlacpMemberCounters_Bundles

    // Devices with counters of their member's mLACP events.
    Nodes BundleInformation_MlacpMemberCounters_Nodes
}

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetFilter() yfilter.YFilter { return mlacpMemberCounters.YFilter }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) SetFilter(yf yfilter.YFilter) { mlacpMemberCounters.YFilter = yf }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetGoName(yname string) string {
    if yname == "iccp-groups" { return "IccpGroups" }
    if yname == "members" { return "Members" }
    if yname == "bundles" { return "Bundles" }
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetSegmentPath() string {
    return "mlacp-member-counters"
}

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-groups" {
        return &mlacpMemberCounters.IccpGroups
    }
    if childYangName == "members" {
        return &mlacpMemberCounters.Members
    }
    if childYangName == "bundles" {
        return &mlacpMemberCounters.Bundles
    }
    if childYangName == "nodes" {
        return &mlacpMemberCounters.Nodes
    }
    return nil
}

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-groups"] = &mlacpMemberCounters.IccpGroups
    children["members"] = &mlacpMemberCounters.Members
    children["bundles"] = &mlacpMemberCounters.Bundles
    children["nodes"] = &mlacpMemberCounters.Nodes
    return children
}

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetYangName() string { return "mlacp-member-counters" }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) SetParent(parent types.Entity) { mlacpMemberCounters.parent = parent }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetParent() types.Entity { return mlacpMemberCounters.parent }

func (mlacpMemberCounters *BundleInformation_MlacpMemberCounters) GetParentYangName() string { return "bundle-information" }

// BundleInformation_MlacpMemberCounters_IccpGroups
// ICCP Groups with counters of their member's
// mLACP events
type BundleInformation_MlacpMemberCounters_IccpGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group ID. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup.
    IccpGroup []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup
}

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetFilter() yfilter.YFilter { return iccpGroups.YFilter }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) SetFilter(yf yfilter.YFilter) { iccpGroups.YFilter = yf }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    return ""
}

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetSegmentPath() string {
    return "iccp-groups"
}

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group" {
        for _, c := range iccpGroups.IccpGroup {
            if iccpGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup{}
        iccpGroups.IccpGroup = append(iccpGroups.IccpGroup, child)
        return &iccpGroups.IccpGroup[len(iccpGroups.IccpGroup)-1]
    }
    return nil
}

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroups.IccpGroup {
        children[iccpGroups.IccpGroup[i].GetSegmentPath()] = &iccpGroups.IccpGroup[i]
    }
    return children
}

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetYangName() string { return "iccp-groups" }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) SetParent(parent types.Entity) { iccpGroups.parent = parent }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetParent() types.Entity { return iccpGroups.parent }

func (iccpGroups *BundleInformation_MlacpMemberCounters_IccpGroups) GetParentYangName() string { return "mlacp-member-counters" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup
// ICCP Group ID
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. ICCP Group ID. The type is interface{} with range:
    // 1..4294967295.
    IccpGroup interface{}

    // Data for this item and all its members.
    IccpGroupItem BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem
}

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetFilter() yfilter.YFilter { return iccpGroup.YFilter }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) SetFilter(yf yfilter.YFilter) { iccpGroup.YFilter = yf }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetGoName(yname string) string {
    if yname == "iccp-group" { return "IccpGroup" }
    if yname == "iccp-group-item" { return "IccpGroupItem" }
    return ""
}

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetSegmentPath() string {
    return "iccp-group" + "[iccp-group='" + fmt.Sprintf("%v", iccpGroup.IccpGroup) + "']"
}

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "iccp-group-item" {
        return &iccpGroup.IccpGroupItem
    }
    return nil
}

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["iccp-group-item"] = &iccpGroup.IccpGroupItem
    return children
}

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group"] = iccpGroup.IccpGroup
    return leafs
}

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetYangName() string { return "iccp-group" }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) SetParent(parent types.Entity) { iccpGroup.parent = parent }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetParent() types.Entity { return iccpGroup.parent }

func (iccpGroup *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup) GetParentYangName() string { return "iccp-groups" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem
// Data for this item and all its members
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP counter information items. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items.
    Items []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items
}

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetFilter() yfilter.YFilter { return iccpGroupItem.YFilter }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) SetFilter(yf yfilter.YFilter) { iccpGroupItem.YFilter = yf }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetGoName(yname string) string {
    if yname == "items" { return "Items" }
    return ""
}

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetSegmentPath() string {
    return "iccp-group-item"
}

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range iccpGroupItem.Items {
            if iccpGroupItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items{}
        iccpGroupItem.Items = append(iccpGroupItem.Items, child)
        return &iccpGroupItem.Items[len(iccpGroupItem.Items)-1]
    }
    return nil
}

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range iccpGroupItem.Items {
        children[iccpGroupItem.Items[i].GetSegmentPath()] = &iccpGroupItem.Items[i]
    }
    return children
}

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetBundleName() string { return "cisco_ios_xr" }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetYangName() string { return "iccp-group-item" }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) SetParent(parent types.Entity) { iccpGroupItem.parent = parent }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetParent() types.Entity { return iccpGroupItem.parent }

func (iccpGroupItem *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem) GetParentYangName() string { return "iccp-group" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items
// mLACP counter information items
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData
}

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "node-data" { return "NodeData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &items.BundleData
    }
    if childYangName == "node-data" {
        for _, c := range items.NodeData {
            if items.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData{}
        items.NodeData = append(items.NodeData, child)
        return &items.NodeData[len(items.NodeData)-1]
    }
    if childYangName == "member-data" {
        for _, c := range items.MemberData {
            if items.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData{}
        items.MemberData = append(items.MemberData, child)
        return &items.MemberData[len(items.MemberData)-1]
    }
    return nil
}

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &items.BundleData
    for i := range items.NodeData {
        children[items.NodeData[i].GetSegmentPath()] = &items.NodeData[i]
    }
    for i := range items.MemberData {
        children[items.MemberData[i].GetSegmentPath()] = &items.MemberData[i]
    }
    return children
}

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items) GetParentYangName() string { return "iccp-group-item" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "mlacp-sync-requests-on-all-local-ports" { return "MlacpSyncRequestsOnAllLocalPorts" }
    return ""
}

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-local-ports" {
        return &bundleData.MlacpSyncRequestsOnAllLocalPorts
    }
    return nil
}

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-local-ports"] = &bundleData.MlacpSyncRequestsOnAllLocalPorts
    return children
}

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    leafs["iccp-group-id"] = bundleData.IccpGroupId
    return leafs
}

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalPorts.YFilter }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-ports"
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalPorts.parent = parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalPorts.parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetGoName(yname string) string {
    if yname == "node-data" { return "NodeData" }
    if yname == "mlacp-sync-requests-on-all-foreign-ports" { return "MlacpSyncRequestsOnAllForeignPorts" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        return &nodeData.NodeData
    }
    if childYangName == "mlacp-sync-requests-on-all-foreign-ports" {
        return &nodeData.MlacpSyncRequestsOnAllForeignPorts
    }
    if childYangName == "member-data" {
        for _, c := range nodeData.MemberData {
            if nodeData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData{}
        nodeData.MemberData = append(nodeData.MemberData, child)
        return &nodeData.MemberData[len(nodeData.MemberData)-1]
    }
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-data"] = &nodeData.NodeData
    children["mlacp-sync-requests-on-all-foreign-ports"] = &nodeData.MlacpSyncRequestsOnAllForeignPorts
    for i := range nodeData.MemberData {
        children[nodeData.MemberData[i].GetSegmentPath()] = &nodeData.MemberData[i]
    }
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeData.NodeId
    leafs["iccp-group-id"] = nodeData.IccpGroupId
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_NodeData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignPorts.YFilter }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-ports"
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignPorts.parent = parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignPorts.parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_IccpGroups_IccpGroup_IccpGroupItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpMemberCounters_Members
// Member interfaces with counters of mLACP events
type BundleInformation_MlacpMemberCounters_Members struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member.
    Member []BundleInformation_MlacpMemberCounters_Members_Member
}

func (members *BundleInformation_MlacpMemberCounters_Members) GetFilter() yfilter.YFilter { return members.YFilter }

func (members *BundleInformation_MlacpMemberCounters_Members) SetFilter(yf yfilter.YFilter) { members.YFilter = yf }

func (members *BundleInformation_MlacpMemberCounters_Members) GetGoName(yname string) string {
    if yname == "member" { return "Member" }
    return ""
}

func (members *BundleInformation_MlacpMemberCounters_Members) GetSegmentPath() string {
    return "members"
}

func (members *BundleInformation_MlacpMemberCounters_Members) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member" {
        for _, c := range members.Member {
            if members.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Members_Member{}
        members.Member = append(members.Member, child)
        return &members.Member[len(members.Member)-1]
    }
    return nil
}

func (members *BundleInformation_MlacpMemberCounters_Members) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range members.Member {
        children[members.Member[i].GetSegmentPath()] = &members.Member[i]
    }
    return children
}

func (members *BundleInformation_MlacpMemberCounters_Members) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (members *BundleInformation_MlacpMemberCounters_Members) GetBundleName() string { return "cisco_ios_xr" }

func (members *BundleInformation_MlacpMemberCounters_Members) GetYangName() string { return "members" }

func (members *BundleInformation_MlacpMemberCounters_Members) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (members *BundleInformation_MlacpMemberCounters_Members) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (members *BundleInformation_MlacpMemberCounters_Members) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (members *BundleInformation_MlacpMemberCounters_Members) SetParent(parent types.Entity) { members.parent = parent }

func (members *BundleInformation_MlacpMemberCounters_Members) GetParent() types.Entity { return members.parent }

func (members *BundleInformation_MlacpMemberCounters_Members) GetParentYangName() string { return "mlacp-member-counters" }

// BundleInformation_MlacpMemberCounters_Members_Member
// Member interface
type BundleInformation_MlacpMemberCounters_Members_Member struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string.
    MemberInterface interface{}

    // Data for this item.
    MemberItem BundleInformation_MlacpMemberCounters_Members_Member_MemberItem
}

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetFilter() yfilter.YFilter { return member.YFilter }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) SetFilter(yf yfilter.YFilter) { member.YFilter = yf }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "member-item" { return "MemberItem" }
    return ""
}

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetSegmentPath() string {
    return "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
}

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-item" {
        return &member.MemberItem
    }
    return nil
}

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-item"] = &member.MemberItem
    return children
}

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = member.MemberInterface
    return leafs
}

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetBundleName() string { return "cisco_ios_xr" }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetYangName() string { return "member" }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) SetParent(parent types.Entity) { member.parent = parent }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetParent() types.Entity { return member.parent }

func (member *BundleInformation_MlacpMemberCounters_Members_Member) GetParentYangName() string { return "members" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem
// Data for this item
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP counter information items. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items.
    Items []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items
}

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetFilter() yfilter.YFilter { return memberItem.YFilter }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) SetFilter(yf yfilter.YFilter) { memberItem.YFilter = yf }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetGoName(yname string) string {
    if yname == "items" { return "Items" }
    return ""
}

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetSegmentPath() string {
    return "member-item"
}

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range memberItem.Items {
            if memberItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items{}
        memberItem.Items = append(memberItem.Items, child)
        return &memberItem.Items[len(memberItem.Items)-1]
    }
    return nil
}

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range memberItem.Items {
        children[memberItem.Items[i].GetSegmentPath()] = &memberItem.Items[i]
    }
    return children
}

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetBundleName() string { return "cisco_ios_xr" }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetYangName() string { return "member-item" }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) SetParent(parent types.Entity) { memberItem.parent = parent }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetParent() types.Entity { return memberItem.parent }

func (memberItem *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem) GetParentYangName() string { return "member" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items
// mLACP counter information items
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData
}

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "node-data" { return "NodeData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &items.BundleData
    }
    if childYangName == "node-data" {
        for _, c := range items.NodeData {
            if items.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData{}
        items.NodeData = append(items.NodeData, child)
        return &items.NodeData[len(items.NodeData)-1]
    }
    if childYangName == "member-data" {
        for _, c := range items.MemberData {
            if items.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData{}
        items.MemberData = append(items.MemberData, child)
        return &items.MemberData[len(items.MemberData)-1]
    }
    return nil
}

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &items.BundleData
    for i := range items.NodeData {
        children[items.NodeData[i].GetSegmentPath()] = &items.NodeData[i]
    }
    for i := range items.MemberData {
        children[items.MemberData[i].GetSegmentPath()] = &items.MemberData[i]
    }
    return children
}

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items) GetParentYangName() string { return "member-item" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "mlacp-sync-requests-on-all-local-ports" { return "MlacpSyncRequestsOnAllLocalPorts" }
    return ""
}

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-local-ports" {
        return &bundleData.MlacpSyncRequestsOnAllLocalPorts
    }
    return nil
}

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-local-ports"] = &bundleData.MlacpSyncRequestsOnAllLocalPorts
    return children
}

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    leafs["iccp-group-id"] = bundleData.IccpGroupId
    return leafs
}

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalPorts.YFilter }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-ports"
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalPorts.parent = parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalPorts.parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetGoName(yname string) string {
    if yname == "node-data" { return "NodeData" }
    if yname == "mlacp-sync-requests-on-all-foreign-ports" { return "MlacpSyncRequestsOnAllForeignPorts" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        return &nodeData.NodeData
    }
    if childYangName == "mlacp-sync-requests-on-all-foreign-ports" {
        return &nodeData.MlacpSyncRequestsOnAllForeignPorts
    }
    if childYangName == "member-data" {
        for _, c := range nodeData.MemberData {
            if nodeData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData{}
        nodeData.MemberData = append(nodeData.MemberData, child)
        return &nodeData.MemberData[len(nodeData.MemberData)-1]
    }
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-data"] = &nodeData.NodeData
    children["mlacp-sync-requests-on-all-foreign-ports"] = &nodeData.MlacpSyncRequestsOnAllForeignPorts
    for i := range nodeData.MemberData {
        children[nodeData.MemberData[i].GetSegmentPath()] = &nodeData.MemberData[i]
    }
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeData.NodeId
    leafs["iccp-group-id"] = nodeData.IccpGroupId
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_NodeData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignPorts.YFilter }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-ports"
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignPorts.parent = parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignPorts.parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Members_Member_MemberItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpMemberCounters_Bundles
// Bundle interfaces with counters of their
// member's mLACP events
type BundleInformation_MlacpMemberCounters_Bundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle.
    Bundle []BundleInformation_MlacpMemberCounters_Bundles_Bundle
}

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetFilter() yfilter.YFilter { return bundles.YFilter }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) SetFilter(yf yfilter.YFilter) { bundles.YFilter = yf }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetGoName(yname string) string {
    if yname == "bundle" { return "Bundle" }
    return ""
}

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetSegmentPath() string {
    return "bundles"
}

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle" {
        for _, c := range bundles.Bundle {
            if bundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Bundles_Bundle{}
        bundles.Bundle = append(bundles.Bundle, child)
        return &bundles.Bundle[len(bundles.Bundle)-1]
    }
    return nil
}

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundles.Bundle {
        children[bundles.Bundle[i].GetSegmentPath()] = &bundles.Bundle[i]
    }
    return children
}

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetBundleName() string { return "cisco_ios_xr" }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetYangName() string { return "bundles" }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) SetParent(parent types.Entity) { bundles.parent = parent }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetParent() types.Entity { return bundles.parent }

func (bundles *BundleInformation_MlacpMemberCounters_Bundles) GetParentYangName() string { return "mlacp-member-counters" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle
// Bundle interface
type BundleInformation_MlacpMemberCounters_Bundles_Bundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for this item.
    BundleItem BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem
}

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetFilter() yfilter.YFilter { return bundle.YFilter }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) SetFilter(yf yfilter.YFilter) { bundle.YFilter = yf }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "bundle-item" { return "BundleItem" }
    return ""
}

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetSegmentPath() string {
    return "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
}

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-item" {
        return &bundle.BundleItem
    }
    return nil
}

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-item"] = &bundle.BundleItem
    return children
}

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = bundle.BundleInterface
    return leafs
}

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetYangName() string { return "bundle" }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) SetParent(parent types.Entity) { bundle.parent = parent }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetParent() types.Entity { return bundle.parent }

func (bundle *BundleInformation_MlacpMemberCounters_Bundles_Bundle) GetParentYangName() string { return "bundles" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem
// Data for this item
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData
}

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetFilter() yfilter.YFilter { return bundleItem.YFilter }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) SetFilter(yf yfilter.YFilter) { bundleItem.YFilter = yf }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "node-data" { return "NodeData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetSegmentPath() string {
    return "bundle-item"
}

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &bundleItem.BundleData
    }
    if childYangName == "node-data" {
        for _, c := range bundleItem.NodeData {
            if bundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData{}
        bundleItem.NodeData = append(bundleItem.NodeData, child)
        return &bundleItem.NodeData[len(bundleItem.NodeData)-1]
    }
    if childYangName == "member-data" {
        for _, c := range bundleItem.MemberData {
            if bundleItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData{}
        bundleItem.MemberData = append(bundleItem.MemberData, child)
        return &bundleItem.MemberData[len(bundleItem.MemberData)-1]
    }
    return nil
}

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &bundleItem.BundleData
    for i := range bundleItem.NodeData {
        children[bundleItem.NodeData[i].GetSegmentPath()] = &bundleItem.NodeData[i]
    }
    for i := range bundleItem.MemberData {
        children[bundleItem.MemberData[i].GetSegmentPath()] = &bundleItem.MemberData[i]
    }
    return children
}

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetBundleName() string { return "cisco_ios_xr" }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetYangName() string { return "bundle-item" }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) SetParent(parent types.Entity) { bundleItem.parent = parent }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetParent() types.Entity { return bundleItem.parent }

func (bundleItem *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem) GetParentYangName() string { return "bundle" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "mlacp-sync-requests-on-all-local-ports" { return "MlacpSyncRequestsOnAllLocalPorts" }
    return ""
}

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-local-ports" {
        return &bundleData.MlacpSyncRequestsOnAllLocalPorts
    }
    return nil
}

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-local-ports"] = &bundleData.MlacpSyncRequestsOnAllLocalPorts
    return children
}

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    leafs["iccp-group-id"] = bundleData.IccpGroupId
    return leafs
}

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData) GetParentYangName() string { return "bundle-item" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalPorts.YFilter }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-ports"
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalPorts.parent = parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalPorts.parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetGoName(yname string) string {
    if yname == "node-data" { return "NodeData" }
    if yname == "mlacp-sync-requests-on-all-foreign-ports" { return "MlacpSyncRequestsOnAllForeignPorts" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        return &nodeData.NodeData
    }
    if childYangName == "mlacp-sync-requests-on-all-foreign-ports" {
        return &nodeData.MlacpSyncRequestsOnAllForeignPorts
    }
    if childYangName == "member-data" {
        for _, c := range nodeData.MemberData {
            if nodeData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData{}
        nodeData.MemberData = append(nodeData.MemberData, child)
        return &nodeData.MemberData[len(nodeData.MemberData)-1]
    }
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-data"] = &nodeData.NodeData
    children["mlacp-sync-requests-on-all-foreign-ports"] = &nodeData.MlacpSyncRequestsOnAllForeignPorts
    for i := range nodeData.MemberData {
        children[nodeData.MemberData[i].GetSegmentPath()] = &nodeData.MemberData[i]
    }
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData) GetParentYangName() string { return "bundle-item" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeData.NodeId
    leafs["iccp-group-id"] = nodeData.IccpGroupId
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_NodeData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignPorts.YFilter }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-ports"
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignPorts.parent = parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignPorts.parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData) GetParentYangName() string { return "bundle-item" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Bundles_Bundle_BundleItem_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpMemberCounters_Nodes
// Devices with counters of their member's mLACP
// events
type BundleInformation_MlacpMemberCounters_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node ID. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node.
    Node []BundleInformation_MlacpMemberCounters_Nodes_Node
}

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetYangName() string { return "nodes" }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *BundleInformation_MlacpMemberCounters_Nodes) GetParentYangName() string { return "mlacp-member-counters" }

// BundleInformation_MlacpMemberCounters_Nodes_Node
// Node ID
type BundleInformation_MlacpMemberCounters_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. For a local device the Node ID e.g. '0_0_CPU0',
    // for a peer device the LDP ID followed by the ICCP Group ID e.g. '5.4.3.2
    // ,4'. The type is string.
    Node interface{}

    // Data for this item.
    NodeItem BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem
}

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    if yname == "node-item" { return "NodeItem" }
    return ""
}

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node='" + fmt.Sprintf("%v", node.Node) + "']"
}

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-item" {
        return &node.NodeItem
    }
    return nil
}

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-item"] = &node.NodeItem
    return children
}

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node"] = node.Node
    return leafs
}

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetYangName() string { return "node" }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *BundleInformation_MlacpMemberCounters_Nodes_Node) GetParentYangName() string { return "nodes" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem
// Data for this item
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // mLACP counter information items. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items.
    Items []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items
}

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetFilter() yfilter.YFilter { return nodeItem.YFilter }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) SetFilter(yf yfilter.YFilter) { nodeItem.YFilter = yf }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetGoName(yname string) string {
    if yname == "items" { return "Items" }
    return ""
}

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetSegmentPath() string {
    return "node-item"
}

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "items" {
        for _, c := range nodeItem.Items {
            if nodeItem.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items{}
        nodeItem.Items = append(nodeItem.Items, child)
        return &nodeItem.Items[len(nodeItem.Items)-1]
    }
    return nil
}

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodeItem.Items {
        children[nodeItem.Items[i].GetSegmentPath()] = &nodeItem.Items[i]
    }
    return children
}

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetBundleName() string { return "cisco_ios_xr" }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetYangName() string { return "node-item" }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) SetParent(parent types.Entity) { nodeItem.parent = parent }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetParent() types.Entity { return nodeItem.parent }

func (nodeItem *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem) GetParentYangName() string { return "node" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items
// mLACP counter information items
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle mLACP TLV counter information.
    BundleData BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData

    // Peer device mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData.
    NodeData []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData

    // Local member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData
}

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetFilter() yfilter.YFilter { return items.YFilter }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) SetFilter(yf yfilter.YFilter) { items.YFilter = yf }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    if yname == "node-data" { return "NodeData" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetSegmentPath() string {
    return "items"
}

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        return &items.BundleData
    }
    if childYangName == "node-data" {
        for _, c := range items.NodeData {
            if items.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData{}
        items.NodeData = append(items.NodeData, child)
        return &items.NodeData[len(items.NodeData)-1]
    }
    if childYangName == "member-data" {
        for _, c := range items.MemberData {
            if items.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData{}
        items.MemberData = append(items.MemberData, child)
        return &items.MemberData[len(items.MemberData)-1]
    }
    return nil
}

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-data"] = &items.BundleData
    for i := range items.NodeData {
        children[items.NodeData[i].GetSegmentPath()] = &items.NodeData[i]
    }
    for i := range items.MemberData {
        children[items.MemberData[i].GetSegmentPath()] = &items.MemberData[i]
    }
    return children
}

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetBundleName() string { return "cisco_ios_xr" }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetYangName() string { return "items" }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) SetParent(parent types.Entity) { items.parent = parent }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetParent() types.Entity { return items.parent }

func (items *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items) GetParentYangName() string { return "node-item" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData
// Bundle mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the bundle. The type is string.
    BundleName interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllLocalPorts BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
}

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "mlacp-sync-requests-on-all-local-ports" { return "MlacpSyncRequestsOnAllLocalPorts" }
    return ""
}

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-sync-requests-on-all-local-ports" {
        return &bundleData.MlacpSyncRequestsOnAllLocalPorts
    }
    return nil
}

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-sync-requests-on-all-local-ports"] = &bundleData.MlacpSyncRequestsOnAllLocalPorts
    return children
}

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundleData.BundleName
    leafs["iccp-group-id"] = bundleData.IccpGroupId
    return leafs
}

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllLocalPorts.YFilter }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllLocalPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-local-ports"
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllLocalPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllLocalPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllLocalPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllLocalPorts.parent = parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllLocalPorts.parent }

func (mlacpSyncRequestsOnAllLocalPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts) GetParentYangName() string { return "bundle-data" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_BundleData_MlacpSyncRequestsOnAllLocalPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-local-ports" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Peer device mLACP TLV counter information.
    NodeData BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData

    // Counts of mLACP sync request TLVs on all ports.
    MlacpSyncRequestsOnAllForeignPorts BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts

    // Member mLACP TLV counter information. The type is slice of
    // BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData.
    MemberData []BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetGoName(yname string) string {
    if yname == "node-data" { return "NodeData" }
    if yname == "mlacp-sync-requests-on-all-foreign-ports" { return "MlacpSyncRequestsOnAllForeignPorts" }
    if yname == "member-data" { return "MemberData" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-data" {
        return &nodeData.NodeData
    }
    if childYangName == "mlacp-sync-requests-on-all-foreign-ports" {
        return &nodeData.MlacpSyncRequestsOnAllForeignPorts
    }
    if childYangName == "member-data" {
        for _, c := range nodeData.MemberData {
            if nodeData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData{}
        nodeData.MemberData = append(nodeData.MemberData, child)
        return &nodeData.MemberData[len(nodeData.MemberData)-1]
    }
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["node-data"] = &nodeData.NodeData
    children["mlacp-sync-requests-on-all-foreign-ports"] = &nodeData.MlacpSyncRequestsOnAllForeignPorts
    for i := range nodeData.MemberData {
        children[nodeData.MemberData[i].GetSegmentPath()] = &nodeData.MemberData[i]
    }
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData
// Peer device mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Device ID. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // ICCP Group ID. The type is interface{} with range: 0..4294967295.
    IccpGroupId interface{}
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetFilter() yfilter.YFilter { return nodeData.YFilter }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) SetFilter(yf yfilter.YFilter) { nodeData.YFilter = yf }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    return ""
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetSegmentPath() string {
    return "node-data"
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeData.NodeId
    leafs["iccp-group-id"] = nodeData.IccpGroupId
    return leafs
}

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetBundleName() string { return "cisco_ios_xr" }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetYangName() string { return "node-data" }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) SetParent(parent types.Entity) { nodeData.parent = parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetParent() types.Entity { return nodeData.parent }

func (nodeData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_NodeData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts
// Counts of mLACP sync request TLVs on all ports
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetFilter() yfilter.YFilter { return mlacpSyncRequestsOnAllForeignPorts.YFilter }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetFilter(yf yfilter.YFilter) { mlacpSyncRequestsOnAllForeignPorts.YFilter = yf }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetGoName(yname string) string {
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetSegmentPath() string {
    return "mlacp-sync-requests-on-all-foreign-ports"
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    }
    return nil
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpSyncRequestsOnAllForeignPorts.ReceivedSyncRequests
    return children
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-time-cleared"] = mlacpSyncRequestsOnAllForeignPorts.LastTimeCleared
    leafs["time-since-cleared"] = mlacpSyncRequestsOnAllForeignPorts.TimeSinceCleared
    return leafs
}

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) SetParent(parent types.Entity) { mlacpSyncRequestsOnAllForeignPorts.parent = parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParent() types.Entity { return mlacpSyncRequestsOnAllForeignPorts.parent }

func (mlacpSyncRequestsOnAllForeignPorts *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MlacpSyncRequestsOnAllForeignPorts_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-sync-requests-on-all-foreign-ports" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData
// Member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData) GetParentYangName() string { return "node-data" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_NodeData_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData
// Local member mLACP TLV counter information
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Port name of member. The type is string.
    PortName interface{}

    // Counts of mLACP TLVs sent and received.
    MlacpTlvCounters BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetFilter() yfilter.YFilter { return memberData.YFilter }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) SetFilter(yf yfilter.YFilter) { memberData.YFilter = yf }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetGoName(yname string) string {
    if yname == "port-name" { return "PortName" }
    if yname == "mlacp-tlv-counters" { return "MlacpTlvCounters" }
    return ""
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetSegmentPath() string {
    return "member-data"
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mlacp-tlv-counters" {
        return &memberData.MlacpTlvCounters
    }
    return nil
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mlacp-tlv-counters"] = &memberData.MlacpTlvCounters
    return children
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["port-name"] = memberData.PortName
    return leafs
}

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetBundleName() string { return "cisco_ios_xr" }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetYangName() string { return "member-data" }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) SetParent(parent types.Entity) { memberData.parent = parent }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetParent() types.Entity { return memberData.parent }

func (memberData *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData) GetParentYangName() string { return "items" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters
// Counts of mLACP TLVs sent and received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of mLACP config TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentConfigTlVs interface{}

    // Number of mLACP state TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentStateTlVs interface{}

    // Number of mLACP priority TLVs sent. The type is interface{} with range:
    // 0..4294967295.
    SentPriorityTlVs interface{}

    // Number of mLACP priority TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedPriorityTlVs interface{}

    // Number of mLACP NAK TLVs received. The type is interface{} with range:
    // 0..4294967295.
    ReceivedNakTlVs interface{}

    // Time in nsecs from boot when counters were last cleared (deprecated). The
    // type is interface{} with range: 0..18446744073709551615. Units are
    // nanosecond.
    LastTimeCleared interface{}

    // Elapsed time in nsecs since counters were last cleared. The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Elapsed time in nsecs since last unexpected event. The type is interface{}
    // with range: 0..18446744073709551615. Units are nanosecond.
    LastUnexpectedEvent interface{}

    // Number of mLACP sync request TLVs received.
    ReceivedSyncRequests BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetFilter() yfilter.YFilter { return mlacpTlvCounters.YFilter }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) SetFilter(yf yfilter.YFilter) { mlacpTlvCounters.YFilter = yf }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetGoName(yname string) string {
    if yname == "sent-config-tl-vs" { return "SentConfigTlVs" }
    if yname == "sent-state-tl-vs" { return "SentStateTlVs" }
    if yname == "sent-priority-tl-vs" { return "SentPriorityTlVs" }
    if yname == "received-priority-tl-vs" { return "ReceivedPriorityTlVs" }
    if yname == "received-nak-tl-vs" { return "ReceivedNakTlVs" }
    if yname == "last-time-cleared" { return "LastTimeCleared" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "last-unexpected-event" { return "LastUnexpectedEvent" }
    if yname == "received-sync-requests" { return "ReceivedSyncRequests" }
    return ""
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetSegmentPath() string {
    return "mlacp-tlv-counters"
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-sync-requests" {
        return &mlacpTlvCounters.ReceivedSyncRequests
    }
    return nil
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-sync-requests"] = &mlacpTlvCounters.ReceivedSyncRequests
    return children
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sent-config-tl-vs"] = mlacpTlvCounters.SentConfigTlVs
    leafs["sent-state-tl-vs"] = mlacpTlvCounters.SentStateTlVs
    leafs["sent-priority-tl-vs"] = mlacpTlvCounters.SentPriorityTlVs
    leafs["received-priority-tl-vs"] = mlacpTlvCounters.ReceivedPriorityTlVs
    leafs["received-nak-tl-vs"] = mlacpTlvCounters.ReceivedNakTlVs
    leafs["last-time-cleared"] = mlacpTlvCounters.LastTimeCleared
    leafs["time-since-cleared"] = mlacpTlvCounters.TimeSinceCleared
    leafs["last-unexpected-event"] = mlacpTlvCounters.LastUnexpectedEvent
    return leafs
}

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetBundleName() string { return "cisco_ios_xr" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetYangName() string { return "mlacp-tlv-counters" }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) SetParent(parent types.Entity) { mlacpTlvCounters.parent = parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetParent() types.Entity { return mlacpTlvCounters.parent }

func (mlacpTlvCounters *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters) GetParentYangName() string { return "member-data" }

// BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests
// Number of mLACP sync request TLVs received
type BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of sync requests received. The type is interface{} with range:
    // 0..4294967295.
    AllSyncs interface{}

    // Number of config sync requests received. The type is interface{} with
    // range: 0..4294967295.
    ConfigSyncs interface{}

    // Number of state sync requests received. The type is interface{} with range:
    // 0..4294967295.
    StateSyncs interface{}
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetFilter() yfilter.YFilter { return receivedSyncRequests.YFilter }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetFilter(yf yfilter.YFilter) { receivedSyncRequests.YFilter = yf }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetGoName(yname string) string {
    if yname == "all-syncs" { return "AllSyncs" }
    if yname == "config-syncs" { return "ConfigSyncs" }
    if yname == "state-syncs" { return "StateSyncs" }
    return ""
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetSegmentPath() string {
    return "received-sync-requests"
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-syncs"] = receivedSyncRequests.AllSyncs
    leafs["config-syncs"] = receivedSyncRequests.ConfigSyncs
    leafs["state-syncs"] = receivedSyncRequests.StateSyncs
    return leafs
}

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleName() string { return "cisco_ios_xr" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetYangName() string { return "received-sync-requests" }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) SetParent(parent types.Entity) { receivedSyncRequests.parent = parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParent() types.Entity { return receivedSyncRequests.parent }

func (receivedSyncRequests *BundleInformation_MlacpMemberCounters_Nodes_Node_NodeItem_Items_MemberData_MlacpTlvCounters_ReceivedSyncRequests) GetParentYangName() string { return "mlacp-tlv-counters" }

// LacpData
// lacp data
type LacpData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global LACP data.
    Global LacpData_Global
}

func (lacpData *LacpData) GetFilter() yfilter.YFilter { return lacpData.YFilter }

func (lacpData *LacpData) SetFilter(yf yfilter.YFilter) { lacpData.YFilter = yf }

func (lacpData *LacpData) GetGoName(yname string) string {
    if yname == "global" { return "Global" }
    return ""
}

func (lacpData *LacpData) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-oper:lacp-data"
}

func (lacpData *LacpData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global" {
        return &lacpData.Global
    }
    return nil
}

func (lacpData *LacpData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global"] = &lacpData.Global
    return children
}

func (lacpData *LacpData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpData *LacpData) GetBundleName() string { return "cisco_ios_xr" }

func (lacpData *LacpData) GetYangName() string { return "lacp-data" }

func (lacpData *LacpData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpData *LacpData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpData *LacpData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpData *LacpData) SetParent(parent types.Entity) { lacpData.parent = parent }

func (lacpData *LacpData) GetParent() types.Entity { return lacpData.parent }

func (lacpData *LacpData) GetParentYangName() string { return "Cisco-IOS-XR-bundlemgr-oper" }

// LacpData_Global
// Global LACP data
type LacpData_Global struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACP System ID.
    SystemId LacpData_Global_SystemId
}

func (global *LacpData_Global) GetFilter() yfilter.YFilter { return global.YFilter }

func (global *LacpData_Global) SetFilter(yf yfilter.YFilter) { global.YFilter = yf }

func (global *LacpData_Global) GetGoName(yname string) string {
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (global *LacpData_Global) GetSegmentPath() string {
    return "global"
}

func (global *LacpData_Global) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &global.SystemId
    }
    return nil
}

func (global *LacpData_Global) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &global.SystemId
    return children
}

func (global *LacpData_Global) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (global *LacpData_Global) GetBundleName() string { return "cisco_ios_xr" }

func (global *LacpData_Global) GetYangName() string { return "global" }

func (global *LacpData_Global) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (global *LacpData_Global) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (global *LacpData_Global) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (global *LacpData_Global) SetParent(parent types.Entity) { global.parent = parent }

func (global *LacpData_Global) GetParent() types.Entity { return global.parent }

func (global *LacpData_Global) GetParentYangName() string { return "lacp-data" }

// LacpData_Global_SystemId
// LACP System ID
type LacpData_Global_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ICCP Group that the system ID is for. The type is interface{} with range:
    // 0..4294967295.
    IccpGroupId interface{}

    // Priority of the system (deprecated). The type is interface{} with range:
    // 0..65535.
    SystemPriority interface{}

    // MAC Address used to identify the system (deprecated). The type is string
    // with pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    SystemMacAddress interface{}

    // System ID.
    SystemId LacpData_Global_SystemId_SystemId
}

func (systemId *LacpData_Global_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *LacpData_Global_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *LacpData_Global_SystemId) GetGoName(yname string) string {
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "system-priority" { return "SystemPriority" }
    if yname == "system-mac-address" { return "SystemMacAddress" }
    if yname == "system-id" { return "SystemId" }
    return ""
}

func (systemId *LacpData_Global_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *LacpData_Global_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-id" {
        return &systemId.SystemId
    }
    return nil
}

func (systemId *LacpData_Global_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-id"] = &systemId.SystemId
    return children
}

func (systemId *LacpData_Global_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["iccp-group-id"] = systemId.IccpGroupId
    leafs["system-priority"] = systemId.SystemPriority
    leafs["system-mac-address"] = systemId.SystemMacAddress
    return leafs
}

func (systemId *LacpData_Global_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *LacpData_Global_SystemId) GetYangName() string { return "system-id" }

func (systemId *LacpData_Global_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *LacpData_Global_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *LacpData_Global_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *LacpData_Global_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *LacpData_Global_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *LacpData_Global_SystemId) GetParentYangName() string { return "global" }

// LacpData_Global_SystemId_SystemId
// System ID
type LacpData_Global_SystemId_SystemId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority of the system. The type is interface{} with range: 0..65535.
    SystemPrio interface{}

    // MAC Address used to identify the system.
    SystemMacAddr LacpData_Global_SystemId_SystemId_SystemMacAddr
}

func (systemId *LacpData_Global_SystemId_SystemId) GetFilter() yfilter.YFilter { return systemId.YFilter }

func (systemId *LacpData_Global_SystemId_SystemId) SetFilter(yf yfilter.YFilter) { systemId.YFilter = yf }

func (systemId *LacpData_Global_SystemId_SystemId) GetGoName(yname string) string {
    if yname == "system-prio" { return "SystemPrio" }
    if yname == "system-mac-addr" { return "SystemMacAddr" }
    return ""
}

func (systemId *LacpData_Global_SystemId_SystemId) GetSegmentPath() string {
    return "system-id"
}

func (systemId *LacpData_Global_SystemId_SystemId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "system-mac-addr" {
        return &systemId.SystemMacAddr
    }
    return nil
}

func (systemId *LacpData_Global_SystemId_SystemId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["system-mac-addr"] = &systemId.SystemMacAddr
    return children
}

func (systemId *LacpData_Global_SystemId_SystemId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["system-prio"] = systemId.SystemPrio
    return leafs
}

func (systemId *LacpData_Global_SystemId_SystemId) GetBundleName() string { return "cisco_ios_xr" }

func (systemId *LacpData_Global_SystemId_SystemId) GetYangName() string { return "system-id" }

func (systemId *LacpData_Global_SystemId_SystemId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemId *LacpData_Global_SystemId_SystemId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemId *LacpData_Global_SystemId_SystemId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemId *LacpData_Global_SystemId_SystemId) SetParent(parent types.Entity) { systemId.parent = parent }

func (systemId *LacpData_Global_SystemId_SystemId) GetParent() types.Entity { return systemId.parent }

func (systemId *LacpData_Global_SystemId_SystemId) GetParentYangName() string { return "system-id" }

// LacpData_Global_SystemId_SystemId_SystemMacAddr
// MAC Address used to identify the system
type LacpData_Global_SystemId_SystemId_SystemMacAddr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // macaddr. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    Macaddr interface{}
}

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetFilter() yfilter.YFilter { return systemMacAddr.YFilter }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) SetFilter(yf yfilter.YFilter) { systemMacAddr.YFilter = yf }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetGoName(yname string) string {
    if yname == "macaddr" { return "Macaddr" }
    return ""
}

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetSegmentPath() string {
    return "system-mac-addr"
}

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["macaddr"] = systemMacAddr.Macaddr
    return leafs
}

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetBundleName() string { return "cisco_ios_xr" }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetYangName() string { return "system-mac-addr" }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) SetParent(parent types.Entity) { systemMacAddr.parent = parent }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetParent() types.Entity { return systemMacAddr.parent }

func (systemMacAddr *LacpData_Global_SystemId_SystemId_SystemMacAddr) GetParentYangName() string { return "system-id" }

// Bundles
// bundles
type Bundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per bundle operational data.
    Bundles Bundles_Bundles
}

func (bundles *Bundles) GetFilter() yfilter.YFilter { return bundles.YFilter }

func (bundles *Bundles) SetFilter(yf yfilter.YFilter) { bundles.YFilter = yf }

func (bundles *Bundles) GetGoName(yname string) string {
    if yname == "bundles" { return "Bundles" }
    return ""
}

func (bundles *Bundles) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-oper:bundles"
}

func (bundles *Bundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundles" {
        return &bundles.Bundles
    }
    return nil
}

func (bundles *Bundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundles"] = &bundles.Bundles
    return children
}

func (bundles *Bundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundles *Bundles) GetBundleName() string { return "cisco_ios_xr" }

func (bundles *Bundles) GetYangName() string { return "bundles" }

func (bundles *Bundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundles *Bundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundles *Bundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundles *Bundles) SetParent(parent types.Entity) { bundles.parent = parent }

func (bundles *Bundles) GetParent() types.Entity { return bundles.parent }

func (bundles *Bundles) GetParentYangName() string { return "Cisco-IOS-XR-bundlemgr-oper" }

// Bundles_Bundles
// Per bundle operational data
type Bundles_Bundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is slice of Bundles_Bundles_Bundle.
    Bundle []Bundles_Bundles_Bundle
}

func (bundles *Bundles_Bundles) GetFilter() yfilter.YFilter { return bundles.YFilter }

func (bundles *Bundles_Bundles) SetFilter(yf yfilter.YFilter) { bundles.YFilter = yf }

func (bundles *Bundles_Bundles) GetGoName(yname string) string {
    if yname == "bundle" { return "Bundle" }
    return ""
}

func (bundles *Bundles_Bundles) GetSegmentPath() string {
    return "bundles"
}

func (bundles *Bundles_Bundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle" {
        for _, c := range bundles.Bundle {
            if bundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bundles_Bundles_Bundle{}
        bundles.Bundle = append(bundles.Bundle, child)
        return &bundles.Bundle[len(bundles.Bundle)-1]
    }
    return nil
}

func (bundles *Bundles_Bundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundles.Bundle {
        children[bundles.Bundle[i].GetSegmentPath()] = &bundles.Bundle[i]
    }
    return children
}

func (bundles *Bundles_Bundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundles *Bundles_Bundles) GetBundleName() string { return "cisco_ios_xr" }

func (bundles *Bundles_Bundles) GetYangName() string { return "bundles" }

func (bundles *Bundles_Bundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundles *Bundles_Bundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundles *Bundles_Bundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundles *Bundles_Bundles) SetParent(parent types.Entity) { bundles.parent = parent }

func (bundles *Bundles_Bundles) GetParent() types.Entity { return bundles.parent }

func (bundles *Bundles_Bundles) GetParentYangName() string { return "bundles" }

// Bundles_Bundles_Bundle
// Bundle interface
type Bundles_Bundles_Bundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleInterface interface{}

    // Data for each Bundle.
    Data Bundles_Bundles_Bundle_Data

    // Member interface.
    Members Bundles_Bundles_Bundle_Members
}

func (bundle *Bundles_Bundles_Bundle) GetFilter() yfilter.YFilter { return bundle.YFilter }

func (bundle *Bundles_Bundles_Bundle) SetFilter(yf yfilter.YFilter) { bundle.YFilter = yf }

func (bundle *Bundles_Bundles_Bundle) GetGoName(yname string) string {
    if yname == "bundle-interface" { return "BundleInterface" }
    if yname == "data" { return "Data" }
    if yname == "members" { return "Members" }
    return ""
}

func (bundle *Bundles_Bundles_Bundle) GetSegmentPath() string {
    return "bundle" + "[bundle-interface='" + fmt.Sprintf("%v", bundle.BundleInterface) + "']"
}

func (bundle *Bundles_Bundles_Bundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &bundle.Data
    }
    if childYangName == "members" {
        return &bundle.Members
    }
    return nil
}

func (bundle *Bundles_Bundles_Bundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &bundle.Data
    children["members"] = &bundle.Members
    return children
}

func (bundle *Bundles_Bundles_Bundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface"] = bundle.BundleInterface
    return leafs
}

func (bundle *Bundles_Bundles_Bundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundle *Bundles_Bundles_Bundle) GetYangName() string { return "bundle" }

func (bundle *Bundles_Bundles_Bundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundle *Bundles_Bundles_Bundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundle *Bundles_Bundles_Bundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundle *Bundles_Bundles_Bundle) SetParent(parent types.Entity) { bundle.parent = parent }

func (bundle *Bundles_Bundles_Bundle) GetParent() types.Entity { return bundle.parent }

func (bundle *Bundles_Bundles_Bundle) GetParentYangName() string { return "bundles" }

// Bundles_Bundles_Bundle_Data
// Data for each Bundle
type Bundles_Bundles_Bundle_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    BundleInterfaceName interface{}

    // Bandwidth available to the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    AvailableBandwidth interface{}

    // Effective bandwidth on the bundle interface (kbps). The type is interface{}
    // with range: 0..4294967295. Units are kbit/s.
    EffectiveBandwidth interface{}

    // Bandwidth configured on the bundle interface (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    ConfiguredBandwidth interface{}

    // Minimum number of active links for bundle to go up. The type is interface{}
    // with range: 0..255.
    MinimumActiveLinks interface{}

    // Maximum number of active links in the bundle. The type is interface{} with
    // range: 0..255.
    MaximumActiveLinks interface{}

    // Source of maximum active links value. The type is BmWhichSystem.
    MaximumActiveLinksSource interface{}

    // Minimum bundle bandwidth for bundle to go up (kbps). The type is
    // interface{} with range: 0..4294967295. Units are kbit/s.
    MinimumBandwidth interface{}

    // Primary bundle member (no longer applicable). The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    PrimaryMember interface{}

    // The state of the bundle. The type is BmBdlState.
    BundleStatus interface{}

    // The number of active local members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveMemberCount interface{}

    // The number of standby local members on the bundle. The type is interface{}
    // with range: 0..65535.
    StandbyMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredMemberCount interface{}

    // The source of the MAC Address. The type is BmBdlMacSource.
    MacSource interface{}

    // The name of the member that supplied the MAC address. The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    MacSourceMember interface{}

    // Indicates if this bundle is operating as an inter-chassis link (1 = I-C
    // link, 0 = normal). The type is bool.
    InterChassis interface{}

    // Indicates the active/standby redundancy state of the device for the bundle.
    // The type is bool.
    IsActive interface{}

    // The status of the LACP feature on the bundle. The type is BmFeatureStatus.
    LacpStatus interface{}

    // The status of the mLACP feature on the bundle. The type is BmFeatureStatus.
    MlacpStatus interface{}

    // The status of the BFD (IPv4) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv4BfdStatus interface{}

    // The status of the link order signaling feature on the bundle. The type is
    // BmFeatureStatus.
    LinkOrderStatus interface{}

    // The status of the BFD (IPv6) feature on the bundle. The type is
    // BmFeatureStatus.
    Ipv6BfdStatus interface{}

    // The type of hash to use for load balancing. The type is string.
    LoadBalanceHashType interface{}

    // The number of links required per rack for localized load balancing. The
    // type is interface{} with range: 0..65535.
    LoadBalanceLocalityThreshold interface{}

    // Timer for suppressing bundle state flaps. The type is interface{} with
    // range: 0..65535.
    SuppressionTimer interface{}

    // The wait while time used for member ports. The type is interface{} with
    // range: 0..65535.
    WaitWhileTimer interface{}

    // Collector Max Delay. The type is interface{} with range: 0..65535.
    CollectorMaxDelay interface{}

    // The status of the Cisco Extensions feature (1 = enabled, 0 = not enabled).
    // The type is bool.
    CiscoExtensions interface{}

    // The status of the LACP nonrevertive feature (1 = enable, 0 = not enabled).
    // The type is bool.
    LacpNonrevertive interface{}

    // ICCP Group that the bundle is configured to. The type is interface{} with
    // range: 0..4294967295.
    IccpGroupId interface{}

    // The number of active foreign members on the bundle. The type is interface{}
    // with range: 0..65535.
    ActiveForeignMemberCount interface{}

    // The number of configured local members on the bundle. The type is
    // interface{} with range: 0..65535.
    ConfiguredForeignMemberCount interface{}

    // How a switchover of the bundle from this device will occur. The type is
    // BmdMlacpSwitchover.
    SwitchoverType interface{}

    // Attempt to maximize the bundle if links are below this value. The type is
    // interface{} with range: 0..4294967295.
    MaximizeThresholdValueLinks interface{}

    // Attempt to maximize the bundle if bandwidth is below this value. The type
    // is interface{} with range: 0..4294967295.
    MaximizeThresholdValueBandWidth interface{}

    // Indicates the mode of the device for the bundle. The type is
    // BundleMlacpMode.
    MlacpMode interface{}

    // Number of seconds to wait before becoming active after recovering from a
    // failure. The type is interface{} with range: 0..65535. Units are second.
    RecoveryDelay interface{}

    // Is the ICCP group of the bundle in singleton mode (1 = singleton; 0 = not
    // singleton). The type is bool.
    Singleton interface{}

    // MAC address of this member.
    MacAddress Bundles_Bundles_Bundle_Data_MacAddress

    // Configuration values for BFD on bundle members. The type is slice of
    // Bundles_Bundles_Bundle_Data_BfdConfig.
    BfdConfig []Bundles_Bundles_Bundle_Data_BfdConfig
}

func (data *Bundles_Bundles_Bundle_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *Bundles_Bundles_Bundle_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *Bundles_Bundles_Bundle_Data) GetGoName(yname string) string {
    if yname == "bundle-interface-name" { return "BundleInterfaceName" }
    if yname == "available-bandwidth" { return "AvailableBandwidth" }
    if yname == "effective-bandwidth" { return "EffectiveBandwidth" }
    if yname == "configured-bandwidth" { return "ConfiguredBandwidth" }
    if yname == "minimum-active-links" { return "MinimumActiveLinks" }
    if yname == "maximum-active-links" { return "MaximumActiveLinks" }
    if yname == "maximum-active-links-source" { return "MaximumActiveLinksSource" }
    if yname == "minimum-bandwidth" { return "MinimumBandwidth" }
    if yname == "primary-member" { return "PrimaryMember" }
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "active-member-count" { return "ActiveMemberCount" }
    if yname == "standby-member-count" { return "StandbyMemberCount" }
    if yname == "configured-member-count" { return "ConfiguredMemberCount" }
    if yname == "mac-source" { return "MacSource" }
    if yname == "mac-source-member" { return "MacSourceMember" }
    if yname == "inter-chassis" { return "InterChassis" }
    if yname == "is-active" { return "IsActive" }
    if yname == "lacp-status" { return "LacpStatus" }
    if yname == "mlacp-status" { return "MlacpStatus" }
    if yname == "ipv4bfd-status" { return "Ipv4BfdStatus" }
    if yname == "link-order-status" { return "LinkOrderStatus" }
    if yname == "ipv6bfd-status" { return "Ipv6BfdStatus" }
    if yname == "load-balance-hash-type" { return "LoadBalanceHashType" }
    if yname == "load-balance-locality-threshold" { return "LoadBalanceLocalityThreshold" }
    if yname == "suppression-timer" { return "SuppressionTimer" }
    if yname == "wait-while-timer" { return "WaitWhileTimer" }
    if yname == "collector-max-delay" { return "CollectorMaxDelay" }
    if yname == "cisco-extensions" { return "CiscoExtensions" }
    if yname == "lacp-nonrevertive" { return "LacpNonrevertive" }
    if yname == "iccp-group-id" { return "IccpGroupId" }
    if yname == "active-foreign-member-count" { return "ActiveForeignMemberCount" }
    if yname == "configured-foreign-member-count" { return "ConfiguredForeignMemberCount" }
    if yname == "switchover-type" { return "SwitchoverType" }
    if yname == "maximize-threshold-value-links" { return "MaximizeThresholdValueLinks" }
    if yname == "maximize-threshold-value-band-width" { return "MaximizeThresholdValueBandWidth" }
    if yname == "mlacp-mode" { return "MlacpMode" }
    if yname == "recovery-delay" { return "RecoveryDelay" }
    if yname == "singleton" { return "Singleton" }
    if yname == "mac-address" { return "MacAddress" }
    if yname == "bfd-config" { return "BfdConfig" }
    return ""
}

func (data *Bundles_Bundles_Bundle_Data) GetSegmentPath() string {
    return "data"
}

func (data *Bundles_Bundles_Bundle_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mac-address" {
        return &data.MacAddress
    }
    if childYangName == "bfd-config" {
        for _, c := range data.BfdConfig {
            if data.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bundles_Bundles_Bundle_Data_BfdConfig{}
        data.BfdConfig = append(data.BfdConfig, child)
        return &data.BfdConfig[len(data.BfdConfig)-1]
    }
    return nil
}

func (data *Bundles_Bundles_Bundle_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mac-address"] = &data.MacAddress
    for i := range data.BfdConfig {
        children[data.BfdConfig[i].GetSegmentPath()] = &data.BfdConfig[i]
    }
    return children
}

func (data *Bundles_Bundles_Bundle_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-interface-name"] = data.BundleInterfaceName
    leafs["available-bandwidth"] = data.AvailableBandwidth
    leafs["effective-bandwidth"] = data.EffectiveBandwidth
    leafs["configured-bandwidth"] = data.ConfiguredBandwidth
    leafs["minimum-active-links"] = data.MinimumActiveLinks
    leafs["maximum-active-links"] = data.MaximumActiveLinks
    leafs["maximum-active-links-source"] = data.MaximumActiveLinksSource
    leafs["minimum-bandwidth"] = data.MinimumBandwidth
    leafs["primary-member"] = data.PrimaryMember
    leafs["bundle-status"] = data.BundleStatus
    leafs["active-member-count"] = data.ActiveMemberCount
    leafs["standby-member-count"] = data.StandbyMemberCount
    leafs["configured-member-count"] = data.ConfiguredMemberCount
    leafs["mac-source"] = data.MacSource
    leafs["mac-source-member"] = data.MacSourceMember
    leafs["inter-chassis"] = data.InterChassis
    leafs["is-active"] = data.IsActive
    leafs["lacp-status"] = data.LacpStatus
    leafs["mlacp-status"] = data.MlacpStatus
    leafs["ipv4bfd-status"] = data.Ipv4BfdStatus
    leafs["link-order-status"] = data.LinkOrderStatus
    leafs["ipv6bfd-status"] = data.Ipv6BfdStatus
    leafs["load-balance-hash-type"] = data.LoadBalanceHashType
    leafs["load-balance-locality-threshold"] = data.LoadBalanceLocalityThreshold
    leafs["suppression-timer"] = data.SuppressionTimer
    leafs["wait-while-timer"] = data.WaitWhileTimer
    leafs["collector-max-delay"] = data.CollectorMaxDelay
    leafs["cisco-extensions"] = data.CiscoExtensions
    leafs["lacp-nonrevertive"] = data.LacpNonrevertive
    leafs["iccp-group-id"] = data.IccpGroupId
    leafs["active-foreign-member-count"] = data.ActiveForeignMemberCount
    leafs["configured-foreign-member-count"] = data.ConfiguredForeignMemberCount
    leafs["switchover-type"] = data.SwitchoverType
    leafs["maximize-threshold-value-links"] = data.MaximizeThresholdValueLinks
    leafs["maximize-threshold-value-band-width"] = data.MaximizeThresholdValueBandWidth
    leafs["mlacp-mode"] = data.MlacpMode
    leafs["recovery-delay"] = data.RecoveryDelay
    leafs["singleton"] = data.Singleton
    return leafs
}

func (data *Bundles_Bundles_Bundle_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *Bundles_Bundles_Bundle_Data) GetYangName() string { return "data" }

func (data *Bundles_Bundles_Bundle_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *Bundles_Bundles_Bundle_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *Bundles_Bundles_Bundle_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *Bundles_Bundles_Bundle_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *Bundles_Bundles_Bundle_Data) GetParent() types.Entity { return data.parent }

func (data *Bundles_Bundles_Bundle_Data) GetParentYangName() string { return "bundle" }

// Bundles_Bundles_Bundle_Data_MacAddress
// MAC address of this member
type Bundles_Bundles_Bundle_Data_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *Bundles_Bundles_Bundle_Data_MacAddress) GetParentYangName() string { return "data" }

// Bundles_Bundles_Bundle_Data_BfdConfig
// Configuration values for BFD on bundle members
type Bundles_Bundles_Bundle_Data_BfdConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Status of BFD on the bundle. The type is BmdBfdBdlState.
    BundleStatus interface{}

    // Time to wait on session start before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    StartTimer interface{}

    // Time to wait on session NBR_UNCONFIG before declaring DOWN. The type is
    // interface{} with range: 0..4294967295.
    NbrUnconfigTimer interface{}

    // Preferred multiplier for the BFD session. The type is interface{} with
    // range: 0..65535.
    PrefMultiplier interface{}

    // Preferred minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefMinInterval interface{}

    // Preferred echo minimum interval for the BFD session (ms). The type is
    // interface{} with range: 0..4294967295.
    PrefEchoMinInterval interface{}

    // Flag indicating if BFD is enabled (1 = enabled; 0 = not enabled). The type
    // is bool.
    FastDetect interface{}

    // Standard used for per-member BFD. The type is interface{} with range:
    // 0..4294967295.
    ModeInfo interface{}

    // Configured destination address for BFD session.
    DestinationAddress Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress
}

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetFilter() yfilter.YFilter { return bfdConfig.YFilter }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) SetFilter(yf yfilter.YFilter) { bfdConfig.YFilter = yf }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetGoName(yname string) string {
    if yname == "bundle-status" { return "BundleStatus" }
    if yname == "start-timer" { return "StartTimer" }
    if yname == "nbr-unconfig-timer" { return "NbrUnconfigTimer" }
    if yname == "pref-multiplier" { return "PrefMultiplier" }
    if yname == "pref-min-interval" { return "PrefMinInterval" }
    if yname == "pref-echo-min-interval" { return "PrefEchoMinInterval" }
    if yname == "fast-detect" { return "FastDetect" }
    if yname == "mode-info" { return "ModeInfo" }
    if yname == "destination-address" { return "DestinationAddress" }
    return ""
}

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetSegmentPath() string {
    return "bfd-config"
}

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "destination-address" {
        return &bfdConfig.DestinationAddress
    }
    return nil
}

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["destination-address"] = &bfdConfig.DestinationAddress
    return children
}

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-status"] = bfdConfig.BundleStatus
    leafs["start-timer"] = bfdConfig.StartTimer
    leafs["nbr-unconfig-timer"] = bfdConfig.NbrUnconfigTimer
    leafs["pref-multiplier"] = bfdConfig.PrefMultiplier
    leafs["pref-min-interval"] = bfdConfig.PrefMinInterval
    leafs["pref-echo-min-interval"] = bfdConfig.PrefEchoMinInterval
    leafs["fast-detect"] = bfdConfig.FastDetect
    leafs["mode-info"] = bfdConfig.ModeInfo
    return leafs
}

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetBundleName() string { return "cisco_ios_xr" }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetYangName() string { return "bfd-config" }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) SetParent(parent types.Entity) { bfdConfig.parent = parent }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetParent() types.Entity { return bfdConfig.parent }

func (bfdConfig *Bundles_Bundles_Bundle_Data_BfdConfig) GetParentYangName() string { return "data" }

// Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress
// Configured destination address for BFD session
type Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AF. The type is BmAfId.
    Af interface{}

    // IPv4 address type. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Ipv4 interface{}

    // IPv6 address type. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Ipv6 interface{}
}

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetFilter() yfilter.YFilter { return destinationAddress.YFilter }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) SetFilter(yf yfilter.YFilter) { destinationAddress.YFilter = yf }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetGoName(yname string) string {
    if yname == "af" { return "Af" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    return ""
}

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetSegmentPath() string {
    return "destination-address"
}

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af"] = destinationAddress.Af
    leafs["ipv4"] = destinationAddress.Ipv4
    leafs["ipv6"] = destinationAddress.Ipv6
    return leafs
}

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetBundleName() string { return "cisco_ios_xr" }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetYangName() string { return "destination-address" }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) SetParent(parent types.Entity) { destinationAddress.parent = parent }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetParent() types.Entity { return destinationAddress.parent }

func (destinationAddress *Bundles_Bundles_Bundle_Data_BfdConfig_DestinationAddress) GetParentYangName() string { return "bfd-config" }

// Bundles_Bundles_Bundle_Members
// Member interface
type Bundles_Bundles_Bundle_Members struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member information. The type is slice of
    // Bundles_Bundles_Bundle_Members_Member.
    Member []Bundles_Bundles_Bundle_Members_Member
}

func (members *Bundles_Bundles_Bundle_Members) GetFilter() yfilter.YFilter { return members.YFilter }

func (members *Bundles_Bundles_Bundle_Members) SetFilter(yf yfilter.YFilter) { members.YFilter = yf }

func (members *Bundles_Bundles_Bundle_Members) GetGoName(yname string) string {
    if yname == "member" { return "Member" }
    return ""
}

func (members *Bundles_Bundles_Bundle_Members) GetSegmentPath() string {
    return "members"
}

func (members *Bundles_Bundles_Bundle_Members) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member" {
        for _, c := range members.Member {
            if members.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bundles_Bundles_Bundle_Members_Member{}
        members.Member = append(members.Member, child)
        return &members.Member[len(members.Member)-1]
    }
    return nil
}

func (members *Bundles_Bundles_Bundle_Members) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range members.Member {
        children[members.Member[i].GetSegmentPath()] = &members.Member[i]
    }
    return children
}

func (members *Bundles_Bundles_Bundle_Members) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (members *Bundles_Bundles_Bundle_Members) GetBundleName() string { return "cisco_ios_xr" }

func (members *Bundles_Bundles_Bundle_Members) GetYangName() string { return "members" }

func (members *Bundles_Bundles_Bundle_Members) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (members *Bundles_Bundles_Bundle_Members) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (members *Bundles_Bundles_Bundle_Members) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (members *Bundles_Bundles_Bundle_Members) SetParent(parent types.Entity) { members.parent = parent }

func (members *Bundles_Bundles_Bundle_Members) GetParent() types.Entity { return members.parent }

func (members *Bundles_Bundles_Bundle_Members) GetParentYangName() string { return "bundle" }

// Bundles_Bundles_Bundle_Members_Member
// Member information
type Bundles_Bundles_Bundle_Members_Member struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MemberInterface interface{}

    // Member's interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // The priority of this member. The type is interface{} with range: 0..65535.
    PortPriority interface{}

    // Member's link number. The type is interface{} with range: 0..65535.
    PortNumber interface{}

    // Member's underlying link ID. The type is interface{} with range: 0..65535.
    UnderlyingLinkId interface{}

    // Member's link order number. The type is interface{} with range: 0..65535.
    LinkOrderNumber interface{}

    // Location of member. The type is interface{} with range: 0..4294967295.
    IccpNode interface{}

    // Bandwidth of this member (kbps). The type is interface{} with range:
    // 0..4294967295. Units are kbit/s.
    Bandwidth interface{}

    // Boolean indicating LACP enabled or not. The type is string.
    LacpEnabled interface{}

    // Member's type (local/foreign). The type is BmdMemberTypeEnum.
    MemberType interface{}

    // Member's (short form) name. The type is string.
    MemberName interface{}

    // Counters data about member link.
    Counters Bundles_Bundles_Bundle_Members_Member_Counters

    // Lacp data about member link.
    LinkData Bundles_Bundles_Bundle_Members_Member_LinkData

    // Mux state machine data.
    MemberMuxData Bundles_Bundles_Bundle_Members_Member_MemberMuxData

    // MAC address of this member (deprecated).
    MacAddress Bundles_Bundles_Bundle_Members_Member_MacAddress
}

func (member *Bundles_Bundles_Bundle_Members_Member) GetFilter() yfilter.YFilter { return member.YFilter }

func (member *Bundles_Bundles_Bundle_Members_Member) SetFilter(yf yfilter.YFilter) { member.YFilter = yf }

func (member *Bundles_Bundles_Bundle_Members_Member) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "port-priority" { return "PortPriority" }
    if yname == "port-number" { return "PortNumber" }
    if yname == "underlying-link-id" { return "UnderlyingLinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "iccp-node" { return "IccpNode" }
    if yname == "bandwidth" { return "Bandwidth" }
    if yname == "lacp-enabled" { return "LacpEnabled" }
    if yname == "member-type" { return "MemberType" }
    if yname == "member-name" { return "MemberName" }
    if yname == "counters" { return "Counters" }
    if yname == "link-data" { return "LinkData" }
    if yname == "member-mux-data" { return "MemberMuxData" }
    if yname == "mac-address" { return "MacAddress" }
    return ""
}

func (member *Bundles_Bundles_Bundle_Members_Member) GetSegmentPath() string {
    return "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
}

func (member *Bundles_Bundles_Bundle_Members_Member) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &member.Counters
    }
    if childYangName == "link-data" {
        return &member.LinkData
    }
    if childYangName == "member-mux-data" {
        return &member.MemberMuxData
    }
    if childYangName == "mac-address" {
        return &member.MacAddress
    }
    return nil
}

func (member *Bundles_Bundles_Bundle_Members_Member) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &member.Counters
    children["link-data"] = &member.LinkData
    children["member-mux-data"] = &member.MemberMuxData
    children["mac-address"] = &member.MacAddress
    return children
}

func (member *Bundles_Bundles_Bundle_Members_Member) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = member.MemberInterface
    leafs["interface-name"] = member.InterfaceName
    leafs["port-priority"] = member.PortPriority
    leafs["port-number"] = member.PortNumber
    leafs["underlying-link-id"] = member.UnderlyingLinkId
    leafs["link-order-number"] = member.LinkOrderNumber
    leafs["iccp-node"] = member.IccpNode
    leafs["bandwidth"] = member.Bandwidth
    leafs["lacp-enabled"] = member.LacpEnabled
    leafs["member-type"] = member.MemberType
    leafs["member-name"] = member.MemberName
    return leafs
}

func (member *Bundles_Bundles_Bundle_Members_Member) GetBundleName() string { return "cisco_ios_xr" }

func (member *Bundles_Bundles_Bundle_Members_Member) GetYangName() string { return "member" }

func (member *Bundles_Bundles_Bundle_Members_Member) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (member *Bundles_Bundles_Bundle_Members_Member) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (member *Bundles_Bundles_Bundle_Members_Member) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (member *Bundles_Bundles_Bundle_Members_Member) SetParent(parent types.Entity) { member.parent = parent }

func (member *Bundles_Bundles_Bundle_Members_Member) GetParent() types.Entity { return member.parent }

func (member *Bundles_Bundles_Bundle_Members_Member) GetParentYangName() string { return "members" }

// Bundles_Bundles_Bundle_Members_Member_Counters
// Counters data about member link
type Bundles_Bundles_Bundle_Members_Member_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetGoName(yname string) string {
    if yname == "lacpd-us-received" { return "LacpdUsReceived" }
    if yname == "lacpd-us-transmitted" { return "LacpdUsTransmitted" }
    if yname == "marker-packets-received" { return "MarkerPacketsReceived" }
    if yname == "marker-responses-transmitted" { return "MarkerResponsesTransmitted" }
    if yname == "illegal-packets-received" { return "IllegalPacketsReceived" }
    if yname == "excess-lacpd-us-received" { return "ExcessLacpdUsReceived" }
    if yname == "excess-marker-packets-received" { return "ExcessMarkerPacketsReceived" }
    if yname == "defaulted" { return "Defaulted" }
    if yname == "expired" { return "Expired" }
    if yname == "last-cleared-sec" { return "LastClearedSec" }
    if yname == "last-cleared-nsec" { return "LastClearedNsec" }
    return ""
}

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacpd-us-received"] = counters.LacpdUsReceived
    leafs["lacpd-us-transmitted"] = counters.LacpdUsTransmitted
    leafs["marker-packets-received"] = counters.MarkerPacketsReceived
    leafs["marker-responses-transmitted"] = counters.MarkerResponsesTransmitted
    leafs["illegal-packets-received"] = counters.IllegalPacketsReceived
    leafs["excess-lacpd-us-received"] = counters.ExcessLacpdUsReceived
    leafs["excess-marker-packets-received"] = counters.ExcessMarkerPacketsReceived
    leafs["defaulted"] = counters.Defaulted
    leafs["expired"] = counters.Expired
    leafs["last-cleared-sec"] = counters.LastClearedSec
    leafs["last-cleared-nsec"] = counters.LastClearedNsec
    return leafs
}

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetYangName() string { return "counters" }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetParent() types.Entity { return counters.parent }

func (counters *Bundles_Bundles_Bundle_Members_Member_Counters) GetParentYangName() string { return "member" }

// Bundles_Bundles_Bundle_Members_Member_LinkData
// Lacp data about member link
type Bundles_Bundles_Bundle_Members_Member_LinkData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // System priority of actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetFilter() yfilter.YFilter { return linkData.YFilter }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) SetFilter(yf yfilter.YFilter) { linkData.YFilter = yf }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "actor-system-priority" { return "ActorSystemPriority" }
    if yname == "actor-system-mac-address" { return "ActorSystemMacAddress" }
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "actor-port-id" { return "ActorPortId" }
    if yname == "actor-port-priority" { return "ActorPortPriority" }
    if yname == "partner-port-id" { return "PartnerPortId" }
    if yname == "partner-port-priority" { return "PartnerPortPriority" }
    if yname == "actor-port-state" { return "ActorPortState" }
    if yname == "partner-port-state" { return "PartnerPortState" }
    return ""
}

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetSegmentPath() string {
    return "link-data"
}

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = linkData.InterfaceHandle
    leafs["actor-system-priority"] = linkData.ActorSystemPriority
    leafs["actor-system-mac-address"] = linkData.ActorSystemMacAddress
    leafs["actor-operational-key"] = linkData.ActorOperationalKey
    leafs["partner-system-priority"] = linkData.PartnerSystemPriority
    leafs["partner-system-mac-address"] = linkData.PartnerSystemMacAddress
    leafs["partner-operational-key"] = linkData.PartnerOperationalKey
    leafs["selected-aggregator-id"] = linkData.SelectedAggregatorId
    leafs["attached-aggregator-id"] = linkData.AttachedAggregatorId
    leafs["actor-port-id"] = linkData.ActorPortId
    leafs["actor-port-priority"] = linkData.ActorPortPriority
    leafs["partner-port-id"] = linkData.PartnerPortId
    leafs["partner-port-priority"] = linkData.PartnerPortPriority
    leafs["actor-port-state"] = linkData.ActorPortState
    leafs["partner-port-state"] = linkData.PartnerPortState
    return leafs
}

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetBundleName() string { return "cisco_ios_xr" }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetYangName() string { return "link-data" }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) SetParent(parent types.Entity) { linkData.parent = parent }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetParent() types.Entity { return linkData.parent }

func (linkData *Bundles_Bundles_Bundle_Members_Member_LinkData) GetParentYangName() string { return "member" }

// Bundles_Bundles_Bundle_Members_Member_MemberMuxData
// Mux state machine data
type Bundles_Bundles_Bundle_Members_Member_MemberMuxData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Current state of this bundle member. The type is BmMuxstate.
    MuxState interface{}

    // Internal value indicating if an error occurred trying to put a link into
    // the desired state. The type is interface{} with range: 0..4294967295.
    Error interface{}

    // Reason for last Mux state change. The type is BmMbrStateReason.
    MemberMuxStateReason interface{}

    // Current internal state of this bundle member. The type is BmdMemberState.
    MemberState interface{}

    // Reason for last Mux state change (Deprecated). The type is BmMuxreason.
    MuxStateReason interface{}

    // Data regarding the reason for last Mux state change.
    MemberMuxStateReasonData Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
}

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetFilter() yfilter.YFilter { return memberMuxData.YFilter }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) SetFilter(yf yfilter.YFilter) { memberMuxData.YFilter = yf }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetGoName(yname string) string {
    if yname == "mux-state" { return "MuxState" }
    if yname == "error" { return "Error" }
    if yname == "member-mux-state-reason" { return "MemberMuxStateReason" }
    if yname == "member-state" { return "MemberState" }
    if yname == "mux-state-reason" { return "MuxStateReason" }
    if yname == "member-mux-state-reason-data" { return "MemberMuxStateReasonData" }
    return ""
}

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetSegmentPath() string {
    return "member-mux-data"
}

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member-mux-state-reason-data" {
        return &memberMuxData.MemberMuxStateReasonData
    }
    return nil
}

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["member-mux-state-reason-data"] = &memberMuxData.MemberMuxStateReasonData
    return children
}

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mux-state"] = memberMuxData.MuxState
    leafs["error"] = memberMuxData.Error
    leafs["member-mux-state-reason"] = memberMuxData.MemberMuxStateReason
    leafs["member-state"] = memberMuxData.MemberState
    leafs["mux-state-reason"] = memberMuxData.MuxStateReason
    return leafs
}

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetYangName() string { return "member-mux-data" }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) SetParent(parent types.Entity) { memberMuxData.parent = parent }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetParent() types.Entity { return memberMuxData.parent }

func (memberMuxData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData) GetParentYangName() string { return "member" }

// Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData
// Data regarding the reason for last Mux state
// change
type Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The item the reason applies to. The type is BmStateReasonTarget.
    ReasonType interface{}

    // The severity of the reason. The type is BmSeverity.
    Severity interface{}
}

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetFilter() yfilter.YFilter { return memberMuxStateReasonData.YFilter }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) SetFilter(yf yfilter.YFilter) { memberMuxStateReasonData.YFilter = yf }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetGoName(yname string) string {
    if yname == "reason-type" { return "ReasonType" }
    if yname == "severity" { return "Severity" }
    return ""
}

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetSegmentPath() string {
    return "member-mux-state-reason-data"
}

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reason-type"] = memberMuxStateReasonData.ReasonType
    leafs["severity"] = memberMuxStateReasonData.Severity
    return leafs
}

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetBundleName() string { return "cisco_ios_xr" }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetYangName() string { return "member-mux-state-reason-data" }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) SetParent(parent types.Entity) { memberMuxStateReasonData.parent = parent }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetParent() types.Entity { return memberMuxStateReasonData.parent }

func (memberMuxStateReasonData *Bundles_Bundles_Bundle_Members_Member_MemberMuxData_MemberMuxStateReasonData) GetParentYangName() string { return "member-mux-data" }

// Bundles_Bundles_Bundle_Members_Member_MacAddress
// MAC address of this member (deprecated)
type Bundles_Bundles_Bundle_Members_Member_MacAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MAC address. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Address interface{}
}

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetFilter() yfilter.YFilter { return macAddress.YFilter }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) SetFilter(yf yfilter.YFilter) { macAddress.YFilter = yf }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    return ""
}

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetSegmentPath() string {
    return "mac-address"
}

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = macAddress.Address
    return leafs
}

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetBundleName() string { return "cisco_ios_xr" }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetYangName() string { return "mac-address" }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) SetParent(parent types.Entity) { macAddress.parent = parent }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetParent() types.Entity { return macAddress.parent }

func (macAddress *Bundles_Bundles_Bundle_Members_Member_MacAddress) GetParentYangName() string { return "member" }

// LacpBundleMembers
// lacp bundle members
type LacpBundleMembers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of devices with their LACP bundle member interfaces.
    Nodes LacpBundleMembers_Nodes

    // Table of LACP bundle member interfaces.
    Members LacpBundleMembers_Members
}

func (lacpBundleMembers *LacpBundleMembers) GetFilter() yfilter.YFilter { return lacpBundleMembers.YFilter }

func (lacpBundleMembers *LacpBundleMembers) SetFilter(yf yfilter.YFilter) { lacpBundleMembers.YFilter = yf }

func (lacpBundleMembers *LacpBundleMembers) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    if yname == "members" { return "Members" }
    return ""
}

func (lacpBundleMembers *LacpBundleMembers) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-oper:lacp-bundle-members"
}

func (lacpBundleMembers *LacpBundleMembers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &lacpBundleMembers.Nodes
    }
    if childYangName == "members" {
        return &lacpBundleMembers.Members
    }
    return nil
}

func (lacpBundleMembers *LacpBundleMembers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &lacpBundleMembers.Nodes
    children["members"] = &lacpBundleMembers.Members
    return children
}

func (lacpBundleMembers *LacpBundleMembers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lacpBundleMembers *LacpBundleMembers) GetBundleName() string { return "cisco_ios_xr" }

func (lacpBundleMembers *LacpBundleMembers) GetYangName() string { return "lacp-bundle-members" }

func (lacpBundleMembers *LacpBundleMembers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lacpBundleMembers *LacpBundleMembers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lacpBundleMembers *LacpBundleMembers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lacpBundleMembers *LacpBundleMembers) SetParent(parent types.Entity) { lacpBundleMembers.parent = parent }

func (lacpBundleMembers *LacpBundleMembers) GetParent() types.Entity { return lacpBundleMembers.parent }

func (lacpBundleMembers *LacpBundleMembers) GetParentYangName() string { return "Cisco-IOS-XR-bundlemgr-oper" }

// LacpBundleMembers_Nodes
// Table of devices with their LACP bundle member
// interfaces
type LacpBundleMembers_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node ID. The type is slice of LacpBundleMembers_Nodes_Node.
    Node []LacpBundleMembers_Nodes_Node
}

func (nodes *LacpBundleMembers_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *LacpBundleMembers_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *LacpBundleMembers_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *LacpBundleMembers_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *LacpBundleMembers_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := LacpBundleMembers_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *LacpBundleMembers_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *LacpBundleMembers_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *LacpBundleMembers_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *LacpBundleMembers_Nodes) GetYangName() string { return "nodes" }

func (nodes *LacpBundleMembers_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *LacpBundleMembers_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *LacpBundleMembers_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *LacpBundleMembers_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *LacpBundleMembers_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *LacpBundleMembers_Nodes) GetParentYangName() string { return "lacp-bundle-members" }

// LacpBundleMembers_Nodes_Node
// Node ID
type LacpBundleMembers_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. For a local device the Node ID e.g. '0_0_CPU0' ,
    // for a peer device the LDP ID followed by the ICCP Group ID e.g.
    // '5.4.3.2,4'. The type is string.
    Node interface{}

    // Link counters for LACP bundle members per node.
    Counters LacpBundleMembers_Nodes_Node_Counters
}

func (node *LacpBundleMembers_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *LacpBundleMembers_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *LacpBundleMembers_Nodes_Node) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    if yname == "counters" { return "Counters" }
    return ""
}

func (node *LacpBundleMembers_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node='" + fmt.Sprintf("%v", node.Node) + "']"
}

func (node *LacpBundleMembers_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &node.Counters
    }
    return nil
}

func (node *LacpBundleMembers_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &node.Counters
    return children
}

func (node *LacpBundleMembers_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node"] = node.Node
    return leafs
}

func (node *LacpBundleMembers_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *LacpBundleMembers_Nodes_Node) GetYangName() string { return "node" }

func (node *LacpBundleMembers_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *LacpBundleMembers_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *LacpBundleMembers_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *LacpBundleMembers_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *LacpBundleMembers_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *LacpBundleMembers_Nodes_Node) GetParentYangName() string { return "nodes" }

// LacpBundleMembers_Nodes_Node_Counters
// Link counters for LACP bundle members per node
type LacpBundleMembers_Nodes_Node_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACP protocol packets received on ports with LACP inactive/off. The type is
    // interface{} with range: 0..4294967295.
    WrongPortCount interface{}

    // Last unrecognized port on which a packet was received. The type is
    // interface{} with range: 0..4294967295.
    LastWrongPort interface{}

    // Packets received for which rx port could not be determined. The type is
    // interface{} with range: 0..4294967295.
    UnknownPortCount interface{}

    // Packets received which could not be decoded. The type is interface{} with
    // range: 0..4294967295.
    UndecodablePackets interface{}

    // Time elapsed since counters were last cleared (in nanoseconds). The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceCleared interface{}

    // Time elapsed since last unexpected event (in nanoseconds). The type is
    // interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceUnexpectedEvent interface{}

    // Time elapsed since statistics were last updated (in nanoseconds). The type
    // is interface{} with range: 0..18446744073709551615. Units are nanosecond.
    TimeSinceLastUpdated interface{}
}

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *LacpBundleMembers_Nodes_Node_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetGoName(yname string) string {
    if yname == "wrong-port-count" { return "WrongPortCount" }
    if yname == "last-wrong-port" { return "LastWrongPort" }
    if yname == "unknown-port-count" { return "UnknownPortCount" }
    if yname == "undecodable-packets" { return "UndecodablePackets" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "time-since-unexpected-event" { return "TimeSinceUnexpectedEvent" }
    if yname == "time-since-last-updated" { return "TimeSinceLastUpdated" }
    return ""
}

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wrong-port-count"] = counters.WrongPortCount
    leafs["last-wrong-port"] = counters.LastWrongPort
    leafs["unknown-port-count"] = counters.UnknownPortCount
    leafs["undecodable-packets"] = counters.UndecodablePackets
    leafs["time-since-cleared"] = counters.TimeSinceCleared
    leafs["time-since-unexpected-event"] = counters.TimeSinceUnexpectedEvent
    leafs["time-since-last-updated"] = counters.TimeSinceLastUpdated
    return leafs
}

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetYangName() string { return "counters" }

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *LacpBundleMembers_Nodes_Node_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetParent() types.Entity { return counters.parent }

func (counters *LacpBundleMembers_Nodes_Node_Counters) GetParentYangName() string { return "node" }

// LacpBundleMembers_Members
// Table of LACP bundle member interfaces
type LacpBundleMembers_Members struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACP bundle member interface data. The type is slice of
    // LacpBundleMembers_Members_Member.
    Member []LacpBundleMembers_Members_Member
}

func (members *LacpBundleMembers_Members) GetFilter() yfilter.YFilter { return members.YFilter }

func (members *LacpBundleMembers_Members) SetFilter(yf yfilter.YFilter) { members.YFilter = yf }

func (members *LacpBundleMembers_Members) GetGoName(yname string) string {
    if yname == "member" { return "Member" }
    return ""
}

func (members *LacpBundleMembers_Members) GetSegmentPath() string {
    return "members"
}

func (members *LacpBundleMembers_Members) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "member" {
        for _, c := range members.Member {
            if members.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := LacpBundleMembers_Members_Member{}
        members.Member = append(members.Member, child)
        return &members.Member[len(members.Member)-1]
    }
    return nil
}

func (members *LacpBundleMembers_Members) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range members.Member {
        children[members.Member[i].GetSegmentPath()] = &members.Member[i]
    }
    return children
}

func (members *LacpBundleMembers_Members) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (members *LacpBundleMembers_Members) GetBundleName() string { return "cisco_ios_xr" }

func (members *LacpBundleMembers_Members) GetYangName() string { return "members" }

func (members *LacpBundleMembers_Members) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (members *LacpBundleMembers_Members) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (members *LacpBundleMembers_Members) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (members *LacpBundleMembers_Members) SetParent(parent types.Entity) { members.parent = parent }

func (members *LacpBundleMembers_Members) GetParent() types.Entity { return members.parent }

func (members *LacpBundleMembers_Members) GetParentYangName() string { return "lacp-bundle-members" }

// LacpBundleMembers_Members_Member
// LACP bundle member interface data
type LacpBundleMembers_Members_Member struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Member interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    MemberInterface interface{}

    // Link data for LACP bundle members.
    Data LacpBundleMembers_Members_Member_Data

    // Link counters for LACP bundle members.
    Counters LacpBundleMembers_Members_Member_Counters
}

func (member *LacpBundleMembers_Members_Member) GetFilter() yfilter.YFilter { return member.YFilter }

func (member *LacpBundleMembers_Members_Member) SetFilter(yf yfilter.YFilter) { member.YFilter = yf }

func (member *LacpBundleMembers_Members_Member) GetGoName(yname string) string {
    if yname == "member-interface" { return "MemberInterface" }
    if yname == "data" { return "Data" }
    if yname == "counters" { return "Counters" }
    return ""
}

func (member *LacpBundleMembers_Members_Member) GetSegmentPath() string {
    return "member" + "[member-interface='" + fmt.Sprintf("%v", member.MemberInterface) + "']"
}

func (member *LacpBundleMembers_Members_Member) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "data" {
        return &member.Data
    }
    if childYangName == "counters" {
        return &member.Counters
    }
    return nil
}

func (member *LacpBundleMembers_Members_Member) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["data"] = &member.Data
    children["counters"] = &member.Counters
    return children
}

func (member *LacpBundleMembers_Members_Member) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["member-interface"] = member.MemberInterface
    return leafs
}

func (member *LacpBundleMembers_Members_Member) GetBundleName() string { return "cisco_ios_xr" }

func (member *LacpBundleMembers_Members_Member) GetYangName() string { return "member" }

func (member *LacpBundleMembers_Members_Member) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (member *LacpBundleMembers_Members_Member) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (member *LacpBundleMembers_Members_Member) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (member *LacpBundleMembers_Members_Member) SetParent(parent types.Entity) { member.parent = parent }

func (member *LacpBundleMembers_Members_Member) GetParent() types.Entity { return member.parent }

func (member *LacpBundleMembers_Members_Member) GetParentYangName() string { return "members" }

// LacpBundleMembers_Members_Member_Data
// Link data for LACP bundle members
type LacpBundleMembers_Members_Member_Data struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member's interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceHandle interface{}

    // System priority of the actor system. The type is interface{} with range:
    // 0..65535.
    ActorSystemPriority interface{}

    // MAC Address of the actor system. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    ActorSystemMacAddress interface{}

    // Operational key for this port. The type is interface{} with range:
    // 0..65535.
    ActorOperationalKey interface{}

    // System priority of partner system. The type is interface{} with range:
    // 0..65535.
    PartnerSystemPriority interface{}

    // MAC Address used to identify the partner system. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    PartnerSystemMacAddress interface{}

    // Operational key for partner port. The type is interface{} with range:
    // 0..65535.
    PartnerOperationalKey interface{}

    // MIB ifindex of selected bundle. The type is interface{} with range:
    // 0..4294967295.
    SelectedAggregatorId interface{}

    // MIB ifindex of attached bundle. The type is interface{} with range:
    // 0..4294967295.
    AttachedAggregatorId interface{}

    // Port number of this port. The type is interface{} with range: 0..65535.
    ActorPortId interface{}

    // Priority of this port. The type is interface{} with range: 0..65535.
    ActorPortPriority interface{}

    // Port number of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortId interface{}

    // Priority of the partner's port. The type is interface{} with range:
    // 0..65535.
    PartnerPortPriority interface{}

    // LACP state of this port. The type is interface{} with range: 0..255.
    ActorPortState interface{}

    // LACP state of the partner's port. The type is interface{} with range:
    // 0..255.
    PartnerPortState interface{}
}

func (data *LacpBundleMembers_Members_Member_Data) GetFilter() yfilter.YFilter { return data.YFilter }

func (data *LacpBundleMembers_Members_Member_Data) SetFilter(yf yfilter.YFilter) { data.YFilter = yf }

func (data *LacpBundleMembers_Members_Member_Data) GetGoName(yname string) string {
    if yname == "interface-handle" { return "InterfaceHandle" }
    if yname == "actor-system-priority" { return "ActorSystemPriority" }
    if yname == "actor-system-mac-address" { return "ActorSystemMacAddress" }
    if yname == "actor-operational-key" { return "ActorOperationalKey" }
    if yname == "partner-system-priority" { return "PartnerSystemPriority" }
    if yname == "partner-system-mac-address" { return "PartnerSystemMacAddress" }
    if yname == "partner-operational-key" { return "PartnerOperationalKey" }
    if yname == "selected-aggregator-id" { return "SelectedAggregatorId" }
    if yname == "attached-aggregator-id" { return "AttachedAggregatorId" }
    if yname == "actor-port-id" { return "ActorPortId" }
    if yname == "actor-port-priority" { return "ActorPortPriority" }
    if yname == "partner-port-id" { return "PartnerPortId" }
    if yname == "partner-port-priority" { return "PartnerPortPriority" }
    if yname == "actor-port-state" { return "ActorPortState" }
    if yname == "partner-port-state" { return "PartnerPortState" }
    return ""
}

func (data *LacpBundleMembers_Members_Member_Data) GetSegmentPath() string {
    return "data"
}

func (data *LacpBundleMembers_Members_Member_Data) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (data *LacpBundleMembers_Members_Member_Data) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (data *LacpBundleMembers_Members_Member_Data) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-handle"] = data.InterfaceHandle
    leafs["actor-system-priority"] = data.ActorSystemPriority
    leafs["actor-system-mac-address"] = data.ActorSystemMacAddress
    leafs["actor-operational-key"] = data.ActorOperationalKey
    leafs["partner-system-priority"] = data.PartnerSystemPriority
    leafs["partner-system-mac-address"] = data.PartnerSystemMacAddress
    leafs["partner-operational-key"] = data.PartnerOperationalKey
    leafs["selected-aggregator-id"] = data.SelectedAggregatorId
    leafs["attached-aggregator-id"] = data.AttachedAggregatorId
    leafs["actor-port-id"] = data.ActorPortId
    leafs["actor-port-priority"] = data.ActorPortPriority
    leafs["partner-port-id"] = data.PartnerPortId
    leafs["partner-port-priority"] = data.PartnerPortPriority
    leafs["actor-port-state"] = data.ActorPortState
    leafs["partner-port-state"] = data.PartnerPortState
    return leafs
}

func (data *LacpBundleMembers_Members_Member_Data) GetBundleName() string { return "cisco_ios_xr" }

func (data *LacpBundleMembers_Members_Member_Data) GetYangName() string { return "data" }

func (data *LacpBundleMembers_Members_Member_Data) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (data *LacpBundleMembers_Members_Member_Data) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (data *LacpBundleMembers_Members_Member_Data) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (data *LacpBundleMembers_Members_Member_Data) SetParent(parent types.Entity) { data.parent = parent }

func (data *LacpBundleMembers_Members_Member_Data) GetParent() types.Entity { return data.parent }

func (data *LacpBundleMembers_Members_Member_Data) GetParentYangName() string { return "member" }

// LacpBundleMembers_Members_Member_Counters
// Link counters for LACP bundle members
type LacpBundleMembers_Members_Member_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LACPDUs received. The type is interface{} with range: 0..4294967295.
    LacpdUsReceived interface{}

    // LACPDUs transmitted. The type is interface{} with range: 0..4294967295.
    LacpdUsTransmitted interface{}

    // Marker packets received. The type is interface{} with range: 0..4294967295.
    MarkerPacketsReceived interface{}

    // Marker response packets transmitted. The type is interface{} with range:
    // 0..4294967295.
    MarkerResponsesTransmitted interface{}

    // Illegal and unknown packets received. The type is interface{} with range:
    // 0..4294967295.
    IllegalPacketsReceived interface{}

    // LACPDUs received that exceed the rate limit. The type is interface{} with
    // range: 0..4294967295.
    ExcessLacpdUsReceived interface{}

    // Marker packets received that exceed the rate limit. The type is interface{}
    // with range: 0..4294967295.
    ExcessMarkerPacketsReceived interface{}

    // State flag set to Defaulted. The type is interface{} with range:
    // 0..4294967295.
    Defaulted interface{}

    // State flag set to Expired. The type is interface{} with range:
    // 0..4294967295.
    Expired interface{}

    // Time elapsed since last LACPDU received (nsec). The type is interface{}
    // with range: 0..18446744073709551615.
    TimeSinceLastLacpduReceived interface{}

    // Time elapsed since counters last cleared (nsec). The type is interface{}
    // with range: 0..18446744073709551615.
    TimeSinceCleared interface{}

    // Time elapsed since last unexpected event (nsec). The type is interface{}
    // with range: 0..18446744073709551615.
    TimeSinceUnexpectedEvent interface{}

    // Last time counters cleared (s) (deprecated). The type is interface{} with
    // range: 0..4294967295.
    LastClearedSec interface{}

    // Last time counters cleared (nsec) (deprecated). The type is interface{}
    // with range: 0..4294967295.
    LastClearedNsec interface{}
}

func (counters *LacpBundleMembers_Members_Member_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *LacpBundleMembers_Members_Member_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *LacpBundleMembers_Members_Member_Counters) GetGoName(yname string) string {
    if yname == "lacpd-us-received" { return "LacpdUsReceived" }
    if yname == "lacpd-us-transmitted" { return "LacpdUsTransmitted" }
    if yname == "marker-packets-received" { return "MarkerPacketsReceived" }
    if yname == "marker-responses-transmitted" { return "MarkerResponsesTransmitted" }
    if yname == "illegal-packets-received" { return "IllegalPacketsReceived" }
    if yname == "excess-lacpd-us-received" { return "ExcessLacpdUsReceived" }
    if yname == "excess-marker-packets-received" { return "ExcessMarkerPacketsReceived" }
    if yname == "defaulted" { return "Defaulted" }
    if yname == "expired" { return "Expired" }
    if yname == "time-since-last-lacpdu-received" { return "TimeSinceLastLacpduReceived" }
    if yname == "time-since-cleared" { return "TimeSinceCleared" }
    if yname == "time-since-unexpected-event" { return "TimeSinceUnexpectedEvent" }
    if yname == "last-cleared-sec" { return "LastClearedSec" }
    if yname == "last-cleared-nsec" { return "LastClearedNsec" }
    return ""
}

func (counters *LacpBundleMembers_Members_Member_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *LacpBundleMembers_Members_Member_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *LacpBundleMembers_Members_Member_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *LacpBundleMembers_Members_Member_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lacpd-us-received"] = counters.LacpdUsReceived
    leafs["lacpd-us-transmitted"] = counters.LacpdUsTransmitted
    leafs["marker-packets-received"] = counters.MarkerPacketsReceived
    leafs["marker-responses-transmitted"] = counters.MarkerResponsesTransmitted
    leafs["illegal-packets-received"] = counters.IllegalPacketsReceived
    leafs["excess-lacpd-us-received"] = counters.ExcessLacpdUsReceived
    leafs["excess-marker-packets-received"] = counters.ExcessMarkerPacketsReceived
    leafs["defaulted"] = counters.Defaulted
    leafs["expired"] = counters.Expired
    leafs["time-since-last-lacpdu-received"] = counters.TimeSinceLastLacpduReceived
    leafs["time-since-cleared"] = counters.TimeSinceCleared
    leafs["time-since-unexpected-event"] = counters.TimeSinceUnexpectedEvent
    leafs["last-cleared-sec"] = counters.LastClearedSec
    leafs["last-cleared-nsec"] = counters.LastClearedNsec
    return leafs
}

func (counters *LacpBundleMembers_Members_Member_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *LacpBundleMembers_Members_Member_Counters) GetYangName() string { return "counters" }

func (counters *LacpBundleMembers_Members_Member_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *LacpBundleMembers_Members_Member_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *LacpBundleMembers_Members_Member_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *LacpBundleMembers_Members_Member_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *LacpBundleMembers_Members_Member_Counters) GetParent() types.Entity { return counters.parent }

func (counters *LacpBundleMembers_Members_Member_Counters) GetParentYangName() string { return "member" }

// BundlesAdjacency
// bundles adjacency
type BundlesAdjacency struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per bundle operational data.
    Nodes BundlesAdjacency_Nodes
}

func (bundlesAdjacency *BundlesAdjacency) GetFilter() yfilter.YFilter { return bundlesAdjacency.YFilter }

func (bundlesAdjacency *BundlesAdjacency) SetFilter(yf yfilter.YFilter) { bundlesAdjacency.YFilter = yf }

func (bundlesAdjacency *BundlesAdjacency) GetGoName(yname string) string {
    if yname == "nodes" { return "Nodes" }
    return ""
}

func (bundlesAdjacency *BundlesAdjacency) GetSegmentPath() string {
    return "Cisco-IOS-XR-bundlemgr-oper:bundles-adjacency"
}

func (bundlesAdjacency *BundlesAdjacency) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nodes" {
        return &bundlesAdjacency.Nodes
    }
    return nil
}

func (bundlesAdjacency *BundlesAdjacency) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nodes"] = &bundlesAdjacency.Nodes
    return children
}

func (bundlesAdjacency *BundlesAdjacency) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundlesAdjacency *BundlesAdjacency) GetBundleName() string { return "cisco_ios_xr" }

func (bundlesAdjacency *BundlesAdjacency) GetYangName() string { return "bundles-adjacency" }

func (bundlesAdjacency *BundlesAdjacency) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundlesAdjacency *BundlesAdjacency) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundlesAdjacency *BundlesAdjacency) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundlesAdjacency *BundlesAdjacency) SetParent(parent types.Entity) { bundlesAdjacency.parent = parent }

func (bundlesAdjacency *BundlesAdjacency) GetParent() types.Entity { return bundlesAdjacency.parent }

func (bundlesAdjacency *BundlesAdjacency) GetParentYangName() string { return "Cisco-IOS-XR-bundlemgr-oper" }

// BundlesAdjacency_Nodes
// Per bundle operational data
type BundlesAdjacency_Nodes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Location. The type is slice of BundlesAdjacency_Nodes_Node.
    Node []BundlesAdjacency_Nodes_Node
}

func (nodes *BundlesAdjacency_Nodes) GetFilter() yfilter.YFilter { return nodes.YFilter }

func (nodes *BundlesAdjacency_Nodes) SetFilter(yf yfilter.YFilter) { nodes.YFilter = yf }

func (nodes *BundlesAdjacency_Nodes) GetGoName(yname string) string {
    if yname == "node" { return "Node" }
    return ""
}

func (nodes *BundlesAdjacency_Nodes) GetSegmentPath() string {
    return "nodes"
}

func (nodes *BundlesAdjacency_Nodes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node" {
        for _, c := range nodes.Node {
            if nodes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundlesAdjacency_Nodes_Node{}
        nodes.Node = append(nodes.Node, child)
        return &nodes.Node[len(nodes.Node)-1]
    }
    return nil
}

func (nodes *BundlesAdjacency_Nodes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nodes.Node {
        children[nodes.Node[i].GetSegmentPath()] = &nodes.Node[i]
    }
    return children
}

func (nodes *BundlesAdjacency_Nodes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nodes *BundlesAdjacency_Nodes) GetBundleName() string { return "cisco_ios_xr" }

func (nodes *BundlesAdjacency_Nodes) GetYangName() string { return "nodes" }

func (nodes *BundlesAdjacency_Nodes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodes *BundlesAdjacency_Nodes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodes *BundlesAdjacency_Nodes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodes *BundlesAdjacency_Nodes) SetParent(parent types.Entity) { nodes.parent = parent }

func (nodes *BundlesAdjacency_Nodes) GetParent() types.Entity { return nodes.parent }

func (nodes *BundlesAdjacency_Nodes) GetParentYangName() string { return "bundles-adjacency" }

// BundlesAdjacency_Nodes_Node
// Location
type BundlesAdjacency_Nodes_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Node ID. The type is string with pattern:
    // ([a-zA-Z0-9_]*\d+/){1,2}([a-zA-Z0-9_]*\d+).
    NodeName interface{}

    // Brief load-balance information for the node.
    Brief BundlesAdjacency_Nodes_Node_Brief

    // Per bundle operational data.
    Bundles BundlesAdjacency_Nodes_Node_Bundles
}

func (node *BundlesAdjacency_Nodes_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *BundlesAdjacency_Nodes_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *BundlesAdjacency_Nodes_Node) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "brief" { return "Brief" }
    if yname == "bundles" { return "Bundles" }
    return ""
}

func (node *BundlesAdjacency_Nodes_Node) GetSegmentPath() string {
    return "node" + "[node-name='" + fmt.Sprintf("%v", node.NodeName) + "']"
}

func (node *BundlesAdjacency_Nodes_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "brief" {
        return &node.Brief
    }
    if childYangName == "bundles" {
        return &node.Bundles
    }
    return nil
}

func (node *BundlesAdjacency_Nodes_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["brief"] = &node.Brief
    children["bundles"] = &node.Bundles
    return children
}

func (node *BundlesAdjacency_Nodes_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = node.NodeName
    return leafs
}

func (node *BundlesAdjacency_Nodes_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *BundlesAdjacency_Nodes_Node) GetYangName() string { return "node" }

func (node *BundlesAdjacency_Nodes_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *BundlesAdjacency_Nodes_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *BundlesAdjacency_Nodes_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *BundlesAdjacency_Nodes_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *BundlesAdjacency_Nodes_Node) GetParent() types.Entity { return node.parent }

func (node *BundlesAdjacency_Nodes_Node) GetParentYangName() string { return "nodes" }

// BundlesAdjacency_Nodes_Node_Brief
// Brief load-balance information for the node
type BundlesAdjacency_Nodes_Node_Brief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Data for all bundles on node. The type is slice of
    // BundlesAdjacency_Nodes_Node_Brief_BundleData.
    BundleData []BundlesAdjacency_Nodes_Node_Brief_BundleData
}

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetFilter() yfilter.YFilter { return brief.YFilter }

func (brief *BundlesAdjacency_Nodes_Node_Brief) SetFilter(yf yfilter.YFilter) { brief.YFilter = yf }

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetGoName(yname string) string {
    if yname == "bundle-data" { return "BundleData" }
    return ""
}

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetSegmentPath() string {
    return "brief"
}

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-data" {
        for _, c := range brief.BundleData {
            if brief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundlesAdjacency_Nodes_Node_Brief_BundleData{}
        brief.BundleData = append(brief.BundleData, child)
        return &brief.BundleData[len(brief.BundleData)-1]
    }
    return nil
}

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range brief.BundleData {
        children[brief.BundleData[i].GetSegmentPath()] = &brief.BundleData[i]
    }
    return children
}

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetBundleName() string { return "cisco_ios_xr" }

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetYangName() string { return "brief" }

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (brief *BundlesAdjacency_Nodes_Node_Brief) SetParent(parent types.Entity) { brief.parent = parent }

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetParent() types.Entity { return brief.parent }

func (brief *BundlesAdjacency_Nodes_Node_Brief) GetParentYangName() string { return "node" }

// BundlesAdjacency_Nodes_Node_Brief_BundleData
// Data for all bundles on node
type BundlesAdjacency_Nodes_Node_Brief_BundleData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of sub-interfaces on the bundle. The type is interface{} with range:
    // 0..4294967295.
    SubInterfaceCount interface{}

    // Number of members configured to the bundle. The type is interface{} with
    // range: 0..4294967295.
    MemberCount interface{}

    // Total weighting (relative bandwidth) of bundle. The type is interface{}
    // with range: 0..4294967295.
    TotalWeight interface{}

    // Sub-interfaces of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface.
    SubInterface []BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface
}

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetFilter() yfilter.YFilter { return bundleData.YFilter }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) SetFilter(yf yfilter.YFilter) { bundleData.YFilter = yf }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sub-interface-count" { return "SubInterfaceCount" }
    if yname == "member-count" { return "MemberCount" }
    if yname == "total-weight" { return "TotalWeight" }
    if yname == "sub-interface" { return "SubInterface" }
    return ""
}

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetSegmentPath() string {
    return "bundle-data"
}

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sub-interface" {
        for _, c := range bundleData.SubInterface {
            if bundleData.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface{}
        bundleData.SubInterface = append(bundleData.SubInterface, child)
        return &bundleData.SubInterface[len(bundleData.SubInterface)-1]
    }
    return nil
}

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundleData.SubInterface {
        children[bundleData.SubInterface[i].GetSegmentPath()] = &bundleData.SubInterface[i]
    }
    return children
}

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = bundleData.InterfaceName
    leafs["sub-interface-count"] = bundleData.SubInterfaceCount
    leafs["member-count"] = bundleData.MemberCount
    leafs["total-weight"] = bundleData.TotalWeight
    return leafs
}

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetBundleName() string { return "cisco_ios_xr" }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetYangName() string { return "bundle-data" }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) SetParent(parent types.Entity) { bundleData.parent = parent }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetParent() types.Entity { return bundleData.parent }

func (bundleData *BundlesAdjacency_Nodes_Node_Brief_BundleData) GetParentYangName() string { return "brief" }

// BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface
// Sub-interfaces of the bundle
type BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sub interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Load balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData
}

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetFilter() yfilter.YFilter { return subInterface.YFilter }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) SetFilter(yf yfilter.YFilter) { subInterface.YFilter = yf }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "load-balance-data" { return "LoadBalanceData" }
    return ""
}

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetSegmentPath() string {
    return "sub-interface"
}

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "load-balance-data" {
        return &subInterface.LoadBalanceData
    }
    return nil
}

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["load-balance-data"] = &subInterface.LoadBalanceData
    return children
}

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = subInterface.InterfaceName
    return leafs
}

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetBundleName() string { return "cisco_ios_xr" }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetYangName() string { return "sub-interface" }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) SetParent(parent types.Entity) { subInterface.parent = parent }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetParent() types.Entity { return subInterface.parent }

func (subInterface *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface) GetParentYangName() string { return "bundle-data" }

// BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData
// Load balance data
type BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetFilter() yfilter.YFilter { return loadBalanceData.YFilter }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) SetFilter(yf yfilter.YFilter) { loadBalanceData.YFilter = yf }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    if yname == "local-link-threshold" { return "LocalLinkThreshold" }
    return ""
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetSegmentPath() string {
    return "load-balance-data"
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = loadBalanceData.Type
    leafs["value"] = loadBalanceData.Value
    leafs["local-link-threshold"] = loadBalanceData.LocalLinkThreshold
    return leafs
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetBundleName() string { return "cisco_ios_xr" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetYangName() string { return "load-balance-data" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) SetParent(parent types.Entity) { loadBalanceData.parent = parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetParent() types.Entity { return loadBalanceData.parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Brief_BundleData_SubInterface_LoadBalanceData) GetParentYangName() string { return "sub-interface" }

// BundlesAdjacency_Nodes_Node_Bundles
// Per bundle operational data
type BundlesAdjacency_Nodes_Node_Bundles struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle information. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle.
    Bundle []BundlesAdjacency_Nodes_Node_Bundles_Bundle
}

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetFilter() yfilter.YFilter { return bundles.YFilter }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) SetFilter(yf yfilter.YFilter) { bundles.YFilter = yf }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetGoName(yname string) string {
    if yname == "bundle" { return "Bundle" }
    return ""
}

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetSegmentPath() string {
    return "bundles"
}

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle" {
        for _, c := range bundles.Bundle {
            if bundles.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundlesAdjacency_Nodes_Node_Bundles_Bundle{}
        bundles.Bundle = append(bundles.Bundle, child)
        return &bundles.Bundle[len(bundles.Bundle)-1]
    }
    return nil
}

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bundles.Bundle {
        children[bundles.Bundle[i].GetSegmentPath()] = &bundles.Bundle[i]
    }
    return children
}

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetBundleName() string { return "cisco_ios_xr" }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetYangName() string { return "bundles" }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) SetParent(parent types.Entity) { bundles.parent = parent }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetParent() types.Entity { return bundles.parent }

func (bundles *BundlesAdjacency_Nodes_Node_Bundles) GetParentYangName() string { return "node" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle
// Bundle information
type BundlesAdjacency_Nodes_Node_Bundles_Bundle struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bundle interface. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    BundleName interface{}

    // Data for each Bundle.
    BundleInfo BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo
}

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetFilter() yfilter.YFilter { return bundle.YFilter }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) SetFilter(yf yfilter.YFilter) { bundle.YFilter = yf }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetGoName(yname string) string {
    if yname == "bundle-name" { return "BundleName" }
    if yname == "bundle-info" { return "BundleInfo" }
    return ""
}

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetSegmentPath() string {
    return "bundle" + "[bundle-name='" + fmt.Sprintf("%v", bundle.BundleName) + "']"
}

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bundle-info" {
        return &bundle.BundleInfo
    }
    return nil
}

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bundle-info"] = &bundle.BundleInfo
    return children
}

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bundle-name"] = bundle.BundleName
    return leafs
}

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetBundleName() string { return "cisco_ios_xr" }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetYangName() string { return "bundle" }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) SetParent(parent types.Entity) { bundle.parent = parent }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetParent() types.Entity { return bundle.parent }

func (bundle *BundlesAdjacency_Nodes_Node_Bundles_Bundle) GetParentYangName() string { return "bundles" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo
// Data for each Bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Media type of bundle. The type is BundleMedia1.
    Media interface{}

    // Maximum number of members for the bundle. The type is interface{} with
    // range: 0..4294967295.
    MaxMemberCount interface{}

    // Avoid rebalancing traffic flows. The type is bool.
    AvoidRebalance interface{}

    // Brief bundle data.
    Brief BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief

    // Load Balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData

    // Members of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member.
    Member []BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member

    // Sub-interfaces of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface.
    SubInterface []BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface
}

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetFilter() yfilter.YFilter { return bundleInfo.YFilter }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) SetFilter(yf yfilter.YFilter) { bundleInfo.YFilter = yf }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetGoName(yname string) string {
    if yname == "media" { return "Media" }
    if yname == "max-member-count" { return "MaxMemberCount" }
    if yname == "avoid-rebalance" { return "AvoidRebalance" }
    if yname == "brief" { return "Brief" }
    if yname == "load-balance-data" { return "LoadBalanceData" }
    if yname == "member" { return "Member" }
    if yname == "sub-interface" { return "SubInterface" }
    return ""
}

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetSegmentPath() string {
    return "bundle-info"
}

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "brief" {
        return &bundleInfo.Brief
    }
    if childYangName == "load-balance-data" {
        return &bundleInfo.LoadBalanceData
    }
    if childYangName == "member" {
        for _, c := range bundleInfo.Member {
            if bundleInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member{}
        bundleInfo.Member = append(bundleInfo.Member, child)
        return &bundleInfo.Member[len(bundleInfo.Member)-1]
    }
    if childYangName == "sub-interface" {
        for _, c := range bundleInfo.SubInterface {
            if bundleInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface{}
        bundleInfo.SubInterface = append(bundleInfo.SubInterface, child)
        return &bundleInfo.SubInterface[len(bundleInfo.SubInterface)-1]
    }
    return nil
}

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["brief"] = &bundleInfo.Brief
    children["load-balance-data"] = &bundleInfo.LoadBalanceData
    for i := range bundleInfo.Member {
        children[bundleInfo.Member[i].GetSegmentPath()] = &bundleInfo.Member[i]
    }
    for i := range bundleInfo.SubInterface {
        children[bundleInfo.SubInterface[i].GetSegmentPath()] = &bundleInfo.SubInterface[i]
    }
    return children
}

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["media"] = bundleInfo.Media
    leafs["max-member-count"] = bundleInfo.MaxMemberCount
    leafs["avoid-rebalance"] = bundleInfo.AvoidRebalance
    return leafs
}

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetYangName() string { return "bundle-info" }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) SetParent(parent types.Entity) { bundleInfo.parent = parent }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetParent() types.Entity { return bundleInfo.parent }

func (bundleInfo *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo) GetParentYangName() string { return "bundle" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief
// Brief bundle data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bundle interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Number of sub-interfaces on the bundle. The type is interface{} with range:
    // 0..4294967295.
    SubInterfaceCount interface{}

    // Number of members configured to the bundle. The type is interface{} with
    // range: 0..4294967295.
    MemberCount interface{}

    // Total weighting (relative bandwidth) of bundle. The type is interface{}
    // with range: 0..4294967295.
    TotalWeight interface{}

    // Sub-interfaces of the bundle. The type is slice of
    // BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface.
    SubInterface []BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface
}

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetFilter() yfilter.YFilter { return brief.YFilter }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) SetFilter(yf yfilter.YFilter) { brief.YFilter = yf }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "sub-interface-count" { return "SubInterfaceCount" }
    if yname == "member-count" { return "MemberCount" }
    if yname == "total-weight" { return "TotalWeight" }
    if yname == "sub-interface" { return "SubInterface" }
    return ""
}

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetSegmentPath() string {
    return "brief"
}

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sub-interface" {
        for _, c := range brief.SubInterface {
            if brief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface{}
        brief.SubInterface = append(brief.SubInterface, child)
        return &brief.SubInterface[len(brief.SubInterface)-1]
    }
    return nil
}

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range brief.SubInterface {
        children[brief.SubInterface[i].GetSegmentPath()] = &brief.SubInterface[i]
    }
    return children
}

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = brief.InterfaceName
    leafs["sub-interface-count"] = brief.SubInterfaceCount
    leafs["member-count"] = brief.MemberCount
    leafs["total-weight"] = brief.TotalWeight
    return leafs
}

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetBundleName() string { return "cisco_ios_xr" }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetYangName() string { return "brief" }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) SetParent(parent types.Entity) { brief.parent = parent }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetParent() types.Entity { return brief.parent }

func (brief *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief) GetParentYangName() string { return "bundle-info" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface
// Sub-interfaces of the bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sub interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Load balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetFilter() yfilter.YFilter { return subInterface.YFilter }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) SetFilter(yf yfilter.YFilter) { subInterface.YFilter = yf }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "load-balance-data" { return "LoadBalanceData" }
    return ""
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetSegmentPath() string {
    return "sub-interface"
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "load-balance-data" {
        return &subInterface.LoadBalanceData
    }
    return nil
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["load-balance-data"] = &subInterface.LoadBalanceData
    return children
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = subInterface.InterfaceName
    return leafs
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetBundleName() string { return "cisco_ios_xr" }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetYangName() string { return "sub-interface" }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) SetParent(parent types.Entity) { subInterface.parent = parent }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetParent() types.Entity { return subInterface.parent }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface) GetParentYangName() string { return "brief" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData
// Load balance data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetFilter() yfilter.YFilter { return loadBalanceData.YFilter }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) SetFilter(yf yfilter.YFilter) { loadBalanceData.YFilter = yf }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    if yname == "local-link-threshold" { return "LocalLinkThreshold" }
    return ""
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetSegmentPath() string {
    return "load-balance-data"
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = loadBalanceData.Type
    leafs["value"] = loadBalanceData.Value
    leafs["local-link-threshold"] = loadBalanceData.LocalLinkThreshold
    return leafs
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetBundleName() string { return "cisco_ios_xr" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetYangName() string { return "load-balance-data" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) SetParent(parent types.Entity) { loadBalanceData.parent = parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetParent() types.Entity { return loadBalanceData.parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Brief_SubInterface_LoadBalanceData) GetParentYangName() string { return "sub-interface" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData
// Load Balance data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetFilter() yfilter.YFilter { return loadBalanceData.YFilter }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) SetFilter(yf yfilter.YFilter) { loadBalanceData.YFilter = yf }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    if yname == "local-link-threshold" { return "LocalLinkThreshold" }
    return ""
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetSegmentPath() string {
    return "load-balance-data"
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = loadBalanceData.Type
    leafs["value"] = loadBalanceData.Value
    leafs["local-link-threshold"] = loadBalanceData.LocalLinkThreshold
    return leafs
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetBundleName() string { return "cisco_ios_xr" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetYangName() string { return "load-balance-data" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) SetParent(parent types.Entity) { loadBalanceData.parent = parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetParent() types.Entity { return loadBalanceData.parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_LoadBalanceData) GetParentYangName() string { return "bundle-info" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member
// Members of the bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Member interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Member's link ID in database. The type is interface{} with range: 0..255.
    LinkId interface{}

    // Member's link order number in database. The type is interface{} with range:
    // 0..255.
    LinkOrderNumber interface{}

    // Member's relative bandwidth. The type is interface{} with range: 0..255.
    Bandwidth interface{}
}

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetFilter() yfilter.YFilter { return member.YFilter }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) SetFilter(yf yfilter.YFilter) { member.YFilter = yf }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "link-id" { return "LinkId" }
    if yname == "link-order-number" { return "LinkOrderNumber" }
    if yname == "bandwidth" { return "Bandwidth" }
    return ""
}

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetSegmentPath() string {
    return "member"
}

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = member.InterfaceName
    leafs["link-id"] = member.LinkId
    leafs["link-order-number"] = member.LinkOrderNumber
    leafs["bandwidth"] = member.Bandwidth
    return leafs
}

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetBundleName() string { return "cisco_ios_xr" }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetYangName() string { return "member" }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) SetParent(parent types.Entity) { member.parent = parent }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetParent() types.Entity { return member.parent }

func (member *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_Member) GetParentYangName() string { return "bundle-info" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface
// Sub-interfaces of the bundle
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sub interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Load balance data.
    LoadBalanceData BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetFilter() yfilter.YFilter { return subInterface.YFilter }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) SetFilter(yf yfilter.YFilter) { subInterface.YFilter = yf }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "load-balance-data" { return "LoadBalanceData" }
    return ""
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetSegmentPath() string {
    return "sub-interface"
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "load-balance-data" {
        return &subInterface.LoadBalanceData
    }
    return nil
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["load-balance-data"] = &subInterface.LoadBalanceData
    return children
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = subInterface.InterfaceName
    return leafs
}

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetBundleName() string { return "cisco_ios_xr" }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetYangName() string { return "sub-interface" }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) SetParent(parent types.Entity) { subInterface.parent = parent }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetParent() types.Entity { return subInterface.parent }

func (subInterface *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface) GetParentYangName() string { return "bundle-info" }

// BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData
// Load balance data
type BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of load balancing to use. The type is LoadBalance.
    Type interface{}

    // Load balance hash value. The type is interface{} with range: 0..4294967295.
    Value interface{}

    // Threshold below which rack-local balancing is disabled. The type is
    // interface{} with range: 0..4294967295.
    LocalLinkThreshold interface{}
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetFilter() yfilter.YFilter { return loadBalanceData.YFilter }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) SetFilter(yf yfilter.YFilter) { loadBalanceData.YFilter = yf }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    if yname == "local-link-threshold" { return "LocalLinkThreshold" }
    return ""
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetSegmentPath() string {
    return "load-balance-data"
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = loadBalanceData.Type
    leafs["value"] = loadBalanceData.Value
    leafs["local-link-threshold"] = loadBalanceData.LocalLinkThreshold
    return leafs
}

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetBundleName() string { return "cisco_ios_xr" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetYangName() string { return "load-balance-data" }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) SetParent(parent types.Entity) { loadBalanceData.parent = parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetParent() types.Entity { return loadBalanceData.parent }

func (loadBalanceData *BundlesAdjacency_Nodes_Node_Bundles_Bundle_BundleInfo_SubInterface_LoadBalanceData) GetParentYangName() string { return "sub-interface" }

