// This module contains a collection of YANG definitions
// for Cisco IOS-XR infra-rcmd package operational data.
// 
// This module contains definitions
// for the following management objects:
//   rcmd: Show command for Route Convergence Monitoring &
//     Diagnostics
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package infra_rcmd_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package infra_rcmd_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-infra-rcmd-oper rcmd}", reflect.TypeOf(Rcmd{}))
    ydk.RegisterEntity("Cisco-IOS-XR-infra-rcmd-oper:rcmd", reflect.TypeOf(Rcmd{}))
}

// RcmdBagEnblDsbl represents status enum
type RcmdBagEnblDsbl string

const (
    // Disabled
    RcmdBagEnblDsbl_dsbl RcmdBagEnblDsbl = "dsbl"

    // Enabled
    RcmdBagEnblDsbl_enbl RcmdBagEnblDsbl = "enbl"
)

// RcmdBoolYesNo represents Boolean enum
type RcmdBoolYesNo string

const (
    // No
    RcmdBoolYesNo_no RcmdBoolYesNo = "no"

    // Yes
    RcmdBoolYesNo_yes RcmdBoolYesNo = "yes"
)

// RcmdPriorityLevel represents Level of priority
type RcmdPriorityLevel string

const (
    // Critical
    RcmdPriorityLevel_critical RcmdPriorityLevel = "critical"

    // High
    RcmdPriorityLevel_high RcmdPriorityLevel = "high"

    // Medium
    RcmdPriorityLevel_medium RcmdPriorityLevel = "medium"

    // Low
    RcmdPriorityLevel_low RcmdPriorityLevel = "low"
)

// RcmdSpfState represents Type of an ISIS Level
type RcmdSpfState string

const (
    // Complete
    RcmdSpfState_complete RcmdSpfState = "complete"

    // InComplete
    RcmdSpfState_in_complete RcmdSpfState = "in-complete"

    // Collecting data
    RcmdSpfState_collecting RcmdSpfState = "collecting"

    // No Route Change
    RcmdSpfState_no_route_change RcmdSpfState = "no-route-change"
)

// RcmdShowIpfrrLfa represents IP Frr LFA Types
type RcmdShowIpfrrLfa string

const (
    // No IP Frr LFA Type 
    RcmdShowIpfrrLfa_none RcmdShowIpfrrLfa = "none"

    // IP Frr Local LFA
    RcmdShowIpfrrLfa_local RcmdShowIpfrrLfa = "local"

    // IP Frr Remote LFA
    RcmdShowIpfrrLfa_remote RcmdShowIpfrrLfa = "remote"
)

// RcmdShowPrcsState represents Post Processing Info
type RcmdShowPrcsState string

const (
    // Success
    RcmdShowPrcsState_success RcmdShowPrcsState = "success"

    // Cpu overload
    RcmdShowPrcsState_cpu RcmdShowPrcsState = "cpu"

    // Memory overload
    RcmdShowPrcsState_memory RcmdShowPrcsState = "memory"
)

// RcmdShowCompId represents Component Info
type RcmdShowCompId string

const (
    // OSPF component
    RcmdShowCompId_ospf RcmdShowCompId = "ospf"

    // ISIS component
    RcmdShowCompId_isis RcmdShowCompId = "isis"

    // Max NA
    RcmdShowCompId_un_known RcmdShowCompId = "un-known"
)

// RcmdShowLdpSessionState represents LDP Session State
type RcmdShowLdpSessionState string

const (
    // GR Down State
    RcmdShowLdpSessionState_gr_down RcmdShowLdpSessionState = "gr-down"

    // GR Converging State
    RcmdShowLdpSessionState_gr_converging RcmdShowLdpSessionState = "gr-converging"

    // Establishing State
    RcmdShowLdpSessionState_establishing RcmdShowLdpSessionState = "establishing"

    // Converging State
    RcmdShowLdpSessionState_converging RcmdShowLdpSessionState = "converging"

    // Converged State
    RcmdShowLdpSessionState_converged RcmdShowLdpSessionState = "converged"

    // Retrying State
    RcmdShowLdpSessionState_retrying RcmdShowLdpSessionState = "retrying"

    // Cumulative Coverage for all the States
    RcmdShowLdpSessionState_total RcmdShowLdpSessionState = "total"
)

// RcmdProtocolId represents Protocol Info
type RcmdProtocolId string

const (
    // OSPF protocol
    RcmdProtocolId_ospf RcmdProtocolId = "ospf"

    // ISIS Prrotocol
    RcmdProtocolId_isis RcmdProtocolId = "isis"

    // Max NA
    RcmdProtocolId_na RcmdProtocolId = "na"
)

// RcmdShowLdpConvState represents LDP Convergence States
type RcmdShowLdpConvState string

const (
    // Not Fully Covered
    RcmdShowLdpConvState_not_full RcmdShowLdpConvState = "not-full"

    // Fully Covered
    RcmdShowLdpConvState_fully_covered RcmdShowLdpConvState = "fully-covered"

    // Backup Coverage Above Threshold
    RcmdShowLdpConvState_coverage_above_threshold RcmdShowLdpConvState = "coverage-above-threshold"

    // Backup Coverage Below Threshold
    RcmdShowLdpConvState_coverage_below_threshold RcmdShowLdpConvState = "coverage-below-threshold"

    // Backup Coverage is Flappping
    RcmdShowLdpConvState_coverage_flapping RcmdShowLdpConvState = "coverage-flapping"
)

// RcmdLinecardSpeed represents Comparative speed of programming on linecard
type RcmdLinecardSpeed string

const (
    // Other linecard
    RcmdLinecardSpeed_other RcmdLinecardSpeed = "other"

    // Fastest linecard
    RcmdLinecardSpeed_fastest RcmdLinecardSpeed = "fastest"

    // Slowest linecard
    RcmdLinecardSpeed_slowest RcmdLinecardSpeed = "slowest"
)

// RcmdShowNode represents Type of Node
type RcmdShowNode string

const (
    // Unknown Type
    RcmdShowNode_unknown RcmdShowNode = "unknown"

    // LC Type
    RcmdShowNode_lc RcmdShowNode = "lc"

    // RP Type
    RcmdShowNode_rp RcmdShowNode = "rp"
)

// RcmdShowLdpNeighbourStatus represents LDP Adjacency Session Status
type RcmdShowLdpNeighbourStatus string

const (
    // Down State
    RcmdShowLdpNeighbourStatus_down RcmdShowLdpNeighbourStatus = "down"

    // Up State
    RcmdShowLdpNeighbourStatus_up RcmdShowLdpNeighbourStatus = "up"
)

// RcmdIsisSpf represents Type of an ISIS SPF run
type RcmdIsisSpf string

const (
    // Full
    RcmdIsisSpf_full RcmdIsisSpf = "full"

    // Incremental
    RcmdIsisSpf_incremental RcmdIsisSpf = "incremental"

    // Next hop calculation
    RcmdIsisSpf_next_hop RcmdIsisSpf = "next-hop"

    // Partial route calculation
    RcmdIsisSpf_partial_route RcmdIsisSpf = "partial-route"
)

// RcmdShowRoutePathChange represents Type of route change
type RcmdShowRoutePathChange string

const (
    // Primary path is changed
    RcmdShowRoutePathChange_primary RcmdShowRoutePathChange = "primary"

    // Backup path is changed
    RcmdShowRoutePathChange_backup RcmdShowRoutePathChange = "backup"
)

// RcmdIsisLvl represents Type of an ISIS Level
type RcmdIsisLvl string

const (
    // Level 1
    RcmdIsisLvl_l1 RcmdIsisLvl = "l1"

    // Level 2
    RcmdIsisLvl_l2 RcmdIsisLvl = "l2"
)

// RcmdChange represents Type of change
type RcmdChange string

const (
    // Invalid
    RcmdChange_none RcmdChange = "none"

    // Added
    RcmdChange_add RcmdChange = "add"

    // Deleted
    RcmdChange_delete RcmdChange = "delete"

    // Modified
    RcmdChange_modify RcmdChange = "modify"

    // No Change
    RcmdChange_no_change RcmdChange = "no-change"
)

// RcmdShowRoute represents Route Types
type RcmdShowRoute string

const (
    // OSPF route init
    RcmdShowRoute_ospf RcmdShowRoute = "ospf"

    // OSPF Intra route
    RcmdShowRoute_intra RcmdShowRoute = "intra"

    // OSPF Inter route
    RcmdShowRoute_inter RcmdShowRoute = "inter"

    // OSPF External Type-1 Route
    RcmdShowRoute_ext_1 RcmdShowRoute = "ext-1"

    // OSPF External Type-2 Route
    RcmdShowRoute_ext_2 RcmdShowRoute = "ext-2"

    // OSPF NSSA Type-1 Route
    RcmdShowRoute_nssa_1 RcmdShowRoute = "nssa-1"

    // OSPF NSSA Type-2 Route
    RcmdShowRoute_nssa_2 RcmdShowRoute = "nssa-2"

    // ISIS route init
    RcmdShowRoute_isis RcmdShowRoute = "isis"

    // ISIS L1 Summary
    RcmdShowRoute_l1_summary RcmdShowRoute = "l1-summary"

    // ISIS L1
    RcmdShowRoute_l1 RcmdShowRoute = "l1"

    // ISIS L2 Summary
    RcmdShowRoute_l2_summary RcmdShowRoute = "l2-summary"

    // ISIS L2
    RcmdShowRoute_l2 RcmdShowRoute = "l2"

    // ISIS Inter Area Summary
    RcmdShowRoute_inter_area_summary RcmdShowRoute = "inter-area-summary"

    // ISIS Inter Area
    RcmdShowRoute_inter_area RcmdShowRoute = "inter-area"

    // ISIS Default Route Attached
    RcmdShowRoute_default_attached RcmdShowRoute = "default-attached"
)

// RcmdLdpEvent represents Type of LDP Event
type RcmdLdpEvent string

const (
    // Neighbor Event
    RcmdLdpEvent_neighbor RcmdLdpEvent = "neighbor"

    // Adjacency Event
    RcmdLdpEvent_adjacency RcmdLdpEvent = "adjacency"
)

// RcmdLsa represents Type of LSA
type RcmdLsa string

const (
    // Invalid LSA
    RcmdLsa_unknown RcmdLsa = "unknown"

    // Router LSA
    RcmdLsa_router RcmdLsa = "router"

    // Network LSA
    RcmdLsa_network RcmdLsa = "network"

    // Summary LSA
    RcmdLsa_summary RcmdLsa = "summary"

    // ASBR LSA
    RcmdLsa_asbr RcmdLsa = "asbr"

    // External LSA
    RcmdLsa_external RcmdLsa = "external"

    // Multicast LSA
    RcmdLsa_multicast RcmdLsa = "multicast"

    // NSSA LSA
    RcmdLsa_nssa RcmdLsa = "nssa"
)

// RcmdShowMem represents RCMD Memory Manager type
type RcmdShowMem string

const (
    // Standard type
    RcmdShowMem_standard RcmdShowMem = "standard"

    // Chunk type
    RcmdShowMem_chunk RcmdShowMem = "chunk"

    // EDM type
    RcmdShowMem_edm RcmdShowMem = "edm"

    // String type
    RcmdShowMem_string RcmdShowMem = "string"

    // Static type
    RcmdShowMem_static RcmdShowMem = "static"

    // Unknown type
    RcmdShowMem_unknown RcmdShowMem = "unknown"
)

// RcmdBagEnableDisable represents status enum
type RcmdBagEnableDisable string

const (
    // Disabled
    RcmdBagEnableDisable_disable RcmdBagEnableDisable = "disable"

    // Enabled
    RcmdBagEnableDisable_enable RcmdBagEnableDisable = "enable"
)

// RcmdShowInstState represents instance state
type RcmdShowInstState string

const (
    // Unknown state
    RcmdShowInstState_unknown RcmdShowInstState = "unknown"

    // Active state
    RcmdShowInstState_active RcmdShowInstState = "active"

    // InActive state
    RcmdShowInstState_in_active RcmdShowInstState = "in-active"

    // Max state
    RcmdShowInstState_na RcmdShowInstState = "na"
)

// RcmdLsChange represents Type of change
type RcmdLsChange string

const (
    // Added
    RcmdLsChange_new RcmdLsChange = "new"

    // Deleted
    RcmdLsChange_delete RcmdLsChange = "delete"

    // Modified
    RcmdLsChange_modify RcmdLsChange = "modify"

    // No operation
    RcmdLsChange_noop RcmdLsChange = "noop"
)

// RcmdShowIntfEvent represents Rcmd show intf event
type RcmdShowIntfEvent string

const (
    // Create
    RcmdShowIntfEvent_create RcmdShowIntfEvent = "create"

    // Delete
    RcmdShowIntfEvent_delete RcmdShowIntfEvent = "delete"

    // LinkUp
    RcmdShowIntfEvent_link_up RcmdShowIntfEvent = "link-up"

    // LinkDown
    RcmdShowIntfEvent_link_down RcmdShowIntfEvent = "link-down"

    // PrimaryAddress
    RcmdShowIntfEvent_primary_address RcmdShowIntfEvent = "primary-address"

    // SecondaryAddress
    RcmdShowIntfEvent_secondary_address RcmdShowIntfEvent = "secondary-address"

    // Ipv6LinkLocalAddress
    RcmdShowIntfEvent_ipv6_link_local_address RcmdShowIntfEvent = "ipv6-link-local-address"

    // Ipv6GlobalAddress
    RcmdShowIntfEvent_ipv6_global_address RcmdShowIntfEvent = "ipv6-global-address"

    // MTU
    RcmdShowIntfEvent_mtu RcmdShowIntfEvent = "mtu"

    // BandWidth
    RcmdShowIntfEvent_band_width RcmdShowIntfEvent = "band-width"

    // LDPSync
    RcmdShowIntfEvent_ldp_sync RcmdShowIntfEvent = "ldp-sync"

    // ForwardReference
    RcmdShowIntfEvent_forward_reference RcmdShowIntfEvent = "forward-reference"

    // LDPNoSync
    RcmdShowIntfEvent_ldp_no_sync RcmdShowIntfEvent = "ldp-no-sync"
)

// Rcmd
// Show command for Route Convergence Monitoring &
// Diagnostics
type Rcmd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data for OSPF.
    Ospf Rcmd_Ospf

    // Server Info.
    Server Rcmd_Server

    // Node Info.
    Node Rcmd_Node

    // Operational data for ISIS.
    Isis Rcmd_Isis

    // Memory Info.
    Memory Rcmd_Memory

    // LDP data.
    Ldp Rcmd_Ldp

    // Interface data.
    Intf Rcmd_Intf

    // Process information.
    Process Rcmd_Process
}

func (rcmd *Rcmd) GetFilter() yfilter.YFilter { return rcmd.YFilter }

func (rcmd *Rcmd) SetFilter(yf yfilter.YFilter) { rcmd.YFilter = yf }

func (rcmd *Rcmd) GetGoName(yname string) string {
    if yname == "ospf" { return "Ospf" }
    if yname == "server" { return "Server" }
    if yname == "node" { return "Node" }
    if yname == "isis" { return "Isis" }
    if yname == "memory" { return "Memory" }
    if yname == "ldp" { return "Ldp" }
    if yname == "intf" { return "Intf" }
    if yname == "process" { return "Process" }
    return ""
}

func (rcmd *Rcmd) GetSegmentPath() string {
    return "Cisco-IOS-XR-infra-rcmd-oper:rcmd"
}

func (rcmd *Rcmd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospf" {
        return &rcmd.Ospf
    }
    if childYangName == "server" {
        return &rcmd.Server
    }
    if childYangName == "node" {
        return &rcmd.Node
    }
    if childYangName == "isis" {
        return &rcmd.Isis
    }
    if childYangName == "memory" {
        return &rcmd.Memory
    }
    if childYangName == "ldp" {
        return &rcmd.Ldp
    }
    if childYangName == "intf" {
        return &rcmd.Intf
    }
    if childYangName == "process" {
        return &rcmd.Process
    }
    return nil
}

func (rcmd *Rcmd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ospf"] = &rcmd.Ospf
    children["server"] = &rcmd.Server
    children["node"] = &rcmd.Node
    children["isis"] = &rcmd.Isis
    children["memory"] = &rcmd.Memory
    children["ldp"] = &rcmd.Ldp
    children["intf"] = &rcmd.Intf
    children["process"] = &rcmd.Process
    return children
}

func (rcmd *Rcmd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rcmd *Rcmd) GetBundleName() string { return "cisco_ios_xr" }

func (rcmd *Rcmd) GetYangName() string { return "rcmd" }

func (rcmd *Rcmd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rcmd *Rcmd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rcmd *Rcmd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rcmd *Rcmd) SetParent(parent types.Entity) { rcmd.parent = parent }

func (rcmd *Rcmd) GetParent() types.Entity { return rcmd.parent }

func (rcmd *Rcmd) GetParentYangName() string { return "Cisco-IOS-XR-infra-rcmd-oper" }

// Rcmd_Ospf
// Operational data for OSPF
type Rcmd_Ospf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data.
    Instances Rcmd_Ospf_Instances
}

func (ospf *Rcmd_Ospf) GetFilter() yfilter.YFilter { return ospf.YFilter }

func (ospf *Rcmd_Ospf) SetFilter(yf yfilter.YFilter) { ospf.YFilter = yf }

func (ospf *Rcmd_Ospf) GetGoName(yname string) string {
    if yname == "instances" { return "Instances" }
    return ""
}

func (ospf *Rcmd_Ospf) GetSegmentPath() string {
    return "ospf"
}

func (ospf *Rcmd_Ospf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instances" {
        return &ospf.Instances
    }
    return nil
}

func (ospf *Rcmd_Ospf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["instances"] = &ospf.Instances
    return children
}

func (ospf *Rcmd_Ospf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospf *Rcmd_Ospf) GetBundleName() string { return "cisco_ios_xr" }

func (ospf *Rcmd_Ospf) GetYangName() string { return "ospf" }

func (ospf *Rcmd_Ospf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospf *Rcmd_Ospf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospf *Rcmd_Ospf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospf *Rcmd_Ospf) SetParent(parent types.Entity) { ospf.parent = parent }

func (ospf *Rcmd_Ospf) GetParent() types.Entity { return ospf.parent }

func (ospf *Rcmd_Ospf) GetParentYangName() string { return "rcmd" }

// Rcmd_Ospf_Instances
// Operational data
type Rcmd_Ospf_Instances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data for a particular instance. The type is slice of
    // Rcmd_Ospf_Instances_Instance.
    Instance []Rcmd_Ospf_Instances_Instance
}

func (instances *Rcmd_Ospf_Instances) GetFilter() yfilter.YFilter { return instances.YFilter }

func (instances *Rcmd_Ospf_Instances) SetFilter(yf yfilter.YFilter) { instances.YFilter = yf }

func (instances *Rcmd_Ospf_Instances) GetGoName(yname string) string {
    if yname == "instance" { return "Instance" }
    return ""
}

func (instances *Rcmd_Ospf_Instances) GetSegmentPath() string {
    return "instances"
}

func (instances *Rcmd_Ospf_Instances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance" {
        for _, c := range instances.Instance {
            if instances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance{}
        instances.Instance = append(instances.Instance, child)
        return &instances.Instance[len(instances.Instance)-1]
    }
    return nil
}

func (instances *Rcmd_Ospf_Instances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instances.Instance {
        children[instances.Instance[i].GetSegmentPath()] = &instances.Instance[i]
    }
    return children
}

func (instances *Rcmd_Ospf_Instances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (instances *Rcmd_Ospf_Instances) GetBundleName() string { return "cisco_ios_xr" }

func (instances *Rcmd_Ospf_Instances) GetYangName() string { return "instances" }

func (instances *Rcmd_Ospf_Instances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instances *Rcmd_Ospf_Instances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instances *Rcmd_Ospf_Instances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instances *Rcmd_Ospf_Instances) SetParent(parent types.Entity) { instances.parent = parent }

func (instances *Rcmd_Ospf_Instances) GetParent() types.Entity { return instances.parent }

func (instances *Rcmd_Ospf_Instances) GetParentYangName() string { return "ospf" }

// Rcmd_Ospf_Instances_Instance
// Operational data for a particular instance
type Rcmd_Ospf_Instances_Instance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Operational data for a particular instance. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // OSPF IP-FRR events summary data.
    IpfrrEventSummaries Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries

    // OSPF Prefix events summary data.
    PrefixEventStatistics Rcmd_Ospf_Instances_Instance_PrefixEventStatistics

    // OSPF SPF run summary data.
    SpfRunSummaries Rcmd_Ospf_Instances_Instance_SpfRunSummaries

    // OSPF IP-FRR Event offline data.
    IpfrrEventOfflines Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines

    // OSPF SPF run offline data.
    SpfRunOfflines Rcmd_Ospf_Instances_Instance_SpfRunOfflines

    // OSPF Summary-External Prefix events summary data.
    SummaryExternalEventSummaries Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries

    // OSPF Prefix events summary data.
    PrefixEventSummaries Rcmd_Ospf_Instances_Instance_PrefixEventSummaries

    // OSPF Summary-External Prefix events offline data.
    SummaryExternalEventOfflines Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines

    // OSPF Prefix events offline data.
    PrefixEventOfflines Rcmd_Ospf_Instances_Instance_PrefixEventOfflines

    // Summary-External prefix monitoring statistics.
    SummaryExternalEventStatistics Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics
}

func (instance *Rcmd_Ospf_Instances_Instance) GetFilter() yfilter.YFilter { return instance.YFilter }

func (instance *Rcmd_Ospf_Instances_Instance) SetFilter(yf yfilter.YFilter) { instance.YFilter = yf }

func (instance *Rcmd_Ospf_Instances_Instance) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ipfrr-event-summaries" { return "IpfrrEventSummaries" }
    if yname == "prefix-event-statistics" { return "PrefixEventStatistics" }
    if yname == "spf-run-summaries" { return "SpfRunSummaries" }
    if yname == "ipfrr-event-offlines" { return "IpfrrEventOfflines" }
    if yname == "spf-run-offlines" { return "SpfRunOfflines" }
    if yname == "summary-external-event-summaries" { return "SummaryExternalEventSummaries" }
    if yname == "prefix-event-summaries" { return "PrefixEventSummaries" }
    if yname == "summary-external-event-offlines" { return "SummaryExternalEventOfflines" }
    if yname == "prefix-event-offlines" { return "PrefixEventOfflines" }
    if yname == "summary-external-event-statistics" { return "SummaryExternalEventStatistics" }
    return ""
}

func (instance *Rcmd_Ospf_Instances_Instance) GetSegmentPath() string {
    return "instance" + "[instance-name='" + fmt.Sprintf("%v", instance.InstanceName) + "']"
}

func (instance *Rcmd_Ospf_Instances_Instance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-event-summaries" {
        return &instance.IpfrrEventSummaries
    }
    if childYangName == "prefix-event-statistics" {
        return &instance.PrefixEventStatistics
    }
    if childYangName == "spf-run-summaries" {
        return &instance.SpfRunSummaries
    }
    if childYangName == "ipfrr-event-offlines" {
        return &instance.IpfrrEventOfflines
    }
    if childYangName == "spf-run-offlines" {
        return &instance.SpfRunOfflines
    }
    if childYangName == "summary-external-event-summaries" {
        return &instance.SummaryExternalEventSummaries
    }
    if childYangName == "prefix-event-summaries" {
        return &instance.PrefixEventSummaries
    }
    if childYangName == "summary-external-event-offlines" {
        return &instance.SummaryExternalEventOfflines
    }
    if childYangName == "prefix-event-offlines" {
        return &instance.PrefixEventOfflines
    }
    if childYangName == "summary-external-event-statistics" {
        return &instance.SummaryExternalEventStatistics
    }
    return nil
}

func (instance *Rcmd_Ospf_Instances_Instance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipfrr-event-summaries"] = &instance.IpfrrEventSummaries
    children["prefix-event-statistics"] = &instance.PrefixEventStatistics
    children["spf-run-summaries"] = &instance.SpfRunSummaries
    children["ipfrr-event-offlines"] = &instance.IpfrrEventOfflines
    children["spf-run-offlines"] = &instance.SpfRunOfflines
    children["summary-external-event-summaries"] = &instance.SummaryExternalEventSummaries
    children["prefix-event-summaries"] = &instance.PrefixEventSummaries
    children["summary-external-event-offlines"] = &instance.SummaryExternalEventOfflines
    children["prefix-event-offlines"] = &instance.PrefixEventOfflines
    children["summary-external-event-statistics"] = &instance.SummaryExternalEventStatistics
    return children
}

func (instance *Rcmd_Ospf_Instances_Instance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = instance.InstanceName
    return leafs
}

func (instance *Rcmd_Ospf_Instances_Instance) GetBundleName() string { return "cisco_ios_xr" }

func (instance *Rcmd_Ospf_Instances_Instance) GetYangName() string { return "instance" }

func (instance *Rcmd_Ospf_Instances_Instance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instance *Rcmd_Ospf_Instances_Instance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instance *Rcmd_Ospf_Instances_Instance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instance *Rcmd_Ospf_Instances_Instance) SetParent(parent types.Entity) { instance.parent = parent }

func (instance *Rcmd_Ospf_Instances_Instance) GetParent() types.Entity { return instance.parent }

func (instance *Rcmd_Ospf_Instances_Instance) GetParentYangName() string { return "instances" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries
// OSPF IP-FRR events summary data
type Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP-FRR Event data. The type is slice of
    // Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary.
    IpfrrEventSummary []Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary
}

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetFilter() yfilter.YFilter { return ipfrrEventSummaries.YFilter }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) SetFilter(yf yfilter.YFilter) { ipfrrEventSummaries.YFilter = yf }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetGoName(yname string) string {
    if yname == "ipfrr-event-summary" { return "IpfrrEventSummary" }
    return ""
}

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetSegmentPath() string {
    return "ipfrr-event-summaries"
}

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-event-summary" {
        for _, c := range ipfrrEventSummaries.IpfrrEventSummary {
            if ipfrrEventSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary{}
        ipfrrEventSummaries.IpfrrEventSummary = append(ipfrrEventSummaries.IpfrrEventSummary, child)
        return &ipfrrEventSummaries.IpfrrEventSummary[len(ipfrrEventSummaries.IpfrrEventSummary)-1]
    }
    return nil
}

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventSummaries.IpfrrEventSummary {
        children[ipfrrEventSummaries.IpfrrEventSummary[i].GetSegmentPath()] = &ipfrrEventSummaries.IpfrrEventSummary[i]
    }
    return children
}

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetYangName() string { return "ipfrr-event-summaries" }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) SetParent(parent types.Entity) { ipfrrEventSummaries.parent = parent }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetParent() types.Entity { return ipfrrEventSummaries.parent }

func (ipfrrEventSummaries *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary
// IP-FRR Event data
type Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific IP-FRR Event. The type is interface{}
    // with range: 1..4294967295.
    EventId interface{}

    // IP-Frr Event ID. The type is interface{} with range: 0..4294967295.
    EventIdXr interface{}

    // Trigger time  (eg: Apr 24 13:16:04.961). The type is string.
    TriggerTime interface{}

    // IP-Frr Triggered reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    TriggerSpfRun interface{}

    // Waiting Time (in milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    WaitTime interface{}

    // Start Time offset from trigger time (in milliseconds). The type is string.
    // Units are millisecond.
    StartTimeOffset interface{}

    // Duration for the calculation (in milliseconds). The type is string. Units
    // are millisecond.
    Duration interface{}

    // IP-Frr Completed reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    CompletedSpfRun interface{}

    // Cumulative Number of Routes for all priorities. The type is interface{}
    // with range: 0..4294967295.
    TotalRoutes interface{}

    // Cumulative Number of Fully Protected Routes. The type is interface{} with
    // range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Cumulative Number of Partially Protected Routes. The type is interface{}
    // with range: 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage for all priorities. The type is string. Units are
    // percentage.
    Coverage interface{}

    // IP-Frr Statistics categorized by priority. The type is slice of
    // Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic.
    IpfrrStatistic []Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic

    // Remote Node Information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode.
    RemoteNode []Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode
}

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetFilter() yfilter.YFilter { return ipfrrEventSummary.YFilter }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) SetFilter(yf yfilter.YFilter) { ipfrrEventSummary.YFilter = yf }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "event-id-xr" { return "EventIdXr" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "trigger-spf-run" { return "TriggerSpfRun" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "start-time-offset" { return "StartTimeOffset" }
    if yname == "duration" { return "Duration" }
    if yname == "completed-spf-run" { return "CompletedSpfRun" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "ipfrr-statistic" { return "IpfrrStatistic" }
    if yname == "remote-node" { return "RemoteNode" }
    return ""
}

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetSegmentPath() string {
    return "ipfrr-event-summary" + "[event-id='" + fmt.Sprintf("%v", ipfrrEventSummary.EventId) + "']"
}

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-statistic" {
        for _, c := range ipfrrEventSummary.IpfrrStatistic {
            if ipfrrEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic{}
        ipfrrEventSummary.IpfrrStatistic = append(ipfrrEventSummary.IpfrrStatistic, child)
        return &ipfrrEventSummary.IpfrrStatistic[len(ipfrrEventSummary.IpfrrStatistic)-1]
    }
    if childYangName == "remote-node" {
        for _, c := range ipfrrEventSummary.RemoteNode {
            if ipfrrEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode{}
        ipfrrEventSummary.RemoteNode = append(ipfrrEventSummary.RemoteNode, child)
        return &ipfrrEventSummary.RemoteNode[len(ipfrrEventSummary.RemoteNode)-1]
    }
    return nil
}

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventSummary.IpfrrStatistic {
        children[ipfrrEventSummary.IpfrrStatistic[i].GetSegmentPath()] = &ipfrrEventSummary.IpfrrStatistic[i]
    }
    for i := range ipfrrEventSummary.RemoteNode {
        children[ipfrrEventSummary.RemoteNode[i].GetSegmentPath()] = &ipfrrEventSummary.RemoteNode[i]
    }
    return children
}

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = ipfrrEventSummary.EventId
    leafs["event-id-xr"] = ipfrrEventSummary.EventIdXr
    leafs["trigger-time"] = ipfrrEventSummary.TriggerTime
    leafs["trigger-spf-run"] = ipfrrEventSummary.TriggerSpfRun
    leafs["wait-time"] = ipfrrEventSummary.WaitTime
    leafs["start-time-offset"] = ipfrrEventSummary.StartTimeOffset
    leafs["duration"] = ipfrrEventSummary.Duration
    leafs["completed-spf-run"] = ipfrrEventSummary.CompletedSpfRun
    leafs["total-routes"] = ipfrrEventSummary.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrEventSummary.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrEventSummary.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrEventSummary.Coverage
    return leafs
}

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetYangName() string { return "ipfrr-event-summary" }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) SetParent(parent types.Entity) { ipfrrEventSummary.parent = parent }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetParent() types.Entity { return ipfrrEventSummary.parent }

func (ipfrrEventSummary *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetParentYangName() string { return "ipfrr-event-summaries" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic
// IP-Frr Statistics categorized by priority
type Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}

    // Local LFA Coverage in percentage. The type is string. Units are percentage.
    LocalLfaCoverage interface{}

    // Remote LFA Coverage in percentage. The type is string. Units are
    // percentage.
    RemoteLfaCoverage interface{}

    // Covearge is below Configured Threshold. The type is bool.
    BelowThreshold interface{}
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetFilter() yfilter.YFilter { return ipfrrStatistic.YFilter }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) SetFilter(yf yfilter.YFilter) { ipfrrStatistic.YFilter = yf }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "local-lfa-coverage" { return "LocalLfaCoverage" }
    if yname == "remote-lfa-coverage" { return "RemoteLfaCoverage" }
    if yname == "below-threshold" { return "BelowThreshold" }
    return ""
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetSegmentPath() string {
    return "ipfrr-statistic"
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = ipfrrStatistic.Priority
    leafs["total-routes"] = ipfrrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrStatistic.Coverage
    leafs["local-lfa-coverage"] = ipfrrStatistic.LocalLfaCoverage
    leafs["remote-lfa-coverage"] = ipfrrStatistic.RemoteLfaCoverage
    leafs["below-threshold"] = ipfrrStatistic.BelowThreshold
    return leafs
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetYangName() string { return "ipfrr-statistic" }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) SetParent(parent types.Entity) { ipfrrStatistic.parent = parent }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetParent() types.Entity { return ipfrrStatistic.parent }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetParentYangName() string { return "ipfrr-event-summary" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode
// Remote Node Information
type Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote-LFA Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Number of paths protected by this Remote Node. The type is interface{} with
    // range: 0..4294967295.
    PathCount interface{}

    // Inuse time of the Remote Node (eg: Apr 24 13:16 :04.961). The type is
    // string.
    InUseTime interface{}

    // Protected Primary Paths. The type is slice of
    // Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath.
    PrimaryPath []Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetFilter() yfilter.YFilter { return remoteNode.YFilter }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) SetFilter(yf yfilter.YFilter) { remoteNode.YFilter = yf }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetGoName(yname string) string {
    if yname == "remote-node-id" { return "RemoteNodeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "path-count" { return "PathCount" }
    if yname == "in-use-time" { return "InUseTime" }
    if yname == "primary-path" { return "PrimaryPath" }
    return ""
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetSegmentPath() string {
    return "remote-node"
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary-path" {
        for _, c := range remoteNode.PrimaryPath {
            if remoteNode.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath{}
        remoteNode.PrimaryPath = append(remoteNode.PrimaryPath, child)
        return &remoteNode.PrimaryPath[len(remoteNode.PrimaryPath)-1]
    }
    return nil
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteNode.PrimaryPath {
        children[remoteNode.PrimaryPath[i].GetSegmentPath()] = &remoteNode.PrimaryPath[i]
    }
    return children
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["remote-node-id"] = remoteNode.RemoteNodeId
    leafs["interface-name"] = remoteNode.InterfaceName
    leafs["neighbour-address"] = remoteNode.NeighbourAddress
    leafs["path-count"] = remoteNode.PathCount
    leafs["in-use-time"] = remoteNode.InUseTime
    return leafs
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetBundleName() string { return "cisco_ios_xr" }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetYangName() string { return "remote-node" }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) SetParent(parent types.Entity) { remoteNode.parent = parent }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetParent() types.Entity { return remoteNode.parent }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetParentYangName() string { return "ipfrr-event-summary" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath
// Protected Primary Paths
type Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetFilter() yfilter.YFilter { return primaryPath.YFilter }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) SetFilter(yf yfilter.YFilter) { primaryPath.YFilter = yf }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    return ""
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetSegmentPath() string {
    return "primary-path"
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = primaryPath.InterfaceName
    leafs["neighbour-address"] = primaryPath.NeighbourAddress
    return leafs
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetBundleName() string { return "cisco_ios_xr" }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetYangName() string { return "primary-path" }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) SetParent(parent types.Entity) { primaryPath.parent = parent }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetParent() types.Entity { return primaryPath.parent }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetParentYangName() string { return "remote-node" }

// Rcmd_Ospf_Instances_Instance_PrefixEventStatistics
// OSPF Prefix events summary data
type Rcmd_Ospf_Instances_Instance_PrefixEventStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix Event statistics. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic.
    PrefixEventStatistic []Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic
}

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetFilter() yfilter.YFilter { return prefixEventStatistics.YFilter }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) SetFilter(yf yfilter.YFilter) { prefixEventStatistics.YFilter = yf }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetGoName(yname string) string {
    if yname == "prefix-event-statistic" { return "PrefixEventStatistic" }
    return ""
}

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetSegmentPath() string {
    return "prefix-event-statistics"
}

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-event-statistic" {
        for _, c := range prefixEventStatistics.PrefixEventStatistic {
            if prefixEventStatistics.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic{}
        prefixEventStatistics.PrefixEventStatistic = append(prefixEventStatistics.PrefixEventStatistic, child)
        return &prefixEventStatistics.PrefixEventStatistic[len(prefixEventStatistics.PrefixEventStatistic)-1]
    }
    return nil
}

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixEventStatistics.PrefixEventStatistic {
        children[prefixEventStatistics.PrefixEventStatistic[i].GetSegmentPath()] = &prefixEventStatistics.PrefixEventStatistic[i]
    }
    return children
}

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetYangName() string { return "prefix-event-statistics" }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) SetParent(parent types.Entity) { prefixEventStatistics.parent = parent }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetParent() types.Entity { return prefixEventStatistics.parent }

func (prefixEventStatistics *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic
// Prefix Event statistics
type Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Events with Prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    PrefixInfo interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Last event trigger time. The type is string.
    LastEventTime interface{}

    // Last event processed priority. The type is RcmdPriorityLevel.
    LastPriority interface{}

    // Last event Route Type. The type is RcmdShowRoute.
    LastRouteType interface{}

    // Last event Add/Delete. The type is RcmdChange.
    LastChangeType interface{}

    // Last Known Cost. The type is interface{} with range: 0..4294967295.
    LastCost interface{}

    // No. of times processed under Critical Priority. The type is interface{}
    // with range: 0..4294967295.
    CriticalPriority interface{}

    // No. of times processed under High Priority. The type is interface{} with
    // range: 0..4294967295.
    HighPriority interface{}

    // No. of times processed under Medium Priority. The type is interface{} with
    // range: 0..4294967295.
    MediumPriority interface{}

    // No. of times processed under Low Priority. The type is interface{} with
    // range: 0..4294967295.
    LowPriority interface{}

    // No. of times route gets Added. The type is interface{} with range:
    // 0..4294967295.
    AddCount interface{}

    // No. of times route gets Deleted. The type is interface{} with range:
    // 0..4294967295.
    ModifyCount interface{}

    // No. of times route gets Deleted. The type is interface{} with range:
    // 0..4294967295.
    DeleteCount interface{}

    // No. of times threshold got exceeded. The type is interface{} with range:
    // 0..4294967295.
    ThresholdExceedCount interface{}
}

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetFilter() yfilter.YFilter { return prefixEventStatistic.YFilter }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) SetFilter(yf yfilter.YFilter) { prefixEventStatistic.YFilter = yf }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetGoName(yname string) string {
    if yname == "prefix-info" { return "PrefixInfo" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "last-event-time" { return "LastEventTime" }
    if yname == "last-priority" { return "LastPriority" }
    if yname == "last-route-type" { return "LastRouteType" }
    if yname == "last-change-type" { return "LastChangeType" }
    if yname == "last-cost" { return "LastCost" }
    if yname == "critical-priority" { return "CriticalPriority" }
    if yname == "high-priority" { return "HighPriority" }
    if yname == "medium-priority" { return "MediumPriority" }
    if yname == "low-priority" { return "LowPriority" }
    if yname == "add-count" { return "AddCount" }
    if yname == "modify-count" { return "ModifyCount" }
    if yname == "delete-count" { return "DeleteCount" }
    if yname == "threshold-exceed-count" { return "ThresholdExceedCount" }
    return ""
}

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetSegmentPath() string {
    return "prefix-event-statistic" + "[prefix-info='" + fmt.Sprintf("%v", prefixEventStatistic.PrefixInfo) + "']"
}

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-info"] = prefixEventStatistic.PrefixInfo
    leafs["prefix"] = prefixEventStatistic.Prefix
    leafs["prefix-lenth"] = prefixEventStatistic.PrefixLenth
    leafs["last-event-time"] = prefixEventStatistic.LastEventTime
    leafs["last-priority"] = prefixEventStatistic.LastPriority
    leafs["last-route-type"] = prefixEventStatistic.LastRouteType
    leafs["last-change-type"] = prefixEventStatistic.LastChangeType
    leafs["last-cost"] = prefixEventStatistic.LastCost
    leafs["critical-priority"] = prefixEventStatistic.CriticalPriority
    leafs["high-priority"] = prefixEventStatistic.HighPriority
    leafs["medium-priority"] = prefixEventStatistic.MediumPriority
    leafs["low-priority"] = prefixEventStatistic.LowPriority
    leafs["add-count"] = prefixEventStatistic.AddCount
    leafs["modify-count"] = prefixEventStatistic.ModifyCount
    leafs["delete-count"] = prefixEventStatistic.DeleteCount
    leafs["threshold-exceed-count"] = prefixEventStatistic.ThresholdExceedCount
    return leafs
}

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetYangName() string { return "prefix-event-statistic" }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) SetParent(parent types.Entity) { prefixEventStatistic.parent = parent }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetParent() types.Entity { return prefixEventStatistic.parent }

func (prefixEventStatistic *Rcmd_Ospf_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetParentYangName() string { return "prefix-event-statistics" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries
// OSPF SPF run summary data
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF Event data. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary.
    SpfRunSummary []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary
}

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetFilter() yfilter.YFilter { return spfRunSummaries.YFilter }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) SetFilter(yf yfilter.YFilter) { spfRunSummaries.YFilter = yf }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetGoName(yname string) string {
    if yname == "spf-run-summary" { return "SpfRunSummary" }
    return ""
}

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetSegmentPath() string {
    return "spf-run-summaries"
}

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-run-summary" {
        for _, c := range spfRunSummaries.SpfRunSummary {
            if spfRunSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary{}
        spfRunSummaries.SpfRunSummary = append(spfRunSummaries.SpfRunSummary, child)
        return &spfRunSummaries.SpfRunSummary[len(spfRunSummaries.SpfRunSummary)-1]
    }
    return nil
}

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfRunSummaries.SpfRunSummary {
        children[spfRunSummaries.SpfRunSummary[i].GetSegmentPath()] = &spfRunSummaries.SpfRunSummary[i]
    }
    return children
}

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetYangName() string { return "spf-run-summaries" }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) SetParent(parent types.Entity) { spfRunSummaries.parent = parent }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetParent() types.Entity { return spfRunSummaries.parent }

func (spfRunSummaries *Rcmd_Ospf_Instances_Instance_SpfRunSummaries) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary
// SPF Event data
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific SPF run. The type is interface{} with
    // range: 1..4294967295.
    SpfRunNumber interface{}

    // SPF summary information.
    SpfSummary Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary

    // List of Dijkstra runs. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun.
    DijkstraRun []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun

    // Inter-area & external calculation information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal.
    InterAreaAndExternal []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal
}

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetFilter() yfilter.YFilter { return spfRunSummary.YFilter }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) SetFilter(yf yfilter.YFilter) { spfRunSummary.YFilter = yf }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetGoName(yname string) string {
    if yname == "spf-run-number" { return "SpfRunNumber" }
    if yname == "spf-summary" { return "SpfSummary" }
    if yname == "dijkstra-run" { return "DijkstraRun" }
    if yname == "inter-area-and-external" { return "InterAreaAndExternal" }
    return ""
}

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetSegmentPath() string {
    return "spf-run-summary" + "[spf-run-number='" + fmt.Sprintf("%v", spfRunSummary.SpfRunNumber) + "']"
}

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-summary" {
        return &spfRunSummary.SpfSummary
    }
    if childYangName == "dijkstra-run" {
        for _, c := range spfRunSummary.DijkstraRun {
            if spfRunSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun{}
        spfRunSummary.DijkstraRun = append(spfRunSummary.DijkstraRun, child)
        return &spfRunSummary.DijkstraRun[len(spfRunSummary.DijkstraRun)-1]
    }
    if childYangName == "inter-area-and-external" {
        for _, c := range spfRunSummary.InterAreaAndExternal {
            if spfRunSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal{}
        spfRunSummary.InterAreaAndExternal = append(spfRunSummary.InterAreaAndExternal, child)
        return &spfRunSummary.InterAreaAndExternal[len(spfRunSummary.InterAreaAndExternal)-1]
    }
    return nil
}

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-summary"] = &spfRunSummary.SpfSummary
    for i := range spfRunSummary.DijkstraRun {
        children[spfRunSummary.DijkstraRun[i].GetSegmentPath()] = &spfRunSummary.DijkstraRun[i]
    }
    for i := range spfRunSummary.InterAreaAndExternal {
        children[spfRunSummary.InterAreaAndExternal[i].GetSegmentPath()] = &spfRunSummary.InterAreaAndExternal[i]
    }
    return children
}

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-run-number"] = spfRunSummary.SpfRunNumber
    return leafs
}

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetYangName() string { return "spf-run-summary" }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) SetParent(parent types.Entity) { spfRunSummary.parent = parent }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetParent() types.Entity { return spfRunSummary.parent }

func (spfRunSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetParentYangName() string { return "spf-run-summaries" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary
// SPF summary information
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF state. The type is RcmdSpfState.
    State interface{}

    // Whether the event has all information. The type is bool.
    IsDataComplete interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Trigger time (in hh:mm:ss.msec). The type is string.
    TriggerTime interface{}

    // Start time (offset from event trigger time in ss .msec). The type is
    // string.
    StartTime interface{}

    // Duration of complete SPF calculation (in ss .msec). The type is string.
    Duration interface{}

    // Total number of Dijkstra runs. The type is interface{} with range:
    // 0..65535.
    TotalDijkstraRuns interface{}

    // Total number of inter-area/external computation batches. The type is
    // interface{} with range: 0..65535.
    TotalInterAreaAndExternalBatches interface{}

    // Total number of Type 1/2 LSA changes processed. The type is interface{}
    // with range: 0..65535.
    TotalType12LsaChanges interface{}

    // Total number of Type 3/5/7 LSA changes processed. The type is interface{}
    // with range: 0..65535.
    TotalType357LsaChanges interface{}

    // Convergence information summary on per-priority basis. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary.
    PrioritySummary []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetFilter() yfilter.YFilter { return spfSummary.YFilter }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) SetFilter(yf yfilter.YFilter) { spfSummary.YFilter = yf }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "is-data-complete" { return "IsDataComplete" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "start-time" { return "StartTime" }
    if yname == "duration" { return "Duration" }
    if yname == "total-dijkstra-runs" { return "TotalDijkstraRuns" }
    if yname == "total-inter-area-and-external-batches" { return "TotalInterAreaAndExternalBatches" }
    if yname == "total-type12lsa-changes" { return "TotalType12LsaChanges" }
    if yname == "total-type357lsa-changes" { return "TotalType357LsaChanges" }
    if yname == "priority-summary" { return "PrioritySummary" }
    return ""
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetSegmentPath() string {
    return "spf-summary"
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        for _, c := range spfSummary.PrioritySummary {
            if spfSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary{}
        spfSummary.PrioritySummary = append(spfSummary.PrioritySummary, child)
        return &spfSummary.PrioritySummary[len(spfSummary.PrioritySummary)-1]
    }
    return nil
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfSummary.PrioritySummary {
        children[spfSummary.PrioritySummary[i].GetSegmentPath()] = &spfSummary.PrioritySummary[i]
    }
    return children
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = spfSummary.State
    leafs["is-data-complete"] = spfSummary.IsDataComplete
    leafs["threshold-exceeded"] = spfSummary.ThresholdExceeded
    leafs["trigger-time"] = spfSummary.TriggerTime
    leafs["start-time"] = spfSummary.StartTime
    leafs["duration"] = spfSummary.Duration
    leafs["total-dijkstra-runs"] = spfSummary.TotalDijkstraRuns
    leafs["total-inter-area-and-external-batches"] = spfSummary.TotalInterAreaAndExternalBatches
    leafs["total-type12lsa-changes"] = spfSummary.TotalType12LsaChanges
    leafs["total-type357lsa-changes"] = spfSummary.TotalType357LsaChanges
    return leafs
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetBundleName() string { return "cisco_ios_xr" }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetYangName() string { return "spf-summary" }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) SetParent(parent types.Entity) { spfSummary.parent = parent }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetParent() types.Entity { return spfSummary.parent }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary
// Convergence information summary on per-priority
// basis
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetParentYangName() string { return "spf-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun
// List of Dijkstra runs
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area Dijkstra run number. The type is interface{} with range:
    // 0..4294967295.
    DijkstraRunNumber interface{}

    // Area ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AreaId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Trigger time (in hh:mm:ss.msec). The type is string.
    TriggerTime interface{}

    // Start time (offset from event trigger time in ss .msec). The type is
    // string.
    StartTime interface{}

    // Wait time (offset from event trigger time in ss .msec). The type is
    // interface{} with range: 0..4294967295.
    WaitTime interface{}

    // Duration of Dijktra calculation (in ss.msec). The type is string.
    Duration interface{}

    // LSA that triggered the Dijkstra run. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa.
    TriggerLsa []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa

    // Convergence information on per-priority basis. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority.
    Priority []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority

    // List of type 1/2 LSA changes processed. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed.
    LsaProcessed []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetFilter() yfilter.YFilter { return dijkstraRun.YFilter }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) SetFilter(yf yfilter.YFilter) { dijkstraRun.YFilter = yf }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetGoName(yname string) string {
    if yname == "dijkstra-run-number" { return "DijkstraRunNumber" }
    if yname == "area-id" { return "AreaId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "start-time" { return "StartTime" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "duration" { return "Duration" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetSegmentPath() string {
    return "dijkstra-run"
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trigger-lsa" {
        for _, c := range dijkstraRun.TriggerLsa {
            if dijkstraRun.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa{}
        dijkstraRun.TriggerLsa = append(dijkstraRun.TriggerLsa, child)
        return &dijkstraRun.TriggerLsa[len(dijkstraRun.TriggerLsa)-1]
    }
    if childYangName == "priority" {
        for _, c := range dijkstraRun.Priority {
            if dijkstraRun.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority{}
        dijkstraRun.Priority = append(dijkstraRun.Priority, child)
        return &dijkstraRun.Priority[len(dijkstraRun.Priority)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range dijkstraRun.LsaProcessed {
            if dijkstraRun.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed{}
        dijkstraRun.LsaProcessed = append(dijkstraRun.LsaProcessed, child)
        return &dijkstraRun.LsaProcessed[len(dijkstraRun.LsaProcessed)-1]
    }
    return nil
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range dijkstraRun.TriggerLsa {
        children[dijkstraRun.TriggerLsa[i].GetSegmentPath()] = &dijkstraRun.TriggerLsa[i]
    }
    for i := range dijkstraRun.Priority {
        children[dijkstraRun.Priority[i].GetSegmentPath()] = &dijkstraRun.Priority[i]
    }
    for i := range dijkstraRun.LsaProcessed {
        children[dijkstraRun.LsaProcessed[i].GetSegmentPath()] = &dijkstraRun.LsaProcessed[i]
    }
    return children
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra-run-number"] = dijkstraRun.DijkstraRunNumber
    leafs["area-id"] = dijkstraRun.AreaId
    leafs["threshold-exceeded"] = dijkstraRun.ThresholdExceeded
    leafs["trigger-time"] = dijkstraRun.TriggerTime
    leafs["start-time"] = dijkstraRun.StartTime
    leafs["wait-time"] = dijkstraRun.WaitTime
    leafs["duration"] = dijkstraRun.Duration
    return leafs
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetBundleName() string { return "cisco_ios_xr" }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetYangName() string { return "dijkstra-run" }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) SetParent(parent types.Entity) { dijkstraRun.parent = parent }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetParent() types.Entity { return dijkstraRun.parent }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa
// LSA that triggered the Dijkstra run
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_TriggerLsa) GetParentYangName() string { return "dijkstra-run" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority
// Convergence information on per-priority basis
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of the priority.
    PrioritySummary Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary

    // Convergence timeline details. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline.
    ConvergenceTimeline []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline

    // List of Leaf Networks Added. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded.
    LeafNetworksAdded []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded

    // List of Leaf Networks Deleted. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted.
    LeafNetworksDeleted []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetGoName(yname string) string {
    if yname == "priority-summary" { return "PrioritySummary" }
    if yname == "convergence-timeline" { return "ConvergenceTimeline" }
    if yname == "leaf-networks-added" { return "LeafNetworksAdded" }
    if yname == "leaf-networks-deleted" { return "LeafNetworksDeleted" }
    return ""
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        return &priority.PrioritySummary
    }
    if childYangName == "convergence-timeline" {
        for _, c := range priority.ConvergenceTimeline {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline{}
        priority.ConvergenceTimeline = append(priority.ConvergenceTimeline, child)
        return &priority.ConvergenceTimeline[len(priority.ConvergenceTimeline)-1]
    }
    if childYangName == "leaf-networks-added" {
        for _, c := range priority.LeafNetworksAdded {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded{}
        priority.LeafNetworksAdded = append(priority.LeafNetworksAdded, child)
        return &priority.LeafNetworksAdded[len(priority.LeafNetworksAdded)-1]
    }
    if childYangName == "leaf-networks-deleted" {
        for _, c := range priority.LeafNetworksDeleted {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted{}
        priority.LeafNetworksDeleted = append(priority.LeafNetworksDeleted, child)
        return &priority.LeafNetworksDeleted[len(priority.LeafNetworksDeleted)-1]
    }
    return nil
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["priority-summary"] = &priority.PrioritySummary
    for i := range priority.ConvergenceTimeline {
        children[priority.ConvergenceTimeline[i].GetSegmentPath()] = &priority.ConvergenceTimeline[i]
    }
    for i := range priority.LeafNetworksAdded {
        children[priority.LeafNetworksAdded[i].GetSegmentPath()] = &priority.LeafNetworksAdded[i]
    }
    for i := range priority.LeafNetworksDeleted {
        children[priority.LeafNetworksDeleted[i].GetSegmentPath()] = &priority.LeafNetworksDeleted[i]
    }
    return children
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority) GetParentYangName() string { return "dijkstra-run" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary
// Summary of the priority
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline
// Convergence timeline details
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol).
    RouteOrigin Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin

    // Entry point of IPv4 RIB.
    RiBv4Enter Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter

    // Exit point from IPv4 RIB to FIBs.
    RiBv4Exit Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit

    // Route Redistribute point from IPv4 RIB to LDP.
    RiBv4Redistribute Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute

    // Entry point of LDP.
    LdpEnter Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter

    // Exit point of LDP to LSD.
    LdpExit Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit

    // Entry point of LSD.
    LsdEnter Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter

    // Exit point of LSD to FIBs.
    LsdExit Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetFilter() yfilter.YFilter { return convergenceTimeline.YFilter }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) SetFilter(yf yfilter.YFilter) { convergenceTimeline.YFilter = yf }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetSegmentPath() string {
    return "convergence-timeline"
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-origin" {
        return &convergenceTimeline.RouteOrigin
    }
    if childYangName == "ri-bv4-enter" {
        return &convergenceTimeline.RiBv4Enter
    }
    if childYangName == "ri-bv4-exit" {
        return &convergenceTimeline.RiBv4Exit
    }
    if childYangName == "ri-bv4-redistribute" {
        return &convergenceTimeline.RiBv4Redistribute
    }
    if childYangName == "ldp-enter" {
        return &convergenceTimeline.LdpEnter
    }
    if childYangName == "ldp-exit" {
        return &convergenceTimeline.LdpExit
    }
    if childYangName == "lsd-enter" {
        return &convergenceTimeline.LsdEnter
    }
    if childYangName == "lsd-exit" {
        return &convergenceTimeline.LsdExit
    }
    if childYangName == "lc-ip" {
        for _, c := range convergenceTimeline.LcIp {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp{}
        convergenceTimeline.LcIp = append(convergenceTimeline.LcIp, child)
        return &convergenceTimeline.LcIp[len(convergenceTimeline.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range convergenceTimeline.LcMpls {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls{}
        convergenceTimeline.LcMpls = append(convergenceTimeline.LcMpls, child)
        return &convergenceTimeline.LcMpls[len(convergenceTimeline.LcMpls)-1]
    }
    return nil
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-origin"] = &convergenceTimeline.RouteOrigin
    children["ri-bv4-enter"] = &convergenceTimeline.RiBv4Enter
    children["ri-bv4-exit"] = &convergenceTimeline.RiBv4Exit
    children["ri-bv4-redistribute"] = &convergenceTimeline.RiBv4Redistribute
    children["ldp-enter"] = &convergenceTimeline.LdpEnter
    children["ldp-exit"] = &convergenceTimeline.LdpExit
    children["lsd-enter"] = &convergenceTimeline.LsdEnter
    children["lsd-exit"] = &convergenceTimeline.LsdExit
    for i := range convergenceTimeline.LcIp {
        children[convergenceTimeline.LcIp[i].GetSegmentPath()] = &convergenceTimeline.LcIp[i]
    }
    for i := range convergenceTimeline.LcMpls {
        children[convergenceTimeline.LcMpls[i].GetSegmentPath()] = &convergenceTimeline.LcMpls[i]
    }
    return children
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetBundleName() string { return "cisco_ios_xr" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetYangName() string { return "convergence-timeline" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) SetParent(parent types.Entity) { convergenceTimeline.parent = parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetParent() types.Entity { return convergenceTimeline.parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin
// Route origin (routing protocol)
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetFilter() yfilter.YFilter { return routeOrigin.YFilter }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) SetFilter(yf yfilter.YFilter) { routeOrigin.YFilter = yf }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetSegmentPath() string {
    return "route-origin"
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = routeOrigin.StartTime
    leafs["end-time"] = routeOrigin.EndTime
    leafs["duration"] = routeOrigin.Duration
    return leafs
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetYangName() string { return "route-origin" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) SetParent(parent types.Entity) { routeOrigin.parent = parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetParent() types.Entity { return routeOrigin.parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter
// Entry point of IPv4 RIB
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetFilter() yfilter.YFilter { return riBv4Enter.YFilter }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) SetFilter(yf yfilter.YFilter) { riBv4Enter.YFilter = yf }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetSegmentPath() string {
    return "ri-bv4-enter"
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Enter.StartTime
    leafs["end-time"] = riBv4Enter.EndTime
    leafs["duration"] = riBv4Enter.Duration
    return leafs
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetYangName() string { return "ri-bv4-enter" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) SetParent(parent types.Entity) { riBv4Enter.parent = parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetParent() types.Entity { return riBv4Enter.parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit
// Exit point from IPv4 RIB to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetFilter() yfilter.YFilter { return riBv4Exit.YFilter }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) SetFilter(yf yfilter.YFilter) { riBv4Exit.YFilter = yf }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetSegmentPath() string {
    return "ri-bv4-exit"
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Exit.StartTime
    leafs["end-time"] = riBv4Exit.EndTime
    leafs["duration"] = riBv4Exit.Duration
    return leafs
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetYangName() string { return "ri-bv4-exit" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) SetParent(parent types.Entity) { riBv4Exit.parent = parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetParent() types.Entity { return riBv4Exit.parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute
// Route Redistribute point from IPv4 RIB to LDP
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetFilter() yfilter.YFilter { return riBv4Redistribute.YFilter }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) SetFilter(yf yfilter.YFilter) { riBv4Redistribute.YFilter = yf }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetSegmentPath() string {
    return "ri-bv4-redistribute"
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Redistribute.StartTime
    leafs["end-time"] = riBv4Redistribute.EndTime
    leafs["duration"] = riBv4Redistribute.Duration
    return leafs
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetYangName() string { return "ri-bv4-redistribute" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) SetParent(parent types.Entity) { riBv4Redistribute.parent = parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParent() types.Entity { return riBv4Redistribute.parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter
// Entry point of LDP
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetFilter() yfilter.YFilter { return ldpEnter.YFilter }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) SetFilter(yf yfilter.YFilter) { ldpEnter.YFilter = yf }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetSegmentPath() string {
    return "ldp-enter"
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpEnter.StartTime
    leafs["end-time"] = ldpEnter.EndTime
    leafs["duration"] = ldpEnter.Duration
    return leafs
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetBundleName() string { return "cisco_ios_xr" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetYangName() string { return "ldp-enter" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) SetParent(parent types.Entity) { ldpEnter.parent = parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetParent() types.Entity { return ldpEnter.parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit
// Exit point of LDP to LSD
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetFilter() yfilter.YFilter { return ldpExit.YFilter }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) SetFilter(yf yfilter.YFilter) { ldpExit.YFilter = yf }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetSegmentPath() string {
    return "ldp-exit"
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpExit.StartTime
    leafs["end-time"] = ldpExit.EndTime
    leafs["duration"] = ldpExit.Duration
    return leafs
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetBundleName() string { return "cisco_ios_xr" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetYangName() string { return "ldp-exit" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) SetParent(parent types.Entity) { ldpExit.parent = parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetParent() types.Entity { return ldpExit.parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter
// Entry point of LSD
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetFilter() yfilter.YFilter { return lsdEnter.YFilter }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) SetFilter(yf yfilter.YFilter) { lsdEnter.YFilter = yf }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetSegmentPath() string {
    return "lsd-enter"
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdEnter.StartTime
    leafs["end-time"] = lsdEnter.EndTime
    leafs["duration"] = lsdEnter.Duration
    return leafs
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetBundleName() string { return "cisco_ios_xr" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetYangName() string { return "lsd-enter" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) SetParent(parent types.Entity) { lsdEnter.parent = parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetParent() types.Entity { return lsdEnter.parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit
// Exit point of LSD to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetFilter() yfilter.YFilter { return lsdExit.YFilter }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) SetFilter(yf yfilter.YFilter) { lsdExit.YFilter = yf }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetSegmentPath() string {
    return "lsd-exit"
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdExit.StartTime
    leafs["end-time"] = lsdExit.EndTime
    leafs["duration"] = lsdExit.Duration
    return leafs
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetBundleName() string { return "cisco_ios_xr" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetYangName() string { return "lsd-exit" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) SetParent(parent types.Entity) { lsdExit.parent = parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetParent() types.Entity { return lsdExit.parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcIp.FibComplete
    }
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcIp.FibComplete
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParentYangName() string { return "lc-ip" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcMpls.FibComplete
    }
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcMpls.FibComplete
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParentYangName() string { return "lc-mpls" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded
// List of Leaf Networks Added
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetFilter() yfilter.YFilter { return leafNetworksAdded.YFilter }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) SetFilter(yf yfilter.YFilter) { leafNetworksAdded.YFilter = yf }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetSegmentPath() string {
    return "leaf-networks-added"
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksAdded.Address
    leafs["net-mask"] = leafNetworksAdded.NetMask
    return leafs
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetYangName() string { return "leaf-networks-added" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) SetParent(parent types.Entity) { leafNetworksAdded.parent = parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetParent() types.Entity { return leafNetworksAdded.parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksAdded) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted
// List of Leaf Networks Deleted
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetFilter() yfilter.YFilter { return leafNetworksDeleted.YFilter }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) SetFilter(yf yfilter.YFilter) { leafNetworksDeleted.YFilter = yf }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetSegmentPath() string {
    return "leaf-networks-deleted"
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksDeleted.Address
    leafs["net-mask"] = leafNetworksDeleted.NetMask
    return leafs
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetYangName() string { return "leaf-networks-deleted" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) SetParent(parent types.Entity) { leafNetworksDeleted.parent = parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetParent() types.Entity { return leafNetworksDeleted.parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_Priority_LeafNetworksDeleted) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed
// List of type 1/2 LSA changes processed
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_DijkstraRun_LsaProcessed) GetParentYangName() string { return "dijkstra-run" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal
// Inter-area & external calculation information
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Convergence information on a per-priority basis. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority.
    Priority []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetFilter() yfilter.YFilter { return interAreaAndExternal.YFilter }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) SetFilter(yf yfilter.YFilter) { interAreaAndExternal.YFilter = yf }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    return ""
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetSegmentPath() string {
    return "inter-area-and-external"
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority" {
        for _, c := range interAreaAndExternal.Priority {
            if interAreaAndExternal.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority{}
        interAreaAndExternal.Priority = append(interAreaAndExternal.Priority, child)
        return &interAreaAndExternal.Priority[len(interAreaAndExternal.Priority)-1]
    }
    return nil
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interAreaAndExternal.Priority {
        children[interAreaAndExternal.Priority[i].GetSegmentPath()] = &interAreaAndExternal.Priority[i]
    }
    return children
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetYangName() string { return "inter-area-and-external" }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) SetParent(parent types.Entity) { interAreaAndExternal.parent = parent }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetParent() types.Entity { return interAreaAndExternal.parent }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority
// Convergence information on a per-priority basis
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of the priority.
    PrioritySummary Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary

    // Convergence timeline details. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline.
    ConvergenceTimeline []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline

    // List of Leaf Networks Added. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded.
    LeafNetworksAdded []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded

    // List of Leaf Networks Deleted. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted.
    LeafNetworksDeleted []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetGoName(yname string) string {
    if yname == "priority-summary" { return "PrioritySummary" }
    if yname == "convergence-timeline" { return "ConvergenceTimeline" }
    if yname == "leaf-networks-added" { return "LeafNetworksAdded" }
    if yname == "leaf-networks-deleted" { return "LeafNetworksDeleted" }
    return ""
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        return &priority.PrioritySummary
    }
    if childYangName == "convergence-timeline" {
        for _, c := range priority.ConvergenceTimeline {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline{}
        priority.ConvergenceTimeline = append(priority.ConvergenceTimeline, child)
        return &priority.ConvergenceTimeline[len(priority.ConvergenceTimeline)-1]
    }
    if childYangName == "leaf-networks-added" {
        for _, c := range priority.LeafNetworksAdded {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded{}
        priority.LeafNetworksAdded = append(priority.LeafNetworksAdded, child)
        return &priority.LeafNetworksAdded[len(priority.LeafNetworksAdded)-1]
    }
    if childYangName == "leaf-networks-deleted" {
        for _, c := range priority.LeafNetworksDeleted {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted{}
        priority.LeafNetworksDeleted = append(priority.LeafNetworksDeleted, child)
        return &priority.LeafNetworksDeleted[len(priority.LeafNetworksDeleted)-1]
    }
    return nil
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["priority-summary"] = &priority.PrioritySummary
    for i := range priority.ConvergenceTimeline {
        children[priority.ConvergenceTimeline[i].GetSegmentPath()] = &priority.ConvergenceTimeline[i]
    }
    for i := range priority.LeafNetworksAdded {
        children[priority.LeafNetworksAdded[i].GetSegmentPath()] = &priority.LeafNetworksAdded[i]
    }
    for i := range priority.LeafNetworksDeleted {
        children[priority.LeafNetworksDeleted[i].GetSegmentPath()] = &priority.LeafNetworksDeleted[i]
    }
    return children
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority) GetParentYangName() string { return "inter-area-and-external" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary
// Summary of the priority
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Number of Type 3 LSA. The type is interface{} with range: 0..4294967295.
    Type3LsAs interface{}

    // Number of Type 4 LSA. The type is interface{} with range: 0..4294967295.
    Type4LsAs interface{}

    // Number of Type 5/7 LSA. The type is interface{} with range: 0..4294967295.
    Type57LsAs interface{}

    // Route statistics.
    RouteStatistics Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "type3ls-as" { return "Type3LsAs" }
    if yname == "type4ls-as" { return "Type4LsAs" }
    if yname == "type57ls-as" { return "Type57LsAs" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    return ""
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    return nil
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    return children
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    leafs["type3ls-as"] = prioritySummary.Type3LsAs
    leafs["type4ls-as"] = prioritySummary.Type4LsAs
    leafs["type57ls-as"] = prioritySummary.Type57LsAs
    return leafs
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline
// Convergence timeline details
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol).
    RouteOrigin Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin

    // Entry point of IPv4 RIB.
    RiBv4Enter Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter

    // Exit point from IPv4 RIB to FIBs.
    RiBv4Exit Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit

    // Route Redistribute point from IPv4 RIB to LDP.
    RiBv4Redistribute Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute

    // Entry point of LDP.
    LdpEnter Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter

    // Exit point of LDP to LSD.
    LdpExit Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit

    // Entry point of LSD.
    LsdEnter Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter

    // Exit point of LSD to FIBs.
    LsdExit Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetFilter() yfilter.YFilter { return convergenceTimeline.YFilter }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) SetFilter(yf yfilter.YFilter) { convergenceTimeline.YFilter = yf }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetSegmentPath() string {
    return "convergence-timeline"
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-origin" {
        return &convergenceTimeline.RouteOrigin
    }
    if childYangName == "ri-bv4-enter" {
        return &convergenceTimeline.RiBv4Enter
    }
    if childYangName == "ri-bv4-exit" {
        return &convergenceTimeline.RiBv4Exit
    }
    if childYangName == "ri-bv4-redistribute" {
        return &convergenceTimeline.RiBv4Redistribute
    }
    if childYangName == "ldp-enter" {
        return &convergenceTimeline.LdpEnter
    }
    if childYangName == "ldp-exit" {
        return &convergenceTimeline.LdpExit
    }
    if childYangName == "lsd-enter" {
        return &convergenceTimeline.LsdEnter
    }
    if childYangName == "lsd-exit" {
        return &convergenceTimeline.LsdExit
    }
    if childYangName == "lc-ip" {
        for _, c := range convergenceTimeline.LcIp {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp{}
        convergenceTimeline.LcIp = append(convergenceTimeline.LcIp, child)
        return &convergenceTimeline.LcIp[len(convergenceTimeline.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range convergenceTimeline.LcMpls {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls{}
        convergenceTimeline.LcMpls = append(convergenceTimeline.LcMpls, child)
        return &convergenceTimeline.LcMpls[len(convergenceTimeline.LcMpls)-1]
    }
    return nil
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-origin"] = &convergenceTimeline.RouteOrigin
    children["ri-bv4-enter"] = &convergenceTimeline.RiBv4Enter
    children["ri-bv4-exit"] = &convergenceTimeline.RiBv4Exit
    children["ri-bv4-redistribute"] = &convergenceTimeline.RiBv4Redistribute
    children["ldp-enter"] = &convergenceTimeline.LdpEnter
    children["ldp-exit"] = &convergenceTimeline.LdpExit
    children["lsd-enter"] = &convergenceTimeline.LsdEnter
    children["lsd-exit"] = &convergenceTimeline.LsdExit
    for i := range convergenceTimeline.LcIp {
        children[convergenceTimeline.LcIp[i].GetSegmentPath()] = &convergenceTimeline.LcIp[i]
    }
    for i := range convergenceTimeline.LcMpls {
        children[convergenceTimeline.LcMpls[i].GetSegmentPath()] = &convergenceTimeline.LcMpls[i]
    }
    return children
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetBundleName() string { return "cisco_ios_xr" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetYangName() string { return "convergence-timeline" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) SetParent(parent types.Entity) { convergenceTimeline.parent = parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetParent() types.Entity { return convergenceTimeline.parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin
// Route origin (routing protocol)
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetFilter() yfilter.YFilter { return routeOrigin.YFilter }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) SetFilter(yf yfilter.YFilter) { routeOrigin.YFilter = yf }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetSegmentPath() string {
    return "route-origin"
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = routeOrigin.StartTime
    leafs["end-time"] = routeOrigin.EndTime
    leafs["duration"] = routeOrigin.Duration
    return leafs
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetYangName() string { return "route-origin" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) SetParent(parent types.Entity) { routeOrigin.parent = parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetParent() types.Entity { return routeOrigin.parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter
// Entry point of IPv4 RIB
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetFilter() yfilter.YFilter { return riBv4Enter.YFilter }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) SetFilter(yf yfilter.YFilter) { riBv4Enter.YFilter = yf }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetSegmentPath() string {
    return "ri-bv4-enter"
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Enter.StartTime
    leafs["end-time"] = riBv4Enter.EndTime
    leafs["duration"] = riBv4Enter.Duration
    return leafs
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetYangName() string { return "ri-bv4-enter" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) SetParent(parent types.Entity) { riBv4Enter.parent = parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetParent() types.Entity { return riBv4Enter.parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit
// Exit point from IPv4 RIB to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetFilter() yfilter.YFilter { return riBv4Exit.YFilter }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) SetFilter(yf yfilter.YFilter) { riBv4Exit.YFilter = yf }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetSegmentPath() string {
    return "ri-bv4-exit"
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Exit.StartTime
    leafs["end-time"] = riBv4Exit.EndTime
    leafs["duration"] = riBv4Exit.Duration
    return leafs
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetYangName() string { return "ri-bv4-exit" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) SetParent(parent types.Entity) { riBv4Exit.parent = parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetParent() types.Entity { return riBv4Exit.parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute
// Route Redistribute point from IPv4 RIB to LDP
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetFilter() yfilter.YFilter { return riBv4Redistribute.YFilter }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) SetFilter(yf yfilter.YFilter) { riBv4Redistribute.YFilter = yf }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetSegmentPath() string {
    return "ri-bv4-redistribute"
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Redistribute.StartTime
    leafs["end-time"] = riBv4Redistribute.EndTime
    leafs["duration"] = riBv4Redistribute.Duration
    return leafs
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetYangName() string { return "ri-bv4-redistribute" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) SetParent(parent types.Entity) { riBv4Redistribute.parent = parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParent() types.Entity { return riBv4Redistribute.parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter
// Entry point of LDP
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetFilter() yfilter.YFilter { return ldpEnter.YFilter }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) SetFilter(yf yfilter.YFilter) { ldpEnter.YFilter = yf }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetSegmentPath() string {
    return "ldp-enter"
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpEnter.StartTime
    leafs["end-time"] = ldpEnter.EndTime
    leafs["duration"] = ldpEnter.Duration
    return leafs
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetBundleName() string { return "cisco_ios_xr" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetYangName() string { return "ldp-enter" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) SetParent(parent types.Entity) { ldpEnter.parent = parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetParent() types.Entity { return ldpEnter.parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit
// Exit point of LDP to LSD
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetFilter() yfilter.YFilter { return ldpExit.YFilter }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) SetFilter(yf yfilter.YFilter) { ldpExit.YFilter = yf }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetSegmentPath() string {
    return "ldp-exit"
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpExit.StartTime
    leafs["end-time"] = ldpExit.EndTime
    leafs["duration"] = ldpExit.Duration
    return leafs
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetBundleName() string { return "cisco_ios_xr" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetYangName() string { return "ldp-exit" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) SetParent(parent types.Entity) { ldpExit.parent = parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetParent() types.Entity { return ldpExit.parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter
// Entry point of LSD
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetFilter() yfilter.YFilter { return lsdEnter.YFilter }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) SetFilter(yf yfilter.YFilter) { lsdEnter.YFilter = yf }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetSegmentPath() string {
    return "lsd-enter"
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdEnter.StartTime
    leafs["end-time"] = lsdEnter.EndTime
    leafs["duration"] = lsdEnter.Duration
    return leafs
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetBundleName() string { return "cisco_ios_xr" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetYangName() string { return "lsd-enter" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) SetParent(parent types.Entity) { lsdEnter.parent = parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetParent() types.Entity { return lsdEnter.parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit
// Exit point of LSD to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetFilter() yfilter.YFilter { return lsdExit.YFilter }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) SetFilter(yf yfilter.YFilter) { lsdExit.YFilter = yf }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetSegmentPath() string {
    return "lsd-exit"
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdExit.StartTime
    leafs["end-time"] = lsdExit.EndTime
    leafs["duration"] = lsdExit.Duration
    return leafs
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetBundleName() string { return "cisco_ios_xr" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetYangName() string { return "lsd-exit" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) SetParent(parent types.Entity) { lsdExit.parent = parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetParent() types.Entity { return lsdExit.parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcIp.FibComplete
    }
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcIp.FibComplete
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParentYangName() string { return "lc-ip" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcMpls.FibComplete
    }
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcMpls.FibComplete
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParentYangName() string { return "lc-mpls" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded
// List of Leaf Networks Added
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetFilter() yfilter.YFilter { return leafNetworksAdded.YFilter }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) SetFilter(yf yfilter.YFilter) { leafNetworksAdded.YFilter = yf }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetSegmentPath() string {
    return "leaf-networks-added"
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksAdded.Address
    leafs["net-mask"] = leafNetworksAdded.NetMask
    return leafs
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetYangName() string { return "leaf-networks-added" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) SetParent(parent types.Entity) { leafNetworksAdded.parent = parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetParent() types.Entity { return leafNetworksAdded.parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksAdded) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted
// List of Leaf Networks Deleted
type Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetFilter() yfilter.YFilter { return leafNetworksDeleted.YFilter }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) SetFilter(yf yfilter.YFilter) { leafNetworksDeleted.YFilter = yf }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetSegmentPath() string {
    return "leaf-networks-deleted"
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksDeleted.Address
    leafs["net-mask"] = leafNetworksDeleted.NetMask
    return leafs
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetYangName() string { return "leaf-networks-deleted" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) SetParent(parent types.Entity) { leafNetworksDeleted.parent = parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetParent() types.Entity { return leafNetworksDeleted.parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunSummaries_SpfRunSummary_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines
// OSPF IP-FRR Event offline data
type Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Offline operational data for particular OSPF IP-FRR Event. The type is
    // slice of Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline.
    IpfrrEventOffline []Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline
}

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetFilter() yfilter.YFilter { return ipfrrEventOfflines.YFilter }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) SetFilter(yf yfilter.YFilter) { ipfrrEventOfflines.YFilter = yf }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetGoName(yname string) string {
    if yname == "ipfrr-event-offline" { return "IpfrrEventOffline" }
    return ""
}

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetSegmentPath() string {
    return "ipfrr-event-offlines"
}

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-event-offline" {
        for _, c := range ipfrrEventOfflines.IpfrrEventOffline {
            if ipfrrEventOfflines.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline{}
        ipfrrEventOfflines.IpfrrEventOffline = append(ipfrrEventOfflines.IpfrrEventOffline, child)
        return &ipfrrEventOfflines.IpfrrEventOffline[len(ipfrrEventOfflines.IpfrrEventOffline)-1]
    }
    return nil
}

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventOfflines.IpfrrEventOffline {
        children[ipfrrEventOfflines.IpfrrEventOffline[i].GetSegmentPath()] = &ipfrrEventOfflines.IpfrrEventOffline[i]
    }
    return children
}

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetYangName() string { return "ipfrr-event-offlines" }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) SetParent(parent types.Entity) { ipfrrEventOfflines.parent = parent }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetParent() types.Entity { return ipfrrEventOfflines.parent }

func (ipfrrEventOfflines *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline
// Offline operational data for particular OSPF
// IP-FRR Event
type Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific IP-FRR Event. The type is interface{}
    // with range: 1..4294967295.
    EventId interface{}

    // IP-Frr Event ID. The type is interface{} with range: 0..4294967295.
    EventIdXr interface{}

    // Trigger time  (eg: Apr 24 13:16:04.961). The type is string.
    TriggerTime interface{}

    // IP-Frr Triggered reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    TriggerSpfRun interface{}

    // Waiting Time (in milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    WaitTime interface{}

    // Start Time offset from trigger time (in milliseconds). The type is string.
    // Units are millisecond.
    StartTimeOffset interface{}

    // Duration for the calculation (in milliseconds). The type is string. Units
    // are millisecond.
    Duration interface{}

    // IP-Frr Completed reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    CompletedSpfRun interface{}

    // Cumulative Number of Routes for all priorities. The type is interface{}
    // with range: 0..4294967295.
    TotalRoutes interface{}

    // Cumulative Number of Fully Protected Routes. The type is interface{} with
    // range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Cumulative Number of Partially Protected Routes. The type is interface{}
    // with range: 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage for all priorities. The type is string. Units are
    // percentage.
    Coverage interface{}

    // IP-Frr Statistics categorized by priority. The type is slice of
    // Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic.
    IpfrrStatistic []Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic

    // Remote Node Information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode.
    RemoteNode []Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode
}

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetFilter() yfilter.YFilter { return ipfrrEventOffline.YFilter }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) SetFilter(yf yfilter.YFilter) { ipfrrEventOffline.YFilter = yf }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "event-id-xr" { return "EventIdXr" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "trigger-spf-run" { return "TriggerSpfRun" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "start-time-offset" { return "StartTimeOffset" }
    if yname == "duration" { return "Duration" }
    if yname == "completed-spf-run" { return "CompletedSpfRun" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "ipfrr-statistic" { return "IpfrrStatistic" }
    if yname == "remote-node" { return "RemoteNode" }
    return ""
}

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetSegmentPath() string {
    return "ipfrr-event-offline" + "[event-id='" + fmt.Sprintf("%v", ipfrrEventOffline.EventId) + "']"
}

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-statistic" {
        for _, c := range ipfrrEventOffline.IpfrrStatistic {
            if ipfrrEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic{}
        ipfrrEventOffline.IpfrrStatistic = append(ipfrrEventOffline.IpfrrStatistic, child)
        return &ipfrrEventOffline.IpfrrStatistic[len(ipfrrEventOffline.IpfrrStatistic)-1]
    }
    if childYangName == "remote-node" {
        for _, c := range ipfrrEventOffline.RemoteNode {
            if ipfrrEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode{}
        ipfrrEventOffline.RemoteNode = append(ipfrrEventOffline.RemoteNode, child)
        return &ipfrrEventOffline.RemoteNode[len(ipfrrEventOffline.RemoteNode)-1]
    }
    return nil
}

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventOffline.IpfrrStatistic {
        children[ipfrrEventOffline.IpfrrStatistic[i].GetSegmentPath()] = &ipfrrEventOffline.IpfrrStatistic[i]
    }
    for i := range ipfrrEventOffline.RemoteNode {
        children[ipfrrEventOffline.RemoteNode[i].GetSegmentPath()] = &ipfrrEventOffline.RemoteNode[i]
    }
    return children
}

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = ipfrrEventOffline.EventId
    leafs["event-id-xr"] = ipfrrEventOffline.EventIdXr
    leafs["trigger-time"] = ipfrrEventOffline.TriggerTime
    leafs["trigger-spf-run"] = ipfrrEventOffline.TriggerSpfRun
    leafs["wait-time"] = ipfrrEventOffline.WaitTime
    leafs["start-time-offset"] = ipfrrEventOffline.StartTimeOffset
    leafs["duration"] = ipfrrEventOffline.Duration
    leafs["completed-spf-run"] = ipfrrEventOffline.CompletedSpfRun
    leafs["total-routes"] = ipfrrEventOffline.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrEventOffline.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrEventOffline.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrEventOffline.Coverage
    return leafs
}

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetYangName() string { return "ipfrr-event-offline" }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) SetParent(parent types.Entity) { ipfrrEventOffline.parent = parent }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetParent() types.Entity { return ipfrrEventOffline.parent }

func (ipfrrEventOffline *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetParentYangName() string { return "ipfrr-event-offlines" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic
// IP-Frr Statistics categorized by priority
type Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}

    // Local LFA Coverage in percentage. The type is string. Units are percentage.
    LocalLfaCoverage interface{}

    // Remote LFA Coverage in percentage. The type is string. Units are
    // percentage.
    RemoteLfaCoverage interface{}

    // Covearge is below Configured Threshold. The type is bool.
    BelowThreshold interface{}
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetFilter() yfilter.YFilter { return ipfrrStatistic.YFilter }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) SetFilter(yf yfilter.YFilter) { ipfrrStatistic.YFilter = yf }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "local-lfa-coverage" { return "LocalLfaCoverage" }
    if yname == "remote-lfa-coverage" { return "RemoteLfaCoverage" }
    if yname == "below-threshold" { return "BelowThreshold" }
    return ""
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetSegmentPath() string {
    return "ipfrr-statistic"
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = ipfrrStatistic.Priority
    leafs["total-routes"] = ipfrrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrStatistic.Coverage
    leafs["local-lfa-coverage"] = ipfrrStatistic.LocalLfaCoverage
    leafs["remote-lfa-coverage"] = ipfrrStatistic.RemoteLfaCoverage
    leafs["below-threshold"] = ipfrrStatistic.BelowThreshold
    return leafs
}

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetYangName() string { return "ipfrr-statistic" }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) SetParent(parent types.Entity) { ipfrrStatistic.parent = parent }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetParent() types.Entity { return ipfrrStatistic.parent }

func (ipfrrStatistic *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetParentYangName() string { return "ipfrr-event-offline" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode
// Remote Node Information
type Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote-LFA Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Number of paths protected by this Remote Node. The type is interface{} with
    // range: 0..4294967295.
    PathCount interface{}

    // Inuse time of the Remote Node (eg: Apr 24 13:16 :04.961). The type is
    // string.
    InUseTime interface{}

    // Protected Primary Paths. The type is slice of
    // Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath.
    PrimaryPath []Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetFilter() yfilter.YFilter { return remoteNode.YFilter }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) SetFilter(yf yfilter.YFilter) { remoteNode.YFilter = yf }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetGoName(yname string) string {
    if yname == "remote-node-id" { return "RemoteNodeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "path-count" { return "PathCount" }
    if yname == "in-use-time" { return "InUseTime" }
    if yname == "primary-path" { return "PrimaryPath" }
    return ""
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetSegmentPath() string {
    return "remote-node"
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary-path" {
        for _, c := range remoteNode.PrimaryPath {
            if remoteNode.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath{}
        remoteNode.PrimaryPath = append(remoteNode.PrimaryPath, child)
        return &remoteNode.PrimaryPath[len(remoteNode.PrimaryPath)-1]
    }
    return nil
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteNode.PrimaryPath {
        children[remoteNode.PrimaryPath[i].GetSegmentPath()] = &remoteNode.PrimaryPath[i]
    }
    return children
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["remote-node-id"] = remoteNode.RemoteNodeId
    leafs["interface-name"] = remoteNode.InterfaceName
    leafs["neighbour-address"] = remoteNode.NeighbourAddress
    leafs["path-count"] = remoteNode.PathCount
    leafs["in-use-time"] = remoteNode.InUseTime
    return leafs
}

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetBundleName() string { return "cisco_ios_xr" }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetYangName() string { return "remote-node" }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) SetParent(parent types.Entity) { remoteNode.parent = parent }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetParent() types.Entity { return remoteNode.parent }

func (remoteNode *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetParentYangName() string { return "ipfrr-event-offline" }

// Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath
// Protected Primary Paths
type Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetFilter() yfilter.YFilter { return primaryPath.YFilter }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) SetFilter(yf yfilter.YFilter) { primaryPath.YFilter = yf }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    return ""
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetSegmentPath() string {
    return "primary-path"
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = primaryPath.InterfaceName
    leafs["neighbour-address"] = primaryPath.NeighbourAddress
    return leafs
}

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetBundleName() string { return "cisco_ios_xr" }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetYangName() string { return "primary-path" }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) SetParent(parent types.Entity) { primaryPath.parent = parent }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetParent() types.Entity { return primaryPath.parent }

func (primaryPath *Rcmd_Ospf_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetParentYangName() string { return "remote-node" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines
// OSPF SPF run offline data
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Offline operational data for particular OSPF SPF run. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline.
    SpfRunOffline []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline
}

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetFilter() yfilter.YFilter { return spfRunOfflines.YFilter }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) SetFilter(yf yfilter.YFilter) { spfRunOfflines.YFilter = yf }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetGoName(yname string) string {
    if yname == "spf-run-offline" { return "SpfRunOffline" }
    return ""
}

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetSegmentPath() string {
    return "spf-run-offlines"
}

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-run-offline" {
        for _, c := range spfRunOfflines.SpfRunOffline {
            if spfRunOfflines.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline{}
        spfRunOfflines.SpfRunOffline = append(spfRunOfflines.SpfRunOffline, child)
        return &spfRunOfflines.SpfRunOffline[len(spfRunOfflines.SpfRunOffline)-1]
    }
    return nil
}

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfRunOfflines.SpfRunOffline {
        children[spfRunOfflines.SpfRunOffline[i].GetSegmentPath()] = &spfRunOfflines.SpfRunOffline[i]
    }
    return children
}

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetYangName() string { return "spf-run-offlines" }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) SetParent(parent types.Entity) { spfRunOfflines.parent = parent }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetParent() types.Entity { return spfRunOfflines.parent }

func (spfRunOfflines *Rcmd_Ospf_Instances_Instance_SpfRunOfflines) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline
// Offline operational data for particular OSPF
// SPF run
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific SPF run. The type is interface{} with
    // range: 1..4294967295.
    SpfRunNumber interface{}

    // SPF summary information.
    SpfSummary Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary

    // List of Dijkstra runs. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun.
    DijkstraRun []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun

    // Inter-area & external calculation information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal.
    InterAreaAndExternal []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal
}

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetFilter() yfilter.YFilter { return spfRunOffline.YFilter }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) SetFilter(yf yfilter.YFilter) { spfRunOffline.YFilter = yf }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetGoName(yname string) string {
    if yname == "spf-run-number" { return "SpfRunNumber" }
    if yname == "spf-summary" { return "SpfSummary" }
    if yname == "dijkstra-run" { return "DijkstraRun" }
    if yname == "inter-area-and-external" { return "InterAreaAndExternal" }
    return ""
}

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetSegmentPath() string {
    return "spf-run-offline" + "[spf-run-number='" + fmt.Sprintf("%v", spfRunOffline.SpfRunNumber) + "']"
}

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-summary" {
        return &spfRunOffline.SpfSummary
    }
    if childYangName == "dijkstra-run" {
        for _, c := range spfRunOffline.DijkstraRun {
            if spfRunOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun{}
        spfRunOffline.DijkstraRun = append(spfRunOffline.DijkstraRun, child)
        return &spfRunOffline.DijkstraRun[len(spfRunOffline.DijkstraRun)-1]
    }
    if childYangName == "inter-area-and-external" {
        for _, c := range spfRunOffline.InterAreaAndExternal {
            if spfRunOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal{}
        spfRunOffline.InterAreaAndExternal = append(spfRunOffline.InterAreaAndExternal, child)
        return &spfRunOffline.InterAreaAndExternal[len(spfRunOffline.InterAreaAndExternal)-1]
    }
    return nil
}

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-summary"] = &spfRunOffline.SpfSummary
    for i := range spfRunOffline.DijkstraRun {
        children[spfRunOffline.DijkstraRun[i].GetSegmentPath()] = &spfRunOffline.DijkstraRun[i]
    }
    for i := range spfRunOffline.InterAreaAndExternal {
        children[spfRunOffline.InterAreaAndExternal[i].GetSegmentPath()] = &spfRunOffline.InterAreaAndExternal[i]
    }
    return children
}

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-run-number"] = spfRunOffline.SpfRunNumber
    return leafs
}

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetYangName() string { return "spf-run-offline" }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) SetParent(parent types.Entity) { spfRunOffline.parent = parent }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetParent() types.Entity { return spfRunOffline.parent }

func (spfRunOffline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetParentYangName() string { return "spf-run-offlines" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary
// SPF summary information
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF state. The type is RcmdSpfState.
    State interface{}

    // Whether the event has all information. The type is bool.
    IsDataComplete interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Trigger time (in hh:mm:ss.msec). The type is string.
    TriggerTime interface{}

    // Start time (offset from event trigger time in ss .msec). The type is
    // string.
    StartTime interface{}

    // Duration of complete SPF calculation (in ss .msec). The type is string.
    Duration interface{}

    // Total number of Dijkstra runs. The type is interface{} with range:
    // 0..65535.
    TotalDijkstraRuns interface{}

    // Total number of inter-area/external computation batches. The type is
    // interface{} with range: 0..65535.
    TotalInterAreaAndExternalBatches interface{}

    // Total number of Type 1/2 LSA changes processed. The type is interface{}
    // with range: 0..65535.
    TotalType12LsaChanges interface{}

    // Total number of Type 3/5/7 LSA changes processed. The type is interface{}
    // with range: 0..65535.
    TotalType357LsaChanges interface{}

    // Convergence information summary on per-priority basis. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary.
    PrioritySummary []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetFilter() yfilter.YFilter { return spfSummary.YFilter }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) SetFilter(yf yfilter.YFilter) { spfSummary.YFilter = yf }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetGoName(yname string) string {
    if yname == "state" { return "State" }
    if yname == "is-data-complete" { return "IsDataComplete" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "start-time" { return "StartTime" }
    if yname == "duration" { return "Duration" }
    if yname == "total-dijkstra-runs" { return "TotalDijkstraRuns" }
    if yname == "total-inter-area-and-external-batches" { return "TotalInterAreaAndExternalBatches" }
    if yname == "total-type12lsa-changes" { return "TotalType12LsaChanges" }
    if yname == "total-type357lsa-changes" { return "TotalType357LsaChanges" }
    if yname == "priority-summary" { return "PrioritySummary" }
    return ""
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetSegmentPath() string {
    return "spf-summary"
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        for _, c := range spfSummary.PrioritySummary {
            if spfSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary{}
        spfSummary.PrioritySummary = append(spfSummary.PrioritySummary, child)
        return &spfSummary.PrioritySummary[len(spfSummary.PrioritySummary)-1]
    }
    return nil
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfSummary.PrioritySummary {
        children[spfSummary.PrioritySummary[i].GetSegmentPath()] = &spfSummary.PrioritySummary[i]
    }
    return children
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state"] = spfSummary.State
    leafs["is-data-complete"] = spfSummary.IsDataComplete
    leafs["threshold-exceeded"] = spfSummary.ThresholdExceeded
    leafs["trigger-time"] = spfSummary.TriggerTime
    leafs["start-time"] = spfSummary.StartTime
    leafs["duration"] = spfSummary.Duration
    leafs["total-dijkstra-runs"] = spfSummary.TotalDijkstraRuns
    leafs["total-inter-area-and-external-batches"] = spfSummary.TotalInterAreaAndExternalBatches
    leafs["total-type12lsa-changes"] = spfSummary.TotalType12LsaChanges
    leafs["total-type357lsa-changes"] = spfSummary.TotalType357LsaChanges
    return leafs
}

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetBundleName() string { return "cisco_ios_xr" }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetYangName() string { return "spf-summary" }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) SetParent(parent types.Entity) { spfSummary.parent = parent }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetParent() types.Entity { return spfSummary.parent }

func (spfSummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary
// Convergence information summary on per-priority
// basis
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetParentYangName() string { return "spf-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun
// List of Dijkstra runs
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area Dijkstra run number. The type is interface{} with range:
    // 0..4294967295.
    DijkstraRunNumber interface{}

    // Area ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AreaId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Trigger time (in hh:mm:ss.msec). The type is string.
    TriggerTime interface{}

    // Start time (offset from event trigger time in ss .msec). The type is
    // string.
    StartTime interface{}

    // Wait time (offset from event trigger time in ss .msec). The type is
    // interface{} with range: 0..4294967295.
    WaitTime interface{}

    // Duration of Dijktra calculation (in ss.msec). The type is string.
    Duration interface{}

    // LSA that triggered the Dijkstra run. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa.
    TriggerLsa []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa

    // Convergence information on per-priority basis. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority.
    Priority []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority

    // List of type 1/2 LSA changes processed. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed.
    LsaProcessed []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetFilter() yfilter.YFilter { return dijkstraRun.YFilter }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) SetFilter(yf yfilter.YFilter) { dijkstraRun.YFilter = yf }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetGoName(yname string) string {
    if yname == "dijkstra-run-number" { return "DijkstraRunNumber" }
    if yname == "area-id" { return "AreaId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "start-time" { return "StartTime" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "duration" { return "Duration" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetSegmentPath() string {
    return "dijkstra-run"
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trigger-lsa" {
        for _, c := range dijkstraRun.TriggerLsa {
            if dijkstraRun.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa{}
        dijkstraRun.TriggerLsa = append(dijkstraRun.TriggerLsa, child)
        return &dijkstraRun.TriggerLsa[len(dijkstraRun.TriggerLsa)-1]
    }
    if childYangName == "priority" {
        for _, c := range dijkstraRun.Priority {
            if dijkstraRun.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority{}
        dijkstraRun.Priority = append(dijkstraRun.Priority, child)
        return &dijkstraRun.Priority[len(dijkstraRun.Priority)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range dijkstraRun.LsaProcessed {
            if dijkstraRun.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed{}
        dijkstraRun.LsaProcessed = append(dijkstraRun.LsaProcessed, child)
        return &dijkstraRun.LsaProcessed[len(dijkstraRun.LsaProcessed)-1]
    }
    return nil
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range dijkstraRun.TriggerLsa {
        children[dijkstraRun.TriggerLsa[i].GetSegmentPath()] = &dijkstraRun.TriggerLsa[i]
    }
    for i := range dijkstraRun.Priority {
        children[dijkstraRun.Priority[i].GetSegmentPath()] = &dijkstraRun.Priority[i]
    }
    for i := range dijkstraRun.LsaProcessed {
        children[dijkstraRun.LsaProcessed[i].GetSegmentPath()] = &dijkstraRun.LsaProcessed[i]
    }
    return children
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra-run-number"] = dijkstraRun.DijkstraRunNumber
    leafs["area-id"] = dijkstraRun.AreaId
    leafs["threshold-exceeded"] = dijkstraRun.ThresholdExceeded
    leafs["trigger-time"] = dijkstraRun.TriggerTime
    leafs["start-time"] = dijkstraRun.StartTime
    leafs["wait-time"] = dijkstraRun.WaitTime
    leafs["duration"] = dijkstraRun.Duration
    return leafs
}

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetBundleName() string { return "cisco_ios_xr" }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetYangName() string { return "dijkstra-run" }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) SetParent(parent types.Entity) { dijkstraRun.parent = parent }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetParent() types.Entity { return dijkstraRun.parent }

func (dijkstraRun *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa
// LSA that triggered the Dijkstra run
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_TriggerLsa) GetParentYangName() string { return "dijkstra-run" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority
// Convergence information on per-priority basis
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of the priority.
    PrioritySummary Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary

    // Convergence timeline details. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline.
    ConvergenceTimeline []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline

    // List of Leaf Networks Added. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded.
    LeafNetworksAdded []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded

    // List of Leaf Networks Deleted. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted.
    LeafNetworksDeleted []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetGoName(yname string) string {
    if yname == "priority-summary" { return "PrioritySummary" }
    if yname == "convergence-timeline" { return "ConvergenceTimeline" }
    if yname == "leaf-networks-added" { return "LeafNetworksAdded" }
    if yname == "leaf-networks-deleted" { return "LeafNetworksDeleted" }
    return ""
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        return &priority.PrioritySummary
    }
    if childYangName == "convergence-timeline" {
        for _, c := range priority.ConvergenceTimeline {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline{}
        priority.ConvergenceTimeline = append(priority.ConvergenceTimeline, child)
        return &priority.ConvergenceTimeline[len(priority.ConvergenceTimeline)-1]
    }
    if childYangName == "leaf-networks-added" {
        for _, c := range priority.LeafNetworksAdded {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded{}
        priority.LeafNetworksAdded = append(priority.LeafNetworksAdded, child)
        return &priority.LeafNetworksAdded[len(priority.LeafNetworksAdded)-1]
    }
    if childYangName == "leaf-networks-deleted" {
        for _, c := range priority.LeafNetworksDeleted {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted{}
        priority.LeafNetworksDeleted = append(priority.LeafNetworksDeleted, child)
        return &priority.LeafNetworksDeleted[len(priority.LeafNetworksDeleted)-1]
    }
    return nil
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["priority-summary"] = &priority.PrioritySummary
    for i := range priority.ConvergenceTimeline {
        children[priority.ConvergenceTimeline[i].GetSegmentPath()] = &priority.ConvergenceTimeline[i]
    }
    for i := range priority.LeafNetworksAdded {
        children[priority.LeafNetworksAdded[i].GetSegmentPath()] = &priority.LeafNetworksAdded[i]
    }
    for i := range priority.LeafNetworksDeleted {
        children[priority.LeafNetworksDeleted[i].GetSegmentPath()] = &priority.LeafNetworksDeleted[i]
    }
    return children
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority) GetParentYangName() string { return "dijkstra-run" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary
// Summary of the priority
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline
// Convergence timeline details
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol).
    RouteOrigin Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin

    // Entry point of IPv4 RIB.
    RiBv4Enter Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter

    // Exit point from IPv4 RIB to FIBs.
    RiBv4Exit Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit

    // Route Redistribute point from IPv4 RIB to LDP.
    RiBv4Redistribute Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute

    // Entry point of LDP.
    LdpEnter Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter

    // Exit point of LDP to LSD.
    LdpExit Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit

    // Entry point of LSD.
    LsdEnter Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter

    // Exit point of LSD to FIBs.
    LsdExit Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetFilter() yfilter.YFilter { return convergenceTimeline.YFilter }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) SetFilter(yf yfilter.YFilter) { convergenceTimeline.YFilter = yf }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetSegmentPath() string {
    return "convergence-timeline"
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-origin" {
        return &convergenceTimeline.RouteOrigin
    }
    if childYangName == "ri-bv4-enter" {
        return &convergenceTimeline.RiBv4Enter
    }
    if childYangName == "ri-bv4-exit" {
        return &convergenceTimeline.RiBv4Exit
    }
    if childYangName == "ri-bv4-redistribute" {
        return &convergenceTimeline.RiBv4Redistribute
    }
    if childYangName == "ldp-enter" {
        return &convergenceTimeline.LdpEnter
    }
    if childYangName == "ldp-exit" {
        return &convergenceTimeline.LdpExit
    }
    if childYangName == "lsd-enter" {
        return &convergenceTimeline.LsdEnter
    }
    if childYangName == "lsd-exit" {
        return &convergenceTimeline.LsdExit
    }
    if childYangName == "lc-ip" {
        for _, c := range convergenceTimeline.LcIp {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp{}
        convergenceTimeline.LcIp = append(convergenceTimeline.LcIp, child)
        return &convergenceTimeline.LcIp[len(convergenceTimeline.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range convergenceTimeline.LcMpls {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls{}
        convergenceTimeline.LcMpls = append(convergenceTimeline.LcMpls, child)
        return &convergenceTimeline.LcMpls[len(convergenceTimeline.LcMpls)-1]
    }
    return nil
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-origin"] = &convergenceTimeline.RouteOrigin
    children["ri-bv4-enter"] = &convergenceTimeline.RiBv4Enter
    children["ri-bv4-exit"] = &convergenceTimeline.RiBv4Exit
    children["ri-bv4-redistribute"] = &convergenceTimeline.RiBv4Redistribute
    children["ldp-enter"] = &convergenceTimeline.LdpEnter
    children["ldp-exit"] = &convergenceTimeline.LdpExit
    children["lsd-enter"] = &convergenceTimeline.LsdEnter
    children["lsd-exit"] = &convergenceTimeline.LsdExit
    for i := range convergenceTimeline.LcIp {
        children[convergenceTimeline.LcIp[i].GetSegmentPath()] = &convergenceTimeline.LcIp[i]
    }
    for i := range convergenceTimeline.LcMpls {
        children[convergenceTimeline.LcMpls[i].GetSegmentPath()] = &convergenceTimeline.LcMpls[i]
    }
    return children
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetBundleName() string { return "cisco_ios_xr" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetYangName() string { return "convergence-timeline" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) SetParent(parent types.Entity) { convergenceTimeline.parent = parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetParent() types.Entity { return convergenceTimeline.parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin
// Route origin (routing protocol)
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetFilter() yfilter.YFilter { return routeOrigin.YFilter }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) SetFilter(yf yfilter.YFilter) { routeOrigin.YFilter = yf }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetSegmentPath() string {
    return "route-origin"
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = routeOrigin.StartTime
    leafs["end-time"] = routeOrigin.EndTime
    leafs["duration"] = routeOrigin.Duration
    return leafs
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetYangName() string { return "route-origin" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) SetParent(parent types.Entity) { routeOrigin.parent = parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetParent() types.Entity { return routeOrigin.parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RouteOrigin) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter
// Entry point of IPv4 RIB
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetFilter() yfilter.YFilter { return riBv4Enter.YFilter }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) SetFilter(yf yfilter.YFilter) { riBv4Enter.YFilter = yf }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetSegmentPath() string {
    return "ri-bv4-enter"
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Enter.StartTime
    leafs["end-time"] = riBv4Enter.EndTime
    leafs["duration"] = riBv4Enter.Duration
    return leafs
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetYangName() string { return "ri-bv4-enter" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) SetParent(parent types.Entity) { riBv4Enter.parent = parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetParent() types.Entity { return riBv4Enter.parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Enter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit
// Exit point from IPv4 RIB to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetFilter() yfilter.YFilter { return riBv4Exit.YFilter }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) SetFilter(yf yfilter.YFilter) { riBv4Exit.YFilter = yf }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetSegmentPath() string {
    return "ri-bv4-exit"
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Exit.StartTime
    leafs["end-time"] = riBv4Exit.EndTime
    leafs["duration"] = riBv4Exit.Duration
    return leafs
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetYangName() string { return "ri-bv4-exit" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) SetParent(parent types.Entity) { riBv4Exit.parent = parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetParent() types.Entity { return riBv4Exit.parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Exit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute
// Route Redistribute point from IPv4 RIB to LDP
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetFilter() yfilter.YFilter { return riBv4Redistribute.YFilter }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) SetFilter(yf yfilter.YFilter) { riBv4Redistribute.YFilter = yf }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetSegmentPath() string {
    return "ri-bv4-redistribute"
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Redistribute.StartTime
    leafs["end-time"] = riBv4Redistribute.EndTime
    leafs["duration"] = riBv4Redistribute.Duration
    return leafs
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetYangName() string { return "ri-bv4-redistribute" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) SetParent(parent types.Entity) { riBv4Redistribute.parent = parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParent() types.Entity { return riBv4Redistribute.parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter
// Entry point of LDP
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetFilter() yfilter.YFilter { return ldpEnter.YFilter }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) SetFilter(yf yfilter.YFilter) { ldpEnter.YFilter = yf }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetSegmentPath() string {
    return "ldp-enter"
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpEnter.StartTime
    leafs["end-time"] = ldpEnter.EndTime
    leafs["duration"] = ldpEnter.Duration
    return leafs
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetBundleName() string { return "cisco_ios_xr" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetYangName() string { return "ldp-enter" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) SetParent(parent types.Entity) { ldpEnter.parent = parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetParent() types.Entity { return ldpEnter.parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit
// Exit point of LDP to LSD
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetFilter() yfilter.YFilter { return ldpExit.YFilter }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) SetFilter(yf yfilter.YFilter) { ldpExit.YFilter = yf }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetSegmentPath() string {
    return "ldp-exit"
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpExit.StartTime
    leafs["end-time"] = ldpExit.EndTime
    leafs["duration"] = ldpExit.Duration
    return leafs
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetBundleName() string { return "cisco_ios_xr" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetYangName() string { return "ldp-exit" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) SetParent(parent types.Entity) { ldpExit.parent = parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetParent() types.Entity { return ldpExit.parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LdpExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter
// Entry point of LSD
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetFilter() yfilter.YFilter { return lsdEnter.YFilter }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) SetFilter(yf yfilter.YFilter) { lsdEnter.YFilter = yf }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetSegmentPath() string {
    return "lsd-enter"
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdEnter.StartTime
    leafs["end-time"] = lsdEnter.EndTime
    leafs["duration"] = lsdEnter.Duration
    return leafs
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetBundleName() string { return "cisco_ios_xr" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetYangName() string { return "lsd-enter" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) SetParent(parent types.Entity) { lsdEnter.parent = parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetParent() types.Entity { return lsdEnter.parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit
// Exit point of LSD to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetFilter() yfilter.YFilter { return lsdExit.YFilter }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) SetFilter(yf yfilter.YFilter) { lsdExit.YFilter = yf }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetSegmentPath() string {
    return "lsd-exit"
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdExit.StartTime
    leafs["end-time"] = lsdExit.EndTime
    leafs["duration"] = lsdExit.Duration
    return leafs
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetBundleName() string { return "cisco_ios_xr" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetYangName() string { return "lsd-exit" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) SetParent(parent types.Entity) { lsdExit.parent = parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetParent() types.Entity { return lsdExit.parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LsdExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcIp.FibComplete
    }
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcIp.FibComplete
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParentYangName() string { return "lc-ip" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcMpls.FibComplete
    }
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcMpls.FibComplete
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParentYangName() string { return "lc-mpls" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded
// List of Leaf Networks Added
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetFilter() yfilter.YFilter { return leafNetworksAdded.YFilter }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) SetFilter(yf yfilter.YFilter) { leafNetworksAdded.YFilter = yf }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetSegmentPath() string {
    return "leaf-networks-added"
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksAdded.Address
    leafs["net-mask"] = leafNetworksAdded.NetMask
    return leafs
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetYangName() string { return "leaf-networks-added" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) SetParent(parent types.Entity) { leafNetworksAdded.parent = parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetParent() types.Entity { return leafNetworksAdded.parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksAdded) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted
// List of Leaf Networks Deleted
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetFilter() yfilter.YFilter { return leafNetworksDeleted.YFilter }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) SetFilter(yf yfilter.YFilter) { leafNetworksDeleted.YFilter = yf }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetSegmentPath() string {
    return "leaf-networks-deleted"
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksDeleted.Address
    leafs["net-mask"] = leafNetworksDeleted.NetMask
    return leafs
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetYangName() string { return "leaf-networks-deleted" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) SetParent(parent types.Entity) { leafNetworksDeleted.parent = parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetParent() types.Entity { return leafNetworksDeleted.parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_Priority_LeafNetworksDeleted) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed
// List of type 1/2 LSA changes processed
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_DijkstraRun_LsaProcessed) GetParentYangName() string { return "dijkstra-run" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal
// Inter-area & external calculation information
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Convergence information on a per-priority basis. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority.
    Priority []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetFilter() yfilter.YFilter { return interAreaAndExternal.YFilter }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) SetFilter(yf yfilter.YFilter) { interAreaAndExternal.YFilter = yf }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    return ""
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetSegmentPath() string {
    return "inter-area-and-external"
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority" {
        for _, c := range interAreaAndExternal.Priority {
            if interAreaAndExternal.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority{}
        interAreaAndExternal.Priority = append(interAreaAndExternal.Priority, child)
        return &interAreaAndExternal.Priority[len(interAreaAndExternal.Priority)-1]
    }
    return nil
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interAreaAndExternal.Priority {
        children[interAreaAndExternal.Priority[i].GetSegmentPath()] = &interAreaAndExternal.Priority[i]
    }
    return children
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetYangName() string { return "inter-area-and-external" }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) SetParent(parent types.Entity) { interAreaAndExternal.parent = parent }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetParent() types.Entity { return interAreaAndExternal.parent }

func (interAreaAndExternal *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority
// Convergence information on a per-priority basis
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of the priority.
    PrioritySummary Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary

    // Convergence timeline details. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline.
    ConvergenceTimeline []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline

    // List of Leaf Networks Added. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded.
    LeafNetworksAdded []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded

    // List of Leaf Networks Deleted. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted.
    LeafNetworksDeleted []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetGoName(yname string) string {
    if yname == "priority-summary" { return "PrioritySummary" }
    if yname == "convergence-timeline" { return "ConvergenceTimeline" }
    if yname == "leaf-networks-added" { return "LeafNetworksAdded" }
    if yname == "leaf-networks-deleted" { return "LeafNetworksDeleted" }
    return ""
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        return &priority.PrioritySummary
    }
    if childYangName == "convergence-timeline" {
        for _, c := range priority.ConvergenceTimeline {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline{}
        priority.ConvergenceTimeline = append(priority.ConvergenceTimeline, child)
        return &priority.ConvergenceTimeline[len(priority.ConvergenceTimeline)-1]
    }
    if childYangName == "leaf-networks-added" {
        for _, c := range priority.LeafNetworksAdded {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded{}
        priority.LeafNetworksAdded = append(priority.LeafNetworksAdded, child)
        return &priority.LeafNetworksAdded[len(priority.LeafNetworksAdded)-1]
    }
    if childYangName == "leaf-networks-deleted" {
        for _, c := range priority.LeafNetworksDeleted {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted{}
        priority.LeafNetworksDeleted = append(priority.LeafNetworksDeleted, child)
        return &priority.LeafNetworksDeleted[len(priority.LeafNetworksDeleted)-1]
    }
    return nil
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["priority-summary"] = &priority.PrioritySummary
    for i := range priority.ConvergenceTimeline {
        children[priority.ConvergenceTimeline[i].GetSegmentPath()] = &priority.ConvergenceTimeline[i]
    }
    for i := range priority.LeafNetworksAdded {
        children[priority.LeafNetworksAdded[i].GetSegmentPath()] = &priority.LeafNetworksAdded[i]
    }
    for i := range priority.LeafNetworksDeleted {
        children[priority.LeafNetworksDeleted[i].GetSegmentPath()] = &priority.LeafNetworksDeleted[i]
    }
    return children
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority) GetParentYangName() string { return "inter-area-and-external" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary
// Summary of the priority
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Number of Type 3 LSA. The type is interface{} with range: 0..4294967295.
    Type3LsAs interface{}

    // Number of Type 4 LSA. The type is interface{} with range: 0..4294967295.
    Type4LsAs interface{}

    // Number of Type 5/7 LSA. The type is interface{} with range: 0..4294967295.
    Type57LsAs interface{}

    // Route statistics.
    RouteStatistics Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "type3ls-as" { return "Type3LsAs" }
    if yname == "type4ls-as" { return "Type4LsAs" }
    if yname == "type57ls-as" { return "Type57LsAs" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    return ""
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    return nil
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    return children
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    leafs["type3ls-as"] = prioritySummary.Type3LsAs
    leafs["type4ls-as"] = prioritySummary.Type4LsAs
    leafs["type57ls-as"] = prioritySummary.Type57LsAs
    return leafs
}

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline
// Convergence timeline details
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol).
    RouteOrigin Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin

    // Entry point of IPv4 RIB.
    RiBv4Enter Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter

    // Exit point from IPv4 RIB to FIBs.
    RiBv4Exit Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit

    // Route Redistribute point from IPv4 RIB to LDP.
    RiBv4Redistribute Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute

    // Entry point of LDP.
    LdpEnter Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter

    // Exit point of LDP to LSD.
    LdpExit Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit

    // Entry point of LSD.
    LsdEnter Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter

    // Exit point of LSD to FIBs.
    LsdExit Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetFilter() yfilter.YFilter { return convergenceTimeline.YFilter }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) SetFilter(yf yfilter.YFilter) { convergenceTimeline.YFilter = yf }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetSegmentPath() string {
    return "convergence-timeline"
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-origin" {
        return &convergenceTimeline.RouteOrigin
    }
    if childYangName == "ri-bv4-enter" {
        return &convergenceTimeline.RiBv4Enter
    }
    if childYangName == "ri-bv4-exit" {
        return &convergenceTimeline.RiBv4Exit
    }
    if childYangName == "ri-bv4-redistribute" {
        return &convergenceTimeline.RiBv4Redistribute
    }
    if childYangName == "ldp-enter" {
        return &convergenceTimeline.LdpEnter
    }
    if childYangName == "ldp-exit" {
        return &convergenceTimeline.LdpExit
    }
    if childYangName == "lsd-enter" {
        return &convergenceTimeline.LsdEnter
    }
    if childYangName == "lsd-exit" {
        return &convergenceTimeline.LsdExit
    }
    if childYangName == "lc-ip" {
        for _, c := range convergenceTimeline.LcIp {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp{}
        convergenceTimeline.LcIp = append(convergenceTimeline.LcIp, child)
        return &convergenceTimeline.LcIp[len(convergenceTimeline.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range convergenceTimeline.LcMpls {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls{}
        convergenceTimeline.LcMpls = append(convergenceTimeline.LcMpls, child)
        return &convergenceTimeline.LcMpls[len(convergenceTimeline.LcMpls)-1]
    }
    return nil
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-origin"] = &convergenceTimeline.RouteOrigin
    children["ri-bv4-enter"] = &convergenceTimeline.RiBv4Enter
    children["ri-bv4-exit"] = &convergenceTimeline.RiBv4Exit
    children["ri-bv4-redistribute"] = &convergenceTimeline.RiBv4Redistribute
    children["ldp-enter"] = &convergenceTimeline.LdpEnter
    children["ldp-exit"] = &convergenceTimeline.LdpExit
    children["lsd-enter"] = &convergenceTimeline.LsdEnter
    children["lsd-exit"] = &convergenceTimeline.LsdExit
    for i := range convergenceTimeline.LcIp {
        children[convergenceTimeline.LcIp[i].GetSegmentPath()] = &convergenceTimeline.LcIp[i]
    }
    for i := range convergenceTimeline.LcMpls {
        children[convergenceTimeline.LcMpls[i].GetSegmentPath()] = &convergenceTimeline.LcMpls[i]
    }
    return children
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetBundleName() string { return "cisco_ios_xr" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetYangName() string { return "convergence-timeline" }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) SetParent(parent types.Entity) { convergenceTimeline.parent = parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetParent() types.Entity { return convergenceTimeline.parent }

func (convergenceTimeline *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin
// Route origin (routing protocol)
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetFilter() yfilter.YFilter { return routeOrigin.YFilter }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) SetFilter(yf yfilter.YFilter) { routeOrigin.YFilter = yf }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetSegmentPath() string {
    return "route-origin"
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = routeOrigin.StartTime
    leafs["end-time"] = routeOrigin.EndTime
    leafs["duration"] = routeOrigin.Duration
    return leafs
}

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetYangName() string { return "route-origin" }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) SetParent(parent types.Entity) { routeOrigin.parent = parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetParent() types.Entity { return routeOrigin.parent }

func (routeOrigin *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RouteOrigin) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter
// Entry point of IPv4 RIB
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetFilter() yfilter.YFilter { return riBv4Enter.YFilter }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) SetFilter(yf yfilter.YFilter) { riBv4Enter.YFilter = yf }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetSegmentPath() string {
    return "ri-bv4-enter"
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Enter.StartTime
    leafs["end-time"] = riBv4Enter.EndTime
    leafs["duration"] = riBv4Enter.Duration
    return leafs
}

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetYangName() string { return "ri-bv4-enter" }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) SetParent(parent types.Entity) { riBv4Enter.parent = parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetParent() types.Entity { return riBv4Enter.parent }

func (riBv4Enter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Enter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit
// Exit point from IPv4 RIB to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetFilter() yfilter.YFilter { return riBv4Exit.YFilter }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) SetFilter(yf yfilter.YFilter) { riBv4Exit.YFilter = yf }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetSegmentPath() string {
    return "ri-bv4-exit"
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Exit.StartTime
    leafs["end-time"] = riBv4Exit.EndTime
    leafs["duration"] = riBv4Exit.Duration
    return leafs
}

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetYangName() string { return "ri-bv4-exit" }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) SetParent(parent types.Entity) { riBv4Exit.parent = parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetParent() types.Entity { return riBv4Exit.parent }

func (riBv4Exit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Exit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute
// Route Redistribute point from IPv4 RIB to LDP
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetFilter() yfilter.YFilter { return riBv4Redistribute.YFilter }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) SetFilter(yf yfilter.YFilter) { riBv4Redistribute.YFilter = yf }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetSegmentPath() string {
    return "ri-bv4-redistribute"
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Redistribute.StartTime
    leafs["end-time"] = riBv4Redistribute.EndTime
    leafs["duration"] = riBv4Redistribute.Duration
    return leafs
}

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetYangName() string { return "ri-bv4-redistribute" }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) SetParent(parent types.Entity) { riBv4Redistribute.parent = parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParent() types.Entity { return riBv4Redistribute.parent }

func (riBv4Redistribute *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter
// Entry point of LDP
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetFilter() yfilter.YFilter { return ldpEnter.YFilter }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) SetFilter(yf yfilter.YFilter) { ldpEnter.YFilter = yf }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetSegmentPath() string {
    return "ldp-enter"
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpEnter.StartTime
    leafs["end-time"] = ldpEnter.EndTime
    leafs["duration"] = ldpEnter.Duration
    return leafs
}

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetBundleName() string { return "cisco_ios_xr" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetYangName() string { return "ldp-enter" }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) SetParent(parent types.Entity) { ldpEnter.parent = parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetParent() types.Entity { return ldpEnter.parent }

func (ldpEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit
// Exit point of LDP to LSD
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetFilter() yfilter.YFilter { return ldpExit.YFilter }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) SetFilter(yf yfilter.YFilter) { ldpExit.YFilter = yf }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetSegmentPath() string {
    return "ldp-exit"
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpExit.StartTime
    leafs["end-time"] = ldpExit.EndTime
    leafs["duration"] = ldpExit.Duration
    return leafs
}

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetBundleName() string { return "cisco_ios_xr" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetYangName() string { return "ldp-exit" }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) SetParent(parent types.Entity) { ldpExit.parent = parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetParent() types.Entity { return ldpExit.parent }

func (ldpExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LdpExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter
// Entry point of LSD
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetFilter() yfilter.YFilter { return lsdEnter.YFilter }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) SetFilter(yf yfilter.YFilter) { lsdEnter.YFilter = yf }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetSegmentPath() string {
    return "lsd-enter"
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdEnter.StartTime
    leafs["end-time"] = lsdEnter.EndTime
    leafs["duration"] = lsdEnter.Duration
    return leafs
}

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetBundleName() string { return "cisco_ios_xr" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetYangName() string { return "lsd-enter" }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) SetParent(parent types.Entity) { lsdEnter.parent = parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetParent() types.Entity { return lsdEnter.parent }

func (lsdEnter *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit
// Exit point of LSD to FIBs
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetFilter() yfilter.YFilter { return lsdExit.YFilter }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) SetFilter(yf yfilter.YFilter) { lsdExit.YFilter = yf }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetSegmentPath() string {
    return "lsd-exit"
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdExit.StartTime
    leafs["end-time"] = lsdExit.EndTime
    leafs["duration"] = lsdExit.Duration
    return leafs
}

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetBundleName() string { return "cisco_ios_xr" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetYangName() string { return "lsd-exit" }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) SetParent(parent types.Entity) { lsdExit.parent = parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetParent() types.Entity { return lsdExit.parent }

func (lsdExit *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LsdExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcIp.FibComplete
    }
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcIp.FibComplete
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParentYangName() string { return "lc-ip" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcMpls.FibComplete
    }
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcMpls.FibComplete
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete
// Completion point of FIB
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParentYangName() string { return "lc-mpls" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded
// List of Leaf Networks Added
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetFilter() yfilter.YFilter { return leafNetworksAdded.YFilter }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) SetFilter(yf yfilter.YFilter) { leafNetworksAdded.YFilter = yf }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetSegmentPath() string {
    return "leaf-networks-added"
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksAdded.Address
    leafs["net-mask"] = leafNetworksAdded.NetMask
    return leafs
}

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetYangName() string { return "leaf-networks-added" }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) SetParent(parent types.Entity) { leafNetworksAdded.parent = parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetParent() types.Entity { return leafNetworksAdded.parent }

func (leafNetworksAdded *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksAdded) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted
// List of Leaf Networks Deleted
type Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetFilter() yfilter.YFilter { return leafNetworksDeleted.YFilter }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) SetFilter(yf yfilter.YFilter) { leafNetworksDeleted.YFilter = yf }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetSegmentPath() string {
    return "leaf-networks-deleted"
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksDeleted.Address
    leafs["net-mask"] = leafNetworksDeleted.NetMask
    return leafs
}

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetYangName() string { return "leaf-networks-deleted" }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) SetParent(parent types.Entity) { leafNetworksDeleted.parent = parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetParent() types.Entity { return leafNetworksDeleted.parent }

func (leafNetworksDeleted *Rcmd_Ospf_Instances_Instance_SpfRunOfflines_SpfRunOffline_InterAreaAndExternal_Priority_LeafNetworksDeleted) GetParentYangName() string { return "priority" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries
// OSPF Summary-External Prefix events summary
// data
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPF Summary-External Prefix Event data. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary.
    SummaryExternalEventSummary []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary
}

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetFilter() yfilter.YFilter { return summaryExternalEventSummaries.YFilter }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) SetFilter(yf yfilter.YFilter) { summaryExternalEventSummaries.YFilter = yf }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetGoName(yname string) string {
    if yname == "summary-external-event-summary" { return "SummaryExternalEventSummary" }
    return ""
}

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetSegmentPath() string {
    return "summary-external-event-summaries"
}

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-external-event-summary" {
        for _, c := range summaryExternalEventSummaries.SummaryExternalEventSummary {
            if summaryExternalEventSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary{}
        summaryExternalEventSummaries.SummaryExternalEventSummary = append(summaryExternalEventSummaries.SummaryExternalEventSummary, child)
        return &summaryExternalEventSummaries.SummaryExternalEventSummary[len(summaryExternalEventSummaries.SummaryExternalEventSummary)-1]
    }
    return nil
}

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryExternalEventSummaries.SummaryExternalEventSummary {
        children[summaryExternalEventSummaries.SummaryExternalEventSummary[i].GetSegmentPath()] = &summaryExternalEventSummaries.SummaryExternalEventSummary[i]
    }
    return children
}

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetYangName() string { return "summary-external-event-summaries" }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) SetParent(parent types.Entity) { summaryExternalEventSummaries.parent = parent }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetParent() types.Entity { return summaryExternalEventSummaries.parent }

func (summaryExternalEventSummaries *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary
// OSPF Summary-External Prefix Event data
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Referenced SPF Run No (0 - Not Applicable). The type is interface{} with
    // range: 0..4294967295.
    SpfRunNo interface{}

    // Referenced IP-FRR Event ID (0 - Not Applicable). The type is interface{}
    // with range: 0..4294967295.
    IpfrrEventId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Event processed priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Route Type intra/inter/l1/l2. The type is RcmdShowRoute.
    RouteType interface{}

    // Route Path Change Type. The type is RcmdShowRoutePathChange.
    RoutePathChangeType interface{}

    // Protocol route cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Event trigger time. The type is string.
    TriggerTime interface{}

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime

    // Path information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path.
    Path []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path

    // LSA that triggered this event. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa.
    TriggerLsa []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa

    // Timeline information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine.
    TimeLine []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine

    // List of LSAs processed. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed.
    LsaProcessed []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed
}

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetFilter() yfilter.YFilter { return summaryExternalEventSummary.YFilter }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) SetFilter(yf yfilter.YFilter) { summaryExternalEventSummary.YFilter = yf }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "spf-run-no" { return "SpfRunNo" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "priority" { return "Priority" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "route-type" { return "RouteType" }
    if yname == "route-path-change-type" { return "RoutePathChangeType" }
    if yname == "cost" { return "Cost" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "path" { return "Path" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "time-line" { return "TimeLine" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetSegmentPath() string {
    return "summary-external-event-summary" + "[event-id='" + fmt.Sprintf("%v", summaryExternalEventSummary.EventId) + "']"
}

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-convergence-time" {
        return &summaryExternalEventSummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &summaryExternalEventSummary.MplsConvergenceTime
    }
    if childYangName == "path" {
        for _, c := range summaryExternalEventSummary.Path {
            if summaryExternalEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path{}
        summaryExternalEventSummary.Path = append(summaryExternalEventSummary.Path, child)
        return &summaryExternalEventSummary.Path[len(summaryExternalEventSummary.Path)-1]
    }
    if childYangName == "trigger-lsa" {
        for _, c := range summaryExternalEventSummary.TriggerLsa {
            if summaryExternalEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa{}
        summaryExternalEventSummary.TriggerLsa = append(summaryExternalEventSummary.TriggerLsa, child)
        return &summaryExternalEventSummary.TriggerLsa[len(summaryExternalEventSummary.TriggerLsa)-1]
    }
    if childYangName == "time-line" {
        for _, c := range summaryExternalEventSummary.TimeLine {
            if summaryExternalEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine{}
        summaryExternalEventSummary.TimeLine = append(summaryExternalEventSummary.TimeLine, child)
        return &summaryExternalEventSummary.TimeLine[len(summaryExternalEventSummary.TimeLine)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range summaryExternalEventSummary.LsaProcessed {
            if summaryExternalEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed{}
        summaryExternalEventSummary.LsaProcessed = append(summaryExternalEventSummary.LsaProcessed, child)
        return &summaryExternalEventSummary.LsaProcessed[len(summaryExternalEventSummary.LsaProcessed)-1]
    }
    return nil
}

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-convergence-time"] = &summaryExternalEventSummary.IpConvergenceTime
    children["mpls-convergence-time"] = &summaryExternalEventSummary.MplsConvergenceTime
    for i := range summaryExternalEventSummary.Path {
        children[summaryExternalEventSummary.Path[i].GetSegmentPath()] = &summaryExternalEventSummary.Path[i]
    }
    for i := range summaryExternalEventSummary.TriggerLsa {
        children[summaryExternalEventSummary.TriggerLsa[i].GetSegmentPath()] = &summaryExternalEventSummary.TriggerLsa[i]
    }
    for i := range summaryExternalEventSummary.TimeLine {
        children[summaryExternalEventSummary.TimeLine[i].GetSegmentPath()] = &summaryExternalEventSummary.TimeLine[i]
    }
    for i := range summaryExternalEventSummary.LsaProcessed {
        children[summaryExternalEventSummary.LsaProcessed[i].GetSegmentPath()] = &summaryExternalEventSummary.LsaProcessed[i]
    }
    return children
}

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = summaryExternalEventSummary.EventId
    leafs["prefix"] = summaryExternalEventSummary.Prefix
    leafs["prefix-lenth"] = summaryExternalEventSummary.PrefixLenth
    leafs["spf-run-no"] = summaryExternalEventSummary.SpfRunNo
    leafs["ipfrr-event-id"] = summaryExternalEventSummary.IpfrrEventId
    leafs["threshold-exceeded"] = summaryExternalEventSummary.ThresholdExceeded
    leafs["priority"] = summaryExternalEventSummary.Priority
    leafs["change-type"] = summaryExternalEventSummary.ChangeType
    leafs["route-type"] = summaryExternalEventSummary.RouteType
    leafs["route-path-change-type"] = summaryExternalEventSummary.RoutePathChangeType
    leafs["cost"] = summaryExternalEventSummary.Cost
    leafs["trigger-time"] = summaryExternalEventSummary.TriggerTime
    return leafs
}

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetBundleName() string { return "cisco_ios_xr" }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetYangName() string { return "summary-external-event-summary" }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) SetParent(parent types.Entity) { summaryExternalEventSummary.parent = parent }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetParent() types.Entity { return summaryExternalEventSummary.parent }

func (summaryExternalEventSummary *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary) GetParentYangName() string { return "summary-external-event-summaries" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_IpConvergenceTime) GetParentYangName() string { return "summary-external-event-summary" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_MplsConvergenceTime) GetParentYangName() string { return "summary-external-event-summary" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path
// Path information
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Backup Path Informatoin. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath.
    LfaPath []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetFilter() yfilter.YFilter { return path.YFilter }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) SetFilter(yf yfilter.YFilter) { path.YFilter = yf }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "lfa-path" { return "LfaPath" }
    return ""
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetSegmentPath() string {
    return "path"
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lfa-path" {
        for _, c := range path.LfaPath {
            if path.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath{}
        path.LfaPath = append(path.LfaPath, child)
        return &path.LfaPath[len(path.LfaPath)-1]
    }
    return nil
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range path.LfaPath {
        children[path.LfaPath[i].GetSegmentPath()] = &path.LfaPath[i]
    }
    return children
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = path.InterfaceName
    leafs["neighbour-address"] = path.NeighbourAddress
    leafs["change-type"] = path.ChangeType
    leafs["path-metric"] = path.PathMetric
    return leafs
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetBundleName() string { return "cisco_ios_xr" }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetYangName() string { return "path" }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) SetParent(parent types.Entity) { path.parent = parent }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetParent() types.Entity { return path.parent }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path) GetParentYangName() string { return "summary-external-event-summary" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath
// Backup Path Informatoin
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of LFA. The type is RcmdShowIpfrrLfa.
    LfaType interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Remote Node ID, in case of Remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetFilter() yfilter.YFilter { return lfaPath.YFilter }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) SetFilter(yf yfilter.YFilter) { lfaPath.YFilter = yf }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetGoName(yname string) string {
    if yname == "lfa-type" { return "LfaType" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "remote-node-id" { return "RemoteNodeId" }
    return ""
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetSegmentPath() string {
    return "lfa-path"
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lfa-type"] = lfaPath.LfaType
    leafs["interface-name"] = lfaPath.InterfaceName
    leafs["neighbour-address"] = lfaPath.NeighbourAddress
    leafs["change-type"] = lfaPath.ChangeType
    leafs["path-metric"] = lfaPath.PathMetric
    leafs["remote-node-id"] = lfaPath.RemoteNodeId
    return leafs
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetBundleName() string { return "cisco_ios_xr" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetYangName() string { return "lfa-path" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) SetParent(parent types.Entity) { lfaPath.parent = parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetParent() types.Entity { return lfaPath.parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_Path_LfaPath) GetParentYangName() string { return "path" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa
// LSA that triggered this event
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TriggerLsa) GetParentYangName() string { return "summary-external-event-summary" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine
// Timeline information
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol). The type is string.
    RouteOrigin interface{}

    // Entry point of IPv4 RIB. The type is string.
    RiBv4Enter interface{}

    // Exit point from IPv4 RIB to FIBs. The type is string.
    RiBv4Exit interface{}

    // Route Redistribute point from IPv4 RIB to LDP. The type is string.
    RiBv4Redistribute interface{}

    // Entry point of LDP. The type is string.
    LdpEnter interface{}

    // Exit point of LDP to LSD. The type is string.
    LdpExit interface{}

    // Entry point of LSD. The type is string.
    LsdEnter interface{}

    // Exit point of LSD to FIBs. The type is string.
    LsdExit interface{}

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetFilter() yfilter.YFilter { return timeLine.YFilter }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) SetFilter(yf yfilter.YFilter) { timeLine.YFilter = yf }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetSegmentPath() string {
    return "time-line"
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lc-ip" {
        for _, c := range timeLine.LcIp {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp{}
        timeLine.LcIp = append(timeLine.LcIp, child)
        return &timeLine.LcIp[len(timeLine.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range timeLine.LcMpls {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls{}
        timeLine.LcMpls = append(timeLine.LcMpls, child)
        return &timeLine.LcMpls[len(timeLine.LcMpls)-1]
    }
    return nil
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range timeLine.LcIp {
        children[timeLine.LcIp[i].GetSegmentPath()] = &timeLine.LcIp[i]
    }
    for i := range timeLine.LcMpls {
        children[timeLine.LcMpls[i].GetSegmentPath()] = &timeLine.LcMpls[i]
    }
    return children
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-origin"] = timeLine.RouteOrigin
    leafs["ri-bv4-enter"] = timeLine.RiBv4Enter
    leafs["ri-bv4-exit"] = timeLine.RiBv4Exit
    leafs["ri-bv4-redistribute"] = timeLine.RiBv4Redistribute
    leafs["ldp-enter"] = timeLine.LdpEnter
    leafs["ldp-exit"] = timeLine.LdpExit
    leafs["lsd-enter"] = timeLine.LsdEnter
    leafs["lsd-exit"] = timeLine.LsdExit
    return leafs
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetBundleName() string { return "cisco_ios_xr" }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetYangName() string { return "time-line" }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) SetParent(parent types.Entity) { timeLine.parent = parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetParent() types.Entity { return timeLine.parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine) GetParentYangName() string { return "summary-external-event-summary" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    leafs["fib-complete"] = lcIp.FibComplete
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcIp) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    leafs["fib-complete"] = lcMpls.FibComplete
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_TimeLine_LcMpls) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed
// List of LSAs processed
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventSummaries_SummaryExternalEventSummary_LsaProcessed) GetParentYangName() string { return "summary-external-event-summary" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries
// OSPF Prefix events summary data
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPF Prefix Event data. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary.
    PrefixEventSummary []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary
}

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetFilter() yfilter.YFilter { return prefixEventSummaries.YFilter }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) SetFilter(yf yfilter.YFilter) { prefixEventSummaries.YFilter = yf }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetGoName(yname string) string {
    if yname == "prefix-event-summary" { return "PrefixEventSummary" }
    return ""
}

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetSegmentPath() string {
    return "prefix-event-summaries"
}

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-event-summary" {
        for _, c := range prefixEventSummaries.PrefixEventSummary {
            if prefixEventSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary{}
        prefixEventSummaries.PrefixEventSummary = append(prefixEventSummaries.PrefixEventSummary, child)
        return &prefixEventSummaries.PrefixEventSummary[len(prefixEventSummaries.PrefixEventSummary)-1]
    }
    return nil
}

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixEventSummaries.PrefixEventSummary {
        children[prefixEventSummaries.PrefixEventSummary[i].GetSegmentPath()] = &prefixEventSummaries.PrefixEventSummary[i]
    }
    return children
}

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetYangName() string { return "prefix-event-summaries" }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) SetParent(parent types.Entity) { prefixEventSummaries.parent = parent }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetParent() types.Entity { return prefixEventSummaries.parent }

func (prefixEventSummaries *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary
// OSPF Prefix Event data
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Referenced SPF Run No (0 - Not Applicable). The type is interface{} with
    // range: 0..4294967295.
    SpfRunNo interface{}

    // Referenced IP-FRR Event ID (0 - Not Applicable). The type is interface{}
    // with range: 0..4294967295.
    IpfrrEventId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Event processed priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Route Type intra/inter/l1/l2. The type is RcmdShowRoute.
    RouteType interface{}

    // Route Path Change Type. The type is RcmdShowRoutePathChange.
    RoutePathChangeType interface{}

    // Protocol route cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Event trigger time. The type is string.
    TriggerTime interface{}

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime

    // Path information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path.
    Path []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path

    // LSA that triggered this event. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa.
    TriggerLsa []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa

    // Timeline information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine.
    TimeLine []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine

    // List of LSAs processed. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed.
    LsaProcessed []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed
}

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetFilter() yfilter.YFilter { return prefixEventSummary.YFilter }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) SetFilter(yf yfilter.YFilter) { prefixEventSummary.YFilter = yf }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "spf-run-no" { return "SpfRunNo" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "priority" { return "Priority" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "route-type" { return "RouteType" }
    if yname == "route-path-change-type" { return "RoutePathChangeType" }
    if yname == "cost" { return "Cost" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "path" { return "Path" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "time-line" { return "TimeLine" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetSegmentPath() string {
    return "prefix-event-summary" + "[event-id='" + fmt.Sprintf("%v", prefixEventSummary.EventId) + "']"
}

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-convergence-time" {
        return &prefixEventSummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prefixEventSummary.MplsConvergenceTime
    }
    if childYangName == "path" {
        for _, c := range prefixEventSummary.Path {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path{}
        prefixEventSummary.Path = append(prefixEventSummary.Path, child)
        return &prefixEventSummary.Path[len(prefixEventSummary.Path)-1]
    }
    if childYangName == "trigger-lsa" {
        for _, c := range prefixEventSummary.TriggerLsa {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa{}
        prefixEventSummary.TriggerLsa = append(prefixEventSummary.TriggerLsa, child)
        return &prefixEventSummary.TriggerLsa[len(prefixEventSummary.TriggerLsa)-1]
    }
    if childYangName == "time-line" {
        for _, c := range prefixEventSummary.TimeLine {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine{}
        prefixEventSummary.TimeLine = append(prefixEventSummary.TimeLine, child)
        return &prefixEventSummary.TimeLine[len(prefixEventSummary.TimeLine)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range prefixEventSummary.LsaProcessed {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed{}
        prefixEventSummary.LsaProcessed = append(prefixEventSummary.LsaProcessed, child)
        return &prefixEventSummary.LsaProcessed[len(prefixEventSummary.LsaProcessed)-1]
    }
    return nil
}

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-convergence-time"] = &prefixEventSummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prefixEventSummary.MplsConvergenceTime
    for i := range prefixEventSummary.Path {
        children[prefixEventSummary.Path[i].GetSegmentPath()] = &prefixEventSummary.Path[i]
    }
    for i := range prefixEventSummary.TriggerLsa {
        children[prefixEventSummary.TriggerLsa[i].GetSegmentPath()] = &prefixEventSummary.TriggerLsa[i]
    }
    for i := range prefixEventSummary.TimeLine {
        children[prefixEventSummary.TimeLine[i].GetSegmentPath()] = &prefixEventSummary.TimeLine[i]
    }
    for i := range prefixEventSummary.LsaProcessed {
        children[prefixEventSummary.LsaProcessed[i].GetSegmentPath()] = &prefixEventSummary.LsaProcessed[i]
    }
    return children
}

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = prefixEventSummary.EventId
    leafs["prefix"] = prefixEventSummary.Prefix
    leafs["prefix-lenth"] = prefixEventSummary.PrefixLenth
    leafs["spf-run-no"] = prefixEventSummary.SpfRunNo
    leafs["ipfrr-event-id"] = prefixEventSummary.IpfrrEventId
    leafs["threshold-exceeded"] = prefixEventSummary.ThresholdExceeded
    leafs["priority"] = prefixEventSummary.Priority
    leafs["change-type"] = prefixEventSummary.ChangeType
    leafs["route-type"] = prefixEventSummary.RouteType
    leafs["route-path-change-type"] = prefixEventSummary.RoutePathChangeType
    leafs["cost"] = prefixEventSummary.Cost
    leafs["trigger-time"] = prefixEventSummary.TriggerTime
    return leafs
}

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetYangName() string { return "prefix-event-summary" }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) SetParent(parent types.Entity) { prefixEventSummary.parent = parent }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetParent() types.Entity { return prefixEventSummary.parent }

func (prefixEventSummary *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetParentYangName() string { return "prefix-event-summaries" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path
// Path information
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Backup Path Informatoin. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath.
    LfaPath []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetFilter() yfilter.YFilter { return path.YFilter }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) SetFilter(yf yfilter.YFilter) { path.YFilter = yf }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "lfa-path" { return "LfaPath" }
    return ""
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetSegmentPath() string {
    return "path"
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lfa-path" {
        for _, c := range path.LfaPath {
            if path.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath{}
        path.LfaPath = append(path.LfaPath, child)
        return &path.LfaPath[len(path.LfaPath)-1]
    }
    return nil
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range path.LfaPath {
        children[path.LfaPath[i].GetSegmentPath()] = &path.LfaPath[i]
    }
    return children
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = path.InterfaceName
    leafs["neighbour-address"] = path.NeighbourAddress
    leafs["change-type"] = path.ChangeType
    leafs["path-metric"] = path.PathMetric
    return leafs
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetBundleName() string { return "cisco_ios_xr" }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetYangName() string { return "path" }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) SetParent(parent types.Entity) { path.parent = parent }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetParent() types.Entity { return path.parent }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath
// Backup Path Informatoin
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of LFA. The type is RcmdShowIpfrrLfa.
    LfaType interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Remote Node ID, in case of Remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetFilter() yfilter.YFilter { return lfaPath.YFilter }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) SetFilter(yf yfilter.YFilter) { lfaPath.YFilter = yf }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetGoName(yname string) string {
    if yname == "lfa-type" { return "LfaType" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "remote-node-id" { return "RemoteNodeId" }
    return ""
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetSegmentPath() string {
    return "lfa-path"
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lfa-type"] = lfaPath.LfaType
    leafs["interface-name"] = lfaPath.InterfaceName
    leafs["neighbour-address"] = lfaPath.NeighbourAddress
    leafs["change-type"] = lfaPath.ChangeType
    leafs["path-metric"] = lfaPath.PathMetric
    leafs["remote-node-id"] = lfaPath.RemoteNodeId
    return leafs
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetBundleName() string { return "cisco_ios_xr" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetYangName() string { return "lfa-path" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) SetParent(parent types.Entity) { lfaPath.parent = parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetParent() types.Entity { return lfaPath.parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetParentYangName() string { return "path" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa
// LSA that triggered this event
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine
// Timeline information
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol). The type is string.
    RouteOrigin interface{}

    // Entry point of IPv4 RIB. The type is string.
    RiBv4Enter interface{}

    // Exit point from IPv4 RIB to FIBs. The type is string.
    RiBv4Exit interface{}

    // Route Redistribute point from IPv4 RIB to LDP. The type is string.
    RiBv4Redistribute interface{}

    // Entry point of LDP. The type is string.
    LdpEnter interface{}

    // Exit point of LDP to LSD. The type is string.
    LdpExit interface{}

    // Entry point of LSD. The type is string.
    LsdEnter interface{}

    // Exit point of LSD to FIBs. The type is string.
    LsdExit interface{}

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetFilter() yfilter.YFilter { return timeLine.YFilter }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) SetFilter(yf yfilter.YFilter) { timeLine.YFilter = yf }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetSegmentPath() string {
    return "time-line"
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lc-ip" {
        for _, c := range timeLine.LcIp {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp{}
        timeLine.LcIp = append(timeLine.LcIp, child)
        return &timeLine.LcIp[len(timeLine.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range timeLine.LcMpls {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls{}
        timeLine.LcMpls = append(timeLine.LcMpls, child)
        return &timeLine.LcMpls[len(timeLine.LcMpls)-1]
    }
    return nil
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range timeLine.LcIp {
        children[timeLine.LcIp[i].GetSegmentPath()] = &timeLine.LcIp[i]
    }
    for i := range timeLine.LcMpls {
        children[timeLine.LcMpls[i].GetSegmentPath()] = &timeLine.LcMpls[i]
    }
    return children
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-origin"] = timeLine.RouteOrigin
    leafs["ri-bv4-enter"] = timeLine.RiBv4Enter
    leafs["ri-bv4-exit"] = timeLine.RiBv4Exit
    leafs["ri-bv4-redistribute"] = timeLine.RiBv4Redistribute
    leafs["ldp-enter"] = timeLine.LdpEnter
    leafs["ldp-exit"] = timeLine.LdpExit
    leafs["lsd-enter"] = timeLine.LsdEnter
    leafs["lsd-exit"] = timeLine.LsdExit
    return leafs
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetBundleName() string { return "cisco_ios_xr" }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetYangName() string { return "time-line" }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) SetParent(parent types.Entity) { timeLine.parent = parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetParent() types.Entity { return timeLine.parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    leafs["fib-complete"] = lcIp.FibComplete
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    leafs["fib-complete"] = lcMpls.FibComplete
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed
// List of LSAs processed
type Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines
// OSPF Summary-External Prefix events offline
// data
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Offline operational data for particular OSPF Prefix Event. The type is
    // slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline.
    SummaryExternalEventOffline []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline
}

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetFilter() yfilter.YFilter { return summaryExternalEventOfflines.YFilter }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) SetFilter(yf yfilter.YFilter) { summaryExternalEventOfflines.YFilter = yf }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetGoName(yname string) string {
    if yname == "summary-external-event-offline" { return "SummaryExternalEventOffline" }
    return ""
}

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetSegmentPath() string {
    return "summary-external-event-offlines"
}

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-external-event-offline" {
        for _, c := range summaryExternalEventOfflines.SummaryExternalEventOffline {
            if summaryExternalEventOfflines.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline{}
        summaryExternalEventOfflines.SummaryExternalEventOffline = append(summaryExternalEventOfflines.SummaryExternalEventOffline, child)
        return &summaryExternalEventOfflines.SummaryExternalEventOffline[len(summaryExternalEventOfflines.SummaryExternalEventOffline)-1]
    }
    return nil
}

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryExternalEventOfflines.SummaryExternalEventOffline {
        children[summaryExternalEventOfflines.SummaryExternalEventOffline[i].GetSegmentPath()] = &summaryExternalEventOfflines.SummaryExternalEventOffline[i]
    }
    return children
}

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetBundleName() string { return "cisco_ios_xr" }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetYangName() string { return "summary-external-event-offlines" }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) SetParent(parent types.Entity) { summaryExternalEventOfflines.parent = parent }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetParent() types.Entity { return summaryExternalEventOfflines.parent }

func (summaryExternalEventOfflines *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline
// Offline operational data for particular OSPF
// Prefix Event
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Referenced SPF Run No (0 - Not Applicable). The type is interface{} with
    // range: 0..4294967295.
    SpfRunNo interface{}

    // Referenced IP-FRR Event ID (0 - Not Applicable). The type is interface{}
    // with range: 0..4294967295.
    IpfrrEventId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Event processed priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Route Type intra/inter/l1/l2. The type is RcmdShowRoute.
    RouteType interface{}

    // Route Path Change Type. The type is RcmdShowRoutePathChange.
    RoutePathChangeType interface{}

    // Protocol route cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Event trigger time. The type is string.
    TriggerTime interface{}

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime

    // Path information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path.
    Path []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path

    // LSA that triggered this event. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa.
    TriggerLsa []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa

    // Timeline information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine.
    TimeLine []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine

    // List of LSAs processed. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed.
    LsaProcessed []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed
}

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetFilter() yfilter.YFilter { return summaryExternalEventOffline.YFilter }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) SetFilter(yf yfilter.YFilter) { summaryExternalEventOffline.YFilter = yf }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "spf-run-no" { return "SpfRunNo" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "priority" { return "Priority" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "route-type" { return "RouteType" }
    if yname == "route-path-change-type" { return "RoutePathChangeType" }
    if yname == "cost" { return "Cost" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "path" { return "Path" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "time-line" { return "TimeLine" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetSegmentPath() string {
    return "summary-external-event-offline" + "[event-id='" + fmt.Sprintf("%v", summaryExternalEventOffline.EventId) + "']"
}

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-convergence-time" {
        return &summaryExternalEventOffline.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &summaryExternalEventOffline.MplsConvergenceTime
    }
    if childYangName == "path" {
        for _, c := range summaryExternalEventOffline.Path {
            if summaryExternalEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path{}
        summaryExternalEventOffline.Path = append(summaryExternalEventOffline.Path, child)
        return &summaryExternalEventOffline.Path[len(summaryExternalEventOffline.Path)-1]
    }
    if childYangName == "trigger-lsa" {
        for _, c := range summaryExternalEventOffline.TriggerLsa {
            if summaryExternalEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa{}
        summaryExternalEventOffline.TriggerLsa = append(summaryExternalEventOffline.TriggerLsa, child)
        return &summaryExternalEventOffline.TriggerLsa[len(summaryExternalEventOffline.TriggerLsa)-1]
    }
    if childYangName == "time-line" {
        for _, c := range summaryExternalEventOffline.TimeLine {
            if summaryExternalEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine{}
        summaryExternalEventOffline.TimeLine = append(summaryExternalEventOffline.TimeLine, child)
        return &summaryExternalEventOffline.TimeLine[len(summaryExternalEventOffline.TimeLine)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range summaryExternalEventOffline.LsaProcessed {
            if summaryExternalEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed{}
        summaryExternalEventOffline.LsaProcessed = append(summaryExternalEventOffline.LsaProcessed, child)
        return &summaryExternalEventOffline.LsaProcessed[len(summaryExternalEventOffline.LsaProcessed)-1]
    }
    return nil
}

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-convergence-time"] = &summaryExternalEventOffline.IpConvergenceTime
    children["mpls-convergence-time"] = &summaryExternalEventOffline.MplsConvergenceTime
    for i := range summaryExternalEventOffline.Path {
        children[summaryExternalEventOffline.Path[i].GetSegmentPath()] = &summaryExternalEventOffline.Path[i]
    }
    for i := range summaryExternalEventOffline.TriggerLsa {
        children[summaryExternalEventOffline.TriggerLsa[i].GetSegmentPath()] = &summaryExternalEventOffline.TriggerLsa[i]
    }
    for i := range summaryExternalEventOffline.TimeLine {
        children[summaryExternalEventOffline.TimeLine[i].GetSegmentPath()] = &summaryExternalEventOffline.TimeLine[i]
    }
    for i := range summaryExternalEventOffline.LsaProcessed {
        children[summaryExternalEventOffline.LsaProcessed[i].GetSegmentPath()] = &summaryExternalEventOffline.LsaProcessed[i]
    }
    return children
}

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = summaryExternalEventOffline.EventId
    leafs["prefix"] = summaryExternalEventOffline.Prefix
    leafs["prefix-lenth"] = summaryExternalEventOffline.PrefixLenth
    leafs["spf-run-no"] = summaryExternalEventOffline.SpfRunNo
    leafs["ipfrr-event-id"] = summaryExternalEventOffline.IpfrrEventId
    leafs["threshold-exceeded"] = summaryExternalEventOffline.ThresholdExceeded
    leafs["priority"] = summaryExternalEventOffline.Priority
    leafs["change-type"] = summaryExternalEventOffline.ChangeType
    leafs["route-type"] = summaryExternalEventOffline.RouteType
    leafs["route-path-change-type"] = summaryExternalEventOffline.RoutePathChangeType
    leafs["cost"] = summaryExternalEventOffline.Cost
    leafs["trigger-time"] = summaryExternalEventOffline.TriggerTime
    return leafs
}

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetBundleName() string { return "cisco_ios_xr" }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetYangName() string { return "summary-external-event-offline" }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) SetParent(parent types.Entity) { summaryExternalEventOffline.parent = parent }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetParent() types.Entity { return summaryExternalEventOffline.parent }

func (summaryExternalEventOffline *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline) GetParentYangName() string { return "summary-external-event-offlines" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_IpConvergenceTime) GetParentYangName() string { return "summary-external-event-offline" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_MplsConvergenceTime) GetParentYangName() string { return "summary-external-event-offline" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path
// Path information
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Backup Path Informatoin. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath.
    LfaPath []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetFilter() yfilter.YFilter { return path.YFilter }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) SetFilter(yf yfilter.YFilter) { path.YFilter = yf }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "lfa-path" { return "LfaPath" }
    return ""
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetSegmentPath() string {
    return "path"
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lfa-path" {
        for _, c := range path.LfaPath {
            if path.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath{}
        path.LfaPath = append(path.LfaPath, child)
        return &path.LfaPath[len(path.LfaPath)-1]
    }
    return nil
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range path.LfaPath {
        children[path.LfaPath[i].GetSegmentPath()] = &path.LfaPath[i]
    }
    return children
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = path.InterfaceName
    leafs["neighbour-address"] = path.NeighbourAddress
    leafs["change-type"] = path.ChangeType
    leafs["path-metric"] = path.PathMetric
    return leafs
}

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetBundleName() string { return "cisco_ios_xr" }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetYangName() string { return "path" }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) SetParent(parent types.Entity) { path.parent = parent }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetParent() types.Entity { return path.parent }

func (path *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path) GetParentYangName() string { return "summary-external-event-offline" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath
// Backup Path Informatoin
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of LFA. The type is RcmdShowIpfrrLfa.
    LfaType interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Remote Node ID, in case of Remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetFilter() yfilter.YFilter { return lfaPath.YFilter }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) SetFilter(yf yfilter.YFilter) { lfaPath.YFilter = yf }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetGoName(yname string) string {
    if yname == "lfa-type" { return "LfaType" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "remote-node-id" { return "RemoteNodeId" }
    return ""
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetSegmentPath() string {
    return "lfa-path"
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lfa-type"] = lfaPath.LfaType
    leafs["interface-name"] = lfaPath.InterfaceName
    leafs["neighbour-address"] = lfaPath.NeighbourAddress
    leafs["change-type"] = lfaPath.ChangeType
    leafs["path-metric"] = lfaPath.PathMetric
    leafs["remote-node-id"] = lfaPath.RemoteNodeId
    return leafs
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetBundleName() string { return "cisco_ios_xr" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetYangName() string { return "lfa-path" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) SetParent(parent types.Entity) { lfaPath.parent = parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetParent() types.Entity { return lfaPath.parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_Path_LfaPath) GetParentYangName() string { return "path" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa
// LSA that triggered this event
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TriggerLsa) GetParentYangName() string { return "summary-external-event-offline" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine
// Timeline information
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol). The type is string.
    RouteOrigin interface{}

    // Entry point of IPv4 RIB. The type is string.
    RiBv4Enter interface{}

    // Exit point from IPv4 RIB to FIBs. The type is string.
    RiBv4Exit interface{}

    // Route Redistribute point from IPv4 RIB to LDP. The type is string.
    RiBv4Redistribute interface{}

    // Entry point of LDP. The type is string.
    LdpEnter interface{}

    // Exit point of LDP to LSD. The type is string.
    LdpExit interface{}

    // Entry point of LSD. The type is string.
    LsdEnter interface{}

    // Exit point of LSD to FIBs. The type is string.
    LsdExit interface{}

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetFilter() yfilter.YFilter { return timeLine.YFilter }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) SetFilter(yf yfilter.YFilter) { timeLine.YFilter = yf }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetSegmentPath() string {
    return "time-line"
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lc-ip" {
        for _, c := range timeLine.LcIp {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp{}
        timeLine.LcIp = append(timeLine.LcIp, child)
        return &timeLine.LcIp[len(timeLine.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range timeLine.LcMpls {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls{}
        timeLine.LcMpls = append(timeLine.LcMpls, child)
        return &timeLine.LcMpls[len(timeLine.LcMpls)-1]
    }
    return nil
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range timeLine.LcIp {
        children[timeLine.LcIp[i].GetSegmentPath()] = &timeLine.LcIp[i]
    }
    for i := range timeLine.LcMpls {
        children[timeLine.LcMpls[i].GetSegmentPath()] = &timeLine.LcMpls[i]
    }
    return children
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-origin"] = timeLine.RouteOrigin
    leafs["ri-bv4-enter"] = timeLine.RiBv4Enter
    leafs["ri-bv4-exit"] = timeLine.RiBv4Exit
    leafs["ri-bv4-redistribute"] = timeLine.RiBv4Redistribute
    leafs["ldp-enter"] = timeLine.LdpEnter
    leafs["ldp-exit"] = timeLine.LdpExit
    leafs["lsd-enter"] = timeLine.LsdEnter
    leafs["lsd-exit"] = timeLine.LsdExit
    return leafs
}

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetBundleName() string { return "cisco_ios_xr" }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetYangName() string { return "time-line" }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) SetParent(parent types.Entity) { timeLine.parent = parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetParent() types.Entity { return timeLine.parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine) GetParentYangName() string { return "summary-external-event-offline" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    leafs["fib-complete"] = lcIp.FibComplete
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcIp) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    leafs["fib-complete"] = lcMpls.FibComplete
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_TimeLine_LcMpls) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed
// List of LSAs processed
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_SummaryExternalEventOfflines_SummaryExternalEventOffline_LsaProcessed) GetParentYangName() string { return "summary-external-event-offline" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines
// OSPF Prefix events offline data
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Offline operational data for particular OSPF Prefix Event. The type is
    // slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline.
    PrefixEventOffline []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline
}

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetFilter() yfilter.YFilter { return prefixEventOfflines.YFilter }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) SetFilter(yf yfilter.YFilter) { prefixEventOfflines.YFilter = yf }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetGoName(yname string) string {
    if yname == "prefix-event-offline" { return "PrefixEventOffline" }
    return ""
}

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetSegmentPath() string {
    return "prefix-event-offlines"
}

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-event-offline" {
        for _, c := range prefixEventOfflines.PrefixEventOffline {
            if prefixEventOfflines.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline{}
        prefixEventOfflines.PrefixEventOffline = append(prefixEventOfflines.PrefixEventOffline, child)
        return &prefixEventOfflines.PrefixEventOffline[len(prefixEventOfflines.PrefixEventOffline)-1]
    }
    return nil
}

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixEventOfflines.PrefixEventOffline {
        children[prefixEventOfflines.PrefixEventOffline[i].GetSegmentPath()] = &prefixEventOfflines.PrefixEventOffline[i]
    }
    return children
}

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetYangName() string { return "prefix-event-offlines" }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) SetParent(parent types.Entity) { prefixEventOfflines.parent = parent }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetParent() types.Entity { return prefixEventOfflines.parent }

func (prefixEventOfflines *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines) GetParentYangName() string { return "instance" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline
// Offline operational data for particular OSPF
// Prefix Event
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Referenced SPF Run No (0 - Not Applicable). The type is interface{} with
    // range: 0..4294967295.
    SpfRunNo interface{}

    // Referenced IP-FRR Event ID (0 - Not Applicable). The type is interface{}
    // with range: 0..4294967295.
    IpfrrEventId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Event processed priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Route Type intra/inter/l1/l2. The type is RcmdShowRoute.
    RouteType interface{}

    // Route Path Change Type. The type is RcmdShowRoutePathChange.
    RoutePathChangeType interface{}

    // Protocol route cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Event trigger time. The type is string.
    TriggerTime interface{}

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime

    // Path information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path.
    Path []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path

    // LSA that triggered this event. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa.
    TriggerLsa []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa

    // Timeline information. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine.
    TimeLine []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine

    // List of LSAs processed. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed.
    LsaProcessed []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed
}

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetFilter() yfilter.YFilter { return prefixEventOffline.YFilter }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) SetFilter(yf yfilter.YFilter) { prefixEventOffline.YFilter = yf }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "spf-run-no" { return "SpfRunNo" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "priority" { return "Priority" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "route-type" { return "RouteType" }
    if yname == "route-path-change-type" { return "RoutePathChangeType" }
    if yname == "cost" { return "Cost" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "path" { return "Path" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "time-line" { return "TimeLine" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetSegmentPath() string {
    return "prefix-event-offline" + "[event-id='" + fmt.Sprintf("%v", prefixEventOffline.EventId) + "']"
}

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-convergence-time" {
        return &prefixEventOffline.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prefixEventOffline.MplsConvergenceTime
    }
    if childYangName == "path" {
        for _, c := range prefixEventOffline.Path {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path{}
        prefixEventOffline.Path = append(prefixEventOffline.Path, child)
        return &prefixEventOffline.Path[len(prefixEventOffline.Path)-1]
    }
    if childYangName == "trigger-lsa" {
        for _, c := range prefixEventOffline.TriggerLsa {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa{}
        prefixEventOffline.TriggerLsa = append(prefixEventOffline.TriggerLsa, child)
        return &prefixEventOffline.TriggerLsa[len(prefixEventOffline.TriggerLsa)-1]
    }
    if childYangName == "time-line" {
        for _, c := range prefixEventOffline.TimeLine {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine{}
        prefixEventOffline.TimeLine = append(prefixEventOffline.TimeLine, child)
        return &prefixEventOffline.TimeLine[len(prefixEventOffline.TimeLine)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range prefixEventOffline.LsaProcessed {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed{}
        prefixEventOffline.LsaProcessed = append(prefixEventOffline.LsaProcessed, child)
        return &prefixEventOffline.LsaProcessed[len(prefixEventOffline.LsaProcessed)-1]
    }
    return nil
}

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-convergence-time"] = &prefixEventOffline.IpConvergenceTime
    children["mpls-convergence-time"] = &prefixEventOffline.MplsConvergenceTime
    for i := range prefixEventOffline.Path {
        children[prefixEventOffline.Path[i].GetSegmentPath()] = &prefixEventOffline.Path[i]
    }
    for i := range prefixEventOffline.TriggerLsa {
        children[prefixEventOffline.TriggerLsa[i].GetSegmentPath()] = &prefixEventOffline.TriggerLsa[i]
    }
    for i := range prefixEventOffline.TimeLine {
        children[prefixEventOffline.TimeLine[i].GetSegmentPath()] = &prefixEventOffline.TimeLine[i]
    }
    for i := range prefixEventOffline.LsaProcessed {
        children[prefixEventOffline.LsaProcessed[i].GetSegmentPath()] = &prefixEventOffline.LsaProcessed[i]
    }
    return children
}

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = prefixEventOffline.EventId
    leafs["prefix"] = prefixEventOffline.Prefix
    leafs["prefix-lenth"] = prefixEventOffline.PrefixLenth
    leafs["spf-run-no"] = prefixEventOffline.SpfRunNo
    leafs["ipfrr-event-id"] = prefixEventOffline.IpfrrEventId
    leafs["threshold-exceeded"] = prefixEventOffline.ThresholdExceeded
    leafs["priority"] = prefixEventOffline.Priority
    leafs["change-type"] = prefixEventOffline.ChangeType
    leafs["route-type"] = prefixEventOffline.RouteType
    leafs["route-path-change-type"] = prefixEventOffline.RoutePathChangeType
    leafs["cost"] = prefixEventOffline.Cost
    leafs["trigger-time"] = prefixEventOffline.TriggerTime
    return leafs
}

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetYangName() string { return "prefix-event-offline" }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) SetParent(parent types.Entity) { prefixEventOffline.parent = parent }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetParent() types.Entity { return prefixEventOffline.parent }

func (prefixEventOffline *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetParentYangName() string { return "prefix-event-offlines" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path
// Path information
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Backup Path Informatoin. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath.
    LfaPath []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetFilter() yfilter.YFilter { return path.YFilter }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) SetFilter(yf yfilter.YFilter) { path.YFilter = yf }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "lfa-path" { return "LfaPath" }
    return ""
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetSegmentPath() string {
    return "path"
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lfa-path" {
        for _, c := range path.LfaPath {
            if path.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath{}
        path.LfaPath = append(path.LfaPath, child)
        return &path.LfaPath[len(path.LfaPath)-1]
    }
    return nil
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range path.LfaPath {
        children[path.LfaPath[i].GetSegmentPath()] = &path.LfaPath[i]
    }
    return children
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = path.InterfaceName
    leafs["neighbour-address"] = path.NeighbourAddress
    leafs["change-type"] = path.ChangeType
    leafs["path-metric"] = path.PathMetric
    return leafs
}

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetBundleName() string { return "cisco_ios_xr" }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetYangName() string { return "path" }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) SetParent(parent types.Entity) { path.parent = parent }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetParent() types.Entity { return path.parent }

func (path *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath
// Backup Path Informatoin
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of LFA. The type is RcmdShowIpfrrLfa.
    LfaType interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Remote Node ID, in case of Remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetFilter() yfilter.YFilter { return lfaPath.YFilter }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) SetFilter(yf yfilter.YFilter) { lfaPath.YFilter = yf }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetGoName(yname string) string {
    if yname == "lfa-type" { return "LfaType" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "remote-node-id" { return "RemoteNodeId" }
    return ""
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetSegmentPath() string {
    return "lfa-path"
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lfa-type"] = lfaPath.LfaType
    leafs["interface-name"] = lfaPath.InterfaceName
    leafs["neighbour-address"] = lfaPath.NeighbourAddress
    leafs["change-type"] = lfaPath.ChangeType
    leafs["path-metric"] = lfaPath.PathMetric
    leafs["remote-node-id"] = lfaPath.RemoteNodeId
    return leafs
}

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetBundleName() string { return "cisco_ios_xr" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetYangName() string { return "lfa-path" }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) SetParent(parent types.Entity) { lfaPath.parent = parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetParent() types.Entity { return lfaPath.parent }

func (lfaPath *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetParentYangName() string { return "path" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa
// LSA that triggered this event
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine
// Timeline information
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol). The type is string.
    RouteOrigin interface{}

    // Entry point of IPv4 RIB. The type is string.
    RiBv4Enter interface{}

    // Exit point from IPv4 RIB to FIBs. The type is string.
    RiBv4Exit interface{}

    // Route Redistribute point from IPv4 RIB to LDP. The type is string.
    RiBv4Redistribute interface{}

    // Entry point of LDP. The type is string.
    LdpEnter interface{}

    // Exit point of LDP to LSD. The type is string.
    LdpExit interface{}

    // Entry point of LSD. The type is string.
    LsdEnter interface{}

    // Exit point of LSD to FIBs. The type is string.
    LsdExit interface{}

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp.
    LcIp []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls.
    LcMpls []Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetFilter() yfilter.YFilter { return timeLine.YFilter }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) SetFilter(yf yfilter.YFilter) { timeLine.YFilter = yf }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetSegmentPath() string {
    return "time-line"
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lc-ip" {
        for _, c := range timeLine.LcIp {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp{}
        timeLine.LcIp = append(timeLine.LcIp, child)
        return &timeLine.LcIp[len(timeLine.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range timeLine.LcMpls {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls{}
        timeLine.LcMpls = append(timeLine.LcMpls, child)
        return &timeLine.LcMpls[len(timeLine.LcMpls)-1]
    }
    return nil
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range timeLine.LcIp {
        children[timeLine.LcIp[i].GetSegmentPath()] = &timeLine.LcIp[i]
    }
    for i := range timeLine.LcMpls {
        children[timeLine.LcMpls[i].GetSegmentPath()] = &timeLine.LcMpls[i]
    }
    return children
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-origin"] = timeLine.RouteOrigin
    leafs["ri-bv4-enter"] = timeLine.RiBv4Enter
    leafs["ri-bv4-exit"] = timeLine.RiBv4Exit
    leafs["ri-bv4-redistribute"] = timeLine.RiBv4Redistribute
    leafs["ldp-enter"] = timeLine.LdpEnter
    leafs["ldp-exit"] = timeLine.LdpExit
    leafs["lsd-enter"] = timeLine.LsdEnter
    leafs["lsd-exit"] = timeLine.LsdExit
    return leafs
}

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetBundleName() string { return "cisco_ios_xr" }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetYangName() string { return "time-line" }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) SetParent(parent types.Entity) { timeLine.parent = parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetParent() types.Entity { return timeLine.parent }

func (timeLine *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    leafs["fib-complete"] = lcIp.FibComplete
    return leafs
}

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    leafs["fib-complete"] = lcMpls.FibComplete
    return leafs
}

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetParentYangName() string { return "time-line" }

// Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed
// List of LSAs processed
type Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Ospf_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics
// Summary-External prefix monitoring statistics
type Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Inter-Area Routes. The type is interface{} with range: 0..4294967295.
    InterAreaRoutes interface{}

    // Total IA Routes Added. The type is interface{} with range: 0..4294967295.
    InterAreaAdded interface{}

    // Total IA Routes Modified. The type is interface{} with range:
    // 0..4294967295.
    InterAreaModified interface{}

    // Total IA Routes Deleted. The type is interface{} with range: 0..4294967295.
    InterAreaDeleted interface{}

    // Total IA Routes Critical. The type is interface{} with range:
    // 0..4294967295.
    InterAreaCritical interface{}

    // Total IA Routes High. The type is interface{} with range: 0..4294967295.
    InterAreaHigh interface{}

    // Total IA Routes Medium. The type is interface{} with range: 0..4294967295.
    InterAreaMedium interface{}

    // Total IA Routes Low. The type is interface{} with range: 0..4294967295.
    InterAreaLow interface{}

    // Total External Routes. The type is interface{} with range: 0..4294967295.
    ExternalRoutes interface{}

    // Total Ext Routes Added. The type is interface{} with range: 0..4294967295.
    ExternalAdded interface{}

    // Total Ext Routes Modified. The type is interface{} with range:
    // 0..4294967295.
    ExternalModified interface{}

    // Total Ext Routes Deleted. The type is interface{} with range:
    // 0..4294967295.
    ExternalDeleted interface{}

    // Total Ext Routes Critical. The type is interface{} with range:
    // 0..4294967295.
    ExternalCritical interface{}

    // Total Ext Routes High. The type is interface{} with range: 0..4294967295.
    ExternalHigh interface{}

    // Total Ext Routes Medium. The type is interface{} with range: 0..4294967295.
    ExternalMedium interface{}

    // Total Ext Routes Low. The type is interface{} with range: 0..4294967295.
    ExternalLow interface{}
}

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetFilter() yfilter.YFilter { return summaryExternalEventStatistics.YFilter }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) SetFilter(yf yfilter.YFilter) { summaryExternalEventStatistics.YFilter = yf }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetGoName(yname string) string {
    if yname == "inter-area-routes" { return "InterAreaRoutes" }
    if yname == "inter-area-added" { return "InterAreaAdded" }
    if yname == "inter-area-modified" { return "InterAreaModified" }
    if yname == "inter-area-deleted" { return "InterAreaDeleted" }
    if yname == "inter-area-critical" { return "InterAreaCritical" }
    if yname == "inter-area-high" { return "InterAreaHigh" }
    if yname == "inter-area-medium" { return "InterAreaMedium" }
    if yname == "inter-area-low" { return "InterAreaLow" }
    if yname == "external-routes" { return "ExternalRoutes" }
    if yname == "external-added" { return "ExternalAdded" }
    if yname == "external-modified" { return "ExternalModified" }
    if yname == "external-deleted" { return "ExternalDeleted" }
    if yname == "external-critical" { return "ExternalCritical" }
    if yname == "external-high" { return "ExternalHigh" }
    if yname == "external-medium" { return "ExternalMedium" }
    if yname == "external-low" { return "ExternalLow" }
    return ""
}

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetSegmentPath() string {
    return "summary-external-event-statistics"
}

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["inter-area-routes"] = summaryExternalEventStatistics.InterAreaRoutes
    leafs["inter-area-added"] = summaryExternalEventStatistics.InterAreaAdded
    leafs["inter-area-modified"] = summaryExternalEventStatistics.InterAreaModified
    leafs["inter-area-deleted"] = summaryExternalEventStatistics.InterAreaDeleted
    leafs["inter-area-critical"] = summaryExternalEventStatistics.InterAreaCritical
    leafs["inter-area-high"] = summaryExternalEventStatistics.InterAreaHigh
    leafs["inter-area-medium"] = summaryExternalEventStatistics.InterAreaMedium
    leafs["inter-area-low"] = summaryExternalEventStatistics.InterAreaLow
    leafs["external-routes"] = summaryExternalEventStatistics.ExternalRoutes
    leafs["external-added"] = summaryExternalEventStatistics.ExternalAdded
    leafs["external-modified"] = summaryExternalEventStatistics.ExternalModified
    leafs["external-deleted"] = summaryExternalEventStatistics.ExternalDeleted
    leafs["external-critical"] = summaryExternalEventStatistics.ExternalCritical
    leafs["external-high"] = summaryExternalEventStatistics.ExternalHigh
    leafs["external-medium"] = summaryExternalEventStatistics.ExternalMedium
    leafs["external-low"] = summaryExternalEventStatistics.ExternalLow
    return leafs
}

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetYangName() string { return "summary-external-event-statistics" }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) SetParent(parent types.Entity) { summaryExternalEventStatistics.parent = parent }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetParent() types.Entity { return summaryExternalEventStatistics.parent }

func (summaryExternalEventStatistics *Rcmd_Ospf_Instances_Instance_SummaryExternalEventStatistics) GetParentYangName() string { return "instance" }

// Rcmd_Server
// Server Info
type Rcmd_Server struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Server Info.
    Normal Rcmd_Server_Normal

    // Server Info.
    Detail Rcmd_Server_Detail
}

func (server *Rcmd_Server) GetFilter() yfilter.YFilter { return server.YFilter }

func (server *Rcmd_Server) SetFilter(yf yfilter.YFilter) { server.YFilter = yf }

func (server *Rcmd_Server) GetGoName(yname string) string {
    if yname == "normal" { return "Normal" }
    if yname == "detail" { return "Detail" }
    return ""
}

func (server *Rcmd_Server) GetSegmentPath() string {
    return "server"
}

func (server *Rcmd_Server) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "normal" {
        return &server.Normal
    }
    if childYangName == "detail" {
        return &server.Detail
    }
    return nil
}

func (server *Rcmd_Server) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["normal"] = &server.Normal
    children["detail"] = &server.Detail
    return children
}

func (server *Rcmd_Server) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (server *Rcmd_Server) GetBundleName() string { return "cisco_ios_xr" }

func (server *Rcmd_Server) GetYangName() string { return "server" }

func (server *Rcmd_Server) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (server *Rcmd_Server) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (server *Rcmd_Server) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (server *Rcmd_Server) SetParent(parent types.Entity) { server.parent = parent }

func (server *Rcmd_Server) GetParent() types.Entity { return server.parent }

func (server *Rcmd_Server) GetParentYangName() string { return "rcmd" }

// Rcmd_Server_Normal
// Server Info
type Rcmd_Server_Normal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configured Hostname. The type is string.
    HostName interface{}

    // Server Status. The type is RcmdBagEnableDisable.
    Status interface{}

    // Maximum Events. The type is interface{} with range: 0..4294967295.
    MaxEvents interface{}

    // Event Buffer Size. The type is interface{} with range: 0..4294967295.
    EventBufferSize interface{}

    // Configured Monitor Interval. The type is interface{} with range:
    // 0..4294967295.
    MonitoringInterval interface{}

    // Time for next processing. The type is interface{} with range:
    // 0..4294967295.
    NextInterval interface{}

    // Max Interface events count. The type is interface{} with range:
    // 0..4294967295.
    MaxInterfaceCount interface{}

    // Interface events count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // RP count. The type is interface{} with range: 0..4294967295.
    NodeRpCount interface{}

    // LC count. The type is interface{} with range: 0..4294967295.
    NodeLcCount interface{}

    // Diag Node count. The type is interface{} with range: 0..4294967295.
    DiagNodeCount interface{}

    // Disabled Node count. The type is interface{} with range: 0..4294967295.
    DisabledNodeCount interface{}

    // Disabled Node count. The type is interface{} with range: 0..4294967295.
    InActiveNodeCount interface{}

    // Last Processing Start Time. The type is string.
    LastProcessStartTime interface{}

    // Last Processing Duration. The type is string.
    LastProcessDuration interface{}

    // Process state. The type is RcmdShowPrcsState.
    LastProcessState interface{}

    // Post Processing count. The type is interface{} with range: 0..4294967295.
    ProcessCount interface{}

    // SPF Processing count. The type is interface{} with range: 0..4294967295.
    SpfProcessCount interface{}

    // Reports Archival Path. The type is string.
    ReportsArchivePath interface{}

    // Reports Archival Node (Applicable for local location). The type is string.
    ReportsArchiveNode interface{}

    // Last Archival Status. The type is string.
    LastArchivalStatus interface{}

    // Last Archival Error. The type is string.
    LastArchivalError interface{}

    // Last Archival Status. The type is string.
    LastArchivalErrorTime interface{}

    // Archive Count. The type is interface{} with range: 0..4294967295.
    ArchiveCount interface{}

    // Diagnostics Archival Path. The type is string.
    DiagnosticsArchivePath interface{}

    // Diagnostics Archival Node (Applicable for local location). The type is
    // string.
    DiagnosticsArchiveNode interface{}

    // Protocol level configuration. The type is slice of
    // Rcmd_Server_Normal_ProtocolConfig.
    ProtocolConfig []Rcmd_Server_Normal_ProtocolConfig

    // Detailed Information. The type is slice of Rcmd_Server_Normal_ServerDetail.
    ServerDetail []Rcmd_Server_Normal_ServerDetail
}

func (normal *Rcmd_Server_Normal) GetFilter() yfilter.YFilter { return normal.YFilter }

func (normal *Rcmd_Server_Normal) SetFilter(yf yfilter.YFilter) { normal.YFilter = yf }

func (normal *Rcmd_Server_Normal) GetGoName(yname string) string {
    if yname == "host-name" { return "HostName" }
    if yname == "status" { return "Status" }
    if yname == "max-events" { return "MaxEvents" }
    if yname == "event-buffer-size" { return "EventBufferSize" }
    if yname == "monitoring-interval" { return "MonitoringInterval" }
    if yname == "next-interval" { return "NextInterval" }
    if yname == "max-interface-count" { return "MaxInterfaceCount" }
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "node-rp-count" { return "NodeRpCount" }
    if yname == "node-lc-count" { return "NodeLcCount" }
    if yname == "diag-node-count" { return "DiagNodeCount" }
    if yname == "disabled-node-count" { return "DisabledNodeCount" }
    if yname == "in-active-node-count" { return "InActiveNodeCount" }
    if yname == "last-process-start-time" { return "LastProcessStartTime" }
    if yname == "last-process-duration" { return "LastProcessDuration" }
    if yname == "last-process-state" { return "LastProcessState" }
    if yname == "process-count" { return "ProcessCount" }
    if yname == "spf-process-count" { return "SpfProcessCount" }
    if yname == "reports-archive-path" { return "ReportsArchivePath" }
    if yname == "reports-archive-node" { return "ReportsArchiveNode" }
    if yname == "last-archival-status" { return "LastArchivalStatus" }
    if yname == "last-archival-error" { return "LastArchivalError" }
    if yname == "last-archival-error-time" { return "LastArchivalErrorTime" }
    if yname == "archive-count" { return "ArchiveCount" }
    if yname == "diagnostics-archive-path" { return "DiagnosticsArchivePath" }
    if yname == "diagnostics-archive-node" { return "DiagnosticsArchiveNode" }
    if yname == "protocol-config" { return "ProtocolConfig" }
    if yname == "server-detail" { return "ServerDetail" }
    return ""
}

func (normal *Rcmd_Server_Normal) GetSegmentPath() string {
    return "normal"
}

func (normal *Rcmd_Server_Normal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-config" {
        for _, c := range normal.ProtocolConfig {
            if normal.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Normal_ProtocolConfig{}
        normal.ProtocolConfig = append(normal.ProtocolConfig, child)
        return &normal.ProtocolConfig[len(normal.ProtocolConfig)-1]
    }
    if childYangName == "server-detail" {
        for _, c := range normal.ServerDetail {
            if normal.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Normal_ServerDetail{}
        normal.ServerDetail = append(normal.ServerDetail, child)
        return &normal.ServerDetail[len(normal.ServerDetail)-1]
    }
    return nil
}

func (normal *Rcmd_Server_Normal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range normal.ProtocolConfig {
        children[normal.ProtocolConfig[i].GetSegmentPath()] = &normal.ProtocolConfig[i]
    }
    for i := range normal.ServerDetail {
        children[normal.ServerDetail[i].GetSegmentPath()] = &normal.ServerDetail[i]
    }
    return children
}

func (normal *Rcmd_Server_Normal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["host-name"] = normal.HostName
    leafs["status"] = normal.Status
    leafs["max-events"] = normal.MaxEvents
    leafs["event-buffer-size"] = normal.EventBufferSize
    leafs["monitoring-interval"] = normal.MonitoringInterval
    leafs["next-interval"] = normal.NextInterval
    leafs["max-interface-count"] = normal.MaxInterfaceCount
    leafs["interface-count"] = normal.InterfaceCount
    leafs["node-rp-count"] = normal.NodeRpCount
    leafs["node-lc-count"] = normal.NodeLcCount
    leafs["diag-node-count"] = normal.DiagNodeCount
    leafs["disabled-node-count"] = normal.DisabledNodeCount
    leafs["in-active-node-count"] = normal.InActiveNodeCount
    leafs["last-process-start-time"] = normal.LastProcessStartTime
    leafs["last-process-duration"] = normal.LastProcessDuration
    leafs["last-process-state"] = normal.LastProcessState
    leafs["process-count"] = normal.ProcessCount
    leafs["spf-process-count"] = normal.SpfProcessCount
    leafs["reports-archive-path"] = normal.ReportsArchivePath
    leafs["reports-archive-node"] = normal.ReportsArchiveNode
    leafs["last-archival-status"] = normal.LastArchivalStatus
    leafs["last-archival-error"] = normal.LastArchivalError
    leafs["last-archival-error-time"] = normal.LastArchivalErrorTime
    leafs["archive-count"] = normal.ArchiveCount
    leafs["diagnostics-archive-path"] = normal.DiagnosticsArchivePath
    leafs["diagnostics-archive-node"] = normal.DiagnosticsArchiveNode
    return leafs
}

func (normal *Rcmd_Server_Normal) GetBundleName() string { return "cisco_ios_xr" }

func (normal *Rcmd_Server_Normal) GetYangName() string { return "normal" }

func (normal *Rcmd_Server_Normal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (normal *Rcmd_Server_Normal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (normal *Rcmd_Server_Normal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (normal *Rcmd_Server_Normal) SetParent(parent types.Entity) { normal.parent = parent }

func (normal *Rcmd_Server_Normal) GetParent() types.Entity { return normal.parent }

func (normal *Rcmd_Server_Normal) GetParentYangName() string { return "server" }

// Rcmd_Server_Normal_ProtocolConfig
// Protocol level configuration
type Rcmd_Server_Normal_ProtocolConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol Name. The type is string.
    ProtocolName interface{}

    // Priority level configuration. The type is slice of
    // Rcmd_Server_Normal_ProtocolConfig_Priority.
    Priority []Rcmd_Server_Normal_ProtocolConfig_Priority
}

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetFilter() yfilter.YFilter { return protocolConfig.YFilter }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) SetFilter(yf yfilter.YFilter) { protocolConfig.YFilter = yf }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetSegmentPath() string {
    return "protocol-config"
}

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority" {
        for _, c := range protocolConfig.Priority {
            if protocolConfig.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Normal_ProtocolConfig_Priority{}
        protocolConfig.Priority = append(protocolConfig.Priority, child)
        return &protocolConfig.Priority[len(protocolConfig.Priority)-1]
    }
    return nil
}

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolConfig.Priority {
        children[protocolConfig.Priority[i].GetSegmentPath()] = &protocolConfig.Priority[i]
    }
    return children
}

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = protocolConfig.ProtocolName
    return leafs
}

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetBundleName() string { return "cisco_ios_xr" }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetYangName() string { return "protocol-config" }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) SetParent(parent types.Entity) { protocolConfig.parent = parent }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetParent() types.Entity { return protocolConfig.parent }

func (protocolConfig *Rcmd_Server_Normal_ProtocolConfig) GetParentYangName() string { return "normal" }

// Rcmd_Server_Normal_ProtocolConfig_Priority
// Priority level configuration
type Rcmd_Server_Normal_ProtocolConfig_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority Level. The type is RcmdPriorityLevel.
    PriorityName interface{}

    // threshold value. The type is interface{} with range: 0..4294967295.
    Threshold interface{}

    // Enable/Disable cfg. The type is RcmdBoolYesNo.
    Disable interface{}
}

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetGoName(yname string) string {
    if yname == "priority-name" { return "PriorityName" }
    if yname == "threshold" { return "Threshold" }
    if yname == "disable" { return "Disable" }
    return ""
}

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority-name"] = priority.PriorityName
    leafs["threshold"] = priority.Threshold
    leafs["disable"] = priority.Disable
    return leafs
}

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Server_Normal_ProtocolConfig_Priority) GetParentYangName() string { return "protocol-config" }

// Rcmd_Server_Normal_ServerDetail
// Detailed Information
type Rcmd_Server_Normal_ServerDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Overload suspend. The type is interface{} with range: 0..4294967295.
    OverloadSuspend interface{}

    // Memory Suspend. The type is interface{} with range: 0..4294967295.
    MemorySuspend interface{}

    // Trace Information. The type is slice of
    // Rcmd_Server_Normal_ServerDetail_TraceInformation.
    TraceInformation []Rcmd_Server_Normal_ServerDetail_TraceInformation
}

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetFilter() yfilter.YFilter { return serverDetail.YFilter }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) SetFilter(yf yfilter.YFilter) { serverDetail.YFilter = yf }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetGoName(yname string) string {
    if yname == "overload-suspend" { return "OverloadSuspend" }
    if yname == "memory-suspend" { return "MemorySuspend" }
    if yname == "trace-information" { return "TraceInformation" }
    return ""
}

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetSegmentPath() string {
    return "server-detail"
}

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trace-information" {
        for _, c := range serverDetail.TraceInformation {
            if serverDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Normal_ServerDetail_TraceInformation{}
        serverDetail.TraceInformation = append(serverDetail.TraceInformation, child)
        return &serverDetail.TraceInformation[len(serverDetail.TraceInformation)-1]
    }
    return nil
}

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range serverDetail.TraceInformation {
        children[serverDetail.TraceInformation[i].GetSegmentPath()] = &serverDetail.TraceInformation[i]
    }
    return children
}

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["overload-suspend"] = serverDetail.OverloadSuspend
    leafs["memory-suspend"] = serverDetail.MemorySuspend
    return leafs
}

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetBundleName() string { return "cisco_ios_xr" }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetYangName() string { return "server-detail" }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) SetParent(parent types.Entity) { serverDetail.parent = parent }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetParent() types.Entity { return serverDetail.parent }

func (serverDetail *Rcmd_Server_Normal_ServerDetail) GetParentYangName() string { return "normal" }

// Rcmd_Server_Normal_ServerDetail_TraceInformation
// Trace Information
type Rcmd_Server_Normal_ServerDetail_TraceInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configured Hostname. The type is string.
    TraceName interface{}

    // Server Total Status. The type is interface{} with range: 0..4294967295.
    TotalStats interface{}

    // Server Last Run Status. The type is interface{} with range: 0..4294967295.
    LastRunStats interface{}

    // Server Error Status. The type is interface{} with range: 0..4294967295.
    ErrorStats interface{}
}

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetFilter() yfilter.YFilter { return traceInformation.YFilter }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) SetFilter(yf yfilter.YFilter) { traceInformation.YFilter = yf }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetGoName(yname string) string {
    if yname == "trace-name" { return "TraceName" }
    if yname == "total-stats" { return "TotalStats" }
    if yname == "last-run-stats" { return "LastRunStats" }
    if yname == "error-stats" { return "ErrorStats" }
    return ""
}

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetSegmentPath() string {
    return "trace-information"
}

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["trace-name"] = traceInformation.TraceName
    leafs["total-stats"] = traceInformation.TotalStats
    leafs["last-run-stats"] = traceInformation.LastRunStats
    leafs["error-stats"] = traceInformation.ErrorStats
    return leafs
}

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetBundleName() string { return "cisco_ios_xr" }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetYangName() string { return "trace-information" }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) SetParent(parent types.Entity) { traceInformation.parent = parent }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetParent() types.Entity { return traceInformation.parent }

func (traceInformation *Rcmd_Server_Normal_ServerDetail_TraceInformation) GetParentYangName() string { return "server-detail" }

// Rcmd_Server_Detail
// Server Info
type Rcmd_Server_Detail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configured Hostname. The type is string.
    HostName interface{}

    // Server Status. The type is RcmdBagEnableDisable.
    Status interface{}

    // Maximum Events. The type is interface{} with range: 0..4294967295.
    MaxEvents interface{}

    // Event Buffer Size. The type is interface{} with range: 0..4294967295.
    EventBufferSize interface{}

    // Configured Monitor Interval. The type is interface{} with range:
    // 0..4294967295.
    MonitoringInterval interface{}

    // Time for next processing. The type is interface{} with range:
    // 0..4294967295.
    NextInterval interface{}

    // Max Interface events count. The type is interface{} with range:
    // 0..4294967295.
    MaxInterfaceCount interface{}

    // Interface events count. The type is interface{} with range: 0..4294967295.
    InterfaceCount interface{}

    // RP count. The type is interface{} with range: 0..4294967295.
    NodeRpCount interface{}

    // LC count. The type is interface{} with range: 0..4294967295.
    NodeLcCount interface{}

    // Diag Node count. The type is interface{} with range: 0..4294967295.
    DiagNodeCount interface{}

    // Disabled Node count. The type is interface{} with range: 0..4294967295.
    DisabledNodeCount interface{}

    // Disabled Node count. The type is interface{} with range: 0..4294967295.
    InActiveNodeCount interface{}

    // Last Processing Start Time. The type is string.
    LastProcessStartTime interface{}

    // Last Processing Duration. The type is string.
    LastProcessDuration interface{}

    // Process state. The type is RcmdShowPrcsState.
    LastProcessState interface{}

    // Post Processing count. The type is interface{} with range: 0..4294967295.
    ProcessCount interface{}

    // SPF Processing count. The type is interface{} with range: 0..4294967295.
    SpfProcessCount interface{}

    // Reports Archival Path. The type is string.
    ReportsArchivePath interface{}

    // Reports Archival Node (Applicable for local location). The type is string.
    ReportsArchiveNode interface{}

    // Last Archival Status. The type is string.
    LastArchivalStatus interface{}

    // Last Archival Error. The type is string.
    LastArchivalError interface{}

    // Last Archival Status. The type is string.
    LastArchivalErrorTime interface{}

    // Archive Count. The type is interface{} with range: 0..4294967295.
    ArchiveCount interface{}

    // Diagnostics Archival Path. The type is string.
    DiagnosticsArchivePath interface{}

    // Diagnostics Archival Node (Applicable for local location). The type is
    // string.
    DiagnosticsArchiveNode interface{}

    // Protocol level configuration. The type is slice of
    // Rcmd_Server_Detail_ProtocolConfig.
    ProtocolConfig []Rcmd_Server_Detail_ProtocolConfig

    // Detailed Information. The type is slice of Rcmd_Server_Detail_ServerDetail.
    ServerDetail []Rcmd_Server_Detail_ServerDetail
}

func (detail *Rcmd_Server_Detail) GetFilter() yfilter.YFilter { return detail.YFilter }

func (detail *Rcmd_Server_Detail) SetFilter(yf yfilter.YFilter) { detail.YFilter = yf }

func (detail *Rcmd_Server_Detail) GetGoName(yname string) string {
    if yname == "host-name" { return "HostName" }
    if yname == "status" { return "Status" }
    if yname == "max-events" { return "MaxEvents" }
    if yname == "event-buffer-size" { return "EventBufferSize" }
    if yname == "monitoring-interval" { return "MonitoringInterval" }
    if yname == "next-interval" { return "NextInterval" }
    if yname == "max-interface-count" { return "MaxInterfaceCount" }
    if yname == "interface-count" { return "InterfaceCount" }
    if yname == "node-rp-count" { return "NodeRpCount" }
    if yname == "node-lc-count" { return "NodeLcCount" }
    if yname == "diag-node-count" { return "DiagNodeCount" }
    if yname == "disabled-node-count" { return "DisabledNodeCount" }
    if yname == "in-active-node-count" { return "InActiveNodeCount" }
    if yname == "last-process-start-time" { return "LastProcessStartTime" }
    if yname == "last-process-duration" { return "LastProcessDuration" }
    if yname == "last-process-state" { return "LastProcessState" }
    if yname == "process-count" { return "ProcessCount" }
    if yname == "spf-process-count" { return "SpfProcessCount" }
    if yname == "reports-archive-path" { return "ReportsArchivePath" }
    if yname == "reports-archive-node" { return "ReportsArchiveNode" }
    if yname == "last-archival-status" { return "LastArchivalStatus" }
    if yname == "last-archival-error" { return "LastArchivalError" }
    if yname == "last-archival-error-time" { return "LastArchivalErrorTime" }
    if yname == "archive-count" { return "ArchiveCount" }
    if yname == "diagnostics-archive-path" { return "DiagnosticsArchivePath" }
    if yname == "diagnostics-archive-node" { return "DiagnosticsArchiveNode" }
    if yname == "protocol-config" { return "ProtocolConfig" }
    if yname == "server-detail" { return "ServerDetail" }
    return ""
}

func (detail *Rcmd_Server_Detail) GetSegmentPath() string {
    return "detail"
}

func (detail *Rcmd_Server_Detail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-config" {
        for _, c := range detail.ProtocolConfig {
            if detail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Detail_ProtocolConfig{}
        detail.ProtocolConfig = append(detail.ProtocolConfig, child)
        return &detail.ProtocolConfig[len(detail.ProtocolConfig)-1]
    }
    if childYangName == "server-detail" {
        for _, c := range detail.ServerDetail {
            if detail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Detail_ServerDetail{}
        detail.ServerDetail = append(detail.ServerDetail, child)
        return &detail.ServerDetail[len(detail.ServerDetail)-1]
    }
    return nil
}

func (detail *Rcmd_Server_Detail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range detail.ProtocolConfig {
        children[detail.ProtocolConfig[i].GetSegmentPath()] = &detail.ProtocolConfig[i]
    }
    for i := range detail.ServerDetail {
        children[detail.ServerDetail[i].GetSegmentPath()] = &detail.ServerDetail[i]
    }
    return children
}

func (detail *Rcmd_Server_Detail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["host-name"] = detail.HostName
    leafs["status"] = detail.Status
    leafs["max-events"] = detail.MaxEvents
    leafs["event-buffer-size"] = detail.EventBufferSize
    leafs["monitoring-interval"] = detail.MonitoringInterval
    leafs["next-interval"] = detail.NextInterval
    leafs["max-interface-count"] = detail.MaxInterfaceCount
    leafs["interface-count"] = detail.InterfaceCount
    leafs["node-rp-count"] = detail.NodeRpCount
    leafs["node-lc-count"] = detail.NodeLcCount
    leafs["diag-node-count"] = detail.DiagNodeCount
    leafs["disabled-node-count"] = detail.DisabledNodeCount
    leafs["in-active-node-count"] = detail.InActiveNodeCount
    leafs["last-process-start-time"] = detail.LastProcessStartTime
    leafs["last-process-duration"] = detail.LastProcessDuration
    leafs["last-process-state"] = detail.LastProcessState
    leafs["process-count"] = detail.ProcessCount
    leafs["spf-process-count"] = detail.SpfProcessCount
    leafs["reports-archive-path"] = detail.ReportsArchivePath
    leafs["reports-archive-node"] = detail.ReportsArchiveNode
    leafs["last-archival-status"] = detail.LastArchivalStatus
    leafs["last-archival-error"] = detail.LastArchivalError
    leafs["last-archival-error-time"] = detail.LastArchivalErrorTime
    leafs["archive-count"] = detail.ArchiveCount
    leafs["diagnostics-archive-path"] = detail.DiagnosticsArchivePath
    leafs["diagnostics-archive-node"] = detail.DiagnosticsArchiveNode
    return leafs
}

func (detail *Rcmd_Server_Detail) GetBundleName() string { return "cisco_ios_xr" }

func (detail *Rcmd_Server_Detail) GetYangName() string { return "detail" }

func (detail *Rcmd_Server_Detail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (detail *Rcmd_Server_Detail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (detail *Rcmd_Server_Detail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (detail *Rcmd_Server_Detail) SetParent(parent types.Entity) { detail.parent = parent }

func (detail *Rcmd_Server_Detail) GetParent() types.Entity { return detail.parent }

func (detail *Rcmd_Server_Detail) GetParentYangName() string { return "server" }

// Rcmd_Server_Detail_ProtocolConfig
// Protocol level configuration
type Rcmd_Server_Detail_ProtocolConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol Name. The type is string.
    ProtocolName interface{}

    // Priority level configuration. The type is slice of
    // Rcmd_Server_Detail_ProtocolConfig_Priority.
    Priority []Rcmd_Server_Detail_ProtocolConfig_Priority
}

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetFilter() yfilter.YFilter { return protocolConfig.YFilter }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) SetFilter(yf yfilter.YFilter) { protocolConfig.YFilter = yf }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetSegmentPath() string {
    return "protocol-config"
}

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority" {
        for _, c := range protocolConfig.Priority {
            if protocolConfig.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Detail_ProtocolConfig_Priority{}
        protocolConfig.Priority = append(protocolConfig.Priority, child)
        return &protocolConfig.Priority[len(protocolConfig.Priority)-1]
    }
    return nil
}

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolConfig.Priority {
        children[protocolConfig.Priority[i].GetSegmentPath()] = &protocolConfig.Priority[i]
    }
    return children
}

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = protocolConfig.ProtocolName
    return leafs
}

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetBundleName() string { return "cisco_ios_xr" }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetYangName() string { return "protocol-config" }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) SetParent(parent types.Entity) { protocolConfig.parent = parent }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetParent() types.Entity { return protocolConfig.parent }

func (protocolConfig *Rcmd_Server_Detail_ProtocolConfig) GetParentYangName() string { return "detail" }

// Rcmd_Server_Detail_ProtocolConfig_Priority
// Priority level configuration
type Rcmd_Server_Detail_ProtocolConfig_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority Level. The type is RcmdPriorityLevel.
    PriorityName interface{}

    // threshold value. The type is interface{} with range: 0..4294967295.
    Threshold interface{}

    // Enable/Disable cfg. The type is RcmdBoolYesNo.
    Disable interface{}
}

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetGoName(yname string) string {
    if yname == "priority-name" { return "PriorityName" }
    if yname == "threshold" { return "Threshold" }
    if yname == "disable" { return "Disable" }
    return ""
}

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority-name"] = priority.PriorityName
    leafs["threshold"] = priority.Threshold
    leafs["disable"] = priority.Disable
    return leafs
}

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Server_Detail_ProtocolConfig_Priority) GetParentYangName() string { return "protocol-config" }

// Rcmd_Server_Detail_ServerDetail
// Detailed Information
type Rcmd_Server_Detail_ServerDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Overload suspend. The type is interface{} with range: 0..4294967295.
    OverloadSuspend interface{}

    // Memory Suspend. The type is interface{} with range: 0..4294967295.
    MemorySuspend interface{}

    // Trace Information. The type is slice of
    // Rcmd_Server_Detail_ServerDetail_TraceInformation.
    TraceInformation []Rcmd_Server_Detail_ServerDetail_TraceInformation
}

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetFilter() yfilter.YFilter { return serverDetail.YFilter }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) SetFilter(yf yfilter.YFilter) { serverDetail.YFilter = yf }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetGoName(yname string) string {
    if yname == "overload-suspend" { return "OverloadSuspend" }
    if yname == "memory-suspend" { return "MemorySuspend" }
    if yname == "trace-information" { return "TraceInformation" }
    return ""
}

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetSegmentPath() string {
    return "server-detail"
}

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "trace-information" {
        for _, c := range serverDetail.TraceInformation {
            if serverDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Server_Detail_ServerDetail_TraceInformation{}
        serverDetail.TraceInformation = append(serverDetail.TraceInformation, child)
        return &serverDetail.TraceInformation[len(serverDetail.TraceInformation)-1]
    }
    return nil
}

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range serverDetail.TraceInformation {
        children[serverDetail.TraceInformation[i].GetSegmentPath()] = &serverDetail.TraceInformation[i]
    }
    return children
}

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["overload-suspend"] = serverDetail.OverloadSuspend
    leafs["memory-suspend"] = serverDetail.MemorySuspend
    return leafs
}

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetBundleName() string { return "cisco_ios_xr" }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetYangName() string { return "server-detail" }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) SetParent(parent types.Entity) { serverDetail.parent = parent }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetParent() types.Entity { return serverDetail.parent }

func (serverDetail *Rcmd_Server_Detail_ServerDetail) GetParentYangName() string { return "detail" }

// Rcmd_Server_Detail_ServerDetail_TraceInformation
// Trace Information
type Rcmd_Server_Detail_ServerDetail_TraceInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configured Hostname. The type is string.
    TraceName interface{}

    // Server Total Status. The type is interface{} with range: 0..4294967295.
    TotalStats interface{}

    // Server Last Run Status. The type is interface{} with range: 0..4294967295.
    LastRunStats interface{}

    // Server Error Status. The type is interface{} with range: 0..4294967295.
    ErrorStats interface{}
}

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetFilter() yfilter.YFilter { return traceInformation.YFilter }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) SetFilter(yf yfilter.YFilter) { traceInformation.YFilter = yf }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetGoName(yname string) string {
    if yname == "trace-name" { return "TraceName" }
    if yname == "total-stats" { return "TotalStats" }
    if yname == "last-run-stats" { return "LastRunStats" }
    if yname == "error-stats" { return "ErrorStats" }
    return ""
}

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetSegmentPath() string {
    return "trace-information"
}

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["trace-name"] = traceInformation.TraceName
    leafs["total-stats"] = traceInformation.TotalStats
    leafs["last-run-stats"] = traceInformation.LastRunStats
    leafs["error-stats"] = traceInformation.ErrorStats
    return leafs
}

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetBundleName() string { return "cisco_ios_xr" }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetYangName() string { return "trace-information" }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) SetParent(parent types.Entity) { traceInformation.parent = parent }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetParent() types.Entity { return traceInformation.parent }

func (traceInformation *Rcmd_Server_Detail_ServerDetail_TraceInformation) GetParentYangName() string { return "server-detail" }

// Rcmd_Node
// Node Info
type Rcmd_Node struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node Info. The type is slice of Rcmd_Node_NodeInformation.
    NodeInformation []Rcmd_Node_NodeInformation
}

func (node *Rcmd_Node) GetFilter() yfilter.YFilter { return node.YFilter }

func (node *Rcmd_Node) SetFilter(yf yfilter.YFilter) { node.YFilter = yf }

func (node *Rcmd_Node) GetGoName(yname string) string {
    if yname == "node-information" { return "NodeInformation" }
    return ""
}

func (node *Rcmd_Node) GetSegmentPath() string {
    return "node"
}

func (node *Rcmd_Node) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "node-information" {
        for _, c := range node.NodeInformation {
            if node.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Node_NodeInformation{}
        node.NodeInformation = append(node.NodeInformation, child)
        return &node.NodeInformation[len(node.NodeInformation)-1]
    }
    return nil
}

func (node *Rcmd_Node) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range node.NodeInformation {
        children[node.NodeInformation[i].GetSegmentPath()] = &node.NodeInformation[i]
    }
    return children
}

func (node *Rcmd_Node) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (node *Rcmd_Node) GetBundleName() string { return "cisco_ios_xr" }

func (node *Rcmd_Node) GetYangName() string { return "node" }

func (node *Rcmd_Node) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (node *Rcmd_Node) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (node *Rcmd_Node) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (node *Rcmd_Node) SetParent(parent types.Entity) { node.parent = parent }

func (node *Rcmd_Node) GetParent() types.Entity { return node.parent }

func (node *Rcmd_Node) GetParentYangName() string { return "rcmd" }

// Rcmd_Node_NodeInformation
// Node Info
type Rcmd_Node_NodeInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Node Id. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // Node Name. The type is string.
    NodeName interface{}

    // Rack Id. The type is interface{} with range: 0..4294967295.
    RackId interface{}

    // Last Updated Time. The type is string.
    LastUpdateTime interface{}

    // Forward Referenced. The type is RcmdBoolYesNo.
    FwdReferenced interface{}

    // Node Type. The type is RcmdShowNode.
    NodeType interface{}

    // Software State. The type is interface{} with range: 0..4294967295.
    SoftwareState interface{}

    // Card State. The type is interface{} with range: 0..4294967295.
    CardState interface{}

    // Node State. The type is RcmdBoolYesNo.
    NodeState interface{}

    // Status. The type is RcmdBagEnblDsbl.
    Status interface{}

    // Diag Mode. The type is interface{} with range: 0..4294967295.
    DiagMode interface{}

    // Redundancy State. The type is interface{} with range: 0..4294967295.
    RedundancyState interface{}
}

func (nodeInformation *Rcmd_Node_NodeInformation) GetFilter() yfilter.YFilter { return nodeInformation.YFilter }

func (nodeInformation *Rcmd_Node_NodeInformation) SetFilter(yf yfilter.YFilter) { nodeInformation.YFilter = yf }

func (nodeInformation *Rcmd_Node_NodeInformation) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "node-name" { return "NodeName" }
    if yname == "rack-id" { return "RackId" }
    if yname == "last-update-time" { return "LastUpdateTime" }
    if yname == "fwd-referenced" { return "FwdReferenced" }
    if yname == "node-type" { return "NodeType" }
    if yname == "software-state" { return "SoftwareState" }
    if yname == "card-state" { return "CardState" }
    if yname == "node-state" { return "NodeState" }
    if yname == "status" { return "Status" }
    if yname == "diag-mode" { return "DiagMode" }
    if yname == "redundancy-state" { return "RedundancyState" }
    return ""
}

func (nodeInformation *Rcmd_Node_NodeInformation) GetSegmentPath() string {
    return "node-information"
}

func (nodeInformation *Rcmd_Node_NodeInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeInformation *Rcmd_Node_NodeInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeInformation *Rcmd_Node_NodeInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = nodeInformation.NodeId
    leafs["node-name"] = nodeInformation.NodeName
    leafs["rack-id"] = nodeInformation.RackId
    leafs["last-update-time"] = nodeInformation.LastUpdateTime
    leafs["fwd-referenced"] = nodeInformation.FwdReferenced
    leafs["node-type"] = nodeInformation.NodeType
    leafs["software-state"] = nodeInformation.SoftwareState
    leafs["card-state"] = nodeInformation.CardState
    leafs["node-state"] = nodeInformation.NodeState
    leafs["status"] = nodeInformation.Status
    leafs["diag-mode"] = nodeInformation.DiagMode
    leafs["redundancy-state"] = nodeInformation.RedundancyState
    return leafs
}

func (nodeInformation *Rcmd_Node_NodeInformation) GetBundleName() string { return "cisco_ios_xr" }

func (nodeInformation *Rcmd_Node_NodeInformation) GetYangName() string { return "node-information" }

func (nodeInformation *Rcmd_Node_NodeInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeInformation *Rcmd_Node_NodeInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeInformation *Rcmd_Node_NodeInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeInformation *Rcmd_Node_NodeInformation) SetParent(parent types.Entity) { nodeInformation.parent = parent }

func (nodeInformation *Rcmd_Node_NodeInformation) GetParent() types.Entity { return nodeInformation.parent }

func (nodeInformation *Rcmd_Node_NodeInformation) GetParentYangName() string { return "node" }

// Rcmd_Isis
// Operational data for ISIS
type Rcmd_Isis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data.
    Instances Rcmd_Isis_Instances
}

func (isis *Rcmd_Isis) GetFilter() yfilter.YFilter { return isis.YFilter }

func (isis *Rcmd_Isis) SetFilter(yf yfilter.YFilter) { isis.YFilter = yf }

func (isis *Rcmd_Isis) GetGoName(yname string) string {
    if yname == "instances" { return "Instances" }
    return ""
}

func (isis *Rcmd_Isis) GetSegmentPath() string {
    return "isis"
}

func (isis *Rcmd_Isis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instances" {
        return &isis.Instances
    }
    return nil
}

func (isis *Rcmd_Isis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["instances"] = &isis.Instances
    return children
}

func (isis *Rcmd_Isis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isis *Rcmd_Isis) GetBundleName() string { return "cisco_ios_xr" }

func (isis *Rcmd_Isis) GetYangName() string { return "isis" }

func (isis *Rcmd_Isis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isis *Rcmd_Isis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isis *Rcmd_Isis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isis *Rcmd_Isis) SetParent(parent types.Entity) { isis.parent = parent }

func (isis *Rcmd_Isis) GetParent() types.Entity { return isis.parent }

func (isis *Rcmd_Isis) GetParentYangName() string { return "rcmd" }

// Rcmd_Isis_Instances
// Operational data
type Rcmd_Isis_Instances struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data for a particular instance. The type is slice of
    // Rcmd_Isis_Instances_Instance.
    Instance []Rcmd_Isis_Instances_Instance
}

func (instances *Rcmd_Isis_Instances) GetFilter() yfilter.YFilter { return instances.YFilter }

func (instances *Rcmd_Isis_Instances) SetFilter(yf yfilter.YFilter) { instances.YFilter = yf }

func (instances *Rcmd_Isis_Instances) GetGoName(yname string) string {
    if yname == "instance" { return "Instance" }
    return ""
}

func (instances *Rcmd_Isis_Instances) GetSegmentPath() string {
    return "instances"
}

func (instances *Rcmd_Isis_Instances) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance" {
        for _, c := range instances.Instance {
            if instances.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance{}
        instances.Instance = append(instances.Instance, child)
        return &instances.Instance[len(instances.Instance)-1]
    }
    return nil
}

func (instances *Rcmd_Isis_Instances) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instances.Instance {
        children[instances.Instance[i].GetSegmentPath()] = &instances.Instance[i]
    }
    return children
}

func (instances *Rcmd_Isis_Instances) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (instances *Rcmd_Isis_Instances) GetBundleName() string { return "cisco_ios_xr" }

func (instances *Rcmd_Isis_Instances) GetYangName() string { return "instances" }

func (instances *Rcmd_Isis_Instances) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instances *Rcmd_Isis_Instances) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instances *Rcmd_Isis_Instances) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instances *Rcmd_Isis_Instances) SetParent(parent types.Entity) { instances.parent = parent }

func (instances *Rcmd_Isis_Instances) GetParent() types.Entity { return instances.parent }

func (instances *Rcmd_Isis_Instances) GetParentYangName() string { return "isis" }

// Rcmd_Isis_Instances_Instance
// Operational data for a particular instance
type Rcmd_Isis_Instances_Instance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Operational data for a particular instance. The
    // type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // ISIS IP-FRR events summary data.
    IpfrrEventSummaries Rcmd_Isis_Instances_Instance_IpfrrEventSummaries

    // ISIS Prefix events statistics data.
    PrefixEventStatistics Rcmd_Isis_Instances_Instance_PrefixEventStatistics

    // ISIS SPF run summary data.
    SpfRunSummaries Rcmd_Isis_Instances_Instance_SpfRunSummaries

    // ISIS IP-FRR Event offline data.
    IpfrrEventOfflines Rcmd_Isis_Instances_Instance_IpfrrEventOfflines

    // ISIS SPF run offline data.
    SpfRunOfflines Rcmd_Isis_Instances_Instance_SpfRunOfflines

    // ISIS Prefix events summary data.
    PrefixEventSummaries Rcmd_Isis_Instances_Instance_PrefixEventSummaries

    // ISIS Prefix events offline data.
    PrefixEventOfflines Rcmd_Isis_Instances_Instance_PrefixEventOfflines

    // Regenerated LSP data.
    LspRegenerateds Rcmd_Isis_Instances_Instance_LspRegenerateds
}

func (instance *Rcmd_Isis_Instances_Instance) GetFilter() yfilter.YFilter { return instance.YFilter }

func (instance *Rcmd_Isis_Instances_Instance) SetFilter(yf yfilter.YFilter) { instance.YFilter = yf }

func (instance *Rcmd_Isis_Instances_Instance) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "ipfrr-event-summaries" { return "IpfrrEventSummaries" }
    if yname == "prefix-event-statistics" { return "PrefixEventStatistics" }
    if yname == "spf-run-summaries" { return "SpfRunSummaries" }
    if yname == "ipfrr-event-offlines" { return "IpfrrEventOfflines" }
    if yname == "spf-run-offlines" { return "SpfRunOfflines" }
    if yname == "prefix-event-summaries" { return "PrefixEventSummaries" }
    if yname == "prefix-event-offlines" { return "PrefixEventOfflines" }
    if yname == "lsp-regenerateds" { return "LspRegenerateds" }
    return ""
}

func (instance *Rcmd_Isis_Instances_Instance) GetSegmentPath() string {
    return "instance" + "[instance-name='" + fmt.Sprintf("%v", instance.InstanceName) + "']"
}

func (instance *Rcmd_Isis_Instances_Instance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-event-summaries" {
        return &instance.IpfrrEventSummaries
    }
    if childYangName == "prefix-event-statistics" {
        return &instance.PrefixEventStatistics
    }
    if childYangName == "spf-run-summaries" {
        return &instance.SpfRunSummaries
    }
    if childYangName == "ipfrr-event-offlines" {
        return &instance.IpfrrEventOfflines
    }
    if childYangName == "spf-run-offlines" {
        return &instance.SpfRunOfflines
    }
    if childYangName == "prefix-event-summaries" {
        return &instance.PrefixEventSummaries
    }
    if childYangName == "prefix-event-offlines" {
        return &instance.PrefixEventOfflines
    }
    if childYangName == "lsp-regenerateds" {
        return &instance.LspRegenerateds
    }
    return nil
}

func (instance *Rcmd_Isis_Instances_Instance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipfrr-event-summaries"] = &instance.IpfrrEventSummaries
    children["prefix-event-statistics"] = &instance.PrefixEventStatistics
    children["spf-run-summaries"] = &instance.SpfRunSummaries
    children["ipfrr-event-offlines"] = &instance.IpfrrEventOfflines
    children["spf-run-offlines"] = &instance.SpfRunOfflines
    children["prefix-event-summaries"] = &instance.PrefixEventSummaries
    children["prefix-event-offlines"] = &instance.PrefixEventOfflines
    children["lsp-regenerateds"] = &instance.LspRegenerateds
    return children
}

func (instance *Rcmd_Isis_Instances_Instance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = instance.InstanceName
    return leafs
}

func (instance *Rcmd_Isis_Instances_Instance) GetBundleName() string { return "cisco_ios_xr" }

func (instance *Rcmd_Isis_Instances_Instance) GetYangName() string { return "instance" }

func (instance *Rcmd_Isis_Instances_Instance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instance *Rcmd_Isis_Instances_Instance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instance *Rcmd_Isis_Instances_Instance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instance *Rcmd_Isis_Instances_Instance) SetParent(parent types.Entity) { instance.parent = parent }

func (instance *Rcmd_Isis_Instances_Instance) GetParent() types.Entity { return instance.parent }

func (instance *Rcmd_Isis_Instances_Instance) GetParentYangName() string { return "instances" }

// Rcmd_Isis_Instances_Instance_IpfrrEventSummaries
// ISIS IP-FRR events summary data
type Rcmd_Isis_Instances_Instance_IpfrrEventSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP-FRR Event data. The type is slice of
    // Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary.
    IpfrrEventSummary []Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary
}

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetFilter() yfilter.YFilter { return ipfrrEventSummaries.YFilter }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) SetFilter(yf yfilter.YFilter) { ipfrrEventSummaries.YFilter = yf }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetGoName(yname string) string {
    if yname == "ipfrr-event-summary" { return "IpfrrEventSummary" }
    return ""
}

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetSegmentPath() string {
    return "ipfrr-event-summaries"
}

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-event-summary" {
        for _, c := range ipfrrEventSummaries.IpfrrEventSummary {
            if ipfrrEventSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary{}
        ipfrrEventSummaries.IpfrrEventSummary = append(ipfrrEventSummaries.IpfrrEventSummary, child)
        return &ipfrrEventSummaries.IpfrrEventSummary[len(ipfrrEventSummaries.IpfrrEventSummary)-1]
    }
    return nil
}

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventSummaries.IpfrrEventSummary {
        children[ipfrrEventSummaries.IpfrrEventSummary[i].GetSegmentPath()] = &ipfrrEventSummaries.IpfrrEventSummary[i]
    }
    return children
}

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetYangName() string { return "ipfrr-event-summaries" }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) SetParent(parent types.Entity) { ipfrrEventSummaries.parent = parent }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetParent() types.Entity { return ipfrrEventSummaries.parent }

func (ipfrrEventSummaries *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary
// IP-FRR Event data
type Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific IP-FRR Event. The type is interface{}
    // with range: 1..4294967295.
    EventId interface{}

    // IP-Frr Event ID. The type is interface{} with range: 0..4294967295.
    EventIdXr interface{}

    // Trigger time  (eg: Apr 24 13:16:04.961). The type is string.
    TriggerTime interface{}

    // IP-Frr Triggered reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    TriggerSpfRun interface{}

    // Waiting Time (in milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    WaitTime interface{}

    // Start Time offset from trigger time (in milliseconds). The type is string.
    // Units are millisecond.
    StartTimeOffset interface{}

    // Duration for the calculation (in milliseconds). The type is string. Units
    // are millisecond.
    Duration interface{}

    // IP-Frr Completed reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    CompletedSpfRun interface{}

    // Cumulative Number of Routes for all priorities. The type is interface{}
    // with range: 0..4294967295.
    TotalRoutes interface{}

    // Cumulative Number of Fully Protected Routes. The type is interface{} with
    // range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Cumulative Number of Partially Protected Routes. The type is interface{}
    // with range: 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage for all priorities. The type is string. Units are
    // percentage.
    Coverage interface{}

    // IP-Frr Statistics categorized by priority. The type is slice of
    // Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic.
    IpfrrStatistic []Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic

    // Remote Node Information. The type is slice of
    // Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode.
    RemoteNode []Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode
}

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetFilter() yfilter.YFilter { return ipfrrEventSummary.YFilter }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) SetFilter(yf yfilter.YFilter) { ipfrrEventSummary.YFilter = yf }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "event-id-xr" { return "EventIdXr" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "trigger-spf-run" { return "TriggerSpfRun" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "start-time-offset" { return "StartTimeOffset" }
    if yname == "duration" { return "Duration" }
    if yname == "completed-spf-run" { return "CompletedSpfRun" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "ipfrr-statistic" { return "IpfrrStatistic" }
    if yname == "remote-node" { return "RemoteNode" }
    return ""
}

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetSegmentPath() string {
    return "ipfrr-event-summary" + "[event-id='" + fmt.Sprintf("%v", ipfrrEventSummary.EventId) + "']"
}

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-statistic" {
        for _, c := range ipfrrEventSummary.IpfrrStatistic {
            if ipfrrEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic{}
        ipfrrEventSummary.IpfrrStatistic = append(ipfrrEventSummary.IpfrrStatistic, child)
        return &ipfrrEventSummary.IpfrrStatistic[len(ipfrrEventSummary.IpfrrStatistic)-1]
    }
    if childYangName == "remote-node" {
        for _, c := range ipfrrEventSummary.RemoteNode {
            if ipfrrEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode{}
        ipfrrEventSummary.RemoteNode = append(ipfrrEventSummary.RemoteNode, child)
        return &ipfrrEventSummary.RemoteNode[len(ipfrrEventSummary.RemoteNode)-1]
    }
    return nil
}

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventSummary.IpfrrStatistic {
        children[ipfrrEventSummary.IpfrrStatistic[i].GetSegmentPath()] = &ipfrrEventSummary.IpfrrStatistic[i]
    }
    for i := range ipfrrEventSummary.RemoteNode {
        children[ipfrrEventSummary.RemoteNode[i].GetSegmentPath()] = &ipfrrEventSummary.RemoteNode[i]
    }
    return children
}

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = ipfrrEventSummary.EventId
    leafs["event-id-xr"] = ipfrrEventSummary.EventIdXr
    leafs["trigger-time"] = ipfrrEventSummary.TriggerTime
    leafs["trigger-spf-run"] = ipfrrEventSummary.TriggerSpfRun
    leafs["wait-time"] = ipfrrEventSummary.WaitTime
    leafs["start-time-offset"] = ipfrrEventSummary.StartTimeOffset
    leafs["duration"] = ipfrrEventSummary.Duration
    leafs["completed-spf-run"] = ipfrrEventSummary.CompletedSpfRun
    leafs["total-routes"] = ipfrrEventSummary.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrEventSummary.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrEventSummary.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrEventSummary.Coverage
    return leafs
}

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetYangName() string { return "ipfrr-event-summary" }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) SetParent(parent types.Entity) { ipfrrEventSummary.parent = parent }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetParent() types.Entity { return ipfrrEventSummary.parent }

func (ipfrrEventSummary *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary) GetParentYangName() string { return "ipfrr-event-summaries" }

// Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic
// IP-Frr Statistics categorized by priority
type Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}

    // Local LFA Coverage in percentage. The type is string. Units are percentage.
    LocalLfaCoverage interface{}

    // Remote LFA Coverage in percentage. The type is string. Units are
    // percentage.
    RemoteLfaCoverage interface{}

    // Covearge is below Configured Threshold. The type is bool.
    BelowThreshold interface{}
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetFilter() yfilter.YFilter { return ipfrrStatistic.YFilter }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) SetFilter(yf yfilter.YFilter) { ipfrrStatistic.YFilter = yf }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "local-lfa-coverage" { return "LocalLfaCoverage" }
    if yname == "remote-lfa-coverage" { return "RemoteLfaCoverage" }
    if yname == "below-threshold" { return "BelowThreshold" }
    return ""
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetSegmentPath() string {
    return "ipfrr-statistic"
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = ipfrrStatistic.Priority
    leafs["total-routes"] = ipfrrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrStatistic.Coverage
    leafs["local-lfa-coverage"] = ipfrrStatistic.LocalLfaCoverage
    leafs["remote-lfa-coverage"] = ipfrrStatistic.RemoteLfaCoverage
    leafs["below-threshold"] = ipfrrStatistic.BelowThreshold
    return leafs
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetYangName() string { return "ipfrr-statistic" }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) SetParent(parent types.Entity) { ipfrrStatistic.parent = parent }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetParent() types.Entity { return ipfrrStatistic.parent }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_IpfrrStatistic) GetParentYangName() string { return "ipfrr-event-summary" }

// Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode
// Remote Node Information
type Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote-LFA Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Number of paths protected by this Remote Node. The type is interface{} with
    // range: 0..4294967295.
    PathCount interface{}

    // Inuse time of the Remote Node (eg: Apr 24 13:16 :04.961). The type is
    // string.
    InUseTime interface{}

    // Protected Primary Paths. The type is slice of
    // Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath.
    PrimaryPath []Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetFilter() yfilter.YFilter { return remoteNode.YFilter }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) SetFilter(yf yfilter.YFilter) { remoteNode.YFilter = yf }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetGoName(yname string) string {
    if yname == "remote-node-id" { return "RemoteNodeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "path-count" { return "PathCount" }
    if yname == "in-use-time" { return "InUseTime" }
    if yname == "primary-path" { return "PrimaryPath" }
    return ""
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetSegmentPath() string {
    return "remote-node"
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary-path" {
        for _, c := range remoteNode.PrimaryPath {
            if remoteNode.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath{}
        remoteNode.PrimaryPath = append(remoteNode.PrimaryPath, child)
        return &remoteNode.PrimaryPath[len(remoteNode.PrimaryPath)-1]
    }
    return nil
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteNode.PrimaryPath {
        children[remoteNode.PrimaryPath[i].GetSegmentPath()] = &remoteNode.PrimaryPath[i]
    }
    return children
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["remote-node-id"] = remoteNode.RemoteNodeId
    leafs["interface-name"] = remoteNode.InterfaceName
    leafs["neighbour-address"] = remoteNode.NeighbourAddress
    leafs["path-count"] = remoteNode.PathCount
    leafs["in-use-time"] = remoteNode.InUseTime
    return leafs
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetBundleName() string { return "cisco_ios_xr" }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetYangName() string { return "remote-node" }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) SetParent(parent types.Entity) { remoteNode.parent = parent }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetParent() types.Entity { return remoteNode.parent }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode) GetParentYangName() string { return "ipfrr-event-summary" }

// Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath
// Protected Primary Paths
type Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetFilter() yfilter.YFilter { return primaryPath.YFilter }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) SetFilter(yf yfilter.YFilter) { primaryPath.YFilter = yf }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    return ""
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetSegmentPath() string {
    return "primary-path"
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = primaryPath.InterfaceName
    leafs["neighbour-address"] = primaryPath.NeighbourAddress
    return leafs
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetBundleName() string { return "cisco_ios_xr" }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetYangName() string { return "primary-path" }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) SetParent(parent types.Entity) { primaryPath.parent = parent }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetParent() types.Entity { return primaryPath.parent }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventSummaries_IpfrrEventSummary_RemoteNode_PrimaryPath) GetParentYangName() string { return "remote-node" }

// Rcmd_Isis_Instances_Instance_PrefixEventStatistics
// ISIS Prefix events statistics data
type Rcmd_Isis_Instances_Instance_PrefixEventStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Monitoring Statistics. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic.
    PrefixEventStatistic []Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic
}

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetFilter() yfilter.YFilter { return prefixEventStatistics.YFilter }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) SetFilter(yf yfilter.YFilter) { prefixEventStatistics.YFilter = yf }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetGoName(yname string) string {
    if yname == "prefix-event-statistic" { return "PrefixEventStatistic" }
    return ""
}

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetSegmentPath() string {
    return "prefix-event-statistics"
}

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-event-statistic" {
        for _, c := range prefixEventStatistics.PrefixEventStatistic {
            if prefixEventStatistics.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic{}
        prefixEventStatistics.PrefixEventStatistic = append(prefixEventStatistics.PrefixEventStatistic, child)
        return &prefixEventStatistics.PrefixEventStatistic[len(prefixEventStatistics.PrefixEventStatistic)-1]
    }
    return nil
}

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixEventStatistics.PrefixEventStatistic {
        children[prefixEventStatistics.PrefixEventStatistic[i].GetSegmentPath()] = &prefixEventStatistics.PrefixEventStatistic[i]
    }
    return children
}

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetYangName() string { return "prefix-event-statistics" }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) SetParent(parent types.Entity) { prefixEventStatistics.parent = parent }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetParent() types.Entity { return prefixEventStatistics.parent }

func (prefixEventStatistics *Rcmd_Isis_Instances_Instance_PrefixEventStatistics) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic
// Monitoring Statistics
type Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Events with Prefix. The type is one of the
    // following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2])),
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8]))).
    PrefixInfo interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Last event trigger time. The type is string.
    LastEventTime interface{}

    // Last event processed priority. The type is RcmdPriorityLevel.
    LastPriority interface{}

    // Last event Route Type. The type is RcmdShowRoute.
    LastRouteType interface{}

    // Last event Add/Delete. The type is RcmdChange.
    LastChangeType interface{}

    // Last Known Cost. The type is interface{} with range: 0..4294967295.
    LastCost interface{}

    // No. of times processed under Critical Priority. The type is interface{}
    // with range: 0..4294967295.
    CriticalPriority interface{}

    // No. of times processed under High Priority. The type is interface{} with
    // range: 0..4294967295.
    HighPriority interface{}

    // No. of times processed under Medium Priority. The type is interface{} with
    // range: 0..4294967295.
    MediumPriority interface{}

    // No. of times processed under Low Priority. The type is interface{} with
    // range: 0..4294967295.
    LowPriority interface{}

    // No. of times route gets Added. The type is interface{} with range:
    // 0..4294967295.
    AddCount interface{}

    // No. of times route gets Deleted. The type is interface{} with range:
    // 0..4294967295.
    ModifyCount interface{}

    // No. of times route gets Deleted. The type is interface{} with range:
    // 0..4294967295.
    DeleteCount interface{}

    // No. of times threshold got exceeded. The type is interface{} with range:
    // 0..4294967295.
    ThresholdExceedCount interface{}
}

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetFilter() yfilter.YFilter { return prefixEventStatistic.YFilter }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) SetFilter(yf yfilter.YFilter) { prefixEventStatistic.YFilter = yf }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetGoName(yname string) string {
    if yname == "prefix-info" { return "PrefixInfo" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "last-event-time" { return "LastEventTime" }
    if yname == "last-priority" { return "LastPriority" }
    if yname == "last-route-type" { return "LastRouteType" }
    if yname == "last-change-type" { return "LastChangeType" }
    if yname == "last-cost" { return "LastCost" }
    if yname == "critical-priority" { return "CriticalPriority" }
    if yname == "high-priority" { return "HighPriority" }
    if yname == "medium-priority" { return "MediumPriority" }
    if yname == "low-priority" { return "LowPriority" }
    if yname == "add-count" { return "AddCount" }
    if yname == "modify-count" { return "ModifyCount" }
    if yname == "delete-count" { return "DeleteCount" }
    if yname == "threshold-exceed-count" { return "ThresholdExceedCount" }
    return ""
}

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetSegmentPath() string {
    return "prefix-event-statistic" + "[prefix-info='" + fmt.Sprintf("%v", prefixEventStatistic.PrefixInfo) + "']"
}

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-info"] = prefixEventStatistic.PrefixInfo
    leafs["prefix"] = prefixEventStatistic.Prefix
    leafs["prefix-lenth"] = prefixEventStatistic.PrefixLenth
    leafs["last-event-time"] = prefixEventStatistic.LastEventTime
    leafs["last-priority"] = prefixEventStatistic.LastPriority
    leafs["last-route-type"] = prefixEventStatistic.LastRouteType
    leafs["last-change-type"] = prefixEventStatistic.LastChangeType
    leafs["last-cost"] = prefixEventStatistic.LastCost
    leafs["critical-priority"] = prefixEventStatistic.CriticalPriority
    leafs["high-priority"] = prefixEventStatistic.HighPriority
    leafs["medium-priority"] = prefixEventStatistic.MediumPriority
    leafs["low-priority"] = prefixEventStatistic.LowPriority
    leafs["add-count"] = prefixEventStatistic.AddCount
    leafs["modify-count"] = prefixEventStatistic.ModifyCount
    leafs["delete-count"] = prefixEventStatistic.DeleteCount
    leafs["threshold-exceed-count"] = prefixEventStatistic.ThresholdExceedCount
    return leafs
}

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetYangName() string { return "prefix-event-statistic" }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) SetParent(parent types.Entity) { prefixEventStatistic.parent = parent }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetParent() types.Entity { return prefixEventStatistic.parent }

func (prefixEventStatistic *Rcmd_Isis_Instances_Instance_PrefixEventStatistics_PrefixEventStatistic) GetParentYangName() string { return "prefix-event-statistics" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries
// ISIS SPF run summary data
type Rcmd_Isis_Instances_Instance_SpfRunSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF Event data. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary.
    SpfRunSummary []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary
}

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetFilter() yfilter.YFilter { return spfRunSummaries.YFilter }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) SetFilter(yf yfilter.YFilter) { spfRunSummaries.YFilter = yf }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetGoName(yname string) string {
    if yname == "spf-run-summary" { return "SpfRunSummary" }
    return ""
}

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetSegmentPath() string {
    return "spf-run-summaries"
}

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-run-summary" {
        for _, c := range spfRunSummaries.SpfRunSummary {
            if spfRunSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary{}
        spfRunSummaries.SpfRunSummary = append(spfRunSummaries.SpfRunSummary, child)
        return &spfRunSummaries.SpfRunSummary[len(spfRunSummaries.SpfRunSummary)-1]
    }
    return nil
}

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfRunSummaries.SpfRunSummary {
        children[spfRunSummaries.SpfRunSummary[i].GetSegmentPath()] = &spfRunSummaries.SpfRunSummary[i]
    }
    return children
}

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetYangName() string { return "spf-run-summaries" }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) SetParent(parent types.Entity) { spfRunSummaries.parent = parent }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetParent() types.Entity { return spfRunSummaries.parent }

func (spfRunSummaries *Rcmd_Isis_Instances_Instance_SpfRunSummaries) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary
// SPF Event data
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific SPF run. The type is interface{} with
    // range: 1..4294967295.
    SpfRunNumber interface{}

    // Start time (offset from event trigger time in ss .msec). The type is
    // string.
    StartTime interface{}

    // Wait time applied at SPF schedule (in msec). The type is interface{} with
    // range: 0..4294967295.
    WaitTime interface{}

    // Trigger reasons for SPF run. Example: pr^ - periodic, cr^ - clear (Check
    // the documentation for the entire list). The type is string.
    Reason interface{}

    // SPF summary information.
    SpfSummary Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary

    // SPF Node statistics.
    NodeStatistics Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics

    // Trigger LSP. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp.
    TriggerLsp []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp

    // Convergence information on per-priority basis. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority.
    Priority []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority

    // List of LSP changes processed. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed.
    LspProcessed []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed

    // List of LSP regenerated. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated.
    LspRegenerated []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated
}

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetFilter() yfilter.YFilter { return spfRunSummary.YFilter }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) SetFilter(yf yfilter.YFilter) { spfRunSummary.YFilter = yf }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetGoName(yname string) string {
    if yname == "spf-run-number" { return "SpfRunNumber" }
    if yname == "start-time" { return "StartTime" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "reason" { return "Reason" }
    if yname == "spf-summary" { return "SpfSummary" }
    if yname == "node-statistics" { return "NodeStatistics" }
    if yname == "trigger-lsp" { return "TriggerLsp" }
    if yname == "priority" { return "Priority" }
    if yname == "lsp-processed" { return "LspProcessed" }
    if yname == "lsp-regenerated" { return "LspRegenerated" }
    return ""
}

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetSegmentPath() string {
    return "spf-run-summary" + "[spf-run-number='" + fmt.Sprintf("%v", spfRunSummary.SpfRunNumber) + "']"
}

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-summary" {
        return &spfRunSummary.SpfSummary
    }
    if childYangName == "node-statistics" {
        return &spfRunSummary.NodeStatistics
    }
    if childYangName == "trigger-lsp" {
        for _, c := range spfRunSummary.TriggerLsp {
            if spfRunSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp{}
        spfRunSummary.TriggerLsp = append(spfRunSummary.TriggerLsp, child)
        return &spfRunSummary.TriggerLsp[len(spfRunSummary.TriggerLsp)-1]
    }
    if childYangName == "priority" {
        for _, c := range spfRunSummary.Priority {
            if spfRunSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority{}
        spfRunSummary.Priority = append(spfRunSummary.Priority, child)
        return &spfRunSummary.Priority[len(spfRunSummary.Priority)-1]
    }
    if childYangName == "lsp-processed" {
        for _, c := range spfRunSummary.LspProcessed {
            if spfRunSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed{}
        spfRunSummary.LspProcessed = append(spfRunSummary.LspProcessed, child)
        return &spfRunSummary.LspProcessed[len(spfRunSummary.LspProcessed)-1]
    }
    if childYangName == "lsp-regenerated" {
        for _, c := range spfRunSummary.LspRegenerated {
            if spfRunSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated{}
        spfRunSummary.LspRegenerated = append(spfRunSummary.LspRegenerated, child)
        return &spfRunSummary.LspRegenerated[len(spfRunSummary.LspRegenerated)-1]
    }
    return nil
}

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-summary"] = &spfRunSummary.SpfSummary
    children["node-statistics"] = &spfRunSummary.NodeStatistics
    for i := range spfRunSummary.TriggerLsp {
        children[spfRunSummary.TriggerLsp[i].GetSegmentPath()] = &spfRunSummary.TriggerLsp[i]
    }
    for i := range spfRunSummary.Priority {
        children[spfRunSummary.Priority[i].GetSegmentPath()] = &spfRunSummary.Priority[i]
    }
    for i := range spfRunSummary.LspProcessed {
        children[spfRunSummary.LspProcessed[i].GetSegmentPath()] = &spfRunSummary.LspProcessed[i]
    }
    for i := range spfRunSummary.LspRegenerated {
        children[spfRunSummary.LspRegenerated[i].GetSegmentPath()] = &spfRunSummary.LspRegenerated[i]
    }
    return children
}

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-run-number"] = spfRunSummary.SpfRunNumber
    leafs["start-time"] = spfRunSummary.StartTime
    leafs["wait-time"] = spfRunSummary.WaitTime
    leafs["reason"] = spfRunSummary.Reason
    return leafs
}

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetYangName() string { return "spf-run-summary" }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) SetParent(parent types.Entity) { spfRunSummary.parent = parent }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetParent() types.Entity { return spfRunSummary.parent }

func (spfRunSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary) GetParentYangName() string { return "spf-run-summaries" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary
// SPF summary information
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology index (multi-topology). The type is interface{} with range:
    // 0..4294967295.
    Topology interface{}

    // ISIS Level. The type is RcmdIsisLvl.
    IsisLevel interface{}

    // Type of SPF. The type is RcmdIsisSpf.
    Type interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // SPF state. The type is RcmdSpfState.
    State interface{}

    // Whether the event has all information. The type is bool.
    IsDataComplete interface{}

    // Trigger time (in hh:mm:ss.msec). The type is string.
    TriggerTime interface{}

    // Duration of SPF calculation (in ss.msec). The type is string.
    Duration interface{}

    // Total number of LSP changes processed. The type is interface{} with range:
    // 0..65535.
    TotalLspChanges interface{}

    // Convergence information summary on per-priority basis. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary.
    PrioritySummary []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetFilter() yfilter.YFilter { return spfSummary.YFilter }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) SetFilter(yf yfilter.YFilter) { spfSummary.YFilter = yf }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetGoName(yname string) string {
    if yname == "topology" { return "Topology" }
    if yname == "isis-level" { return "IsisLevel" }
    if yname == "type" { return "Type" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "state" { return "State" }
    if yname == "is-data-complete" { return "IsDataComplete" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "duration" { return "Duration" }
    if yname == "total-lsp-changes" { return "TotalLspChanges" }
    if yname == "priority-summary" { return "PrioritySummary" }
    return ""
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetSegmentPath() string {
    return "spf-summary"
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        for _, c := range spfSummary.PrioritySummary {
            if spfSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary{}
        spfSummary.PrioritySummary = append(spfSummary.PrioritySummary, child)
        return &spfSummary.PrioritySummary[len(spfSummary.PrioritySummary)-1]
    }
    return nil
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfSummary.PrioritySummary {
        children[spfSummary.PrioritySummary[i].GetSegmentPath()] = &spfSummary.PrioritySummary[i]
    }
    return children
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology"] = spfSummary.Topology
    leafs["isis-level"] = spfSummary.IsisLevel
    leafs["type"] = spfSummary.Type
    leafs["threshold-exceeded"] = spfSummary.ThresholdExceeded
    leafs["state"] = spfSummary.State
    leafs["is-data-complete"] = spfSummary.IsDataComplete
    leafs["trigger-time"] = spfSummary.TriggerTime
    leafs["duration"] = spfSummary.Duration
    leafs["total-lsp-changes"] = spfSummary.TotalLspChanges
    return leafs
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetBundleName() string { return "cisco_ios_xr" }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetYangName() string { return "spf-summary" }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) SetParent(parent types.Entity) { spfSummary.parent = parent }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetParent() types.Entity { return spfSummary.parent }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary
// Convergence information summary on per-priority
// basis
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary) GetParentYangName() string { return "spf-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_SpfSummary_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics
// SPF Node statistics
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetFilter() yfilter.YFilter { return nodeStatistics.YFilter }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) SetFilter(yf yfilter.YFilter) { nodeStatistics.YFilter = yf }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetSegmentPath() string {
    return "node-statistics"
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = nodeStatistics.Adds
    leafs["deletes"] = nodeStatistics.Deletes
    leafs["modifies"] = nodeStatistics.Modifies
    leafs["reachables"] = nodeStatistics.Reachables
    leafs["unreachables"] = nodeStatistics.Unreachables
    leafs["touches"] = nodeStatistics.Touches
    return leafs
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetYangName() string { return "node-statistics" }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) SetParent(parent types.Entity) { nodeStatistics.parent = parent }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetParent() types.Entity { return nodeStatistics.parent }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_NodeStatistics) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp
// Trigger LSP
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP ID. The type is string.
    LspId interface{}

    // Sequence Number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetFilter() yfilter.YFilter { return triggerLsp.YFilter }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) SetFilter(yf yfilter.YFilter) { triggerLsp.YFilter = yf }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetSegmentPath() string {
    return "trigger-lsp"
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = triggerLsp.LspId
    leafs["sequence-number"] = triggerLsp.SequenceNumber
    leafs["change-type"] = triggerLsp.ChangeType
    leafs["reception-time"] = triggerLsp.ReceptionTime
    return leafs
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetYangName() string { return "trigger-lsp" }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) SetParent(parent types.Entity) { triggerLsp.parent = parent }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetParent() types.Entity { return triggerLsp.parent }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_TriggerLsp) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority
// Convergence information on per-priority basis
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of the priority.
    PrioritySummary Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary

    // Convergence timeline details. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline.
    ConvergenceTimeline []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline

    // List of Leaf Networks Added. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded.
    LeafNetworksAdded []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded

    // List of Leaf Networks Deleted. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted.
    LeafNetworksDeleted []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetGoName(yname string) string {
    if yname == "priority-summary" { return "PrioritySummary" }
    if yname == "convergence-timeline" { return "ConvergenceTimeline" }
    if yname == "leaf-networks-added" { return "LeafNetworksAdded" }
    if yname == "leaf-networks-deleted" { return "LeafNetworksDeleted" }
    return ""
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        return &priority.PrioritySummary
    }
    if childYangName == "convergence-timeline" {
        for _, c := range priority.ConvergenceTimeline {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline{}
        priority.ConvergenceTimeline = append(priority.ConvergenceTimeline, child)
        return &priority.ConvergenceTimeline[len(priority.ConvergenceTimeline)-1]
    }
    if childYangName == "leaf-networks-added" {
        for _, c := range priority.LeafNetworksAdded {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded{}
        priority.LeafNetworksAdded = append(priority.LeafNetworksAdded, child)
        return &priority.LeafNetworksAdded[len(priority.LeafNetworksAdded)-1]
    }
    if childYangName == "leaf-networks-deleted" {
        for _, c := range priority.LeafNetworksDeleted {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted{}
        priority.LeafNetworksDeleted = append(priority.LeafNetworksDeleted, child)
        return &priority.LeafNetworksDeleted[len(priority.LeafNetworksDeleted)-1]
    }
    return nil
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["priority-summary"] = &priority.PrioritySummary
    for i := range priority.ConvergenceTimeline {
        children[priority.ConvergenceTimeline[i].GetSegmentPath()] = &priority.ConvergenceTimeline[i]
    }
    for i := range priority.LeafNetworksAdded {
        children[priority.LeafNetworksAdded[i].GetSegmentPath()] = &priority.LeafNetworksAdded[i]
    }
    for i := range priority.LeafNetworksDeleted {
        children[priority.LeafNetworksDeleted[i].GetSegmentPath()] = &priority.LeafNetworksDeleted[i]
    }
    return children
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary
// Summary of the priority
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline
// Convergence timeline details
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol).
    RouteOrigin Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin

    // Entry point of IPv4 RIB.
    RiBv4Enter Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter

    // Exit point from IPv4 RIB to FIBs.
    RiBv4Exit Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit

    // Route Redistribute point from IPv4 RIB to LDP.
    RiBv4Redistribute Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute

    // Entry point of LDP.
    LdpEnter Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter

    // Exit point of LDP to LSD.
    LdpExit Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit

    // Entry point of LSD.
    LsdEnter Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter

    // Exit point of LSD to FIBs.
    LsdExit Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp.
    LcIp []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls.
    LcMpls []Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetFilter() yfilter.YFilter { return convergenceTimeline.YFilter }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) SetFilter(yf yfilter.YFilter) { convergenceTimeline.YFilter = yf }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetSegmentPath() string {
    return "convergence-timeline"
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-origin" {
        return &convergenceTimeline.RouteOrigin
    }
    if childYangName == "ri-bv4-enter" {
        return &convergenceTimeline.RiBv4Enter
    }
    if childYangName == "ri-bv4-exit" {
        return &convergenceTimeline.RiBv4Exit
    }
    if childYangName == "ri-bv4-redistribute" {
        return &convergenceTimeline.RiBv4Redistribute
    }
    if childYangName == "ldp-enter" {
        return &convergenceTimeline.LdpEnter
    }
    if childYangName == "ldp-exit" {
        return &convergenceTimeline.LdpExit
    }
    if childYangName == "lsd-enter" {
        return &convergenceTimeline.LsdEnter
    }
    if childYangName == "lsd-exit" {
        return &convergenceTimeline.LsdExit
    }
    if childYangName == "lc-ip" {
        for _, c := range convergenceTimeline.LcIp {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp{}
        convergenceTimeline.LcIp = append(convergenceTimeline.LcIp, child)
        return &convergenceTimeline.LcIp[len(convergenceTimeline.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range convergenceTimeline.LcMpls {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls{}
        convergenceTimeline.LcMpls = append(convergenceTimeline.LcMpls, child)
        return &convergenceTimeline.LcMpls[len(convergenceTimeline.LcMpls)-1]
    }
    return nil
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-origin"] = &convergenceTimeline.RouteOrigin
    children["ri-bv4-enter"] = &convergenceTimeline.RiBv4Enter
    children["ri-bv4-exit"] = &convergenceTimeline.RiBv4Exit
    children["ri-bv4-redistribute"] = &convergenceTimeline.RiBv4Redistribute
    children["ldp-enter"] = &convergenceTimeline.LdpEnter
    children["ldp-exit"] = &convergenceTimeline.LdpExit
    children["lsd-enter"] = &convergenceTimeline.LsdEnter
    children["lsd-exit"] = &convergenceTimeline.LsdExit
    for i := range convergenceTimeline.LcIp {
        children[convergenceTimeline.LcIp[i].GetSegmentPath()] = &convergenceTimeline.LcIp[i]
    }
    for i := range convergenceTimeline.LcMpls {
        children[convergenceTimeline.LcMpls[i].GetSegmentPath()] = &convergenceTimeline.LcMpls[i]
    }
    return children
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetBundleName() string { return "cisco_ios_xr" }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetYangName() string { return "convergence-timeline" }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) SetParent(parent types.Entity) { convergenceTimeline.parent = parent }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetParent() types.Entity { return convergenceTimeline.parent }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin
// Route origin (routing protocol)
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetFilter() yfilter.YFilter { return routeOrigin.YFilter }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) SetFilter(yf yfilter.YFilter) { routeOrigin.YFilter = yf }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetSegmentPath() string {
    return "route-origin"
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = routeOrigin.StartTime
    leafs["end-time"] = routeOrigin.EndTime
    leafs["duration"] = routeOrigin.Duration
    return leafs
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetYangName() string { return "route-origin" }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) SetParent(parent types.Entity) { routeOrigin.parent = parent }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetParent() types.Entity { return routeOrigin.parent }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RouteOrigin) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter
// Entry point of IPv4 RIB
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetFilter() yfilter.YFilter { return riBv4Enter.YFilter }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) SetFilter(yf yfilter.YFilter) { riBv4Enter.YFilter = yf }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetSegmentPath() string {
    return "ri-bv4-enter"
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Enter.StartTime
    leafs["end-time"] = riBv4Enter.EndTime
    leafs["duration"] = riBv4Enter.Duration
    return leafs
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetYangName() string { return "ri-bv4-enter" }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) SetParent(parent types.Entity) { riBv4Enter.parent = parent }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetParent() types.Entity { return riBv4Enter.parent }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Enter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit
// Exit point from IPv4 RIB to FIBs
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetFilter() yfilter.YFilter { return riBv4Exit.YFilter }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) SetFilter(yf yfilter.YFilter) { riBv4Exit.YFilter = yf }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetSegmentPath() string {
    return "ri-bv4-exit"
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Exit.StartTime
    leafs["end-time"] = riBv4Exit.EndTime
    leafs["duration"] = riBv4Exit.Duration
    return leafs
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetYangName() string { return "ri-bv4-exit" }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) SetParent(parent types.Entity) { riBv4Exit.parent = parent }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetParent() types.Entity { return riBv4Exit.parent }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Exit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute
// Route Redistribute point from IPv4 RIB to LDP
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetFilter() yfilter.YFilter { return riBv4Redistribute.YFilter }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) SetFilter(yf yfilter.YFilter) { riBv4Redistribute.YFilter = yf }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetSegmentPath() string {
    return "ri-bv4-redistribute"
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Redistribute.StartTime
    leafs["end-time"] = riBv4Redistribute.EndTime
    leafs["duration"] = riBv4Redistribute.Duration
    return leafs
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetYangName() string { return "ri-bv4-redistribute" }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) SetParent(parent types.Entity) { riBv4Redistribute.parent = parent }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParent() types.Entity { return riBv4Redistribute.parent }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter
// Entry point of LDP
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetFilter() yfilter.YFilter { return ldpEnter.YFilter }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) SetFilter(yf yfilter.YFilter) { ldpEnter.YFilter = yf }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetSegmentPath() string {
    return "ldp-enter"
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpEnter.StartTime
    leafs["end-time"] = ldpEnter.EndTime
    leafs["duration"] = ldpEnter.Duration
    return leafs
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetBundleName() string { return "cisco_ios_xr" }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetYangName() string { return "ldp-enter" }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) SetParent(parent types.Entity) { ldpEnter.parent = parent }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetParent() types.Entity { return ldpEnter.parent }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit
// Exit point of LDP to LSD
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetFilter() yfilter.YFilter { return ldpExit.YFilter }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) SetFilter(yf yfilter.YFilter) { ldpExit.YFilter = yf }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetSegmentPath() string {
    return "ldp-exit"
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpExit.StartTime
    leafs["end-time"] = ldpExit.EndTime
    leafs["duration"] = ldpExit.Duration
    return leafs
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetBundleName() string { return "cisco_ios_xr" }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetYangName() string { return "ldp-exit" }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) SetParent(parent types.Entity) { ldpExit.parent = parent }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetParent() types.Entity { return ldpExit.parent }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LdpExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter
// Entry point of LSD
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetFilter() yfilter.YFilter { return lsdEnter.YFilter }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) SetFilter(yf yfilter.YFilter) { lsdEnter.YFilter = yf }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetSegmentPath() string {
    return "lsd-enter"
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdEnter.StartTime
    leafs["end-time"] = lsdEnter.EndTime
    leafs["duration"] = lsdEnter.Duration
    return leafs
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetBundleName() string { return "cisco_ios_xr" }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetYangName() string { return "lsd-enter" }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) SetParent(parent types.Entity) { lsdEnter.parent = parent }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetParent() types.Entity { return lsdEnter.parent }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit
// Exit point of LSD to FIBs
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetFilter() yfilter.YFilter { return lsdExit.YFilter }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) SetFilter(yf yfilter.YFilter) { lsdExit.YFilter = yf }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetSegmentPath() string {
    return "lsd-exit"
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdExit.StartTime
    leafs["end-time"] = lsdExit.EndTime
    leafs["duration"] = lsdExit.Duration
    return leafs
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetBundleName() string { return "cisco_ios_xr" }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetYangName() string { return "lsd-exit" }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) SetParent(parent types.Entity) { lsdExit.parent = parent }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetParent() types.Entity { return lsdExit.parent }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LsdExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcIp.FibComplete
    }
    return nil
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcIp.FibComplete
    return children
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    return leafs
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete
// Completion point of FIB
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParentYangName() string { return "lc-ip" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcMpls.FibComplete
    }
    return nil
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcMpls.FibComplete
    return children
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    return leafs
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete
// Completion point of FIB
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParentYangName() string { return "lc-mpls" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded
// List of Leaf Networks Added
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetFilter() yfilter.YFilter { return leafNetworksAdded.YFilter }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) SetFilter(yf yfilter.YFilter) { leafNetworksAdded.YFilter = yf }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetSegmentPath() string {
    return "leaf-networks-added"
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksAdded.Address
    leafs["net-mask"] = leafNetworksAdded.NetMask
    return leafs
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetYangName() string { return "leaf-networks-added" }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) SetParent(parent types.Entity) { leafNetworksAdded.parent = parent }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetParent() types.Entity { return leafNetworksAdded.parent }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksAdded) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted
// List of Leaf Networks Deleted
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetFilter() yfilter.YFilter { return leafNetworksDeleted.YFilter }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) SetFilter(yf yfilter.YFilter) { leafNetworksDeleted.YFilter = yf }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetSegmentPath() string {
    return "leaf-networks-deleted"
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksDeleted.Address
    leafs["net-mask"] = leafNetworksDeleted.NetMask
    return leafs
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetYangName() string { return "leaf-networks-deleted" }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) SetParent(parent types.Entity) { leafNetworksDeleted.parent = parent }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetParent() types.Entity { return leafNetworksDeleted.parent }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_Priority_LeafNetworksDeleted) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed
// List of LSP changes processed
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP ID. The type is string.
    LspId interface{}

    // Sequence Number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetFilter() yfilter.YFilter { return lspProcessed.YFilter }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) SetFilter(yf yfilter.YFilter) { lspProcessed.YFilter = yf }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetSegmentPath() string {
    return "lsp-processed"
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = lspProcessed.LspId
    leafs["sequence-number"] = lspProcessed.SequenceNumber
    leafs["change-type"] = lspProcessed.ChangeType
    leafs["reception-time"] = lspProcessed.ReceptionTime
    return leafs
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetYangName() string { return "lsp-processed" }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) SetParent(parent types.Entity) { lspProcessed.parent = parent }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetParent() types.Entity { return lspProcessed.parent }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspProcessed) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated
// List of LSP regenerated
type Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Serial Number of the session event. The type is interface{} with range:
    // 0..4294967295.
    SerialNumberXr interface{}

    // LSP ID. The type is string.
    LspId interface{}

    // Sequence Number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}

    // ISIS Level. The type is RcmdIsisLvl.
    IsisLevel interface{}

    // SPF Run Number. The type is interface{} with range: 0..4294967295.
    SpfRunNumber interface{}

    // Trigger reasons for LSP regeneration. Example: pr^ - periodic, cr^ - clear
    // (Check the documentation for the entire list). The type is string.
    Reason interface{}
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetFilter() yfilter.YFilter { return lspRegenerated.YFilter }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) SetFilter(yf yfilter.YFilter) { lspRegenerated.YFilter = yf }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetGoName(yname string) string {
    if yname == "serial-number-xr" { return "SerialNumberXr" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "reception-time" { return "ReceptionTime" }
    if yname == "isis-level" { return "IsisLevel" }
    if yname == "spf-run-number" { return "SpfRunNumber" }
    if yname == "reason" { return "Reason" }
    return ""
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetSegmentPath() string {
    return "lsp-regenerated"
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["serial-number-xr"] = lspRegenerated.SerialNumberXr
    leafs["lsp-id"] = lspRegenerated.LspId
    leafs["sequence-number"] = lspRegenerated.SequenceNumber
    leafs["reception-time"] = lspRegenerated.ReceptionTime
    leafs["isis-level"] = lspRegenerated.IsisLevel
    leafs["spf-run-number"] = lspRegenerated.SpfRunNumber
    leafs["reason"] = lspRegenerated.Reason
    return leafs
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetBundleName() string { return "cisco_ios_xr" }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetYangName() string { return "lsp-regenerated" }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) SetParent(parent types.Entity) { lspRegenerated.parent = parent }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetParent() types.Entity { return lspRegenerated.parent }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunSummaries_SpfRunSummary_LspRegenerated) GetParentYangName() string { return "spf-run-summary" }

// Rcmd_Isis_Instances_Instance_IpfrrEventOfflines
// ISIS IP-FRR Event offline data
type Rcmd_Isis_Instances_Instance_IpfrrEventOfflines struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Offline operational data for particular ISIS IP-FRR Event. The type is
    // slice of Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline.
    IpfrrEventOffline []Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline
}

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetFilter() yfilter.YFilter { return ipfrrEventOfflines.YFilter }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) SetFilter(yf yfilter.YFilter) { ipfrrEventOfflines.YFilter = yf }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetGoName(yname string) string {
    if yname == "ipfrr-event-offline" { return "IpfrrEventOffline" }
    return ""
}

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetSegmentPath() string {
    return "ipfrr-event-offlines"
}

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-event-offline" {
        for _, c := range ipfrrEventOfflines.IpfrrEventOffline {
            if ipfrrEventOfflines.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline{}
        ipfrrEventOfflines.IpfrrEventOffline = append(ipfrrEventOfflines.IpfrrEventOffline, child)
        return &ipfrrEventOfflines.IpfrrEventOffline[len(ipfrrEventOfflines.IpfrrEventOffline)-1]
    }
    return nil
}

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventOfflines.IpfrrEventOffline {
        children[ipfrrEventOfflines.IpfrrEventOffline[i].GetSegmentPath()] = &ipfrrEventOfflines.IpfrrEventOffline[i]
    }
    return children
}

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetYangName() string { return "ipfrr-event-offlines" }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) SetParent(parent types.Entity) { ipfrrEventOfflines.parent = parent }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetParent() types.Entity { return ipfrrEventOfflines.parent }

func (ipfrrEventOfflines *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline
// Offline operational data for particular ISIS
// IP-FRR Event
type Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific IP-FRR Event. The type is interface{}
    // with range: 1..4294967295.
    EventId interface{}

    // IP-Frr Event ID. The type is interface{} with range: 0..4294967295.
    EventIdXr interface{}

    // Trigger time  (eg: Apr 24 13:16:04.961). The type is string.
    TriggerTime interface{}

    // IP-Frr Triggered reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    TriggerSpfRun interface{}

    // Waiting Time (in milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    WaitTime interface{}

    // Start Time offset from trigger time (in milliseconds). The type is string.
    // Units are millisecond.
    StartTimeOffset interface{}

    // Duration for the calculation (in milliseconds). The type is string. Units
    // are millisecond.
    Duration interface{}

    // IP-Frr Completed reference SPF Run Number. The type is interface{} with
    // range: 0..4294967295.
    CompletedSpfRun interface{}

    // Cumulative Number of Routes for all priorities. The type is interface{}
    // with range: 0..4294967295.
    TotalRoutes interface{}

    // Cumulative Number of Fully Protected Routes. The type is interface{} with
    // range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Cumulative Number of Partially Protected Routes. The type is interface{}
    // with range: 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage for all priorities. The type is string. Units are
    // percentage.
    Coverage interface{}

    // IP-Frr Statistics categorized by priority. The type is slice of
    // Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic.
    IpfrrStatistic []Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic

    // Remote Node Information. The type is slice of
    // Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode.
    RemoteNode []Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode
}

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetFilter() yfilter.YFilter { return ipfrrEventOffline.YFilter }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) SetFilter(yf yfilter.YFilter) { ipfrrEventOffline.YFilter = yf }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "event-id-xr" { return "EventIdXr" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "trigger-spf-run" { return "TriggerSpfRun" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "start-time-offset" { return "StartTimeOffset" }
    if yname == "duration" { return "Duration" }
    if yname == "completed-spf-run" { return "CompletedSpfRun" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "ipfrr-statistic" { return "IpfrrStatistic" }
    if yname == "remote-node" { return "RemoteNode" }
    return ""
}

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetSegmentPath() string {
    return "ipfrr-event-offline" + "[event-id='" + fmt.Sprintf("%v", ipfrrEventOffline.EventId) + "']"
}

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-statistic" {
        for _, c := range ipfrrEventOffline.IpfrrStatistic {
            if ipfrrEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic{}
        ipfrrEventOffline.IpfrrStatistic = append(ipfrrEventOffline.IpfrrStatistic, child)
        return &ipfrrEventOffline.IpfrrStatistic[len(ipfrrEventOffline.IpfrrStatistic)-1]
    }
    if childYangName == "remote-node" {
        for _, c := range ipfrrEventOffline.RemoteNode {
            if ipfrrEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode{}
        ipfrrEventOffline.RemoteNode = append(ipfrrEventOffline.RemoteNode, child)
        return &ipfrrEventOffline.RemoteNode[len(ipfrrEventOffline.RemoteNode)-1]
    }
    return nil
}

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ipfrrEventOffline.IpfrrStatistic {
        children[ipfrrEventOffline.IpfrrStatistic[i].GetSegmentPath()] = &ipfrrEventOffline.IpfrrStatistic[i]
    }
    for i := range ipfrrEventOffline.RemoteNode {
        children[ipfrrEventOffline.RemoteNode[i].GetSegmentPath()] = &ipfrrEventOffline.RemoteNode[i]
    }
    return children
}

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = ipfrrEventOffline.EventId
    leafs["event-id-xr"] = ipfrrEventOffline.EventIdXr
    leafs["trigger-time"] = ipfrrEventOffline.TriggerTime
    leafs["trigger-spf-run"] = ipfrrEventOffline.TriggerSpfRun
    leafs["wait-time"] = ipfrrEventOffline.WaitTime
    leafs["start-time-offset"] = ipfrrEventOffline.StartTimeOffset
    leafs["duration"] = ipfrrEventOffline.Duration
    leafs["completed-spf-run"] = ipfrrEventOffline.CompletedSpfRun
    leafs["total-routes"] = ipfrrEventOffline.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrEventOffline.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrEventOffline.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrEventOffline.Coverage
    return leafs
}

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetYangName() string { return "ipfrr-event-offline" }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) SetParent(parent types.Entity) { ipfrrEventOffline.parent = parent }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetParent() types.Entity { return ipfrrEventOffline.parent }

func (ipfrrEventOffline *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline) GetParentYangName() string { return "ipfrr-event-offlines" }

// Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic
// IP-Frr Statistics categorized by priority
type Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}

    // Local LFA Coverage in percentage. The type is string. Units are percentage.
    LocalLfaCoverage interface{}

    // Remote LFA Coverage in percentage. The type is string. Units are
    // percentage.
    RemoteLfaCoverage interface{}

    // Covearge is below Configured Threshold. The type is bool.
    BelowThreshold interface{}
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetFilter() yfilter.YFilter { return ipfrrStatistic.YFilter }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) SetFilter(yf yfilter.YFilter) { ipfrrStatistic.YFilter = yf }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetGoName(yname string) string {
    if yname == "priority" { return "Priority" }
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    if yname == "local-lfa-coverage" { return "LocalLfaCoverage" }
    if yname == "remote-lfa-coverage" { return "RemoteLfaCoverage" }
    if yname == "below-threshold" { return "BelowThreshold" }
    return ""
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetSegmentPath() string {
    return "ipfrr-statistic"
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["priority"] = ipfrrStatistic.Priority
    leafs["total-routes"] = ipfrrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = ipfrrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = ipfrrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = ipfrrStatistic.Coverage
    leafs["local-lfa-coverage"] = ipfrrStatistic.LocalLfaCoverage
    leafs["remote-lfa-coverage"] = ipfrrStatistic.RemoteLfaCoverage
    leafs["below-threshold"] = ipfrrStatistic.BelowThreshold
    return leafs
}

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetYangName() string { return "ipfrr-statistic" }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) SetParent(parent types.Entity) { ipfrrStatistic.parent = parent }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetParent() types.Entity { return ipfrrStatistic.parent }

func (ipfrrStatistic *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_IpfrrStatistic) GetParentYangName() string { return "ipfrr-event-offline" }

// Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode
// Remote Node Information
type Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote-LFA Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Number of paths protected by this Remote Node. The type is interface{} with
    // range: 0..4294967295.
    PathCount interface{}

    // Inuse time of the Remote Node (eg: Apr 24 13:16 :04.961). The type is
    // string.
    InUseTime interface{}

    // Protected Primary Paths. The type is slice of
    // Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath.
    PrimaryPath []Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetFilter() yfilter.YFilter { return remoteNode.YFilter }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) SetFilter(yf yfilter.YFilter) { remoteNode.YFilter = yf }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetGoName(yname string) string {
    if yname == "remote-node-id" { return "RemoteNodeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "path-count" { return "PathCount" }
    if yname == "in-use-time" { return "InUseTime" }
    if yname == "primary-path" { return "PrimaryPath" }
    return ""
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetSegmentPath() string {
    return "remote-node"
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary-path" {
        for _, c := range remoteNode.PrimaryPath {
            if remoteNode.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath{}
        remoteNode.PrimaryPath = append(remoteNode.PrimaryPath, child)
        return &remoteNode.PrimaryPath[len(remoteNode.PrimaryPath)-1]
    }
    return nil
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteNode.PrimaryPath {
        children[remoteNode.PrimaryPath[i].GetSegmentPath()] = &remoteNode.PrimaryPath[i]
    }
    return children
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["remote-node-id"] = remoteNode.RemoteNodeId
    leafs["interface-name"] = remoteNode.InterfaceName
    leafs["neighbour-address"] = remoteNode.NeighbourAddress
    leafs["path-count"] = remoteNode.PathCount
    leafs["in-use-time"] = remoteNode.InUseTime
    return leafs
}

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetBundleName() string { return "cisco_ios_xr" }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetYangName() string { return "remote-node" }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) SetParent(parent types.Entity) { remoteNode.parent = parent }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetParent() types.Entity { return remoteNode.parent }

func (remoteNode *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode) GetParentYangName() string { return "ipfrr-event-offline" }

// Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath
// Protected Primary Paths
type Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetFilter() yfilter.YFilter { return primaryPath.YFilter }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) SetFilter(yf yfilter.YFilter) { primaryPath.YFilter = yf }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    return ""
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetSegmentPath() string {
    return "primary-path"
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = primaryPath.InterfaceName
    leafs["neighbour-address"] = primaryPath.NeighbourAddress
    return leafs
}

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetBundleName() string { return "cisco_ios_xr" }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetYangName() string { return "primary-path" }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) SetParent(parent types.Entity) { primaryPath.parent = parent }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetParent() types.Entity { return primaryPath.parent }

func (primaryPath *Rcmd_Isis_Instances_Instance_IpfrrEventOfflines_IpfrrEventOffline_RemoteNode_PrimaryPath) GetParentYangName() string { return "remote-node" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines
// ISIS SPF run offline data
type Rcmd_Isis_Instances_Instance_SpfRunOfflines struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Offline operational data for particular ISIS SPF run. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline.
    SpfRunOffline []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline
}

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetFilter() yfilter.YFilter { return spfRunOfflines.YFilter }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) SetFilter(yf yfilter.YFilter) { spfRunOfflines.YFilter = yf }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetGoName(yname string) string {
    if yname == "spf-run-offline" { return "SpfRunOffline" }
    return ""
}

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetSegmentPath() string {
    return "spf-run-offlines"
}

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-run-offline" {
        for _, c := range spfRunOfflines.SpfRunOffline {
            if spfRunOfflines.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline{}
        spfRunOfflines.SpfRunOffline = append(spfRunOfflines.SpfRunOffline, child)
        return &spfRunOfflines.SpfRunOffline[len(spfRunOfflines.SpfRunOffline)-1]
    }
    return nil
}

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfRunOfflines.SpfRunOffline {
        children[spfRunOfflines.SpfRunOffline[i].GetSegmentPath()] = &spfRunOfflines.SpfRunOffline[i]
    }
    return children
}

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetYangName() string { return "spf-run-offlines" }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) SetParent(parent types.Entity) { spfRunOfflines.parent = parent }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetParent() types.Entity { return spfRunOfflines.parent }

func (spfRunOfflines *Rcmd_Isis_Instances_Instance_SpfRunOfflines) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline
// Offline operational data for particular ISIS
// SPF run
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific SPF run. The type is interface{} with
    // range: 1..4294967295.
    SpfRunNumber interface{}

    // Start time (offset from event trigger time in ss .msec). The type is
    // string.
    StartTime interface{}

    // Wait time applied at SPF schedule (in msec). The type is interface{} with
    // range: 0..4294967295.
    WaitTime interface{}

    // Trigger reasons for SPF run. Example: pr^ - periodic, cr^ - clear (Check
    // the documentation for the entire list). The type is string.
    Reason interface{}

    // SPF summary information.
    SpfSummary Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary

    // SPF Node statistics.
    NodeStatistics Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics

    // Trigger LSP. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp.
    TriggerLsp []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp

    // Convergence information on per-priority basis. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority.
    Priority []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority

    // List of LSP changes processed. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed.
    LspProcessed []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed

    // List of LSP regenerated. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated.
    LspRegenerated []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated
}

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetFilter() yfilter.YFilter { return spfRunOffline.YFilter }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) SetFilter(yf yfilter.YFilter) { spfRunOffline.YFilter = yf }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetGoName(yname string) string {
    if yname == "spf-run-number" { return "SpfRunNumber" }
    if yname == "start-time" { return "StartTime" }
    if yname == "wait-time" { return "WaitTime" }
    if yname == "reason" { return "Reason" }
    if yname == "spf-summary" { return "SpfSummary" }
    if yname == "node-statistics" { return "NodeStatistics" }
    if yname == "trigger-lsp" { return "TriggerLsp" }
    if yname == "priority" { return "Priority" }
    if yname == "lsp-processed" { return "LspProcessed" }
    if yname == "lsp-regenerated" { return "LspRegenerated" }
    return ""
}

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetSegmentPath() string {
    return "spf-run-offline" + "[spf-run-number='" + fmt.Sprintf("%v", spfRunOffline.SpfRunNumber) + "']"
}

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-summary" {
        return &spfRunOffline.SpfSummary
    }
    if childYangName == "node-statistics" {
        return &spfRunOffline.NodeStatistics
    }
    if childYangName == "trigger-lsp" {
        for _, c := range spfRunOffline.TriggerLsp {
            if spfRunOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp{}
        spfRunOffline.TriggerLsp = append(spfRunOffline.TriggerLsp, child)
        return &spfRunOffline.TriggerLsp[len(spfRunOffline.TriggerLsp)-1]
    }
    if childYangName == "priority" {
        for _, c := range spfRunOffline.Priority {
            if spfRunOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority{}
        spfRunOffline.Priority = append(spfRunOffline.Priority, child)
        return &spfRunOffline.Priority[len(spfRunOffline.Priority)-1]
    }
    if childYangName == "lsp-processed" {
        for _, c := range spfRunOffline.LspProcessed {
            if spfRunOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed{}
        spfRunOffline.LspProcessed = append(spfRunOffline.LspProcessed, child)
        return &spfRunOffline.LspProcessed[len(spfRunOffline.LspProcessed)-1]
    }
    if childYangName == "lsp-regenerated" {
        for _, c := range spfRunOffline.LspRegenerated {
            if spfRunOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated{}
        spfRunOffline.LspRegenerated = append(spfRunOffline.LspRegenerated, child)
        return &spfRunOffline.LspRegenerated[len(spfRunOffline.LspRegenerated)-1]
    }
    return nil
}

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-summary"] = &spfRunOffline.SpfSummary
    children["node-statistics"] = &spfRunOffline.NodeStatistics
    for i := range spfRunOffline.TriggerLsp {
        children[spfRunOffline.TriggerLsp[i].GetSegmentPath()] = &spfRunOffline.TriggerLsp[i]
    }
    for i := range spfRunOffline.Priority {
        children[spfRunOffline.Priority[i].GetSegmentPath()] = &spfRunOffline.Priority[i]
    }
    for i := range spfRunOffline.LspProcessed {
        children[spfRunOffline.LspProcessed[i].GetSegmentPath()] = &spfRunOffline.LspProcessed[i]
    }
    for i := range spfRunOffline.LspRegenerated {
        children[spfRunOffline.LspRegenerated[i].GetSegmentPath()] = &spfRunOffline.LspRegenerated[i]
    }
    return children
}

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-run-number"] = spfRunOffline.SpfRunNumber
    leafs["start-time"] = spfRunOffline.StartTime
    leafs["wait-time"] = spfRunOffline.WaitTime
    leafs["reason"] = spfRunOffline.Reason
    return leafs
}

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetBundleName() string { return "cisco_ios_xr" }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetYangName() string { return "spf-run-offline" }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) SetParent(parent types.Entity) { spfRunOffline.parent = parent }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetParent() types.Entity { return spfRunOffline.parent }

func (spfRunOffline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline) GetParentYangName() string { return "spf-run-offlines" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary
// SPF summary information
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Topology index (multi-topology). The type is interface{} with range:
    // 0..4294967295.
    Topology interface{}

    // ISIS Level. The type is RcmdIsisLvl.
    IsisLevel interface{}

    // Type of SPF. The type is RcmdIsisSpf.
    Type interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // SPF state. The type is RcmdSpfState.
    State interface{}

    // Whether the event has all information. The type is bool.
    IsDataComplete interface{}

    // Trigger time (in hh:mm:ss.msec). The type is string.
    TriggerTime interface{}

    // Duration of SPF calculation (in ss.msec). The type is string.
    Duration interface{}

    // Total number of LSP changes processed. The type is interface{} with range:
    // 0..65535.
    TotalLspChanges interface{}

    // Convergence information summary on per-priority basis. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary.
    PrioritySummary []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetFilter() yfilter.YFilter { return spfSummary.YFilter }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) SetFilter(yf yfilter.YFilter) { spfSummary.YFilter = yf }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetGoName(yname string) string {
    if yname == "topology" { return "Topology" }
    if yname == "isis-level" { return "IsisLevel" }
    if yname == "type" { return "Type" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "state" { return "State" }
    if yname == "is-data-complete" { return "IsDataComplete" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "duration" { return "Duration" }
    if yname == "total-lsp-changes" { return "TotalLspChanges" }
    if yname == "priority-summary" { return "PrioritySummary" }
    return ""
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetSegmentPath() string {
    return "spf-summary"
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        for _, c := range spfSummary.PrioritySummary {
            if spfSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary{}
        spfSummary.PrioritySummary = append(spfSummary.PrioritySummary, child)
        return &spfSummary.PrioritySummary[len(spfSummary.PrioritySummary)-1]
    }
    return nil
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfSummary.PrioritySummary {
        children[spfSummary.PrioritySummary[i].GetSegmentPath()] = &spfSummary.PrioritySummary[i]
    }
    return children
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["topology"] = spfSummary.Topology
    leafs["isis-level"] = spfSummary.IsisLevel
    leafs["type"] = spfSummary.Type
    leafs["threshold-exceeded"] = spfSummary.ThresholdExceeded
    leafs["state"] = spfSummary.State
    leafs["is-data-complete"] = spfSummary.IsDataComplete
    leafs["trigger-time"] = spfSummary.TriggerTime
    leafs["duration"] = spfSummary.Duration
    leafs["total-lsp-changes"] = spfSummary.TotalLspChanges
    return leafs
}

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetBundleName() string { return "cisco_ios_xr" }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetYangName() string { return "spf-summary" }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) SetParent(parent types.Entity) { spfSummary.parent = parent }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetParent() types.Entity { return spfSummary.parent }

func (spfSummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary
// Convergence information summary on per-priority
// basis
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary) GetParentYangName() string { return "spf-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_SpfSummary_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics
// SPF Node statistics
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetFilter() yfilter.YFilter { return nodeStatistics.YFilter }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) SetFilter(yf yfilter.YFilter) { nodeStatistics.YFilter = yf }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetSegmentPath() string {
    return "node-statistics"
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = nodeStatistics.Adds
    leafs["deletes"] = nodeStatistics.Deletes
    leafs["modifies"] = nodeStatistics.Modifies
    leafs["reachables"] = nodeStatistics.Reachables
    leafs["unreachables"] = nodeStatistics.Unreachables
    leafs["touches"] = nodeStatistics.Touches
    return leafs
}

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetYangName() string { return "node-statistics" }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) SetParent(parent types.Entity) { nodeStatistics.parent = parent }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetParent() types.Entity { return nodeStatistics.parent }

func (nodeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_NodeStatistics) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp
// Trigger LSP
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP ID. The type is string.
    LspId interface{}

    // Sequence Number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetFilter() yfilter.YFilter { return triggerLsp.YFilter }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) SetFilter(yf yfilter.YFilter) { triggerLsp.YFilter = yf }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetSegmentPath() string {
    return "trigger-lsp"
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = triggerLsp.LspId
    leafs["sequence-number"] = triggerLsp.SequenceNumber
    leafs["change-type"] = triggerLsp.ChangeType
    leafs["reception-time"] = triggerLsp.ReceptionTime
    return leafs
}

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetYangName() string { return "trigger-lsp" }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) SetParent(parent types.Entity) { triggerLsp.parent = parent }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetParent() types.Entity { return triggerLsp.parent }

func (triggerLsp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_TriggerLsp) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority
// Convergence information on per-priority basis
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of the priority.
    PrioritySummary Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary

    // Convergence timeline details. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline.
    ConvergenceTimeline []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline

    // List of Leaf Networks Added. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded.
    LeafNetworksAdded []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded

    // List of Leaf Networks Deleted. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted.
    LeafNetworksDeleted []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetFilter() yfilter.YFilter { return priority.YFilter }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) SetFilter(yf yfilter.YFilter) { priority.YFilter = yf }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetGoName(yname string) string {
    if yname == "priority-summary" { return "PrioritySummary" }
    if yname == "convergence-timeline" { return "ConvergenceTimeline" }
    if yname == "leaf-networks-added" { return "LeafNetworksAdded" }
    if yname == "leaf-networks-deleted" { return "LeafNetworksDeleted" }
    return ""
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetSegmentPath() string {
    return "priority"
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "priority-summary" {
        return &priority.PrioritySummary
    }
    if childYangName == "convergence-timeline" {
        for _, c := range priority.ConvergenceTimeline {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline{}
        priority.ConvergenceTimeline = append(priority.ConvergenceTimeline, child)
        return &priority.ConvergenceTimeline[len(priority.ConvergenceTimeline)-1]
    }
    if childYangName == "leaf-networks-added" {
        for _, c := range priority.LeafNetworksAdded {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded{}
        priority.LeafNetworksAdded = append(priority.LeafNetworksAdded, child)
        return &priority.LeafNetworksAdded[len(priority.LeafNetworksAdded)-1]
    }
    if childYangName == "leaf-networks-deleted" {
        for _, c := range priority.LeafNetworksDeleted {
            if priority.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted{}
        priority.LeafNetworksDeleted = append(priority.LeafNetworksDeleted, child)
        return &priority.LeafNetworksDeleted[len(priority.LeafNetworksDeleted)-1]
    }
    return nil
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["priority-summary"] = &priority.PrioritySummary
    for i := range priority.ConvergenceTimeline {
        children[priority.ConvergenceTimeline[i].GetSegmentPath()] = &priority.ConvergenceTimeline[i]
    }
    for i := range priority.LeafNetworksAdded {
        children[priority.LeafNetworksAdded[i].GetSegmentPath()] = &priority.LeafNetworksAdded[i]
    }
    for i := range priority.LeafNetworksDeleted {
        children[priority.LeafNetworksDeleted[i].GetSegmentPath()] = &priority.LeafNetworksDeleted[i]
    }
    return children
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetBundleName() string { return "cisco_ios_xr" }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetYangName() string { return "priority" }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) SetParent(parent types.Entity) { priority.parent = parent }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetParent() types.Entity { return priority.parent }

func (priority *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary
// Summary of the priority
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical, High, Medium or Low. The type is RcmdPriorityLevel.
    Level interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Route statistics.
    RouteStatistics Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime

    // Fast Re-Route Statistics. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic.
    FrrStatistic []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetFilter() yfilter.YFilter { return prioritySummary.YFilter }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) SetFilter(yf yfilter.YFilter) { prioritySummary.YFilter = yf }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetGoName(yname string) string {
    if yname == "level" { return "Level" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "route-statistics" { return "RouteStatistics" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "frr-statistic" { return "FrrStatistic" }
    return ""
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetSegmentPath() string {
    return "priority-summary"
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-statistics" {
        return &prioritySummary.RouteStatistics
    }
    if childYangName == "ip-convergence-time" {
        return &prioritySummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prioritySummary.MplsConvergenceTime
    }
    if childYangName == "frr-statistic" {
        for _, c := range prioritySummary.FrrStatistic {
            if prioritySummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic{}
        prioritySummary.FrrStatistic = append(prioritySummary.FrrStatistic, child)
        return &prioritySummary.FrrStatistic[len(prioritySummary.FrrStatistic)-1]
    }
    return nil
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-statistics"] = &prioritySummary.RouteStatistics
    children["ip-convergence-time"] = &prioritySummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prioritySummary.MplsConvergenceTime
    for i := range prioritySummary.FrrStatistic {
        children[prioritySummary.FrrStatistic[i].GetSegmentPath()] = &prioritySummary.FrrStatistic[i]
    }
    return children
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["level"] = prioritySummary.Level
    leafs["threshold-exceeded"] = prioritySummary.ThresholdExceeded
    return leafs
}

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetBundleName() string { return "cisco_ios_xr" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetYangName() string { return "priority-summary" }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) SetParent(parent types.Entity) { prioritySummary.parent = parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetParent() types.Entity { return prioritySummary.parent }

func (prioritySummary *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics
// Route statistics
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Added. The type is interface{} with range: 0..4294967295.
    Adds interface{}

    // Deleted. The type is interface{} with range: 0..4294967295.
    Deletes interface{}

    // Modified. The type is interface{} with range: 0..4294967295.
    Modifies interface{}

    // Reachable. The type is interface{} with range: 0..4294967295.
    Reachables interface{}

    // Unreachable. The type is interface{} with range: 0..4294967295.
    Unreachables interface{}

    // Touched. The type is interface{} with range: 0..4294967295.
    Touches interface{}
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetFilter() yfilter.YFilter { return routeStatistics.YFilter }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) SetFilter(yf yfilter.YFilter) { routeStatistics.YFilter = yf }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetGoName(yname string) string {
    if yname == "adds" { return "Adds" }
    if yname == "deletes" { return "Deletes" }
    if yname == "modifies" { return "Modifies" }
    if yname == "reachables" { return "Reachables" }
    if yname == "unreachables" { return "Unreachables" }
    if yname == "touches" { return "Touches" }
    return ""
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetSegmentPath() string {
    return "route-statistics"
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["adds"] = routeStatistics.Adds
    leafs["deletes"] = routeStatistics.Deletes
    leafs["modifies"] = routeStatistics.Modifies
    leafs["reachables"] = routeStatistics.Reachables
    leafs["unreachables"] = routeStatistics.Unreachables
    leafs["touches"] = routeStatistics.Touches
    return leafs
}

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetYangName() string { return "route-statistics" }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) SetParent(parent types.Entity) { routeStatistics.parent = parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetParent() types.Entity { return routeStatistics.parent }

func (routeStatistics *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_RouteStatistics) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_IpConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_MplsConvergenceTime) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic
// Fast Re-Route Statistics
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total Number of Routes. The type is interface{} with range: 0..4294967295.
    TotalRoutes interface{}

    // Fully Protected Routes. The type is interface{} with range: 0..4294967295.
    FullyProtectedRoutes interface{}

    // Partially Protected Routes. The type is interface{} with range:
    // 0..4294967295.
    PartiallyProtectedRoutes interface{}

    // Coverage in percentage. The type is string. Units are percentage.
    Coverage interface{}
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetFilter() yfilter.YFilter { return frrStatistic.YFilter }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) SetFilter(yf yfilter.YFilter) { frrStatistic.YFilter = yf }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetGoName(yname string) string {
    if yname == "total-routes" { return "TotalRoutes" }
    if yname == "fully-protected-routes" { return "FullyProtectedRoutes" }
    if yname == "partially-protected-routes" { return "PartiallyProtectedRoutes" }
    if yname == "coverage" { return "Coverage" }
    return ""
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetSegmentPath() string {
    return "frr-statistic"
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total-routes"] = frrStatistic.TotalRoutes
    leafs["fully-protected-routes"] = frrStatistic.FullyProtectedRoutes
    leafs["partially-protected-routes"] = frrStatistic.PartiallyProtectedRoutes
    leafs["coverage"] = frrStatistic.Coverage
    return leafs
}

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetYangName() string { return "frr-statistic" }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) SetParent(parent types.Entity) { frrStatistic.parent = parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetParent() types.Entity { return frrStatistic.parent }

func (frrStatistic *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_PrioritySummary_FrrStatistic) GetParentYangName() string { return "priority-summary" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline
// Convergence timeline details
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol).
    RouteOrigin Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin

    // Entry point of IPv4 RIB.
    RiBv4Enter Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter

    // Exit point from IPv4 RIB to FIBs.
    RiBv4Exit Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit

    // Route Redistribute point from IPv4 RIB to LDP.
    RiBv4Redistribute Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute

    // Entry point of LDP.
    LdpEnter Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter

    // Exit point of LDP to LSD.
    LdpExit Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit

    // Entry point of LSD.
    LsdEnter Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter

    // Exit point of LSD to FIBs.
    LsdExit Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp.
    LcIp []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls.
    LcMpls []Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetFilter() yfilter.YFilter { return convergenceTimeline.YFilter }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) SetFilter(yf yfilter.YFilter) { convergenceTimeline.YFilter = yf }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetSegmentPath() string {
    return "convergence-timeline"
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-origin" {
        return &convergenceTimeline.RouteOrigin
    }
    if childYangName == "ri-bv4-enter" {
        return &convergenceTimeline.RiBv4Enter
    }
    if childYangName == "ri-bv4-exit" {
        return &convergenceTimeline.RiBv4Exit
    }
    if childYangName == "ri-bv4-redistribute" {
        return &convergenceTimeline.RiBv4Redistribute
    }
    if childYangName == "ldp-enter" {
        return &convergenceTimeline.LdpEnter
    }
    if childYangName == "ldp-exit" {
        return &convergenceTimeline.LdpExit
    }
    if childYangName == "lsd-enter" {
        return &convergenceTimeline.LsdEnter
    }
    if childYangName == "lsd-exit" {
        return &convergenceTimeline.LsdExit
    }
    if childYangName == "lc-ip" {
        for _, c := range convergenceTimeline.LcIp {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp{}
        convergenceTimeline.LcIp = append(convergenceTimeline.LcIp, child)
        return &convergenceTimeline.LcIp[len(convergenceTimeline.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range convergenceTimeline.LcMpls {
            if convergenceTimeline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls{}
        convergenceTimeline.LcMpls = append(convergenceTimeline.LcMpls, child)
        return &convergenceTimeline.LcMpls[len(convergenceTimeline.LcMpls)-1]
    }
    return nil
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-origin"] = &convergenceTimeline.RouteOrigin
    children["ri-bv4-enter"] = &convergenceTimeline.RiBv4Enter
    children["ri-bv4-exit"] = &convergenceTimeline.RiBv4Exit
    children["ri-bv4-redistribute"] = &convergenceTimeline.RiBv4Redistribute
    children["ldp-enter"] = &convergenceTimeline.LdpEnter
    children["ldp-exit"] = &convergenceTimeline.LdpExit
    children["lsd-enter"] = &convergenceTimeline.LsdEnter
    children["lsd-exit"] = &convergenceTimeline.LsdExit
    for i := range convergenceTimeline.LcIp {
        children[convergenceTimeline.LcIp[i].GetSegmentPath()] = &convergenceTimeline.LcIp[i]
    }
    for i := range convergenceTimeline.LcMpls {
        children[convergenceTimeline.LcMpls[i].GetSegmentPath()] = &convergenceTimeline.LcMpls[i]
    }
    return children
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetBundleName() string { return "cisco_ios_xr" }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetYangName() string { return "convergence-timeline" }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) SetParent(parent types.Entity) { convergenceTimeline.parent = parent }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetParent() types.Entity { return convergenceTimeline.parent }

func (convergenceTimeline *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin
// Route origin (routing protocol)
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetFilter() yfilter.YFilter { return routeOrigin.YFilter }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) SetFilter(yf yfilter.YFilter) { routeOrigin.YFilter = yf }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetSegmentPath() string {
    return "route-origin"
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = routeOrigin.StartTime
    leafs["end-time"] = routeOrigin.EndTime
    leafs["duration"] = routeOrigin.Duration
    return leafs
}

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetYangName() string { return "route-origin" }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) SetParent(parent types.Entity) { routeOrigin.parent = parent }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetParent() types.Entity { return routeOrigin.parent }

func (routeOrigin *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RouteOrigin) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter
// Entry point of IPv4 RIB
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetFilter() yfilter.YFilter { return riBv4Enter.YFilter }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) SetFilter(yf yfilter.YFilter) { riBv4Enter.YFilter = yf }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetSegmentPath() string {
    return "ri-bv4-enter"
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Enter.StartTime
    leafs["end-time"] = riBv4Enter.EndTime
    leafs["duration"] = riBv4Enter.Duration
    return leafs
}

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetYangName() string { return "ri-bv4-enter" }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) SetParent(parent types.Entity) { riBv4Enter.parent = parent }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetParent() types.Entity { return riBv4Enter.parent }

func (riBv4Enter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Enter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit
// Exit point from IPv4 RIB to FIBs
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetFilter() yfilter.YFilter { return riBv4Exit.YFilter }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) SetFilter(yf yfilter.YFilter) { riBv4Exit.YFilter = yf }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetSegmentPath() string {
    return "ri-bv4-exit"
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Exit.StartTime
    leafs["end-time"] = riBv4Exit.EndTime
    leafs["duration"] = riBv4Exit.Duration
    return leafs
}

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetYangName() string { return "ri-bv4-exit" }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) SetParent(parent types.Entity) { riBv4Exit.parent = parent }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetParent() types.Entity { return riBv4Exit.parent }

func (riBv4Exit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Exit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute
// Route Redistribute point from IPv4 RIB to LDP
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetFilter() yfilter.YFilter { return riBv4Redistribute.YFilter }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) SetFilter(yf yfilter.YFilter) { riBv4Redistribute.YFilter = yf }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetSegmentPath() string {
    return "ri-bv4-redistribute"
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = riBv4Redistribute.StartTime
    leafs["end-time"] = riBv4Redistribute.EndTime
    leafs["duration"] = riBv4Redistribute.Duration
    return leafs
}

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleName() string { return "cisco_ios_xr" }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetYangName() string { return "ri-bv4-redistribute" }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) SetParent(parent types.Entity) { riBv4Redistribute.parent = parent }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParent() types.Entity { return riBv4Redistribute.parent }

func (riBv4Redistribute *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_RiBv4Redistribute) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter
// Entry point of LDP
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetFilter() yfilter.YFilter { return ldpEnter.YFilter }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) SetFilter(yf yfilter.YFilter) { ldpEnter.YFilter = yf }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetSegmentPath() string {
    return "ldp-enter"
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpEnter.StartTime
    leafs["end-time"] = ldpEnter.EndTime
    leafs["duration"] = ldpEnter.Duration
    return leafs
}

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetBundleName() string { return "cisco_ios_xr" }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetYangName() string { return "ldp-enter" }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) SetParent(parent types.Entity) { ldpEnter.parent = parent }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetParent() types.Entity { return ldpEnter.parent }

func (ldpEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit
// Exit point of LDP to LSD
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetFilter() yfilter.YFilter { return ldpExit.YFilter }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) SetFilter(yf yfilter.YFilter) { ldpExit.YFilter = yf }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetSegmentPath() string {
    return "ldp-exit"
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = ldpExit.StartTime
    leafs["end-time"] = ldpExit.EndTime
    leafs["duration"] = ldpExit.Duration
    return leafs
}

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetBundleName() string { return "cisco_ios_xr" }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetYangName() string { return "ldp-exit" }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) SetParent(parent types.Entity) { ldpExit.parent = parent }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetParent() types.Entity { return ldpExit.parent }

func (ldpExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LdpExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter
// Entry point of LSD
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetFilter() yfilter.YFilter { return lsdEnter.YFilter }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) SetFilter(yf yfilter.YFilter) { lsdEnter.YFilter = yf }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetSegmentPath() string {
    return "lsd-enter"
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdEnter.StartTime
    leafs["end-time"] = lsdEnter.EndTime
    leafs["duration"] = lsdEnter.Duration
    return leafs
}

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetBundleName() string { return "cisco_ios_xr" }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetYangName() string { return "lsd-enter" }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) SetParent(parent types.Entity) { lsdEnter.parent = parent }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetParent() types.Entity { return lsdEnter.parent }

func (lsdEnter *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdEnter) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit
// Exit point of LSD to FIBs
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetFilter() yfilter.YFilter { return lsdExit.YFilter }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) SetFilter(yf yfilter.YFilter) { lsdExit.YFilter = yf }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetSegmentPath() string {
    return "lsd-exit"
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = lsdExit.StartTime
    leafs["end-time"] = lsdExit.EndTime
    leafs["duration"] = lsdExit.Duration
    return leafs
}

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetBundleName() string { return "cisco_ios_xr" }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetYangName() string { return "lsd-exit" }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) SetParent(parent types.Entity) { lsdExit.parent = parent }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetParent() types.Entity { return lsdExit.parent }

func (lsdExit *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LsdExit) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcIp.FibComplete
    }
    return nil
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcIp.FibComplete
    return children
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    return leafs
}

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete
// Completion point of FIB
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcIp_FibComplete) GetParentYangName() string { return "lc-ip" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB.
    FibComplete Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fib-complete" {
        return &lcMpls.FibComplete
    }
    return nil
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["fib-complete"] = &lcMpls.FibComplete
    return children
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    return leafs
}

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls) GetParentYangName() string { return "convergence-timeline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete
// Completion point of FIB
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // First route process time relative to event trigger time (in ss.msec). The
    // type is string.
    StartTime interface{}

    // Last route process time relative to event trigger time (in ss.msec). The
    // type is string.
    EndTime interface{}

    // Duration of processing (in ss.msec). The type is string.
    Duration interface{}
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetFilter() yfilter.YFilter { return fibComplete.YFilter }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetFilter(yf yfilter.YFilter) { fibComplete.YFilter = yf }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "end-time" { return "EndTime" }
    if yname == "duration" { return "Duration" }
    return ""
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetSegmentPath() string {
    return "fib-complete"
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = fibComplete.StartTime
    leafs["end-time"] = fibComplete.EndTime
    leafs["duration"] = fibComplete.Duration
    return leafs
}

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleName() string { return "cisco_ios_xr" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetYangName() string { return "fib-complete" }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) SetParent(parent types.Entity) { fibComplete.parent = parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParent() types.Entity { return fibComplete.parent }

func (fibComplete *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_ConvergenceTimeline_LcMpls_FibComplete) GetParentYangName() string { return "lc-mpls" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded
// List of Leaf Networks Added
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetFilter() yfilter.YFilter { return leafNetworksAdded.YFilter }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) SetFilter(yf yfilter.YFilter) { leafNetworksAdded.YFilter = yf }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetSegmentPath() string {
    return "leaf-networks-added"
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksAdded.Address
    leafs["net-mask"] = leafNetworksAdded.NetMask
    return leafs
}

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetYangName() string { return "leaf-networks-added" }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) SetParent(parent types.Entity) { leafNetworksAdded.parent = parent }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetParent() types.Entity { return leafNetworksAdded.parent }

func (leafNetworksAdded *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksAdded) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted
// List of Leaf Networks Deleted
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Mask. The type is interface{} with range: 0..255.
    NetMask interface{}
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetFilter() yfilter.YFilter { return leafNetworksDeleted.YFilter }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) SetFilter(yf yfilter.YFilter) { leafNetworksDeleted.YFilter = yf }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetGoName(yname string) string {
    if yname == "address" { return "Address" }
    if yname == "net-mask" { return "NetMask" }
    return ""
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetSegmentPath() string {
    return "leaf-networks-deleted"
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["address"] = leafNetworksDeleted.Address
    leafs["net-mask"] = leafNetworksDeleted.NetMask
    return leafs
}

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetBundleName() string { return "cisco_ios_xr" }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetYangName() string { return "leaf-networks-deleted" }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) SetParent(parent types.Entity) { leafNetworksDeleted.parent = parent }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetParent() types.Entity { return leafNetworksDeleted.parent }

func (leafNetworksDeleted *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_Priority_LeafNetworksDeleted) GetParentYangName() string { return "priority" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed
// List of LSP changes processed
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSP ID. The type is string.
    LspId interface{}

    // Sequence Number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetFilter() yfilter.YFilter { return lspProcessed.YFilter }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) SetFilter(yf yfilter.YFilter) { lspProcessed.YFilter = yf }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetGoName(yname string) string {
    if yname == "lsp-id" { return "LspId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetSegmentPath() string {
    return "lsp-processed"
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsp-id"] = lspProcessed.LspId
    leafs["sequence-number"] = lspProcessed.SequenceNumber
    leafs["change-type"] = lspProcessed.ChangeType
    leafs["reception-time"] = lspProcessed.ReceptionTime
    return leafs
}

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetYangName() string { return "lsp-processed" }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) SetParent(parent types.Entity) { lspProcessed.parent = parent }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetParent() types.Entity { return lspProcessed.parent }

func (lspProcessed *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspProcessed) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated
// List of LSP regenerated
type Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Serial Number of the session event. The type is interface{} with range:
    // 0..4294967295.
    SerialNumberXr interface{}

    // LSP ID. The type is string.
    LspId interface{}

    // Sequence Number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}

    // ISIS Level. The type is RcmdIsisLvl.
    IsisLevel interface{}

    // SPF Run Number. The type is interface{} with range: 0..4294967295.
    SpfRunNumber interface{}

    // Trigger reasons for LSP regeneration. Example: pr^ - periodic, cr^ - clear
    // (Check the documentation for the entire list). The type is string.
    Reason interface{}
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetFilter() yfilter.YFilter { return lspRegenerated.YFilter }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) SetFilter(yf yfilter.YFilter) { lspRegenerated.YFilter = yf }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetGoName(yname string) string {
    if yname == "serial-number-xr" { return "SerialNumberXr" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "reception-time" { return "ReceptionTime" }
    if yname == "isis-level" { return "IsisLevel" }
    if yname == "spf-run-number" { return "SpfRunNumber" }
    if yname == "reason" { return "Reason" }
    return ""
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetSegmentPath() string {
    return "lsp-regenerated"
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["serial-number-xr"] = lspRegenerated.SerialNumberXr
    leafs["lsp-id"] = lspRegenerated.LspId
    leafs["sequence-number"] = lspRegenerated.SequenceNumber
    leafs["reception-time"] = lspRegenerated.ReceptionTime
    leafs["isis-level"] = lspRegenerated.IsisLevel
    leafs["spf-run-number"] = lspRegenerated.SpfRunNumber
    leafs["reason"] = lspRegenerated.Reason
    return leafs
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetBundleName() string { return "cisco_ios_xr" }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetYangName() string { return "lsp-regenerated" }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) SetParent(parent types.Entity) { lspRegenerated.parent = parent }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetParent() types.Entity { return lspRegenerated.parent }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_SpfRunOfflines_SpfRunOffline_LspRegenerated) GetParentYangName() string { return "spf-run-offline" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries
// ISIS Prefix events summary data
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix Event data. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary.
    PrefixEventSummary []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary
}

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetFilter() yfilter.YFilter { return prefixEventSummaries.YFilter }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) SetFilter(yf yfilter.YFilter) { prefixEventSummaries.YFilter = yf }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetGoName(yname string) string {
    if yname == "prefix-event-summary" { return "PrefixEventSummary" }
    return ""
}

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetSegmentPath() string {
    return "prefix-event-summaries"
}

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-event-summary" {
        for _, c := range prefixEventSummaries.PrefixEventSummary {
            if prefixEventSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary{}
        prefixEventSummaries.PrefixEventSummary = append(prefixEventSummaries.PrefixEventSummary, child)
        return &prefixEventSummaries.PrefixEventSummary[len(prefixEventSummaries.PrefixEventSummary)-1]
    }
    return nil
}

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixEventSummaries.PrefixEventSummary {
        children[prefixEventSummaries.PrefixEventSummary[i].GetSegmentPath()] = &prefixEventSummaries.PrefixEventSummary[i]
    }
    return children
}

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetYangName() string { return "prefix-event-summaries" }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) SetParent(parent types.Entity) { prefixEventSummaries.parent = parent }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetParent() types.Entity { return prefixEventSummaries.parent }

func (prefixEventSummaries *Rcmd_Isis_Instances_Instance_PrefixEventSummaries) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary
// Prefix Event data
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Referenced SPF Run No (0 - Not Applicable). The type is interface{} with
    // range: 0..4294967295.
    SpfRunNo interface{}

    // Referenced IP-FRR Event ID (0 - Not Applicable). The type is interface{}
    // with range: 0..4294967295.
    IpfrrEventId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Event processed priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Route Type intra/inter/l1/l2. The type is RcmdShowRoute.
    RouteType interface{}

    // Route Path Change Type. The type is RcmdShowRoutePathChange.
    RoutePathChangeType interface{}

    // Protocol route cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Event trigger time. The type is string.
    TriggerTime interface{}

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime

    // Path information. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path.
    Path []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path

    // LSA that triggered this event. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa.
    TriggerLsa []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa

    // Timeline information. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine.
    TimeLine []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine

    // List of LSAs processed. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed.
    LsaProcessed []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed
}

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetFilter() yfilter.YFilter { return prefixEventSummary.YFilter }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) SetFilter(yf yfilter.YFilter) { prefixEventSummary.YFilter = yf }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "spf-run-no" { return "SpfRunNo" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "priority" { return "Priority" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "route-type" { return "RouteType" }
    if yname == "route-path-change-type" { return "RoutePathChangeType" }
    if yname == "cost" { return "Cost" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "path" { return "Path" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "time-line" { return "TimeLine" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetSegmentPath() string {
    return "prefix-event-summary" + "[event-id='" + fmt.Sprintf("%v", prefixEventSummary.EventId) + "']"
}

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-convergence-time" {
        return &prefixEventSummary.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prefixEventSummary.MplsConvergenceTime
    }
    if childYangName == "path" {
        for _, c := range prefixEventSummary.Path {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path{}
        prefixEventSummary.Path = append(prefixEventSummary.Path, child)
        return &prefixEventSummary.Path[len(prefixEventSummary.Path)-1]
    }
    if childYangName == "trigger-lsa" {
        for _, c := range prefixEventSummary.TriggerLsa {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa{}
        prefixEventSummary.TriggerLsa = append(prefixEventSummary.TriggerLsa, child)
        return &prefixEventSummary.TriggerLsa[len(prefixEventSummary.TriggerLsa)-1]
    }
    if childYangName == "time-line" {
        for _, c := range prefixEventSummary.TimeLine {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine{}
        prefixEventSummary.TimeLine = append(prefixEventSummary.TimeLine, child)
        return &prefixEventSummary.TimeLine[len(prefixEventSummary.TimeLine)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range prefixEventSummary.LsaProcessed {
            if prefixEventSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed{}
        prefixEventSummary.LsaProcessed = append(prefixEventSummary.LsaProcessed, child)
        return &prefixEventSummary.LsaProcessed[len(prefixEventSummary.LsaProcessed)-1]
    }
    return nil
}

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-convergence-time"] = &prefixEventSummary.IpConvergenceTime
    children["mpls-convergence-time"] = &prefixEventSummary.MplsConvergenceTime
    for i := range prefixEventSummary.Path {
        children[prefixEventSummary.Path[i].GetSegmentPath()] = &prefixEventSummary.Path[i]
    }
    for i := range prefixEventSummary.TriggerLsa {
        children[prefixEventSummary.TriggerLsa[i].GetSegmentPath()] = &prefixEventSummary.TriggerLsa[i]
    }
    for i := range prefixEventSummary.TimeLine {
        children[prefixEventSummary.TimeLine[i].GetSegmentPath()] = &prefixEventSummary.TimeLine[i]
    }
    for i := range prefixEventSummary.LsaProcessed {
        children[prefixEventSummary.LsaProcessed[i].GetSegmentPath()] = &prefixEventSummary.LsaProcessed[i]
    }
    return children
}

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = prefixEventSummary.EventId
    leafs["prefix"] = prefixEventSummary.Prefix
    leafs["prefix-lenth"] = prefixEventSummary.PrefixLenth
    leafs["spf-run-no"] = prefixEventSummary.SpfRunNo
    leafs["ipfrr-event-id"] = prefixEventSummary.IpfrrEventId
    leafs["threshold-exceeded"] = prefixEventSummary.ThresholdExceeded
    leafs["priority"] = prefixEventSummary.Priority
    leafs["change-type"] = prefixEventSummary.ChangeType
    leafs["route-type"] = prefixEventSummary.RouteType
    leafs["route-path-change-type"] = prefixEventSummary.RoutePathChangeType
    leafs["cost"] = prefixEventSummary.Cost
    leafs["trigger-time"] = prefixEventSummary.TriggerTime
    return leafs
}

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetYangName() string { return "prefix-event-summary" }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) SetParent(parent types.Entity) { prefixEventSummary.parent = parent }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetParent() types.Entity { return prefixEventSummary.parent }

func (prefixEventSummary *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary) GetParentYangName() string { return "prefix-event-summaries" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_IpConvergenceTime) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_MplsConvergenceTime) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path
// Path information
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Backup Path Informatoin. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath.
    LfaPath []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetFilter() yfilter.YFilter { return path.YFilter }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) SetFilter(yf yfilter.YFilter) { path.YFilter = yf }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "lfa-path" { return "LfaPath" }
    return ""
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetSegmentPath() string {
    return "path"
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lfa-path" {
        for _, c := range path.LfaPath {
            if path.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath{}
        path.LfaPath = append(path.LfaPath, child)
        return &path.LfaPath[len(path.LfaPath)-1]
    }
    return nil
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range path.LfaPath {
        children[path.LfaPath[i].GetSegmentPath()] = &path.LfaPath[i]
    }
    return children
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = path.InterfaceName
    leafs["neighbour-address"] = path.NeighbourAddress
    leafs["change-type"] = path.ChangeType
    leafs["path-metric"] = path.PathMetric
    return leafs
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetBundleName() string { return "cisco_ios_xr" }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetYangName() string { return "path" }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) SetParent(parent types.Entity) { path.parent = parent }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetParent() types.Entity { return path.parent }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath
// Backup Path Informatoin
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of LFA. The type is RcmdShowIpfrrLfa.
    LfaType interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Remote Node ID, in case of Remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetFilter() yfilter.YFilter { return lfaPath.YFilter }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) SetFilter(yf yfilter.YFilter) { lfaPath.YFilter = yf }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetGoName(yname string) string {
    if yname == "lfa-type" { return "LfaType" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "remote-node-id" { return "RemoteNodeId" }
    return ""
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetSegmentPath() string {
    return "lfa-path"
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lfa-type"] = lfaPath.LfaType
    leafs["interface-name"] = lfaPath.InterfaceName
    leafs["neighbour-address"] = lfaPath.NeighbourAddress
    leafs["change-type"] = lfaPath.ChangeType
    leafs["path-metric"] = lfaPath.PathMetric
    leafs["remote-node-id"] = lfaPath.RemoteNodeId
    return leafs
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetBundleName() string { return "cisco_ios_xr" }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetYangName() string { return "lfa-path" }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) SetParent(parent types.Entity) { lfaPath.parent = parent }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetParent() types.Entity { return lfaPath.parent }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_Path_LfaPath) GetParentYangName() string { return "path" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa
// LSA that triggered this event
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TriggerLsa) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine
// Timeline information
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol). The type is string.
    RouteOrigin interface{}

    // Entry point of IPv4 RIB. The type is string.
    RiBv4Enter interface{}

    // Exit point from IPv4 RIB to FIBs. The type is string.
    RiBv4Exit interface{}

    // Route Redistribute point from IPv4 RIB to LDP. The type is string.
    RiBv4Redistribute interface{}

    // Entry point of LDP. The type is string.
    LdpEnter interface{}

    // Exit point of LDP to LSD. The type is string.
    LdpExit interface{}

    // Entry point of LSD. The type is string.
    LsdEnter interface{}

    // Exit point of LSD to FIBs. The type is string.
    LsdExit interface{}

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp.
    LcIp []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls.
    LcMpls []Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetFilter() yfilter.YFilter { return timeLine.YFilter }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) SetFilter(yf yfilter.YFilter) { timeLine.YFilter = yf }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetSegmentPath() string {
    return "time-line"
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lc-ip" {
        for _, c := range timeLine.LcIp {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp{}
        timeLine.LcIp = append(timeLine.LcIp, child)
        return &timeLine.LcIp[len(timeLine.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range timeLine.LcMpls {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls{}
        timeLine.LcMpls = append(timeLine.LcMpls, child)
        return &timeLine.LcMpls[len(timeLine.LcMpls)-1]
    }
    return nil
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range timeLine.LcIp {
        children[timeLine.LcIp[i].GetSegmentPath()] = &timeLine.LcIp[i]
    }
    for i := range timeLine.LcMpls {
        children[timeLine.LcMpls[i].GetSegmentPath()] = &timeLine.LcMpls[i]
    }
    return children
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-origin"] = timeLine.RouteOrigin
    leafs["ri-bv4-enter"] = timeLine.RiBv4Enter
    leafs["ri-bv4-exit"] = timeLine.RiBv4Exit
    leafs["ri-bv4-redistribute"] = timeLine.RiBv4Redistribute
    leafs["ldp-enter"] = timeLine.LdpEnter
    leafs["ldp-exit"] = timeLine.LdpExit
    leafs["lsd-enter"] = timeLine.LsdEnter
    leafs["lsd-exit"] = timeLine.LsdExit
    return leafs
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetBundleName() string { return "cisco_ios_xr" }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetYangName() string { return "time-line" }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) SetParent(parent types.Entity) { timeLine.parent = parent }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetParent() types.Entity { return timeLine.parent }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    leafs["fib-complete"] = lcIp.FibComplete
    return leafs
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcIp) GetParentYangName() string { return "time-line" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    leafs["fib-complete"] = lcMpls.FibComplete
    return leafs
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_TimeLine_LcMpls) GetParentYangName() string { return "time-line" }

// Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed
// List of LSAs processed
type Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventSummaries_PrefixEventSummary_LsaProcessed) GetParentYangName() string { return "prefix-event-summary" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines
// ISIS Prefix events offline data
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Offline operational data for particular ISIS Prefix Event. The type is
    // slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline.
    PrefixEventOffline []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline
}

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetFilter() yfilter.YFilter { return prefixEventOfflines.YFilter }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) SetFilter(yf yfilter.YFilter) { prefixEventOfflines.YFilter = yf }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetGoName(yname string) string {
    if yname == "prefix-event-offline" { return "PrefixEventOffline" }
    return ""
}

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetSegmentPath() string {
    return "prefix-event-offlines"
}

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "prefix-event-offline" {
        for _, c := range prefixEventOfflines.PrefixEventOffline {
            if prefixEventOfflines.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline{}
        prefixEventOfflines.PrefixEventOffline = append(prefixEventOfflines.PrefixEventOffline, child)
        return &prefixEventOfflines.PrefixEventOffline[len(prefixEventOfflines.PrefixEventOffline)-1]
    }
    return nil
}

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range prefixEventOfflines.PrefixEventOffline {
        children[prefixEventOfflines.PrefixEventOffline[i].GetSegmentPath()] = &prefixEventOfflines.PrefixEventOffline[i]
    }
    return children
}

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetYangName() string { return "prefix-event-offlines" }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) SetParent(parent types.Entity) { prefixEventOfflines.parent = parent }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetParent() types.Entity { return prefixEventOfflines.parent }

func (prefixEventOfflines *Rcmd_Isis_Instances_Instance_PrefixEventOfflines) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline
// Offline operational data for particular ISIS
// Prefix Event
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // Prefix. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..4294967295.
    PrefixLenth interface{}

    // Referenced SPF Run No (0 - Not Applicable). The type is interface{} with
    // range: 0..4294967295.
    SpfRunNo interface{}

    // Referenced IP-FRR Event ID (0 - Not Applicable). The type is interface{}
    // with range: 0..4294967295.
    IpfrrEventId interface{}

    // Threshold exceeded. The type is bool.
    ThresholdExceeded interface{}

    // Event processed priority. The type is RcmdPriorityLevel.
    Priority interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Route Type intra/inter/l1/l2. The type is RcmdShowRoute.
    RouteType interface{}

    // Route Path Change Type. The type is RcmdShowRoutePathChange.
    RoutePathChangeType interface{}

    // Protocol route cost. The type is interface{} with range: 0..4294967295.
    Cost interface{}

    // Event trigger time. The type is string.
    TriggerTime interface{}

    // Convergence time for IP route programming.
    IpConvergenceTime Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime

    // Convergence time for MPLS label programming.
    MplsConvergenceTime Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime

    // Path information. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path.
    Path []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path

    // LSA that triggered this event. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa.
    TriggerLsa []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa

    // Timeline information. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine.
    TimeLine []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine

    // List of LSAs processed. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed.
    LsaProcessed []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed
}

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetFilter() yfilter.YFilter { return prefixEventOffline.YFilter }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) SetFilter(yf yfilter.YFilter) { prefixEventOffline.YFilter = yf }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-lenth" { return "PrefixLenth" }
    if yname == "spf-run-no" { return "SpfRunNo" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "threshold-exceeded" { return "ThresholdExceeded" }
    if yname == "priority" { return "Priority" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "route-type" { return "RouteType" }
    if yname == "route-path-change-type" { return "RoutePathChangeType" }
    if yname == "cost" { return "Cost" }
    if yname == "trigger-time" { return "TriggerTime" }
    if yname == "ip-convergence-time" { return "IpConvergenceTime" }
    if yname == "mpls-convergence-time" { return "MplsConvergenceTime" }
    if yname == "path" { return "Path" }
    if yname == "trigger-lsa" { return "TriggerLsa" }
    if yname == "time-line" { return "TimeLine" }
    if yname == "lsa-processed" { return "LsaProcessed" }
    return ""
}

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetSegmentPath() string {
    return "prefix-event-offline" + "[event-id='" + fmt.Sprintf("%v", prefixEventOffline.EventId) + "']"
}

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ip-convergence-time" {
        return &prefixEventOffline.IpConvergenceTime
    }
    if childYangName == "mpls-convergence-time" {
        return &prefixEventOffline.MplsConvergenceTime
    }
    if childYangName == "path" {
        for _, c := range prefixEventOffline.Path {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path{}
        prefixEventOffline.Path = append(prefixEventOffline.Path, child)
        return &prefixEventOffline.Path[len(prefixEventOffline.Path)-1]
    }
    if childYangName == "trigger-lsa" {
        for _, c := range prefixEventOffline.TriggerLsa {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa{}
        prefixEventOffline.TriggerLsa = append(prefixEventOffline.TriggerLsa, child)
        return &prefixEventOffline.TriggerLsa[len(prefixEventOffline.TriggerLsa)-1]
    }
    if childYangName == "time-line" {
        for _, c := range prefixEventOffline.TimeLine {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine{}
        prefixEventOffline.TimeLine = append(prefixEventOffline.TimeLine, child)
        return &prefixEventOffline.TimeLine[len(prefixEventOffline.TimeLine)-1]
    }
    if childYangName == "lsa-processed" {
        for _, c := range prefixEventOffline.LsaProcessed {
            if prefixEventOffline.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed{}
        prefixEventOffline.LsaProcessed = append(prefixEventOffline.LsaProcessed, child)
        return &prefixEventOffline.LsaProcessed[len(prefixEventOffline.LsaProcessed)-1]
    }
    return nil
}

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ip-convergence-time"] = &prefixEventOffline.IpConvergenceTime
    children["mpls-convergence-time"] = &prefixEventOffline.MplsConvergenceTime
    for i := range prefixEventOffline.Path {
        children[prefixEventOffline.Path[i].GetSegmentPath()] = &prefixEventOffline.Path[i]
    }
    for i := range prefixEventOffline.TriggerLsa {
        children[prefixEventOffline.TriggerLsa[i].GetSegmentPath()] = &prefixEventOffline.TriggerLsa[i]
    }
    for i := range prefixEventOffline.TimeLine {
        children[prefixEventOffline.TimeLine[i].GetSegmentPath()] = &prefixEventOffline.TimeLine[i]
    }
    for i := range prefixEventOffline.LsaProcessed {
        children[prefixEventOffline.LsaProcessed[i].GetSegmentPath()] = &prefixEventOffline.LsaProcessed[i]
    }
    return children
}

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = prefixEventOffline.EventId
    leafs["prefix"] = prefixEventOffline.Prefix
    leafs["prefix-lenth"] = prefixEventOffline.PrefixLenth
    leafs["spf-run-no"] = prefixEventOffline.SpfRunNo
    leafs["ipfrr-event-id"] = prefixEventOffline.IpfrrEventId
    leafs["threshold-exceeded"] = prefixEventOffline.ThresholdExceeded
    leafs["priority"] = prefixEventOffline.Priority
    leafs["change-type"] = prefixEventOffline.ChangeType
    leafs["route-type"] = prefixEventOffline.RouteType
    leafs["route-path-change-type"] = prefixEventOffline.RoutePathChangeType
    leafs["cost"] = prefixEventOffline.Cost
    leafs["trigger-time"] = prefixEventOffline.TriggerTime
    return leafs
}

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetBundleName() string { return "cisco_ios_xr" }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetYangName() string { return "prefix-event-offline" }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) SetParent(parent types.Entity) { prefixEventOffline.parent = parent }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetParent() types.Entity { return prefixEventOffline.parent }

func (prefixEventOffline *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline) GetParentYangName() string { return "prefix-event-offlines" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime
// Convergence time for IP route programming
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetFilter() yfilter.YFilter { return ipConvergenceTime.YFilter }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) SetFilter(yf yfilter.YFilter) { ipConvergenceTime.YFilter = yf }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetSegmentPath() string {
    return "ip-convergence-time"
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = ipConvergenceTime.MinimumTime
    leafs["maximum-time"] = ipConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = ipConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = ipConvergenceTime.FastestNodeName
    return leafs
}

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetYangName() string { return "ip-convergence-time" }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) SetParent(parent types.Entity) { ipConvergenceTime.parent = parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetParent() types.Entity { return ipConvergenceTime.parent }

func (ipConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_IpConvergenceTime) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime
// Convergence time for MPLS label programming
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MinimumTime interface{}

    // Maximum time(in seconds.milliseconds). The type is string. Units are
    // millisecond.
    MaximumTime interface{}

    // Linecard node name which took the maximum time. The type is string.
    SlowestNodeName interface{}

    // Linecard node name which took the minimum time. The type is string.
    FastestNodeName interface{}
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetFilter() yfilter.YFilter { return mplsConvergenceTime.YFilter }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) SetFilter(yf yfilter.YFilter) { mplsConvergenceTime.YFilter = yf }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetGoName(yname string) string {
    if yname == "minimum-time" { return "MinimumTime" }
    if yname == "maximum-time" { return "MaximumTime" }
    if yname == "slowest-node-name" { return "SlowestNodeName" }
    if yname == "fastest-node-name" { return "FastestNodeName" }
    return ""
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetSegmentPath() string {
    return "mpls-convergence-time"
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-time"] = mplsConvergenceTime.MinimumTime
    leafs["maximum-time"] = mplsConvergenceTime.MaximumTime
    leafs["slowest-node-name"] = mplsConvergenceTime.SlowestNodeName
    leafs["fastest-node-name"] = mplsConvergenceTime.FastestNodeName
    return leafs
}

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetBundleName() string { return "cisco_ios_xr" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetYangName() string { return "mpls-convergence-time" }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) SetParent(parent types.Entity) { mplsConvergenceTime.parent = parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetParent() types.Entity { return mplsConvergenceTime.parent }

func (mplsConvergenceTime *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_MplsConvergenceTime) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path
// Path information
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Backup Path Informatoin. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath.
    LfaPath []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetFilter() yfilter.YFilter { return path.YFilter }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) SetFilter(yf yfilter.YFilter) { path.YFilter = yf }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "lfa-path" { return "LfaPath" }
    return ""
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetSegmentPath() string {
    return "path"
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lfa-path" {
        for _, c := range path.LfaPath {
            if path.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath{}
        path.LfaPath = append(path.LfaPath, child)
        return &path.LfaPath[len(path.LfaPath)-1]
    }
    return nil
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range path.LfaPath {
        children[path.LfaPath[i].GetSegmentPath()] = &path.LfaPath[i]
    }
    return children
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = path.InterfaceName
    leafs["neighbour-address"] = path.NeighbourAddress
    leafs["change-type"] = path.ChangeType
    leafs["path-metric"] = path.PathMetric
    return leafs
}

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetBundleName() string { return "cisco_ios_xr" }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetYangName() string { return "path" }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) SetParent(parent types.Entity) { path.parent = parent }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetParent() types.Entity { return path.parent }

func (path *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath
// Backup Path Informatoin
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of LFA. The type is RcmdShowIpfrrLfa.
    LfaType interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Nexthop Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighbourAddress interface{}

    // Event Add/Delete. The type is RcmdChange.
    ChangeType interface{}

    // Path Metric. The type is interface{} with range: 0..4294967295.
    PathMetric interface{}

    // Remote Node ID, in case of Remote LFA. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetFilter() yfilter.YFilter { return lfaPath.YFilter }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) SetFilter(yf yfilter.YFilter) { lfaPath.YFilter = yf }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetGoName(yname string) string {
    if yname == "lfa-type" { return "LfaType" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbour-address" { return "NeighbourAddress" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "path-metric" { return "PathMetric" }
    if yname == "remote-node-id" { return "RemoteNodeId" }
    return ""
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetSegmentPath() string {
    return "lfa-path"
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lfa-type"] = lfaPath.LfaType
    leafs["interface-name"] = lfaPath.InterfaceName
    leafs["neighbour-address"] = lfaPath.NeighbourAddress
    leafs["change-type"] = lfaPath.ChangeType
    leafs["path-metric"] = lfaPath.PathMetric
    leafs["remote-node-id"] = lfaPath.RemoteNodeId
    return leafs
}

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetBundleName() string { return "cisco_ios_xr" }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetYangName() string { return "lfa-path" }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) SetParent(parent types.Entity) { lfaPath.parent = parent }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetParent() types.Entity { return lfaPath.parent }

func (lfaPath *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_Path_LfaPath) GetParentYangName() string { return "path" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa
// LSA that triggered this event
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetFilter() yfilter.YFilter { return triggerLsa.YFilter }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) SetFilter(yf yfilter.YFilter) { triggerLsa.YFilter = yf }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetSegmentPath() string {
    return "trigger-lsa"
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = triggerLsa.LsaId
    leafs["sequence-number"] = triggerLsa.SequenceNumber
    leafs["lsa-type"] = triggerLsa.LsaType
    leafs["origin-router-id"] = triggerLsa.OriginRouterId
    leafs["change-type"] = triggerLsa.ChangeType
    leafs["reception-time"] = triggerLsa.ReceptionTime
    return leafs
}

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetBundleName() string { return "cisco_ios_xr" }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetYangName() string { return "trigger-lsa" }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) SetParent(parent types.Entity) { triggerLsa.parent = parent }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetParent() types.Entity { return triggerLsa.parent }

func (triggerLsa *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TriggerLsa) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine
// Timeline information
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route origin (routing protocol). The type is string.
    RouteOrigin interface{}

    // Entry point of IPv4 RIB. The type is string.
    RiBv4Enter interface{}

    // Exit point from IPv4 RIB to FIBs. The type is string.
    RiBv4Exit interface{}

    // Route Redistribute point from IPv4 RIB to LDP. The type is string.
    RiBv4Redistribute interface{}

    // Entry point of LDP. The type is string.
    LdpEnter interface{}

    // Exit point of LDP to LSD. The type is string.
    LdpExit interface{}

    // Entry point of LSD. The type is string.
    LsdEnter interface{}

    // Exit point of LSD to FIBs. The type is string.
    LsdExit interface{}

    // List of Linecards' completion point for IP routes. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp.
    LcIp []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp

    // List of Linecards' completion point for MPLS labels. The type is slice of
    // Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls.
    LcMpls []Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetFilter() yfilter.YFilter { return timeLine.YFilter }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) SetFilter(yf yfilter.YFilter) { timeLine.YFilter = yf }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetGoName(yname string) string {
    if yname == "route-origin" { return "RouteOrigin" }
    if yname == "ri-bv4-enter" { return "RiBv4Enter" }
    if yname == "ri-bv4-exit" { return "RiBv4Exit" }
    if yname == "ri-bv4-redistribute" { return "RiBv4Redistribute" }
    if yname == "ldp-enter" { return "LdpEnter" }
    if yname == "ldp-exit" { return "LdpExit" }
    if yname == "lsd-enter" { return "LsdEnter" }
    if yname == "lsd-exit" { return "LsdExit" }
    if yname == "lc-ip" { return "LcIp" }
    if yname == "lc-mpls" { return "LcMpls" }
    return ""
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetSegmentPath() string {
    return "time-line"
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lc-ip" {
        for _, c := range timeLine.LcIp {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp{}
        timeLine.LcIp = append(timeLine.LcIp, child)
        return &timeLine.LcIp[len(timeLine.LcIp)-1]
    }
    if childYangName == "lc-mpls" {
        for _, c := range timeLine.LcMpls {
            if timeLine.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls{}
        timeLine.LcMpls = append(timeLine.LcMpls, child)
        return &timeLine.LcMpls[len(timeLine.LcMpls)-1]
    }
    return nil
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range timeLine.LcIp {
        children[timeLine.LcIp[i].GetSegmentPath()] = &timeLine.LcIp[i]
    }
    for i := range timeLine.LcMpls {
        children[timeLine.LcMpls[i].GetSegmentPath()] = &timeLine.LcMpls[i]
    }
    return children
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-origin"] = timeLine.RouteOrigin
    leafs["ri-bv4-enter"] = timeLine.RiBv4Enter
    leafs["ri-bv4-exit"] = timeLine.RiBv4Exit
    leafs["ri-bv4-redistribute"] = timeLine.RiBv4Redistribute
    leafs["ldp-enter"] = timeLine.LdpEnter
    leafs["ldp-exit"] = timeLine.LdpExit
    leafs["lsd-enter"] = timeLine.LsdEnter
    leafs["lsd-exit"] = timeLine.LsdExit
    return leafs
}

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetBundleName() string { return "cisco_ios_xr" }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetYangName() string { return "time-line" }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) SetParent(parent types.Entity) { timeLine.parent = parent }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetParent() types.Entity { return timeLine.parent }

func (timeLine *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp
// List of Linecards' completion point for IP
// routes
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetFilter() yfilter.YFilter { return lcIp.YFilter }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) SetFilter(yf yfilter.YFilter) { lcIp.YFilter = yf }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetSegmentPath() string {
    return "lc-ip"
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcIp.NodeName
    leafs["speed"] = lcIp.Speed
    leafs["fib-complete"] = lcIp.FibComplete
    return leafs
}

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetBundleName() string { return "cisco_ios_xr" }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetYangName() string { return "lc-ip" }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) SetParent(parent types.Entity) { lcIp.parent = parent }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetParent() types.Entity { return lcIp.parent }

func (lcIp *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcIp) GetParentYangName() string { return "time-line" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls
// List of Linecards' completion point for MPLS
// labels
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Linecard node name. The type is string.
    NodeName interface{}

    // Relative convergence speed. The type is RcmdLinecardSpeed.
    Speed interface{}

    // Completion point of FIB. The type is string.
    FibComplete interface{}
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetFilter() yfilter.YFilter { return lcMpls.YFilter }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) SetFilter(yf yfilter.YFilter) { lcMpls.YFilter = yf }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetGoName(yname string) string {
    if yname == "node-name" { return "NodeName" }
    if yname == "speed" { return "Speed" }
    if yname == "fib-complete" { return "FibComplete" }
    return ""
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetSegmentPath() string {
    return "lc-mpls"
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-name"] = lcMpls.NodeName
    leafs["speed"] = lcMpls.Speed
    leafs["fib-complete"] = lcMpls.FibComplete
    return leafs
}

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetBundleName() string { return "cisco_ios_xr" }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetYangName() string { return "lc-mpls" }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) SetParent(parent types.Entity) { lcMpls.parent = parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetParent() types.Entity { return lcMpls.parent }

func (lcMpls *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_TimeLine_LcMpls) GetParentYangName() string { return "time-line" }

// Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed
// List of LSAs processed
type Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // Sequence Number. The type is string.
    SequenceNumber interface{}

    // LSA type. The type is RcmdLsa.
    LsaType interface{}

    // Originating Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    OriginRouterId interface{}

    // Add, Delete, Modify. The type is RcmdLsChange.
    ChangeType interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetFilter() yfilter.YFilter { return lsaProcessed.YFilter }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) SetFilter(yf yfilter.YFilter) { lsaProcessed.YFilter = yf }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetGoName(yname string) string {
    if yname == "lsa-id" { return "LsaId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "origin-router-id" { return "OriginRouterId" }
    if yname == "change-type" { return "ChangeType" }
    if yname == "reception-time" { return "ReceptionTime" }
    return ""
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetSegmentPath() string {
    return "lsa-processed"
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-id"] = lsaProcessed.LsaId
    leafs["sequence-number"] = lsaProcessed.SequenceNumber
    leafs["lsa-type"] = lsaProcessed.LsaType
    leafs["origin-router-id"] = lsaProcessed.OriginRouterId
    leafs["change-type"] = lsaProcessed.ChangeType
    leafs["reception-time"] = lsaProcessed.ReceptionTime
    return leafs
}

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetYangName() string { return "lsa-processed" }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) SetParent(parent types.Entity) { lsaProcessed.parent = parent }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetParent() types.Entity { return lsaProcessed.parent }

func (lsaProcessed *Rcmd_Isis_Instances_Instance_PrefixEventOfflines_PrefixEventOffline_LsaProcessed) GetParentYangName() string { return "prefix-event-offline" }

// Rcmd_Isis_Instances_Instance_LspRegenerateds
// Regenerated LSP data
type Rcmd_Isis_Instances_Instance_LspRegenerateds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Regenerated LSP data. The type is slice of
    // Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated.
    LspRegenerated []Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated
}

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetFilter() yfilter.YFilter { return lspRegenerateds.YFilter }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) SetFilter(yf yfilter.YFilter) { lspRegenerateds.YFilter = yf }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetGoName(yname string) string {
    if yname == "lsp-regenerated" { return "LspRegenerated" }
    return ""
}

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetSegmentPath() string {
    return "lsp-regenerateds"
}

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-regenerated" {
        for _, c := range lspRegenerateds.LspRegenerated {
            if lspRegenerateds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated{}
        lspRegenerateds.LspRegenerated = append(lspRegenerateds.LspRegenerated, child)
        return &lspRegenerateds.LspRegenerated[len(lspRegenerateds.LspRegenerated)-1]
    }
    return nil
}

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lspRegenerateds.LspRegenerated {
        children[lspRegenerateds.LspRegenerated[i].GetSegmentPath()] = &lspRegenerateds.LspRegenerated[i]
    }
    return children
}

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetBundleName() string { return "cisco_ios_xr" }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetYangName() string { return "lsp-regenerateds" }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) SetParent(parent types.Entity) { lspRegenerateds.parent = parent }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetParent() types.Entity { return lspRegenerateds.parent }

func (lspRegenerateds *Rcmd_Isis_Instances_Instance_LspRegenerateds) GetParentYangName() string { return "instance" }

// Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated
// Regenerated LSP data
type Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Data for a particular regenerated LSP. The type is
    // interface{} with range: 1..4294967295.
    SerialNumber interface{}

    // Serial Number of the session event. The type is interface{} with range:
    // 0..4294967295.
    SerialNumberXr interface{}

    // LSP ID. The type is string.
    LspId interface{}

    // Sequence Number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Reception Time on router (in hh:mm:ss.msec). The type is string.
    ReceptionTime interface{}

    // ISIS Level. The type is RcmdIsisLvl.
    IsisLevel interface{}

    // SPF Run Number. The type is interface{} with range: 0..4294967295.
    SpfRunNumber interface{}

    // Trigger reasons for LSP regeneration. Example: pr^ - periodic, cr^ - clear
    // (Check the documentation for the entire list). The type is string.
    Reason interface{}
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetFilter() yfilter.YFilter { return lspRegenerated.YFilter }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) SetFilter(yf yfilter.YFilter) { lspRegenerated.YFilter = yf }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetGoName(yname string) string {
    if yname == "serial-number" { return "SerialNumber" }
    if yname == "serial-number-xr" { return "SerialNumberXr" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "reception-time" { return "ReceptionTime" }
    if yname == "isis-level" { return "IsisLevel" }
    if yname == "spf-run-number" { return "SpfRunNumber" }
    if yname == "reason" { return "Reason" }
    return ""
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetSegmentPath() string {
    return "lsp-regenerated" + "[serial-number='" + fmt.Sprintf("%v", lspRegenerated.SerialNumber) + "']"
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["serial-number"] = lspRegenerated.SerialNumber
    leafs["serial-number-xr"] = lspRegenerated.SerialNumberXr
    leafs["lsp-id"] = lspRegenerated.LspId
    leafs["sequence-number"] = lspRegenerated.SequenceNumber
    leafs["reception-time"] = lspRegenerated.ReceptionTime
    leafs["isis-level"] = lspRegenerated.IsisLevel
    leafs["spf-run-number"] = lspRegenerated.SpfRunNumber
    leafs["reason"] = lspRegenerated.Reason
    return leafs
}

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetBundleName() string { return "cisco_ios_xr" }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetYangName() string { return "lsp-regenerated" }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) SetParent(parent types.Entity) { lspRegenerated.parent = parent }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetParent() types.Entity { return lspRegenerated.parent }

func (lspRegenerated *Rcmd_Isis_Instances_Instance_LspRegenerateds_LspRegenerated) GetParentYangName() string { return "lsp-regenerateds" }

// Rcmd_Memory
// Memory Info
type Rcmd_Memory struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Memory Info. The type is slice of Rcmd_Memory_MemoryInfo.
    MemoryInfo []Rcmd_Memory_MemoryInfo

    // Memory Info. The type is slice of Rcmd_Memory_EdmMemoryInfo.
    EdmMemoryInfo []Rcmd_Memory_EdmMemoryInfo

    // Memory Info. The type is slice of Rcmd_Memory_StringMemoryInfo.
    StringMemoryInfo []Rcmd_Memory_StringMemoryInfo
}

func (memory *Rcmd_Memory) GetFilter() yfilter.YFilter { return memory.YFilter }

func (memory *Rcmd_Memory) SetFilter(yf yfilter.YFilter) { memory.YFilter = yf }

func (memory *Rcmd_Memory) GetGoName(yname string) string {
    if yname == "memory-info" { return "MemoryInfo" }
    if yname == "edm-memory-info" { return "EdmMemoryInfo" }
    if yname == "string-memory-info" { return "StringMemoryInfo" }
    return ""
}

func (memory *Rcmd_Memory) GetSegmentPath() string {
    return "memory"
}

func (memory *Rcmd_Memory) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "memory-info" {
        for _, c := range memory.MemoryInfo {
            if memory.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Memory_MemoryInfo{}
        memory.MemoryInfo = append(memory.MemoryInfo, child)
        return &memory.MemoryInfo[len(memory.MemoryInfo)-1]
    }
    if childYangName == "edm-memory-info" {
        for _, c := range memory.EdmMemoryInfo {
            if memory.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Memory_EdmMemoryInfo{}
        memory.EdmMemoryInfo = append(memory.EdmMemoryInfo, child)
        return &memory.EdmMemoryInfo[len(memory.EdmMemoryInfo)-1]
    }
    if childYangName == "string-memory-info" {
        for _, c := range memory.StringMemoryInfo {
            if memory.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Memory_StringMemoryInfo{}
        memory.StringMemoryInfo = append(memory.StringMemoryInfo, child)
        return &memory.StringMemoryInfo[len(memory.StringMemoryInfo)-1]
    }
    return nil
}

func (memory *Rcmd_Memory) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range memory.MemoryInfo {
        children[memory.MemoryInfo[i].GetSegmentPath()] = &memory.MemoryInfo[i]
    }
    for i := range memory.EdmMemoryInfo {
        children[memory.EdmMemoryInfo[i].GetSegmentPath()] = &memory.EdmMemoryInfo[i]
    }
    for i := range memory.StringMemoryInfo {
        children[memory.StringMemoryInfo[i].GetSegmentPath()] = &memory.StringMemoryInfo[i]
    }
    return children
}

func (memory *Rcmd_Memory) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (memory *Rcmd_Memory) GetBundleName() string { return "cisco_ios_xr" }

func (memory *Rcmd_Memory) GetYangName() string { return "memory" }

func (memory *Rcmd_Memory) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memory *Rcmd_Memory) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memory *Rcmd_Memory) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memory *Rcmd_Memory) SetParent(parent types.Entity) { memory.parent = parent }

func (memory *Rcmd_Memory) GetParent() types.Entity { return memory.parent }

func (memory *Rcmd_Memory) GetParentYangName() string { return "rcmd" }

// Rcmd_Memory_MemoryInfo
// Memory Info
type Rcmd_Memory_MemoryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Structure Name. The type is string.
    StructureName interface{}

    // Size of the datastructure. The type is interface{} with range:
    // 0..4294967295.
    Size interface{}

    // Current Count. The type is interface{} with range: 0..4294967295.
    CurrentCount interface{}

    // Allocation Fails. The type is interface{} with range: 0..4294967295.
    AllocFails interface{}

    // Allocated count. The type is interface{} with range: 0..4294967295.
    AllocCount interface{}

    // Freed Count. The type is interface{} with range: 0..4294967295.
    FreedCount interface{}

    // Memory Type. The type is RcmdShowMem.
    MemoryType interface{}
}

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetFilter() yfilter.YFilter { return memoryInfo.YFilter }

func (memoryInfo *Rcmd_Memory_MemoryInfo) SetFilter(yf yfilter.YFilter) { memoryInfo.YFilter = yf }

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetGoName(yname string) string {
    if yname == "structure-name" { return "StructureName" }
    if yname == "size" { return "Size" }
    if yname == "current-count" { return "CurrentCount" }
    if yname == "alloc-fails" { return "AllocFails" }
    if yname == "alloc-count" { return "AllocCount" }
    if yname == "freed-count" { return "FreedCount" }
    if yname == "memory-type" { return "MemoryType" }
    return ""
}

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetSegmentPath() string {
    return "memory-info"
}

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["structure-name"] = memoryInfo.StructureName
    leafs["size"] = memoryInfo.Size
    leafs["current-count"] = memoryInfo.CurrentCount
    leafs["alloc-fails"] = memoryInfo.AllocFails
    leafs["alloc-count"] = memoryInfo.AllocCount
    leafs["freed-count"] = memoryInfo.FreedCount
    leafs["memory-type"] = memoryInfo.MemoryType
    return leafs
}

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetYangName() string { return "memory-info" }

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (memoryInfo *Rcmd_Memory_MemoryInfo) SetParent(parent types.Entity) { memoryInfo.parent = parent }

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetParent() types.Entity { return memoryInfo.parent }

func (memoryInfo *Rcmd_Memory_MemoryInfo) GetParentYangName() string { return "memory" }

// Rcmd_Memory_EdmMemoryInfo
// Memory Info
type Rcmd_Memory_EdmMemoryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Size of the block. The type is interface{} with range: 0..4294967295.
    Size interface{}

    // Total request. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // Cache-hit success. The type is interface{} with range: 0..4294967295.
    Success interface{}

    // Cache-hit failure. The type is interface{} with range: 0..4294967295.
    Failure interface{}
}

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetFilter() yfilter.YFilter { return edmMemoryInfo.YFilter }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) SetFilter(yf yfilter.YFilter) { edmMemoryInfo.YFilter = yf }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "total" { return "Total" }
    if yname == "success" { return "Success" }
    if yname == "failure" { return "Failure" }
    return ""
}

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetSegmentPath() string {
    return "edm-memory-info"
}

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = edmMemoryInfo.Size
    leafs["total"] = edmMemoryInfo.Total
    leafs["success"] = edmMemoryInfo.Success
    leafs["failure"] = edmMemoryInfo.Failure
    return leafs
}

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetYangName() string { return "edm-memory-info" }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) SetParent(parent types.Entity) { edmMemoryInfo.parent = parent }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetParent() types.Entity { return edmMemoryInfo.parent }

func (edmMemoryInfo *Rcmd_Memory_EdmMemoryInfo) GetParentYangName() string { return "memory" }

// Rcmd_Memory_StringMemoryInfo
// Memory Info
type Rcmd_Memory_StringMemoryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Size of the block. The type is interface{} with range: 0..4294967295.
    Size interface{}

    // Total request. The type is interface{} with range: 0..4294967295.
    Total interface{}

    // Cache-hit success. The type is interface{} with range: 0..4294967295.
    Success interface{}

    // Cache-hit failure. The type is interface{} with range: 0..4294967295.
    Failure interface{}
}

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetFilter() yfilter.YFilter { return stringMemoryInfo.YFilter }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) SetFilter(yf yfilter.YFilter) { stringMemoryInfo.YFilter = yf }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetGoName(yname string) string {
    if yname == "size" { return "Size" }
    if yname == "total" { return "Total" }
    if yname == "success" { return "Success" }
    if yname == "failure" { return "Failure" }
    return ""
}

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetSegmentPath() string {
    return "string-memory-info"
}

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["size"] = stringMemoryInfo.Size
    leafs["total"] = stringMemoryInfo.Total
    leafs["success"] = stringMemoryInfo.Success
    leafs["failure"] = stringMemoryInfo.Failure
    return leafs
}

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetYangName() string { return "string-memory-info" }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) SetParent(parent types.Entity) { stringMemoryInfo.parent = parent }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetParent() types.Entity { return stringMemoryInfo.parent }

func (stringMemoryInfo *Rcmd_Memory_StringMemoryInfo) GetParentYangName() string { return "memory" }

// Rcmd_Ldp
// LDP data
type Rcmd_Ldp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session Events.
    Sessions Rcmd_Ldp_Sessions

    // Remote LFA Coverage Events.
    RemoteLfaS Rcmd_Ldp_RemoteLfaS

    // Remote LFA Coverage Events.
    RemoteLfaSummaries Rcmd_Ldp_RemoteLfaSummaries
}

func (ldp *Rcmd_Ldp) GetFilter() yfilter.YFilter { return ldp.YFilter }

func (ldp *Rcmd_Ldp) SetFilter(yf yfilter.YFilter) { ldp.YFilter = yf }

func (ldp *Rcmd_Ldp) GetGoName(yname string) string {
    if yname == "sessions" { return "Sessions" }
    if yname == "remote-lfa-s" { return "RemoteLfaS" }
    if yname == "remote-lfa-summaries" { return "RemoteLfaSummaries" }
    return ""
}

func (ldp *Rcmd_Ldp) GetSegmentPath() string {
    return "ldp"
}

func (ldp *Rcmd_Ldp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sessions" {
        return &ldp.Sessions
    }
    if childYangName == "remote-lfa-s" {
        return &ldp.RemoteLfaS
    }
    if childYangName == "remote-lfa-summaries" {
        return &ldp.RemoteLfaSummaries
    }
    return nil
}

func (ldp *Rcmd_Ldp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sessions"] = &ldp.Sessions
    children["remote-lfa-s"] = &ldp.RemoteLfaS
    children["remote-lfa-summaries"] = &ldp.RemoteLfaSummaries
    return children
}

func (ldp *Rcmd_Ldp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ldp *Rcmd_Ldp) GetBundleName() string { return "cisco_ios_xr" }

func (ldp *Rcmd_Ldp) GetYangName() string { return "ldp" }

func (ldp *Rcmd_Ldp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldp *Rcmd_Ldp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldp *Rcmd_Ldp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldp *Rcmd_Ldp) SetParent(parent types.Entity) { ldp.parent = parent }

func (ldp *Rcmd_Ldp) GetParent() types.Entity { return ldp.parent }

func (ldp *Rcmd_Ldp) GetParentYangName() string { return "rcmd" }

// Rcmd_Ldp_Sessions
// Session Events
type Rcmd_Ldp_Sessions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session. The type is slice of Rcmd_Ldp_Sessions_Session.
    Session []Rcmd_Ldp_Sessions_Session
}

func (sessions *Rcmd_Ldp_Sessions) GetFilter() yfilter.YFilter { return sessions.YFilter }

func (sessions *Rcmd_Ldp_Sessions) SetFilter(yf yfilter.YFilter) { sessions.YFilter = yf }

func (sessions *Rcmd_Ldp_Sessions) GetGoName(yname string) string {
    if yname == "session" { return "Session" }
    return ""
}

func (sessions *Rcmd_Ldp_Sessions) GetSegmentPath() string {
    return "sessions"
}

func (sessions *Rcmd_Ldp_Sessions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        for _, c := range sessions.Session {
            if sessions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_Sessions_Session{}
        sessions.Session = append(sessions.Session, child)
        return &sessions.Session[len(sessions.Session)-1]
    }
    return nil
}

func (sessions *Rcmd_Ldp_Sessions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessions.Session {
        children[sessions.Session[i].GetSegmentPath()] = &sessions.Session[i]
    }
    return children
}

func (sessions *Rcmd_Ldp_Sessions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessions *Rcmd_Ldp_Sessions) GetBundleName() string { return "cisco_ios_xr" }

func (sessions *Rcmd_Ldp_Sessions) GetYangName() string { return "sessions" }

func (sessions *Rcmd_Ldp_Sessions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessions *Rcmd_Ldp_Sessions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessions *Rcmd_Ldp_Sessions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessions *Rcmd_Ldp_Sessions) SetParent(parent types.Entity) { sessions.parent = parent }

func (sessions *Rcmd_Ldp_Sessions) GetParent() types.Entity { return sessions.parent }

func (sessions *Rcmd_Ldp_Sessions) GetParentYangName() string { return "ldp" }

// Rcmd_Ldp_Sessions_Session
// Session
type Rcmd_Ldp_Sessions_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // Event ID. The type is interface{} with range: 0..4294967295.
    EventIdXr interface{}

    // Type of event. The type is RcmdLdpEvent.
    EventType interface{}

    // Event Time. The type is string.
    EventTime interface{}

    // Label Space Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // transport address or adjacency address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // Adjacency Session Status. The type is RcmdShowLdpNeighbourStatus.
    State interface{}
}

func (session *Rcmd_Ldp_Sessions_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rcmd_Ldp_Sessions_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rcmd_Ldp_Sessions_Session) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "event-id-xr" { return "EventIdXr" }
    if yname == "event-type" { return "EventType" }
    if yname == "event-time" { return "EventTime" }
    if yname == "lsr-id" { return "LsrId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "address" { return "Address" }
    if yname == "state" { return "State" }
    return ""
}

func (session *Rcmd_Ldp_Sessions_Session) GetSegmentPath() string {
    return "session" + "[event-id='" + fmt.Sprintf("%v", session.EventId) + "']"
}

func (session *Rcmd_Ldp_Sessions_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (session *Rcmd_Ldp_Sessions_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (session *Rcmd_Ldp_Sessions_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = session.EventId
    leafs["event-id-xr"] = session.EventIdXr
    leafs["event-type"] = session.EventType
    leafs["event-time"] = session.EventTime
    leafs["lsr-id"] = session.LsrId
    leafs["interface-name"] = session.InterfaceName
    leafs["address"] = session.Address
    leafs["state"] = session.State
    return leafs
}

func (session *Rcmd_Ldp_Sessions_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rcmd_Ldp_Sessions_Session) GetYangName() string { return "session" }

func (session *Rcmd_Ldp_Sessions_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rcmd_Ldp_Sessions_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rcmd_Ldp_Sessions_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rcmd_Ldp_Sessions_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rcmd_Ldp_Sessions_Session) GetParent() types.Entity { return session.parent }

func (session *Rcmd_Ldp_Sessions_Session) GetParentYangName() string { return "sessions" }

// Rcmd_Ldp_RemoteLfaS
// Remote LFA Coverage Events
type Rcmd_Ldp_RemoteLfaS struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RemoteLFA. The type is slice of Rcmd_Ldp_RemoteLfaS_RemoteLfa.
    RemoteLfa []Rcmd_Ldp_RemoteLfaS_RemoteLfa
}

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetFilter() yfilter.YFilter { return remoteLfaS.YFilter }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) SetFilter(yf yfilter.YFilter) { remoteLfaS.YFilter = yf }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetGoName(yname string) string {
    if yname == "remote-lfa" { return "RemoteLfa" }
    return ""
}

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetSegmentPath() string {
    return "remote-lfa-s"
}

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa" {
        for _, c := range remoteLfaS.RemoteLfa {
            if remoteLfaS.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaS_RemoteLfa{}
        remoteLfaS.RemoteLfa = append(remoteLfaS.RemoteLfa, child)
        return &remoteLfaS.RemoteLfa[len(remoteLfaS.RemoteLfa)-1]
    }
    return nil
}

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteLfaS.RemoteLfa {
        children[remoteLfaS.RemoteLfa[i].GetSegmentPath()] = &remoteLfaS.RemoteLfa[i]
    }
    return children
}

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetYangName() string { return "remote-lfa-s" }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) SetParent(parent types.Entity) { remoteLfaS.parent = parent }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetParent() types.Entity { return remoteLfaS.parent }

func (remoteLfaS *Rcmd_Ldp_RemoteLfaS) GetParentYangName() string { return "ldp" }

// Rcmd_Ldp_RemoteLfaS_RemoteLfa
// RemoteLFA
type Rcmd_Ldp_RemoteLfaS_RemoteLfa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // LDP-rLFA Event ID. The type is interface{} with range: 0..4294967295.
    EventIdXr interface{}

    // End of IGP LFA Calculation Time (eg: Apr 24 13 :16:04.961). The type is
    // string.
    EndOfCalculationTime interface{}

    // IGP Protocol. The type is RcmdProtocolId.
    IgpProtocol interface{}

    // Process Name. The type is string.
    ProcessName interface{}

    // IGP IP-FRR Event ID (ref: rcmd_show_ipfrr_event_info(EventID)). The type is
    // interface{} with range: 0..4294967295.
    IpfrrEventId interface{}

    // Coverage Below Threshold. The type is bool.
    BelowThreshold interface{}

    // RLFA Statistics categorized by session state. The type is slice of
    // Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic.
    SessionStatistic []Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic

    // Remote Node Information. The type is slice of
    // Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode.
    RemoteNode []Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode

    // Logs Information. The type is slice of Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs.
    Logs []Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs
}

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetFilter() yfilter.YFilter { return remoteLfa.YFilter }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) SetFilter(yf yfilter.YFilter) { remoteLfa.YFilter = yf }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "event-id-xr" { return "EventIdXr" }
    if yname == "end-of-calculation-time" { return "EndOfCalculationTime" }
    if yname == "igp-protocol" { return "IgpProtocol" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "below-threshold" { return "BelowThreshold" }
    if yname == "session-statistic" { return "SessionStatistic" }
    if yname == "remote-node" { return "RemoteNode" }
    if yname == "logs" { return "Logs" }
    return ""
}

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetSegmentPath() string {
    return "remote-lfa" + "[event-id='" + fmt.Sprintf("%v", remoteLfa.EventId) + "']"
}

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-statistic" {
        for _, c := range remoteLfa.SessionStatistic {
            if remoteLfa.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic{}
        remoteLfa.SessionStatistic = append(remoteLfa.SessionStatistic, child)
        return &remoteLfa.SessionStatistic[len(remoteLfa.SessionStatistic)-1]
    }
    if childYangName == "remote-node" {
        for _, c := range remoteLfa.RemoteNode {
            if remoteLfa.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode{}
        remoteLfa.RemoteNode = append(remoteLfa.RemoteNode, child)
        return &remoteLfa.RemoteNode[len(remoteLfa.RemoteNode)-1]
    }
    if childYangName == "logs" {
        for _, c := range remoteLfa.Logs {
            if remoteLfa.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs{}
        remoteLfa.Logs = append(remoteLfa.Logs, child)
        return &remoteLfa.Logs[len(remoteLfa.Logs)-1]
    }
    return nil
}

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteLfa.SessionStatistic {
        children[remoteLfa.SessionStatistic[i].GetSegmentPath()] = &remoteLfa.SessionStatistic[i]
    }
    for i := range remoteLfa.RemoteNode {
        children[remoteLfa.RemoteNode[i].GetSegmentPath()] = &remoteLfa.RemoteNode[i]
    }
    for i := range remoteLfa.Logs {
        children[remoteLfa.Logs[i].GetSegmentPath()] = &remoteLfa.Logs[i]
    }
    return children
}

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = remoteLfa.EventId
    leafs["event-id-xr"] = remoteLfa.EventIdXr
    leafs["end-of-calculation-time"] = remoteLfa.EndOfCalculationTime
    leafs["igp-protocol"] = remoteLfa.IgpProtocol
    leafs["process-name"] = remoteLfa.ProcessName
    leafs["ipfrr-event-id"] = remoteLfa.IpfrrEventId
    leafs["below-threshold"] = remoteLfa.BelowThreshold
    return leafs
}

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetYangName() string { return "remote-lfa" }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) SetParent(parent types.Entity) { remoteLfa.parent = parent }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetParent() types.Entity { return remoteLfa.parent }

func (remoteLfa *Rcmd_Ldp_RemoteLfaS_RemoteLfa) GetParentYangName() string { return "remote-lfa-s" }

// Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic
// RLFA Statistics categorized by session state
type Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session State. The type is RcmdShowLdpSessionState.
    SessionState interface{}

    // LDP Session Count. The type is interface{} with range: 0..4294967295.
    SessionCount interface{}

    // Total Route Count. The type is interface{} with range: 0..4294967295.
    RouteCount interface{}

    // Total Path Count. The type is interface{} with range: 0..4294967295.
    PathCount interface{}

    // Remote Label Count. The type is interface{} with range: 0..4294967295.
    RemoteLabelCount interface{}

    // Protected Route Count. The type is interface{} with range: 0..4294967295.
    ProtectedRouteCount interface{}

    // Protected Path Count. The type is interface{} with range: 0..4294967295.
    ProtectedPathCount interface{}
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetFilter() yfilter.YFilter { return sessionStatistic.YFilter }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) SetFilter(yf yfilter.YFilter) { sessionStatistic.YFilter = yf }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    if yname == "session-count" { return "SessionCount" }
    if yname == "route-count" { return "RouteCount" }
    if yname == "path-count" { return "PathCount" }
    if yname == "remote-label-count" { return "RemoteLabelCount" }
    if yname == "protected-route-count" { return "ProtectedRouteCount" }
    if yname == "protected-path-count" { return "ProtectedPathCount" }
    return ""
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetSegmentPath() string {
    return "session-statistic"
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-state"] = sessionStatistic.SessionState
    leafs["session-count"] = sessionStatistic.SessionCount
    leafs["route-count"] = sessionStatistic.RouteCount
    leafs["path-count"] = sessionStatistic.PathCount
    leafs["remote-label-count"] = sessionStatistic.RemoteLabelCount
    leafs["protected-route-count"] = sessionStatistic.ProtectedRouteCount
    leafs["protected-path-count"] = sessionStatistic.ProtectedPathCount
    return leafs
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetYangName() string { return "session-statistic" }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) SetParent(parent types.Entity) { sessionStatistic.parent = parent }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetParent() types.Entity { return sessionStatistic.parent }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaS_RemoteLfa_SessionStatistic) GetParentYangName() string { return "remote-lfa" }

// Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode
// Remote Node Information
type Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}

    // Label Space Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Transport Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TransportAddress interface{}

    // Inuse time of the Session. The type is string.
    InUseTime interface{}

    // Session State. The type is RcmdShowLdpSessionState.
    SessionState interface{}

    // Total Route Count. The type is interface{} with range: 0..4294967295.
    RouteCount interface{}

    // Total Path Count. The type is interface{} with range: 0..4294967295.
    PathCount interface{}

    // Remote Label Count. The type is interface{} with range: 0..4294967295.
    RemoteLabelCount interface{}

    // Protected Route Count. The type is interface{} with range: 0..4294967295.
    ProtectedRouteCount interface{}

    // Protected Path Count. The type is interface{} with range: 0..4294967295.
    ProtectedPathCount interface{}
}

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetFilter() yfilter.YFilter { return remoteNode.YFilter }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) SetFilter(yf yfilter.YFilter) { remoteNode.YFilter = yf }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetGoName(yname string) string {
    if yname == "remote-node-id" { return "RemoteNodeId" }
    if yname == "lsr-id" { return "LsrId" }
    if yname == "transport-address" { return "TransportAddress" }
    if yname == "in-use-time" { return "InUseTime" }
    if yname == "session-state" { return "SessionState" }
    if yname == "route-count" { return "RouteCount" }
    if yname == "path-count" { return "PathCount" }
    if yname == "remote-label-count" { return "RemoteLabelCount" }
    if yname == "protected-route-count" { return "ProtectedRouteCount" }
    if yname == "protected-path-count" { return "ProtectedPathCount" }
    return ""
}

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetSegmentPath() string {
    return "remote-node"
}

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["remote-node-id"] = remoteNode.RemoteNodeId
    leafs["lsr-id"] = remoteNode.LsrId
    leafs["transport-address"] = remoteNode.TransportAddress
    leafs["in-use-time"] = remoteNode.InUseTime
    leafs["session-state"] = remoteNode.SessionState
    leafs["route-count"] = remoteNode.RouteCount
    leafs["path-count"] = remoteNode.PathCount
    leafs["remote-label-count"] = remoteNode.RemoteLabelCount
    leafs["protected-route-count"] = remoteNode.ProtectedRouteCount
    leafs["protected-path-count"] = remoteNode.ProtectedPathCount
    return leafs
}

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetBundleName() string { return "cisco_ios_xr" }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetYangName() string { return "remote-node" }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) SetParent(parent types.Entity) { remoteNode.parent = parent }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetParent() types.Entity { return remoteNode.parent }

func (remoteNode *Rcmd_Ldp_RemoteLfaS_RemoteLfa_RemoteNode) GetParentYangName() string { return "remote-lfa" }

// Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs
// Logs Information
type Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event Time (eg: Apr 24 13:16:04.961). The type is string.
    LogTime interface{}

    // Label Coverage State. The type is RcmdShowLdpConvState.
    LabelCoverageState interface{}

    // Total Route Count. The type is interface{} with range: 0..4294967295.
    RouteCount interface{}

    // Remote Label Count. The type is interface{} with range: 0..4294967295.
    RemoteLabelCount interface{}
}

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetFilter() yfilter.YFilter { return logs.YFilter }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) SetFilter(yf yfilter.YFilter) { logs.YFilter = yf }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetGoName(yname string) string {
    if yname == "log-time" { return "LogTime" }
    if yname == "label-coverage-state" { return "LabelCoverageState" }
    if yname == "route-count" { return "RouteCount" }
    if yname == "remote-label-count" { return "RemoteLabelCount" }
    return ""
}

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetSegmentPath() string {
    return "logs"
}

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["log-time"] = logs.LogTime
    leafs["label-coverage-state"] = logs.LabelCoverageState
    leafs["route-count"] = logs.RouteCount
    leafs["remote-label-count"] = logs.RemoteLabelCount
    return leafs
}

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetBundleName() string { return "cisco_ios_xr" }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetYangName() string { return "logs" }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) SetParent(parent types.Entity) { logs.parent = parent }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetParent() types.Entity { return logs.parent }

func (logs *Rcmd_Ldp_RemoteLfaS_RemoteLfa_Logs) GetParentYangName() string { return "remote-lfa" }

// Rcmd_Ldp_RemoteLfaSummaries
// Remote LFA Coverage Events
type Rcmd_Ldp_RemoteLfaSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary operational data for Remote LFA. The type is slice of
    // Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary.
    RemoteLfaSummary []Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary
}

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetFilter() yfilter.YFilter { return remoteLfaSummaries.YFilter }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) SetFilter(yf yfilter.YFilter) { remoteLfaSummaries.YFilter = yf }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetGoName(yname string) string {
    if yname == "remote-lfa-summary" { return "RemoteLfaSummary" }
    return ""
}

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetSegmentPath() string {
    return "remote-lfa-summaries"
}

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "remote-lfa-summary" {
        for _, c := range remoteLfaSummaries.RemoteLfaSummary {
            if remoteLfaSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary{}
        remoteLfaSummaries.RemoteLfaSummary = append(remoteLfaSummaries.RemoteLfaSummary, child)
        return &remoteLfaSummaries.RemoteLfaSummary[len(remoteLfaSummaries.RemoteLfaSummary)-1]
    }
    return nil
}

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteLfaSummaries.RemoteLfaSummary {
        children[remoteLfaSummaries.RemoteLfaSummary[i].GetSegmentPath()] = &remoteLfaSummaries.RemoteLfaSummary[i]
    }
    return children
}

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetYangName() string { return "remote-lfa-summaries" }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) SetParent(parent types.Entity) { remoteLfaSummaries.parent = parent }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetParent() types.Entity { return remoteLfaSummaries.parent }

func (remoteLfaSummaries *Rcmd_Ldp_RemoteLfaSummaries) GetParentYangName() string { return "ldp" }

// Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary
// Summary operational data for Remote LFA
type Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event ID. The type is interface{} with
    // range: 1..4294967295.
    EventId interface{}

    // LDP-rLFA Event ID. The type is interface{} with range: 0..4294967295.
    EventIdXr interface{}

    // End of IGP LFA Calculation Time (eg: Apr 24 13 :16:04.961). The type is
    // string.
    EndOfCalculationTime interface{}

    // IGP Protocol. The type is RcmdProtocolId.
    IgpProtocol interface{}

    // Process Name. The type is string.
    ProcessName interface{}

    // IGP IP-FRR Event ID (ref: rcmd_show_ipfrr_event_info(EventID)). The type is
    // interface{} with range: 0..4294967295.
    IpfrrEventId interface{}

    // Coverage Below Threshold. The type is bool.
    BelowThreshold interface{}

    // RLFA Statistics categorized by session state. The type is slice of
    // Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic.
    SessionStatistic []Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic

    // Remote Node Information. The type is slice of
    // Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode.
    RemoteNode []Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode

    // Logs Information. The type is slice of
    // Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs.
    Logs []Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs
}

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetFilter() yfilter.YFilter { return remoteLfaSummary.YFilter }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) SetFilter(yf yfilter.YFilter) { remoteLfaSummary.YFilter = yf }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetGoName(yname string) string {
    if yname == "event-id" { return "EventId" }
    if yname == "event-id-xr" { return "EventIdXr" }
    if yname == "end-of-calculation-time" { return "EndOfCalculationTime" }
    if yname == "igp-protocol" { return "IgpProtocol" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "ipfrr-event-id" { return "IpfrrEventId" }
    if yname == "below-threshold" { return "BelowThreshold" }
    if yname == "session-statistic" { return "SessionStatistic" }
    if yname == "remote-node" { return "RemoteNode" }
    if yname == "logs" { return "Logs" }
    return ""
}

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetSegmentPath() string {
    return "remote-lfa-summary" + "[event-id='" + fmt.Sprintf("%v", remoteLfaSummary.EventId) + "']"
}

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-statistic" {
        for _, c := range remoteLfaSummary.SessionStatistic {
            if remoteLfaSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic{}
        remoteLfaSummary.SessionStatistic = append(remoteLfaSummary.SessionStatistic, child)
        return &remoteLfaSummary.SessionStatistic[len(remoteLfaSummary.SessionStatistic)-1]
    }
    if childYangName == "remote-node" {
        for _, c := range remoteLfaSummary.RemoteNode {
            if remoteLfaSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode{}
        remoteLfaSummary.RemoteNode = append(remoteLfaSummary.RemoteNode, child)
        return &remoteLfaSummary.RemoteNode[len(remoteLfaSummary.RemoteNode)-1]
    }
    if childYangName == "logs" {
        for _, c := range remoteLfaSummary.Logs {
            if remoteLfaSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs{}
        remoteLfaSummary.Logs = append(remoteLfaSummary.Logs, child)
        return &remoteLfaSummary.Logs[len(remoteLfaSummary.Logs)-1]
    }
    return nil
}

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range remoteLfaSummary.SessionStatistic {
        children[remoteLfaSummary.SessionStatistic[i].GetSegmentPath()] = &remoteLfaSummary.SessionStatistic[i]
    }
    for i := range remoteLfaSummary.RemoteNode {
        children[remoteLfaSummary.RemoteNode[i].GetSegmentPath()] = &remoteLfaSummary.RemoteNode[i]
    }
    for i := range remoteLfaSummary.Logs {
        children[remoteLfaSummary.Logs[i].GetSegmentPath()] = &remoteLfaSummary.Logs[i]
    }
    return children
}

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-id"] = remoteLfaSummary.EventId
    leafs["event-id-xr"] = remoteLfaSummary.EventIdXr
    leafs["end-of-calculation-time"] = remoteLfaSummary.EndOfCalculationTime
    leafs["igp-protocol"] = remoteLfaSummary.IgpProtocol
    leafs["process-name"] = remoteLfaSummary.ProcessName
    leafs["ipfrr-event-id"] = remoteLfaSummary.IpfrrEventId
    leafs["below-threshold"] = remoteLfaSummary.BelowThreshold
    return leafs
}

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetBundleName() string { return "cisco_ios_xr" }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetYangName() string { return "remote-lfa-summary" }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) SetParent(parent types.Entity) { remoteLfaSummary.parent = parent }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetParent() types.Entity { return remoteLfaSummary.parent }

func (remoteLfaSummary *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary) GetParentYangName() string { return "remote-lfa-summaries" }

// Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic
// RLFA Statistics categorized by session state
type Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Session State. The type is RcmdShowLdpSessionState.
    SessionState interface{}

    // LDP Session Count. The type is interface{} with range: 0..4294967295.
    SessionCount interface{}

    // Total Route Count. The type is interface{} with range: 0..4294967295.
    RouteCount interface{}

    // Total Path Count. The type is interface{} with range: 0..4294967295.
    PathCount interface{}

    // Remote Label Count. The type is interface{} with range: 0..4294967295.
    RemoteLabelCount interface{}

    // Protected Route Count. The type is interface{} with range: 0..4294967295.
    ProtectedRouteCount interface{}

    // Protected Path Count. The type is interface{} with range: 0..4294967295.
    ProtectedPathCount interface{}
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetFilter() yfilter.YFilter { return sessionStatistic.YFilter }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) SetFilter(yf yfilter.YFilter) { sessionStatistic.YFilter = yf }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetGoName(yname string) string {
    if yname == "session-state" { return "SessionState" }
    if yname == "session-count" { return "SessionCount" }
    if yname == "route-count" { return "RouteCount" }
    if yname == "path-count" { return "PathCount" }
    if yname == "remote-label-count" { return "RemoteLabelCount" }
    if yname == "protected-route-count" { return "ProtectedRouteCount" }
    if yname == "protected-path-count" { return "ProtectedPathCount" }
    return ""
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetSegmentPath() string {
    return "session-statistic"
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-state"] = sessionStatistic.SessionState
    leafs["session-count"] = sessionStatistic.SessionCount
    leafs["route-count"] = sessionStatistic.RouteCount
    leafs["path-count"] = sessionStatistic.PathCount
    leafs["remote-label-count"] = sessionStatistic.RemoteLabelCount
    leafs["protected-route-count"] = sessionStatistic.ProtectedRouteCount
    leafs["protected-path-count"] = sessionStatistic.ProtectedPathCount
    return leafs
}

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetBundleName() string { return "cisco_ios_xr" }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetYangName() string { return "session-statistic" }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) SetParent(parent types.Entity) { sessionStatistic.parent = parent }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetParent() types.Entity { return sessionStatistic.parent }

func (sessionStatistic *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_SessionStatistic) GetParentYangName() string { return "remote-lfa-summary" }

// Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode
// Remote Node Information
type Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Remote Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RemoteNodeId interface{}

    // Label Space Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsrId interface{}

    // Transport Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    TransportAddress interface{}

    // Inuse time of the Session. The type is string.
    InUseTime interface{}

    // Session State. The type is RcmdShowLdpSessionState.
    SessionState interface{}

    // Total Route Count. The type is interface{} with range: 0..4294967295.
    RouteCount interface{}

    // Total Path Count. The type is interface{} with range: 0..4294967295.
    PathCount interface{}

    // Remote Label Count. The type is interface{} with range: 0..4294967295.
    RemoteLabelCount interface{}

    // Protected Route Count. The type is interface{} with range: 0..4294967295.
    ProtectedRouteCount interface{}

    // Protected Path Count. The type is interface{} with range: 0..4294967295.
    ProtectedPathCount interface{}
}

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetFilter() yfilter.YFilter { return remoteNode.YFilter }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) SetFilter(yf yfilter.YFilter) { remoteNode.YFilter = yf }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetGoName(yname string) string {
    if yname == "remote-node-id" { return "RemoteNodeId" }
    if yname == "lsr-id" { return "LsrId" }
    if yname == "transport-address" { return "TransportAddress" }
    if yname == "in-use-time" { return "InUseTime" }
    if yname == "session-state" { return "SessionState" }
    if yname == "route-count" { return "RouteCount" }
    if yname == "path-count" { return "PathCount" }
    if yname == "remote-label-count" { return "RemoteLabelCount" }
    if yname == "protected-route-count" { return "ProtectedRouteCount" }
    if yname == "protected-path-count" { return "ProtectedPathCount" }
    return ""
}

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetSegmentPath() string {
    return "remote-node"
}

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["remote-node-id"] = remoteNode.RemoteNodeId
    leafs["lsr-id"] = remoteNode.LsrId
    leafs["transport-address"] = remoteNode.TransportAddress
    leafs["in-use-time"] = remoteNode.InUseTime
    leafs["session-state"] = remoteNode.SessionState
    leafs["route-count"] = remoteNode.RouteCount
    leafs["path-count"] = remoteNode.PathCount
    leafs["remote-label-count"] = remoteNode.RemoteLabelCount
    leafs["protected-route-count"] = remoteNode.ProtectedRouteCount
    leafs["protected-path-count"] = remoteNode.ProtectedPathCount
    return leafs
}

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetBundleName() string { return "cisco_ios_xr" }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetYangName() string { return "remote-node" }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) SetParent(parent types.Entity) { remoteNode.parent = parent }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetParent() types.Entity { return remoteNode.parent }

func (remoteNode *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_RemoteNode) GetParentYangName() string { return "remote-lfa-summary" }

// Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs
// Logs Information
type Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event Time (eg: Apr 24 13:16:04.961). The type is string.
    LogTime interface{}

    // Label Coverage State. The type is RcmdShowLdpConvState.
    LabelCoverageState interface{}

    // Total Route Count. The type is interface{} with range: 0..4294967295.
    RouteCount interface{}

    // Remote Label Count. The type is interface{} with range: 0..4294967295.
    RemoteLabelCount interface{}
}

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetFilter() yfilter.YFilter { return logs.YFilter }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) SetFilter(yf yfilter.YFilter) { logs.YFilter = yf }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetGoName(yname string) string {
    if yname == "log-time" { return "LogTime" }
    if yname == "label-coverage-state" { return "LabelCoverageState" }
    if yname == "route-count" { return "RouteCount" }
    if yname == "remote-label-count" { return "RemoteLabelCount" }
    return ""
}

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetSegmentPath() string {
    return "logs"
}

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["log-time"] = logs.LogTime
    leafs["label-coverage-state"] = logs.LabelCoverageState
    leafs["route-count"] = logs.RouteCount
    leafs["remote-label-count"] = logs.RemoteLabelCount
    return leafs
}

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetBundleName() string { return "cisco_ios_xr" }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetYangName() string { return "logs" }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) SetParent(parent types.Entity) { logs.parent = parent }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetParent() types.Entity { return logs.parent }

func (logs *Rcmd_Ldp_RemoteLfaSummaries_RemoteLfaSummary_Logs) GetParentYangName() string { return "remote-lfa-summary" }

// Rcmd_Intf
// Interface data
type Rcmd_Intf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Events.
    Events Rcmd_Intf_Events
}

func (intf *Rcmd_Intf) GetFilter() yfilter.YFilter { return intf.YFilter }

func (intf *Rcmd_Intf) SetFilter(yf yfilter.YFilter) { intf.YFilter = yf }

func (intf *Rcmd_Intf) GetGoName(yname string) string {
    if yname == "events" { return "Events" }
    return ""
}

func (intf *Rcmd_Intf) GetSegmentPath() string {
    return "intf"
}

func (intf *Rcmd_Intf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "events" {
        return &intf.Events
    }
    return nil
}

func (intf *Rcmd_Intf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["events"] = &intf.Events
    return children
}

func (intf *Rcmd_Intf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (intf *Rcmd_Intf) GetBundleName() string { return "cisco_ios_xr" }

func (intf *Rcmd_Intf) GetYangName() string { return "intf" }

func (intf *Rcmd_Intf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intf *Rcmd_Intf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intf *Rcmd_Intf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intf *Rcmd_Intf) SetParent(parent types.Entity) { intf.parent = parent }

func (intf *Rcmd_Intf) GetParent() types.Entity { return intf.parent }

func (intf *Rcmd_Intf) GetParentYangName() string { return "rcmd" }

// Rcmd_Intf_Events
// Events
type Rcmd_Intf_Events struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Events. The type is slice of Rcmd_Intf_Events_Event.
    Event []Rcmd_Intf_Events_Event
}

func (events *Rcmd_Intf_Events) GetFilter() yfilter.YFilter { return events.YFilter }

func (events *Rcmd_Intf_Events) SetFilter(yf yfilter.YFilter) { events.YFilter = yf }

func (events *Rcmd_Intf_Events) GetGoName(yname string) string {
    if yname == "event" { return "Event" }
    return ""
}

func (events *Rcmd_Intf_Events) GetSegmentPath() string {
    return "events"
}

func (events *Rcmd_Intf_Events) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "event" {
        for _, c := range events.Event {
            if events.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Intf_Events_Event{}
        events.Event = append(events.Event, child)
        return &events.Event[len(events.Event)-1]
    }
    return nil
}

func (events *Rcmd_Intf_Events) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range events.Event {
        children[events.Event[i].GetSegmentPath()] = &events.Event[i]
    }
    return children
}

func (events *Rcmd_Intf_Events) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (events *Rcmd_Intf_Events) GetBundleName() string { return "cisco_ios_xr" }

func (events *Rcmd_Intf_Events) GetYangName() string { return "events" }

func (events *Rcmd_Intf_Events) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (events *Rcmd_Intf_Events) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (events *Rcmd_Intf_Events) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (events *Rcmd_Intf_Events) SetParent(parent types.Entity) { events.parent = parent }

func (events *Rcmd_Intf_Events) GetParent() types.Entity { return events.parent }

func (events *Rcmd_Intf_Events) GetParentYangName() string { return "intf" }

// Rcmd_Intf_Events_Event
// Events
type Rcmd_Intf_Events_Event struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Specific Event No. The type is interface{} with
    // range: 1..4294967295.
    EventNo interface{}

    // Sequence No. The type is interface{} with range: 0..4294967295.
    SequenceNo interface{}

    // Interface Name. The type is string.
    InterfaceName interface{}

    // Component info. The type is RcmdShowCompId.
    Component interface{}

    // Event Info. The type is RcmdShowIntfEvent.
    EventType interface{}

    // Event Time. The type is string.
    EventTime interface{}

    // Primary Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    PrimaryAddress interface{}
}

func (event *Rcmd_Intf_Events_Event) GetFilter() yfilter.YFilter { return event.YFilter }

func (event *Rcmd_Intf_Events_Event) SetFilter(yf yfilter.YFilter) { event.YFilter = yf }

func (event *Rcmd_Intf_Events_Event) GetGoName(yname string) string {
    if yname == "event-no" { return "EventNo" }
    if yname == "sequence-no" { return "SequenceNo" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "component" { return "Component" }
    if yname == "event-type" { return "EventType" }
    if yname == "event-time" { return "EventTime" }
    if yname == "primary-address" { return "PrimaryAddress" }
    return ""
}

func (event *Rcmd_Intf_Events_Event) GetSegmentPath() string {
    return "event" + "[event-no='" + fmt.Sprintf("%v", event.EventNo) + "']"
}

func (event *Rcmd_Intf_Events_Event) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (event *Rcmd_Intf_Events_Event) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (event *Rcmd_Intf_Events_Event) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["event-no"] = event.EventNo
    leafs["sequence-no"] = event.SequenceNo
    leafs["interface-name"] = event.InterfaceName
    leafs["component"] = event.Component
    leafs["event-type"] = event.EventType
    leafs["event-time"] = event.EventTime
    leafs["primary-address"] = event.PrimaryAddress
    return leafs
}

func (event *Rcmd_Intf_Events_Event) GetBundleName() string { return "cisco_ios_xr" }

func (event *Rcmd_Intf_Events_Event) GetYangName() string { return "event" }

func (event *Rcmd_Intf_Events_Event) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (event *Rcmd_Intf_Events_Event) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (event *Rcmd_Intf_Events_Event) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (event *Rcmd_Intf_Events_Event) SetParent(parent types.Entity) { event.parent = parent }

func (event *Rcmd_Intf_Events_Event) GetParent() types.Entity { return event.parent }

func (event *Rcmd_Intf_Events_Event) GetParentYangName() string { return "events" }

// Rcmd_Process
// Process information
type Rcmd_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ISIS Process Information.
    Isis Rcmd_Process_Isis

    // OSPF Process Information.
    Ospf Rcmd_Process_Ospf

    // LDP Process Information.
    Ldp Rcmd_Process_Ldp
}

func (process *Rcmd_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Rcmd_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Rcmd_Process) GetGoName(yname string) string {
    if yname == "isis" { return "Isis" }
    if yname == "ospf" { return "Ospf" }
    if yname == "ldp" { return "Ldp" }
    return ""
}

func (process *Rcmd_Process) GetSegmentPath() string {
    return "process"
}

func (process *Rcmd_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis" {
        return &process.Isis
    }
    if childYangName == "ospf" {
        return &process.Ospf
    }
    if childYangName == "ldp" {
        return &process.Ldp
    }
    return nil
}

func (process *Rcmd_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["isis"] = &process.Isis
    children["ospf"] = &process.Ospf
    children["ldp"] = &process.Ldp
    return children
}

func (process *Rcmd_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (process *Rcmd_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Rcmd_Process) GetYangName() string { return "process" }

func (process *Rcmd_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Rcmd_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Rcmd_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Rcmd_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Rcmd_Process) GetParent() types.Entity { return process.parent }

func (process *Rcmd_Process) GetParentYangName() string { return "rcmd" }

// Rcmd_Process_Isis
// ISIS Process Information
type Rcmd_Process_Isis struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process Information. The type is slice of Rcmd_Process_Isis_Process.
    Process []Rcmd_Process_Isis_Process
}

func (isis *Rcmd_Process_Isis) GetFilter() yfilter.YFilter { return isis.YFilter }

func (isis *Rcmd_Process_Isis) SetFilter(yf yfilter.YFilter) { isis.YFilter = yf }

func (isis *Rcmd_Process_Isis) GetGoName(yname string) string {
    if yname == "process" { return "Process" }
    return ""
}

func (isis *Rcmd_Process_Isis) GetSegmentPath() string {
    return "isis"
}

func (isis *Rcmd_Process_Isis) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "process" {
        for _, c := range isis.Process {
            if isis.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Isis_Process{}
        isis.Process = append(isis.Process, child)
        return &isis.Process[len(isis.Process)-1]
    }
    return nil
}

func (isis *Rcmd_Process_Isis) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range isis.Process {
        children[isis.Process[i].GetSegmentPath()] = &isis.Process[i]
    }
    return children
}

func (isis *Rcmd_Process_Isis) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isis *Rcmd_Process_Isis) GetBundleName() string { return "cisco_ios_xr" }

func (isis *Rcmd_Process_Isis) GetYangName() string { return "isis" }

func (isis *Rcmd_Process_Isis) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isis *Rcmd_Process_Isis) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isis *Rcmd_Process_Isis) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isis *Rcmd_Process_Isis) SetParent(parent types.Entity) { isis.parent = parent }

func (isis *Rcmd_Process_Isis) GetParent() types.Entity { return isis.parent }

func (isis *Rcmd_Process_Isis) GetParentYangName() string { return "process" }

// Rcmd_Process_Isis_Process
// Process Information
type Rcmd_Process_Isis_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol id. The type is RcmdProtocolId.
    ProtocolId interface{}

    // Process Name. The type is string.
    ProcessName interface{}

    // Instance/VRF Name. The type is slice of
    // Rcmd_Process_Isis_Process_InstanceName.
    InstanceName []Rcmd_Process_Isis_Process_InstanceName
}

func (process *Rcmd_Process_Isis_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Rcmd_Process_Isis_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Rcmd_Process_Isis_Process) GetGoName(yname string) string {
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (process *Rcmd_Process_Isis_Process) GetSegmentPath() string {
    return "process"
}

func (process *Rcmd_Process_Isis_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance-name" {
        for _, c := range process.InstanceName {
            if process.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Isis_Process_InstanceName{}
        process.InstanceName = append(process.InstanceName, child)
        return &process.InstanceName[len(process.InstanceName)-1]
    }
    return nil
}

func (process *Rcmd_Process_Isis_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range process.InstanceName {
        children[process.InstanceName[i].GetSegmentPath()] = &process.InstanceName[i]
    }
    return children
}

func (process *Rcmd_Process_Isis_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-id"] = process.ProtocolId
    leafs["process-name"] = process.ProcessName
    return leafs
}

func (process *Rcmd_Process_Isis_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Rcmd_Process_Isis_Process) GetYangName() string { return "process" }

func (process *Rcmd_Process_Isis_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Rcmd_Process_Isis_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Rcmd_Process_Isis_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Rcmd_Process_Isis_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Rcmd_Process_Isis_Process) GetParent() types.Entity { return process.parent }

func (process *Rcmd_Process_Isis_Process) GetParentYangName() string { return "isis" }

// Rcmd_Process_Isis_Process_InstanceName
// Instance/VRF Name
type Rcmd_Process_Isis_Process_InstanceName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Instance Name. The type is string.
    Name interface{}

    // Last Updated Time. The type is string.
    LastUpdateTime interface{}

    // Total spf nos. The type is interface{} with range: 0..4294967295.
    TotalSpfNos interface{}

    // Route change spf nos. The type is interface{} with range: 0..4294967295.
    RouteChangeSpfNos interface{}

    // No Route change spf nos. The type is interface{} with range: 0..4294967295.
    NoRouteChangeSpfNos interface{}

    // Not Interested SPF nos. The type is interface{} with range: 0..4294967295.
    NotInterestedSpfNos interface{}

    // LSP Regen Count. The type is interface{} with range: 0..4294967295.
    LspRegenerationCount interface{}

    // Last Serial. The type is interface{} with range: 0..4294967295.
    LspRegenerationSerial interface{}

    // Archive SPF event. The type is interface{} with range: 0..4294967295.
    ArchSpfEvent interface{}

    // Archive Lsp regen. The type is interface{} with range: 0..4294967295.
    ArchLspRegeneration interface{}

    // Instance Information. The type is slice of
    // Rcmd_Process_Isis_Process_InstanceName_Instance.
    Instance []Rcmd_Process_Isis_Process_InstanceName_Instance
}

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetFilter() yfilter.YFilter { return instanceName.YFilter }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) SetFilter(yf yfilter.YFilter) { instanceName.YFilter = yf }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "last-update-time" { return "LastUpdateTime" }
    if yname == "total-spf-nos" { return "TotalSpfNos" }
    if yname == "route-change-spf-nos" { return "RouteChangeSpfNos" }
    if yname == "no-route-change-spf-nos" { return "NoRouteChangeSpfNos" }
    if yname == "not-interested-spf-nos" { return "NotInterestedSpfNos" }
    if yname == "lsp-regeneration-count" { return "LspRegenerationCount" }
    if yname == "lsp-regeneration-serial" { return "LspRegenerationSerial" }
    if yname == "arch-spf-event" { return "ArchSpfEvent" }
    if yname == "arch-lsp-regeneration" { return "ArchLspRegeneration" }
    if yname == "instance" { return "Instance" }
    return ""
}

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetSegmentPath() string {
    return "instance-name"
}

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance" {
        for _, c := range instanceName.Instance {
            if instanceName.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Isis_Process_InstanceName_Instance{}
        instanceName.Instance = append(instanceName.Instance, child)
        return &instanceName.Instance[len(instanceName.Instance)-1]
    }
    return nil
}

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instanceName.Instance {
        children[instanceName.Instance[i].GetSegmentPath()] = &instanceName.Instance[i]
    }
    return children
}

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = instanceName.Name
    leafs["last-update-time"] = instanceName.LastUpdateTime
    leafs["total-spf-nos"] = instanceName.TotalSpfNos
    leafs["route-change-spf-nos"] = instanceName.RouteChangeSpfNos
    leafs["no-route-change-spf-nos"] = instanceName.NoRouteChangeSpfNos
    leafs["not-interested-spf-nos"] = instanceName.NotInterestedSpfNos
    leafs["lsp-regeneration-count"] = instanceName.LspRegenerationCount
    leafs["lsp-regeneration-serial"] = instanceName.LspRegenerationSerial
    leafs["arch-spf-event"] = instanceName.ArchSpfEvent
    leafs["arch-lsp-regeneration"] = instanceName.ArchLspRegeneration
    return leafs
}

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetBundleName() string { return "cisco_ios_xr" }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetYangName() string { return "instance-name" }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) SetParent(parent types.Entity) { instanceName.parent = parent }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetParent() types.Entity { return instanceName.parent }

func (instanceName *Rcmd_Process_Isis_Process_InstanceName) GetParentYangName() string { return "process" }

// Rcmd_Process_Isis_Process_InstanceName_Instance
// Instance Information
type Rcmd_Process_Isis_Process_InstanceName_Instance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Instance Id. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}

    // Instance State. The type is RcmdShowInstState.
    InstanceState interface{}

    // Instance Deleted. The type is RcmdBoolYesNo.
    InstanceDeleted interface{}

    // Forward Referenced. The type is RcmdBoolYesNo.
    FwdReferenced interface{}

    // Last Updated Time. The type is string.
    LastUpdateTime interface{}

    // Node Id. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // SPF Offset. The type is interface{} with range: 0..4294967295.
    SpfOffset interface{}

    // Total spf nos. The type is interface{} with range: 0..4294967295.
    TotalSpfNos interface{}

    // spf run can be archived. The type is interface{} with range: 0..4294967295.
    ArchSpfRun interface{}

    // Route change spf nos. The type is interface{} with range: 0..4294967295.
    RouteChangeSpfNos interface{}

    // No Route change spf nos. The type is interface{} with range: 0..4294967295.
    NoRouteChangeSpfNos interface{}

    // Not Interested SPF nos. The type is interface{} with range: 0..4294967295.
    NotInterestedSpfNos interface{}

    // Total spt nos. The type is interface{} with range: 0..4294967295.
    TotalSptNos interface{}
}

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetFilter() yfilter.YFilter { return instance.YFilter }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) SetFilter(yf yfilter.YFilter) { instance.YFilter = yf }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetGoName(yname string) string {
    if yname == "instance-id" { return "InstanceId" }
    if yname == "instance-state" { return "InstanceState" }
    if yname == "instance-deleted" { return "InstanceDeleted" }
    if yname == "fwd-referenced" { return "FwdReferenced" }
    if yname == "last-update-time" { return "LastUpdateTime" }
    if yname == "node-id" { return "NodeId" }
    if yname == "spf-offset" { return "SpfOffset" }
    if yname == "total-spf-nos" { return "TotalSpfNos" }
    if yname == "arch-spf-run" { return "ArchSpfRun" }
    if yname == "route-change-spf-nos" { return "RouteChangeSpfNos" }
    if yname == "no-route-change-spf-nos" { return "NoRouteChangeSpfNos" }
    if yname == "not-interested-spf-nos" { return "NotInterestedSpfNos" }
    if yname == "total-spt-nos" { return "TotalSptNos" }
    return ""
}

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetSegmentPath() string {
    return "instance"
}

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-id"] = instance.InstanceId
    leafs["instance-state"] = instance.InstanceState
    leafs["instance-deleted"] = instance.InstanceDeleted
    leafs["fwd-referenced"] = instance.FwdReferenced
    leafs["last-update-time"] = instance.LastUpdateTime
    leafs["node-id"] = instance.NodeId
    leafs["spf-offset"] = instance.SpfOffset
    leafs["total-spf-nos"] = instance.TotalSpfNos
    leafs["arch-spf-run"] = instance.ArchSpfRun
    leafs["route-change-spf-nos"] = instance.RouteChangeSpfNos
    leafs["no-route-change-spf-nos"] = instance.NoRouteChangeSpfNos
    leafs["not-interested-spf-nos"] = instance.NotInterestedSpfNos
    leafs["total-spt-nos"] = instance.TotalSptNos
    return leafs
}

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetBundleName() string { return "cisco_ios_xr" }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetYangName() string { return "instance" }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) SetParent(parent types.Entity) { instance.parent = parent }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetParent() types.Entity { return instance.parent }

func (instance *Rcmd_Process_Isis_Process_InstanceName_Instance) GetParentYangName() string { return "instance-name" }

// Rcmd_Process_Ospf
// OSPF Process Information
type Rcmd_Process_Ospf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process Information. The type is slice of Rcmd_Process_Ospf_Process.
    Process []Rcmd_Process_Ospf_Process
}

func (ospf *Rcmd_Process_Ospf) GetFilter() yfilter.YFilter { return ospf.YFilter }

func (ospf *Rcmd_Process_Ospf) SetFilter(yf yfilter.YFilter) { ospf.YFilter = yf }

func (ospf *Rcmd_Process_Ospf) GetGoName(yname string) string {
    if yname == "process" { return "Process" }
    return ""
}

func (ospf *Rcmd_Process_Ospf) GetSegmentPath() string {
    return "ospf"
}

func (ospf *Rcmd_Process_Ospf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "process" {
        for _, c := range ospf.Process {
            if ospf.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Ospf_Process{}
        ospf.Process = append(ospf.Process, child)
        return &ospf.Process[len(ospf.Process)-1]
    }
    return nil
}

func (ospf *Rcmd_Process_Ospf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ospf.Process {
        children[ospf.Process[i].GetSegmentPath()] = &ospf.Process[i]
    }
    return children
}

func (ospf *Rcmd_Process_Ospf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospf *Rcmd_Process_Ospf) GetBundleName() string { return "cisco_ios_xr" }

func (ospf *Rcmd_Process_Ospf) GetYangName() string { return "ospf" }

func (ospf *Rcmd_Process_Ospf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospf *Rcmd_Process_Ospf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospf *Rcmd_Process_Ospf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospf *Rcmd_Process_Ospf) SetParent(parent types.Entity) { ospf.parent = parent }

func (ospf *Rcmd_Process_Ospf) GetParent() types.Entity { return ospf.parent }

func (ospf *Rcmd_Process_Ospf) GetParentYangName() string { return "process" }

// Rcmd_Process_Ospf_Process
// Process Information
type Rcmd_Process_Ospf_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol id. The type is RcmdProtocolId.
    ProtocolId interface{}

    // Process Name. The type is string.
    ProcessName interface{}

    // Instance/VRF Name. The type is slice of
    // Rcmd_Process_Ospf_Process_InstanceName.
    InstanceName []Rcmd_Process_Ospf_Process_InstanceName
}

func (process *Rcmd_Process_Ospf_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Rcmd_Process_Ospf_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Rcmd_Process_Ospf_Process) GetGoName(yname string) string {
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (process *Rcmd_Process_Ospf_Process) GetSegmentPath() string {
    return "process"
}

func (process *Rcmd_Process_Ospf_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance-name" {
        for _, c := range process.InstanceName {
            if process.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Ospf_Process_InstanceName{}
        process.InstanceName = append(process.InstanceName, child)
        return &process.InstanceName[len(process.InstanceName)-1]
    }
    return nil
}

func (process *Rcmd_Process_Ospf_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range process.InstanceName {
        children[process.InstanceName[i].GetSegmentPath()] = &process.InstanceName[i]
    }
    return children
}

func (process *Rcmd_Process_Ospf_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-id"] = process.ProtocolId
    leafs["process-name"] = process.ProcessName
    return leafs
}

func (process *Rcmd_Process_Ospf_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Rcmd_Process_Ospf_Process) GetYangName() string { return "process" }

func (process *Rcmd_Process_Ospf_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Rcmd_Process_Ospf_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Rcmd_Process_Ospf_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Rcmd_Process_Ospf_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Rcmd_Process_Ospf_Process) GetParent() types.Entity { return process.parent }

func (process *Rcmd_Process_Ospf_Process) GetParentYangName() string { return "ospf" }

// Rcmd_Process_Ospf_Process_InstanceName
// Instance/VRF Name
type Rcmd_Process_Ospf_Process_InstanceName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Instance Name. The type is string.
    Name interface{}

    // Last Updated Time. The type is string.
    LastUpdateTime interface{}

    // Total spf nos. The type is interface{} with range: 0..4294967295.
    TotalSpfNos interface{}

    // Route change spf nos. The type is interface{} with range: 0..4294967295.
    RouteChangeSpfNos interface{}

    // No Route change spf nos. The type is interface{} with range: 0..4294967295.
    NoRouteChangeSpfNos interface{}

    // Not Interested SPF nos. The type is interface{} with range: 0..4294967295.
    NotInterestedSpfNos interface{}

    // LSP Regen Count. The type is interface{} with range: 0..4294967295.
    LspRegenerationCount interface{}

    // Last Serial. The type is interface{} with range: 0..4294967295.
    LspRegenerationSerial interface{}

    // Archive SPF event. The type is interface{} with range: 0..4294967295.
    ArchSpfEvent interface{}

    // Archive Lsp regen. The type is interface{} with range: 0..4294967295.
    ArchLspRegeneration interface{}

    // Instance Information. The type is slice of
    // Rcmd_Process_Ospf_Process_InstanceName_Instance.
    Instance []Rcmd_Process_Ospf_Process_InstanceName_Instance
}

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetFilter() yfilter.YFilter { return instanceName.YFilter }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) SetFilter(yf yfilter.YFilter) { instanceName.YFilter = yf }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "last-update-time" { return "LastUpdateTime" }
    if yname == "total-spf-nos" { return "TotalSpfNos" }
    if yname == "route-change-spf-nos" { return "RouteChangeSpfNos" }
    if yname == "no-route-change-spf-nos" { return "NoRouteChangeSpfNos" }
    if yname == "not-interested-spf-nos" { return "NotInterestedSpfNos" }
    if yname == "lsp-regeneration-count" { return "LspRegenerationCount" }
    if yname == "lsp-regeneration-serial" { return "LspRegenerationSerial" }
    if yname == "arch-spf-event" { return "ArchSpfEvent" }
    if yname == "arch-lsp-regeneration" { return "ArchLspRegeneration" }
    if yname == "instance" { return "Instance" }
    return ""
}

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetSegmentPath() string {
    return "instance-name"
}

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance" {
        for _, c := range instanceName.Instance {
            if instanceName.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Ospf_Process_InstanceName_Instance{}
        instanceName.Instance = append(instanceName.Instance, child)
        return &instanceName.Instance[len(instanceName.Instance)-1]
    }
    return nil
}

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instanceName.Instance {
        children[instanceName.Instance[i].GetSegmentPath()] = &instanceName.Instance[i]
    }
    return children
}

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = instanceName.Name
    leafs["last-update-time"] = instanceName.LastUpdateTime
    leafs["total-spf-nos"] = instanceName.TotalSpfNos
    leafs["route-change-spf-nos"] = instanceName.RouteChangeSpfNos
    leafs["no-route-change-spf-nos"] = instanceName.NoRouteChangeSpfNos
    leafs["not-interested-spf-nos"] = instanceName.NotInterestedSpfNos
    leafs["lsp-regeneration-count"] = instanceName.LspRegenerationCount
    leafs["lsp-regeneration-serial"] = instanceName.LspRegenerationSerial
    leafs["arch-spf-event"] = instanceName.ArchSpfEvent
    leafs["arch-lsp-regeneration"] = instanceName.ArchLspRegeneration
    return leafs
}

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetBundleName() string { return "cisco_ios_xr" }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetYangName() string { return "instance-name" }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) SetParent(parent types.Entity) { instanceName.parent = parent }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetParent() types.Entity { return instanceName.parent }

func (instanceName *Rcmd_Process_Ospf_Process_InstanceName) GetParentYangName() string { return "process" }

// Rcmd_Process_Ospf_Process_InstanceName_Instance
// Instance Information
type Rcmd_Process_Ospf_Process_InstanceName_Instance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Instance Id. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}

    // Instance State. The type is RcmdShowInstState.
    InstanceState interface{}

    // Instance Deleted. The type is RcmdBoolYesNo.
    InstanceDeleted interface{}

    // Forward Referenced. The type is RcmdBoolYesNo.
    FwdReferenced interface{}

    // Last Updated Time. The type is string.
    LastUpdateTime interface{}

    // Node Id. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // SPF Offset. The type is interface{} with range: 0..4294967295.
    SpfOffset interface{}

    // Total spf nos. The type is interface{} with range: 0..4294967295.
    TotalSpfNos interface{}

    // spf run can be archived. The type is interface{} with range: 0..4294967295.
    ArchSpfRun interface{}

    // Route change spf nos. The type is interface{} with range: 0..4294967295.
    RouteChangeSpfNos interface{}

    // No Route change spf nos. The type is interface{} with range: 0..4294967295.
    NoRouteChangeSpfNos interface{}

    // Not Interested SPF nos. The type is interface{} with range: 0..4294967295.
    NotInterestedSpfNos interface{}

    // Total spt nos. The type is interface{} with range: 0..4294967295.
    TotalSptNos interface{}
}

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetFilter() yfilter.YFilter { return instance.YFilter }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) SetFilter(yf yfilter.YFilter) { instance.YFilter = yf }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetGoName(yname string) string {
    if yname == "instance-id" { return "InstanceId" }
    if yname == "instance-state" { return "InstanceState" }
    if yname == "instance-deleted" { return "InstanceDeleted" }
    if yname == "fwd-referenced" { return "FwdReferenced" }
    if yname == "last-update-time" { return "LastUpdateTime" }
    if yname == "node-id" { return "NodeId" }
    if yname == "spf-offset" { return "SpfOffset" }
    if yname == "total-spf-nos" { return "TotalSpfNos" }
    if yname == "arch-spf-run" { return "ArchSpfRun" }
    if yname == "route-change-spf-nos" { return "RouteChangeSpfNos" }
    if yname == "no-route-change-spf-nos" { return "NoRouteChangeSpfNos" }
    if yname == "not-interested-spf-nos" { return "NotInterestedSpfNos" }
    if yname == "total-spt-nos" { return "TotalSptNos" }
    return ""
}

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetSegmentPath() string {
    return "instance"
}

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-id"] = instance.InstanceId
    leafs["instance-state"] = instance.InstanceState
    leafs["instance-deleted"] = instance.InstanceDeleted
    leafs["fwd-referenced"] = instance.FwdReferenced
    leafs["last-update-time"] = instance.LastUpdateTime
    leafs["node-id"] = instance.NodeId
    leafs["spf-offset"] = instance.SpfOffset
    leafs["total-spf-nos"] = instance.TotalSpfNos
    leafs["arch-spf-run"] = instance.ArchSpfRun
    leafs["route-change-spf-nos"] = instance.RouteChangeSpfNos
    leafs["no-route-change-spf-nos"] = instance.NoRouteChangeSpfNos
    leafs["not-interested-spf-nos"] = instance.NotInterestedSpfNos
    leafs["total-spt-nos"] = instance.TotalSptNos
    return leafs
}

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetBundleName() string { return "cisco_ios_xr" }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetYangName() string { return "instance" }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) SetParent(parent types.Entity) { instance.parent = parent }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetParent() types.Entity { return instance.parent }

func (instance *Rcmd_Process_Ospf_Process_InstanceName_Instance) GetParentYangName() string { return "instance-name" }

// Rcmd_Process_Ldp
// LDP Process Information
type Rcmd_Process_Ldp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process Information. The type is slice of Rcmd_Process_Ldp_Process.
    Process []Rcmd_Process_Ldp_Process
}

func (ldp *Rcmd_Process_Ldp) GetFilter() yfilter.YFilter { return ldp.YFilter }

func (ldp *Rcmd_Process_Ldp) SetFilter(yf yfilter.YFilter) { ldp.YFilter = yf }

func (ldp *Rcmd_Process_Ldp) GetGoName(yname string) string {
    if yname == "process" { return "Process" }
    return ""
}

func (ldp *Rcmd_Process_Ldp) GetSegmentPath() string {
    return "ldp"
}

func (ldp *Rcmd_Process_Ldp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "process" {
        for _, c := range ldp.Process {
            if ldp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Ldp_Process{}
        ldp.Process = append(ldp.Process, child)
        return &ldp.Process[len(ldp.Process)-1]
    }
    return nil
}

func (ldp *Rcmd_Process_Ldp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ldp.Process {
        children[ldp.Process[i].GetSegmentPath()] = &ldp.Process[i]
    }
    return children
}

func (ldp *Rcmd_Process_Ldp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ldp *Rcmd_Process_Ldp) GetBundleName() string { return "cisco_ios_xr" }

func (ldp *Rcmd_Process_Ldp) GetYangName() string { return "ldp" }

func (ldp *Rcmd_Process_Ldp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ldp *Rcmd_Process_Ldp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ldp *Rcmd_Process_Ldp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ldp *Rcmd_Process_Ldp) SetParent(parent types.Entity) { ldp.parent = parent }

func (ldp *Rcmd_Process_Ldp) GetParent() types.Entity { return ldp.parent }

func (ldp *Rcmd_Process_Ldp) GetParentYangName() string { return "process" }

// Rcmd_Process_Ldp_Process
// Process Information
type Rcmd_Process_Ldp_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol id. The type is RcmdProtocolId.
    ProtocolId interface{}

    // Process Name. The type is string.
    ProcessName interface{}

    // Instance/VRF Name. The type is slice of
    // Rcmd_Process_Ldp_Process_InstanceName.
    InstanceName []Rcmd_Process_Ldp_Process_InstanceName
}

func (process *Rcmd_Process_Ldp_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Rcmd_Process_Ldp_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Rcmd_Process_Ldp_Process) GetGoName(yname string) string {
    if yname == "protocol-id" { return "ProtocolId" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "instance-name" { return "InstanceName" }
    return ""
}

func (process *Rcmd_Process_Ldp_Process) GetSegmentPath() string {
    return "process"
}

func (process *Rcmd_Process_Ldp_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance-name" {
        for _, c := range process.InstanceName {
            if process.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Ldp_Process_InstanceName{}
        process.InstanceName = append(process.InstanceName, child)
        return &process.InstanceName[len(process.InstanceName)-1]
    }
    return nil
}

func (process *Rcmd_Process_Ldp_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range process.InstanceName {
        children[process.InstanceName[i].GetSegmentPath()] = &process.InstanceName[i]
    }
    return children
}

func (process *Rcmd_Process_Ldp_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-id"] = process.ProtocolId
    leafs["process-name"] = process.ProcessName
    return leafs
}

func (process *Rcmd_Process_Ldp_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Rcmd_Process_Ldp_Process) GetYangName() string { return "process" }

func (process *Rcmd_Process_Ldp_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Rcmd_Process_Ldp_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Rcmd_Process_Ldp_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Rcmd_Process_Ldp_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Rcmd_Process_Ldp_Process) GetParent() types.Entity { return process.parent }

func (process *Rcmd_Process_Ldp_Process) GetParentYangName() string { return "ldp" }

// Rcmd_Process_Ldp_Process_InstanceName
// Instance/VRF Name
type Rcmd_Process_Ldp_Process_InstanceName struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Instance Name. The type is string.
    Name interface{}

    // Last Updated Time. The type is string.
    LastUpdateTime interface{}

    // Total spf nos. The type is interface{} with range: 0..4294967295.
    TotalSpfNos interface{}

    // Route change spf nos. The type is interface{} with range: 0..4294967295.
    RouteChangeSpfNos interface{}

    // No Route change spf nos. The type is interface{} with range: 0..4294967295.
    NoRouteChangeSpfNos interface{}

    // Not Interested SPF nos. The type is interface{} with range: 0..4294967295.
    NotInterestedSpfNos interface{}

    // LSP Regen Count. The type is interface{} with range: 0..4294967295.
    LspRegenerationCount interface{}

    // Last Serial. The type is interface{} with range: 0..4294967295.
    LspRegenerationSerial interface{}

    // Archive SPF event. The type is interface{} with range: 0..4294967295.
    ArchSpfEvent interface{}

    // Archive Lsp regen. The type is interface{} with range: 0..4294967295.
    ArchLspRegeneration interface{}

    // Instance Information. The type is slice of
    // Rcmd_Process_Ldp_Process_InstanceName_Instance.
    Instance []Rcmd_Process_Ldp_Process_InstanceName_Instance
}

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetFilter() yfilter.YFilter { return instanceName.YFilter }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) SetFilter(yf yfilter.YFilter) { instanceName.YFilter = yf }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetGoName(yname string) string {
    if yname == "name" { return "Name" }
    if yname == "last-update-time" { return "LastUpdateTime" }
    if yname == "total-spf-nos" { return "TotalSpfNos" }
    if yname == "route-change-spf-nos" { return "RouteChangeSpfNos" }
    if yname == "no-route-change-spf-nos" { return "NoRouteChangeSpfNos" }
    if yname == "not-interested-spf-nos" { return "NotInterestedSpfNos" }
    if yname == "lsp-regeneration-count" { return "LspRegenerationCount" }
    if yname == "lsp-regeneration-serial" { return "LspRegenerationSerial" }
    if yname == "arch-spf-event" { return "ArchSpfEvent" }
    if yname == "arch-lsp-regeneration" { return "ArchLspRegeneration" }
    if yname == "instance" { return "Instance" }
    return ""
}

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetSegmentPath() string {
    return "instance-name"
}

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance" {
        for _, c := range instanceName.Instance {
            if instanceName.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rcmd_Process_Ldp_Process_InstanceName_Instance{}
        instanceName.Instance = append(instanceName.Instance, child)
        return &instanceName.Instance[len(instanceName.Instance)-1]
    }
    return nil
}

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instanceName.Instance {
        children[instanceName.Instance[i].GetSegmentPath()] = &instanceName.Instance[i]
    }
    return children
}

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["name"] = instanceName.Name
    leafs["last-update-time"] = instanceName.LastUpdateTime
    leafs["total-spf-nos"] = instanceName.TotalSpfNos
    leafs["route-change-spf-nos"] = instanceName.RouteChangeSpfNos
    leafs["no-route-change-spf-nos"] = instanceName.NoRouteChangeSpfNos
    leafs["not-interested-spf-nos"] = instanceName.NotInterestedSpfNos
    leafs["lsp-regeneration-count"] = instanceName.LspRegenerationCount
    leafs["lsp-regeneration-serial"] = instanceName.LspRegenerationSerial
    leafs["arch-spf-event"] = instanceName.ArchSpfEvent
    leafs["arch-lsp-regeneration"] = instanceName.ArchLspRegeneration
    return leafs
}

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetBundleName() string { return "cisco_ios_xr" }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetYangName() string { return "instance-name" }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) SetParent(parent types.Entity) { instanceName.parent = parent }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetParent() types.Entity { return instanceName.parent }

func (instanceName *Rcmd_Process_Ldp_Process_InstanceName) GetParentYangName() string { return "process" }

// Rcmd_Process_Ldp_Process_InstanceName_Instance
// Instance Information
type Rcmd_Process_Ldp_Process_InstanceName_Instance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Instance Id. The type is interface{} with range: 0..4294967295.
    InstanceId interface{}

    // Instance State. The type is RcmdShowInstState.
    InstanceState interface{}

    // Instance Deleted. The type is RcmdBoolYesNo.
    InstanceDeleted interface{}

    // Forward Referenced. The type is RcmdBoolYesNo.
    FwdReferenced interface{}

    // Last Updated Time. The type is string.
    LastUpdateTime interface{}

    // Node Id. The type is interface{} with range: 0..4294967295.
    NodeId interface{}

    // SPF Offset. The type is interface{} with range: 0..4294967295.
    SpfOffset interface{}

    // Total spf nos. The type is interface{} with range: 0..4294967295.
    TotalSpfNos interface{}

    // spf run can be archived. The type is interface{} with range: 0..4294967295.
    ArchSpfRun interface{}

    // Route change spf nos. The type is interface{} with range: 0..4294967295.
    RouteChangeSpfNos interface{}

    // No Route change spf nos. The type is interface{} with range: 0..4294967295.
    NoRouteChangeSpfNos interface{}

    // Not Interested SPF nos. The type is interface{} with range: 0..4294967295.
    NotInterestedSpfNos interface{}

    // Total spt nos. The type is interface{} with range: 0..4294967295.
    TotalSptNos interface{}
}

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetFilter() yfilter.YFilter { return instance.YFilter }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) SetFilter(yf yfilter.YFilter) { instance.YFilter = yf }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetGoName(yname string) string {
    if yname == "instance-id" { return "InstanceId" }
    if yname == "instance-state" { return "InstanceState" }
    if yname == "instance-deleted" { return "InstanceDeleted" }
    if yname == "fwd-referenced" { return "FwdReferenced" }
    if yname == "last-update-time" { return "LastUpdateTime" }
    if yname == "node-id" { return "NodeId" }
    if yname == "spf-offset" { return "SpfOffset" }
    if yname == "total-spf-nos" { return "TotalSpfNos" }
    if yname == "arch-spf-run" { return "ArchSpfRun" }
    if yname == "route-change-spf-nos" { return "RouteChangeSpfNos" }
    if yname == "no-route-change-spf-nos" { return "NoRouteChangeSpfNos" }
    if yname == "not-interested-spf-nos" { return "NotInterestedSpfNos" }
    if yname == "total-spt-nos" { return "TotalSptNos" }
    return ""
}

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetSegmentPath() string {
    return "instance"
}

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-id"] = instance.InstanceId
    leafs["instance-state"] = instance.InstanceState
    leafs["instance-deleted"] = instance.InstanceDeleted
    leafs["fwd-referenced"] = instance.FwdReferenced
    leafs["last-update-time"] = instance.LastUpdateTime
    leafs["node-id"] = instance.NodeId
    leafs["spf-offset"] = instance.SpfOffset
    leafs["total-spf-nos"] = instance.TotalSpfNos
    leafs["arch-spf-run"] = instance.ArchSpfRun
    leafs["route-change-spf-nos"] = instance.RouteChangeSpfNos
    leafs["no-route-change-spf-nos"] = instance.NoRouteChangeSpfNos
    leafs["not-interested-spf-nos"] = instance.NotInterestedSpfNos
    leafs["total-spt-nos"] = instance.TotalSptNos
    return leafs
}

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetBundleName() string { return "cisco_ios_xr" }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetYangName() string { return "instance" }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) SetParent(parent types.Entity) { instance.parent = parent }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetParent() types.Entity { return instance.parent }

func (instance *Rcmd_Process_Ldp_Process_InstanceName_Instance) GetParentYangName() string { return "instance-name" }

