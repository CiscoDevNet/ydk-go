// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv6-ospfv3 package operational data.
// 
// This module contains definitions
// for the following management objects:
//   ospfv3: OSPFv3 operational information 
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv6_ospfv3_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv6_ospfv3_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ospfv3-oper ospfv3}", reflect.TypeOf(Ospfv3{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3", reflect.TypeOf(Ospfv3{}))
}

// Ospfv3Lsa represents Ospfv3 lsa
type Ospfv3Lsa string

const (
    // Link LSA
    Ospfv3Lsa_link_lsa Ospfv3Lsa = "link-lsa"

    // Grace LSA
    Ospfv3Lsa_grace_lsa Ospfv3Lsa = "grace-lsa"

    // Router LSA
    Ospfv3Lsa_router Ospfv3Lsa = "router"

    // Network LSA
    Ospfv3Lsa_network Ospfv3Lsa = "network"

    // Inter-Area Prefix LSA
    Ospfv3Lsa_inter_area_prefix Ospfv3Lsa = "inter-area-prefix"

    // Inter-Area Router LSA
    Ospfv3Lsa_inter_area_router Ospfv3Lsa = "inter-area-router"

    // NSSA External LSA
    Ospfv3Lsa_nssa_external Ospfv3Lsa = "nssa-external"

    // Intra-Area Prefix LSA
    Ospfv3Lsa_intra_area_prefix Ospfv3Lsa = "intra-area-prefix"

    // External LSA
    Ospfv3Lsa_external Ospfv3Lsa = "external"

    // Opaque LSALink Scope
    Ospfv3Lsa_opaque_link Ospfv3Lsa = "opaque-link"

    // Opaque LSA Area Scope
    Ospfv3Lsa_opaque_area Ospfv3Lsa = "opaque-area"

    // Opaque LSA AS Scope
    Ospfv3Lsa_opaque_as Ospfv3Lsa = "opaque-as"

    // Unknown Reserved Scope LSAs
    Ospfv3Lsa_unknown Ospfv3Lsa = "unknown"
)

// ImStateEnum represents Im state enum
type ImStateEnum string

const (
    // im state not ready
    ImStateEnum_im_state_not_ready ImStateEnum = "im-state-not-ready"

    // im state admin down
    ImStateEnum_im_state_admin_down ImStateEnum = "im-state-admin-down"

    // im state down
    ImStateEnum_im_state_down ImStateEnum = "im-state-down"

    // im state up
    ImStateEnum_im_state_up ImStateEnum = "im-state-up"

    // im state shutdown
    ImStateEnum_im_state_shutdown ImStateEnum = "im-state-shutdown"

    // im state err disable
    ImStateEnum_im_state_err_disable ImStateEnum = "im-state-err-disable"

    // im state down immediate
    ImStateEnum_im_state_down_immediate ImStateEnum = "im-state-down-immediate"

    // im state down immediate admin
    ImStateEnum_im_state_down_immediate_admin ImStateEnum = "im-state-down-immediate-admin"

    // im state down graceful
    ImStateEnum_im_state_down_graceful ImStateEnum = "im-state-down-graceful"

    // im state begin shutdown
    ImStateEnum_im_state_begin_shutdown ImStateEnum = "im-state-begin-shutdown"

    // im state end shutdown
    ImStateEnum_im_state_end_shutdown ImStateEnum = "im-state-end-shutdown"

    // im state begin error disable
    ImStateEnum_im_state_begin_error_disable ImStateEnum = "im-state-begin-error-disable"

    // im state end error disable
    ImStateEnum_im_state_end_error_disable ImStateEnum = "im-state-end-error-disable"

    // im state begin down graceful
    ImStateEnum_im_state_begin_down_graceful ImStateEnum = "im-state-begin-down-graceful"

    // im state reset
    ImStateEnum_im_state_reset ImStateEnum = "im-state-reset"

    // im state operational
    ImStateEnum_im_state_operational ImStateEnum = "im-state-operational"

    // im state not operational
    ImStateEnum_im_state_not_operational ImStateEnum = "im-state-not-operational"

    // im state unknown
    ImStateEnum_im_state_unknown ImStateEnum = "im-state-unknown"

    // im state last
    ImStateEnum_im_state_last ImStateEnum = "im-state-last"
)

// Ospfv3GracefulShutdownState represents Graceful Shutdown state
type Ospfv3GracefulShutdownState string

const (
    // Init
    Ospfv3GracefulShutdownState_init Ospfv3GracefulShutdownState = "init"

    // Normal
    Ospfv3GracefulShutdownState_normal Ospfv3GracefulShutdownState = "normal"

    // Flushing
    Ospfv3GracefulShutdownState_flushing Ospfv3GracefulShutdownState = "flushing"

    // Empty Hellos
    Ospfv3GracefulShutdownState_empty_hellos Ospfv3GracefulShutdownState = "empty-hellos"

    // Quiet
    Ospfv3GracefulShutdownState_quiet Ospfv3GracefulShutdownState = "quiet"
)

// Ospfv3GracefulRestartReason represents Reason for router restart
type Ospfv3GracefulRestartReason string

const (
    // Grace reason unknown
    Ospfv3GracefulRestartReason_grace_reason_unknown Ospfv3GracefulRestartReason = "grace-reason-unknown"

    // Grace reason software restart
    Ospfv3GracefulRestartReason_grace_reason_software_restart Ospfv3GracefulRestartReason = "grace-reason-software-restart"

    // Software reload/upgrade, RFC 3623
    Ospfv3GracefulRestartReason_grace_reason_software_upgrade Ospfv3GracefulRestartReason = "grace-reason-software-upgrade"

    // Switch to redundant control processor
    Ospfv3GracefulRestartReason_grace_reason_switchover Ospfv3GracefulRestartReason = "grace-reason-switchover"
)

// IpfrrTbrkr represents FRR Tiebreakers
type IpfrrTbrkr string

const (
    // Downsteram
    IpfrrTbrkr_downstream IpfrrTbrkr = "downstream"

    // LC Disjoint
    IpfrrTbrkr_line_card_disjoint IpfrrTbrkr = "line-card-disjoint"

    // Backup metric
    IpfrrTbrkr_backup_metric IpfrrTbrkr = "backup-metric"

    // Node protection
    IpfrrTbrkr_node_protect IpfrrTbrkr = "node-protect"

    // Primary path
    IpfrrTbrkr_primary_path IpfrrTbrkr = "primary-path"

    // Secondary path
    IpfrrTbrkr_secondary_path IpfrrTbrkr = "secondary-path"

    // SRLG disjoint
    IpfrrTbrkr_srlg_disjoint IpfrrTbrkr = "srlg-disjoint"

    // Tunnel
    IpfrrTbrkr_tunnel IpfrrTbrkr = "tunnel"
)

// OspfNsrSchedPri represents Ospf nsr sched pri
type OspfNsrSchedPri string

const (
    // ospf nsr stats sched pri hi
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_hi OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-hi"

    // ospf nsr stats sched pri med
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_med OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-med"

    // ospf nsr stats sched pri low
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_low OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-low"

    // ospf nsr stats sched pri max
    OspfNsrSchedPri_ospf_nsr_stats_sched_pri_max OspfNsrSchedPri = "ospf-nsr-stats-sched-pri-max"
)

// StubRouterMode represents Stub Router mode
type StubRouterMode string

const (
    // Stub Router mode r-bit
    StubRouterMode_rbit StubRouterMode = "rbit"

    // Stub Router mode v6-bit
    StubRouterMode_v6bit StubRouterMode = "v6bit"

    // Stub Router mode max-metric
    StubRouterMode_max_metric StubRouterMode = "max-metric"

    // Stub Router not configured
    StubRouterMode_none StubRouterMode = "none"
)

// Ospfv3Interface represents OSPFv3 neighbor interface types
type Ospfv3Interface string

const (
    // None
    Ospfv3Interface_none Ospfv3Interface = "none"

    // Broadcast
    Ospfv3Interface_broadcast Ospfv3Interface = "broadcast"

    // Non broadcast
    Ospfv3Interface_non_broadcast Ospfv3Interface = "non-broadcast"

    // Point To Point
    Ospfv3Interface_point_to_point Ospfv3Interface = "point-to-point"

    // Point To Multipoint
    Ospfv3Interface_point_to_multipoint Ospfv3Interface = "point-to-multipoint"

    // Point-To-Multipoint Non broadcast
    Ospfv3Interface_point_to_multipoint_non_broadcast Ospfv3Interface = "point-to-multipoint-non-broadcast"

    // Virtual link
    Ospfv3Interface_virtual_link Ospfv3Interface = "virtual-link"

    // Loopback
    Ospfv3Interface_loopback_interface Ospfv3Interface = "loopback-interface"

    // MPLS traffic engineering
    Ospfv3Interface_mpls_traffic_engineering Ospfv3Interface = "mpls-traffic-engineering"

    // Sham link
    Ospfv3Interface_sham_link Ospfv3Interface = "sham-link"
)

// StubRouterTrigger represents Trigger for entering stub router mode
type StubRouterTrigger string

const (
    // Process migration
    StubRouterTrigger_on_proc_migration StubRouterTrigger = "on-proc-migration"

    // Process restart
    StubRouterTrigger_on_proc_restart StubRouterTrigger = "on-proc-restart"

    // RP switchover
    StubRouterTrigger_on_switchover StubRouterTrigger = "on-switchover"

    // Router startup
    StubRouterTrigger_on_startup StubRouterTrigger = "on-startup"

    // Always on
    StubRouterTrigger_always StubRouterTrigger = "always"

    // No trigger
    StubRouterTrigger_none StubRouterTrigger = "none"
)

// OspfLsaSyncState represents LSA synchronization states
type OspfLsaSyncState string

const (
    // State not set
    OspfLsaSyncState_none OspfLsaSyncState = "none"

    // LSA out of sync with active
    OspfLsaSyncState_out_of_sync OspfLsaSyncState = "out-of-sync"

    // LSA in sync with active
    OspfLsaSyncState_in_sync OspfLsaSyncState = "in-sync"

    // NSR ack pending for LSA sync
    OspfLsaSyncState_nsr_ack_pending OspfLsaSyncState = "nsr-ack-pending"
)

// Ospfv3DefaultMetric represents OSPFv3 default metric types 
type Ospfv3DefaultMetric string

const (
    // OSPFv3 default metric type None 
    Ospfv3DefaultMetric_type_none Ospfv3DefaultMetric = "type-none"

    // OSPFv3 default metric type 1 
    Ospfv3DefaultMetric_type1 Ospfv3DefaultMetric = "type1"

    // OSPFv3 default metric type 2 
    Ospfv3DefaultMetric_type2 Ospfv3DefaultMetric = "type2"
)

// Ospfv3NeighborState represents OSPFv3 neighbor states
type Ospfv3NeighborState string

const (
    // Down
    Ospfv3NeighborState_neigbhor_down Ospfv3NeighborState = "neigbhor-down"

    // Attempting
    Ospfv3NeighborState_attempt Ospfv3NeighborState = "attempt"

    // Initializing
    Ospfv3NeighborState_init Ospfv3NeighborState = "init"

    // 2 Way
    Ospfv3NeighborState_two_way Ospfv3NeighborState = "two-way"

    // Exstart
    Ospfv3NeighborState_exstart Ospfv3NeighborState = "exstart"

    // Exchange
    Ospfv3NeighborState_exchange Ospfv3NeighborState = "exchange"

    // Loading
    Ospfv3NeighborState_loading Ospfv3NeighborState = "loading"

    // Full
    Ospfv3NeighborState_full Ospfv3NeighborState = "full"

    // SCVirtual
    Ospfv3NeighborState_sc_virtual Ospfv3NeighborState = "sc-virtual"
)

// PrefixPriority represents Prefix priority
type PrefixPriority string

const (
    // Critical priority
    PrefixPriority_critical PrefixPriority = "critical"

    // High priority
    PrefixPriority_high PrefixPriority = "high"

    // Medium priority
    PrefixPriority_medium PrefixPriority = "medium"

    // Low priority
    PrefixPriority_low PrefixPriority = "low"
)

// StubRouterExitReason represents Reason to exiting stub router mode
type StubRouterExitReason string

const (
    // No reason
    StubRouterExitReason_none StubRouterExitReason = "none"

    // BGP has converged
    StubRouterExitReason_bgp StubRouterExitReason = "bgp"

    // Stub Router timer has expired
    StubRouterExitReason_timer StubRouterExitReason = "timer"

    // Configuration has changed
    StubRouterExitReason_configuration StubRouterExitReason = "configuration"

    // Process has been cleared
    StubRouterExitReason_cleared StubRouterExitReason = "cleared"

    // Preempted by always
    StubRouterExitReason_override StubRouterExitReason = "override"
)

// Ospfv3Lsa1 represents OSPFv3 LSA types
type Ospfv3Lsa1 string

const (
    // Link LSA
    Ospfv3Lsa1_link Ospfv3Lsa1 = "link"

    // Grace LSA
    Ospfv3Lsa1_grace Ospfv3Lsa1 = "grace"

    // Router LSA
    Ospfv3Lsa1_router Ospfv3Lsa1 = "router"

    // Network LSA
    Ospfv3Lsa1_network Ospfv3Lsa1 = "network"

    // Inter area prefix LSA
    Ospfv3Lsa1_inter_area_prefix Ospfv3Lsa1 = "inter-area-prefix"

    // Inter area router LSA
    Ospfv3Lsa1_inter_area_router Ospfv3Lsa1 = "inter-area-router"

    // MOSPF LSA
    Ospfv3Lsa1_mospf Ospfv3Lsa1 = "mospf"

    // Type-7 External LSA
    Ospfv3Lsa1_type7_external Ospfv3Lsa1 = "type7-external"

    // Prefix LSA
    Ospfv3Lsa1_lsa_prefix Ospfv3Lsa1 = "lsa-prefix"

    // AS external LSA
    Ospfv3Lsa1_as_external Ospfv3Lsa1 = "as-external"

    // Unknown link LSA
    Ospfv3Lsa1_unknown_link Ospfv3Lsa1 = "unknown-link"

    // Unknown area LSA
    Ospfv3Lsa1_unknown_area Ospfv3Lsa1 = "unknown-area"

    // Unknown AS LSA
    Ospfv3Lsa1_unknown_as Ospfv3Lsa1 = "unknown-as"

    // Unknown type LSA
    Ospfv3Lsa1_unknown_type Ospfv3Lsa1 = "unknown-type"
)

// Ospfv3LsaInfoTypes represents OSPFv3 LSA format types
type Ospfv3LsaInfoTypes string

const (
    // Summary information of LSAs
    Ospfv3LsaInfoTypes_mgmt_lsa_lsasum_type Ospfv3LsaInfoTypes = "mgmt-lsa-lsasum-type"

    // Link LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_link_type Ospfv3LsaInfoTypes = "mgmt-lsa-link-type"

    // Grace LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_gr_type Ospfv3LsaInfoTypes = "mgmt-lsa-gr-type"

    // Router LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_rtr_type Ospfv3LsaInfoTypes = "mgmt-lsa-rtr-type"

    // Network LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_net_type Ospfv3LsaInfoTypes = "mgmt-lsa-net-type"

    // Inter Area Prefix Summary LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_iapfx_type Ospfv3LsaInfoTypes = "mgmt-lsa-iapfx-type"

    // Inter Area Router Summay LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_iartr_type Ospfv3LsaInfoTypes = "mgmt-lsa-iartr-type"

    // NSSA external LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_nssaext_type Ospfv3LsaInfoTypes = "mgmt-lsa-nssaext-type"

    // Intra Area Prefix LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_prefix_type Ospfv3LsaInfoTypes = "mgmt-lsa-prefix-type"

    // Type 5 External LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_ext_type Ospfv3LsaInfoTypes = "mgmt-lsa-ext-type"

    // Opaque Link scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_link_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-link-type"

    // Opaque Area scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_area_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-area-type"

    // Opaque AS scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_as_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-as-type"

    // Opaque Reserved scope LSA
    Ospfv3LsaInfoTypes_mgmt_lsa_unk_type Ospfv3LsaInfoTypes = "mgmt-lsa-unk-type"
)

// StubRouterAbrOffReason represents Reason to exiting stub router mode
type StubRouterAbrOffReason string

const (
    // Initial delay when stub router mode is
    // activated
    StubRouterAbrOffReason_init_delay StubRouterAbrOffReason = "init-delay"

    // No neighbor present
    StubRouterAbrOffReason_no_neighbor StubRouterAbrOffReason = "no-neighbor"

    // No neighbor in FULL state present
    StubRouterAbrOffReason_no_full_neighbor StubRouterAbrOffReason = "no-full-neighbor"

    // A new neighbor discovered less than 60 seconds
    // ago
    StubRouterAbrOffReason_new_neighbor StubRouterAbrOffReason = "new-neighbor"

    // A neighbor transitioned to FULL state less than
    // 60 seconds ago
    StubRouterAbrOffReason_full_neighbor StubRouterAbrOffReason = "full-neighbor"
)

// Ospfv3AreaRangeStatus represents Ospfv3 area range status
type Ospfv3AreaRangeStatus string

const (
    // Advertise this range
    Ospfv3AreaRangeStatus_advertise Ospfv3AreaRangeStatus = "advertise"

    // Do not advertise this range
    Ospfv3AreaRangeStatus_do_not_advertise Ospfv3AreaRangeStatus = "do-not-advertise"
)

// Ospfv3InterfaceState represents OSPFv3 interface states
type Ospfv3InterfaceState string

const (
    // Down
    Ospfv3InterfaceState_down Ospfv3InterfaceState = "down"

    // Loopback
    Ospfv3InterfaceState_loopback Ospfv3InterfaceState = "loopback"

    // Waiting
    Ospfv3InterfaceState_waiting Ospfv3InterfaceState = "waiting"

    // Point To Multipoint
    Ospfv3InterfaceState_point_to_multipoint Ospfv3InterfaceState = "point-to-multipoint"

    // Point To Point
    Ospfv3InterfaceState_point_to_point Ospfv3InterfaceState = "point-to-point"

    // Designated router
    Ospfv3InterfaceState_designated_router Ospfv3InterfaceState = "designated-router"

    // Backup designated router
    Ospfv3InterfaceState_backup_designated_router Ospfv3InterfaceState = "backup-designated-router"

    // Other designated router
    Ospfv3InterfaceState_other_designated_router Ospfv3InterfaceState = "other-designated-router"
)

// Ospfv3Link represents OSPFV3 Link type
type Ospfv3Link string

const (
    // Router link
    Ospfv3Link_link_router Ospfv3Link = "link-router"

    // Transit network link
    Ospfv3Link_link_trans_net Ospfv3Link = "link-trans-net"

    // Virutal link
    Ospfv3Link_link_virtual_link Ospfv3Link = "link-virtual-link"
)

// Ospfv3BorderRoute represents OSPFv3 border route destination types
type Ospfv3BorderRoute string

const (
    // Area border router
    Ospfv3BorderRoute_abr Ospfv3BorderRoute = "abr"

    // Area system boundary router
    Ospfv3BorderRoute_asbr Ospfv3BorderRoute = "asbr"

    // Area border router and area system boundary
    // router
    Ospfv3BorderRoute_abr_asbr Ospfv3BorderRoute = "abr-asbr"
)

// Ospfv3
// OSPFv3 operational information 
type Ospfv3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 Process Table.
    Processes Ospfv3_Processes
}

func (ospfv3 *Ospfv3) GetFilter() yfilter.YFilter { return ospfv3.YFilter }

func (ospfv3 *Ospfv3) SetFilter(yf yfilter.YFilter) { ospfv3.YFilter = yf }

func (ospfv3 *Ospfv3) GetGoName(yname string) string {
    if yname == "processes" { return "Processes" }
    return ""
}

func (ospfv3 *Ospfv3) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv6-ospfv3-oper:ospfv3"
}

func (ospfv3 *Ospfv3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "processes" {
        return &ospfv3.Processes
    }
    return nil
}

func (ospfv3 *Ospfv3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["processes"] = &ospfv3.Processes
    return children
}

func (ospfv3 *Ospfv3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospfv3 *Ospfv3) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3 *Ospfv3) GetYangName() string { return "ospfv3" }

func (ospfv3 *Ospfv3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3 *Ospfv3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3 *Ospfv3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3 *Ospfv3) SetParent(parent types.Entity) { ospfv3.parent = parent }

func (ospfv3 *Ospfv3) GetParent() types.Entity { return ospfv3.parent }

func (ospfv3 *Ospfv3) GetParentYangName() string { return "Cisco-IOS-XR-ipv6-ospfv3-oper" }

// Ospfv3_Processes
// OSPFv3 Process Table
type Ospfv3_Processes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 Operational data for a particular OSPFv3 process . The type is slice
    // of Ospfv3_Processes_Process.
    Process []Ospfv3_Processes_Process
}

func (processes *Ospfv3_Processes) GetFilter() yfilter.YFilter { return processes.YFilter }

func (processes *Ospfv3_Processes) SetFilter(yf yfilter.YFilter) { processes.YFilter = yf }

func (processes *Ospfv3_Processes) GetGoName(yname string) string {
    if yname == "process" { return "Process" }
    return ""
}

func (processes *Ospfv3_Processes) GetSegmentPath() string {
    return "processes"
}

func (processes *Ospfv3_Processes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "process" {
        for _, c := range processes.Process {
            if processes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process{}
        processes.Process = append(processes.Process, child)
        return &processes.Process[len(processes.Process)-1]
    }
    return nil
}

func (processes *Ospfv3_Processes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range processes.Process {
        children[processes.Process[i].GetSegmentPath()] = &processes.Process[i]
    }
    return children
}

func (processes *Ospfv3_Processes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (processes *Ospfv3_Processes) GetBundleName() string { return "cisco_ios_xr" }

func (processes *Ospfv3_Processes) GetYangName() string { return "processes" }

func (processes *Ospfv3_Processes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (processes *Ospfv3_Processes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (processes *Ospfv3_Processes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (processes *Ospfv3_Processes) SetParent(parent types.Entity) { processes.parent = parent }

func (processes *Ospfv3_Processes) GetParent() types.Entity { return processes.parent }

func (processes *Ospfv3_Processes) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process
// OSPFv3 Operational data for a particular OSPFv3
// process 
type Ospfv3_Processes_Process struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Particular OSPFv3 process. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Table for each VRF.
    Vrfs Ospfv3_Processes_Process_Vrfs

    // Container for Statistics.
    Statistics Ospfv3_Processes_Process_Statistics

    // Operational data for the default VRF (instance) in the OSPFv3 process.
    DefaultVrf Ospfv3_Processes_Process_DefaultVrf
}

func (process *Ospfv3_Processes_Process) GetFilter() yfilter.YFilter { return process.YFilter }

func (process *Ospfv3_Processes_Process) SetFilter(yf yfilter.YFilter) { process.YFilter = yf }

func (process *Ospfv3_Processes_Process) GetGoName(yname string) string {
    if yname == "process-name" { return "ProcessName" }
    if yname == "vrfs" { return "Vrfs" }
    if yname == "statistics" { return "Statistics" }
    if yname == "default-vrf" { return "DefaultVrf" }
    return ""
}

func (process *Ospfv3_Processes_Process) GetSegmentPath() string {
    return "process" + "[process-name='" + fmt.Sprintf("%v", process.ProcessName) + "']"
}

func (process *Ospfv3_Processes_Process) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &process.Vrfs
    }
    if childYangName == "statistics" {
        return &process.Statistics
    }
    if childYangName == "default-vrf" {
        return &process.DefaultVrf
    }
    return nil
}

func (process *Ospfv3_Processes_Process) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &process.Vrfs
    children["statistics"] = &process.Statistics
    children["default-vrf"] = &process.DefaultVrf
    return children
}

func (process *Ospfv3_Processes_Process) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["process-name"] = process.ProcessName
    return leafs
}

func (process *Ospfv3_Processes_Process) GetBundleName() string { return "cisco_ios_xr" }

func (process *Ospfv3_Processes_Process) GetYangName() string { return "process" }

func (process *Ospfv3_Processes_Process) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (process *Ospfv3_Processes_Process) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (process *Ospfv3_Processes_Process) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (process *Ospfv3_Processes_Process) SetParent(parent types.Entity) { process.parent = parent }

func (process *Ospfv3_Processes_Process) GetParent() types.Entity { return process.parent }

func (process *Ospfv3_Processes_Process) GetParentYangName() string { return "processes" }

// Ospfv3_Processes_Process_Vrfs
// Table for each VRF
type Ospfv3_Processes_Process_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Operational data for a particular VRF (instance) in the OSPFv3 process. The
    // type is slice of Ospfv3_Processes_Process_Vrfs_Vrf.
    Vrf []Ospfv3_Processes_Process_Vrfs_Vrf
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Ospfv3_Processes_Process_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Ospfv3_Processes_Process_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Ospfv3_Processes_Process_Vrfs) GetParentYangName() string { return "process" }

// Ospfv3_Processes_Process_Vrfs_Vrf
// Operational data for a particular VRF
// (instance) in the OSPFv3 process
type Ospfv3_Processes_Process_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF Name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Summary prefix information table.
    SummaryPrefixes Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes

    // OSPFv3 border router information table.
    BorderRouters Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters

    // Sham link information.
    ShamLinkTable Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable

    // OSPFv3 area information table.
    AreaInformations Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable

    // OSPFv3 interface information table for all areas.
    InterfaceProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable

    // Redistribution information table.
    Redistributions Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions

    // OSPFv3 external route information table.
    ExternalRoutes Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes

    // OSPFv3 request list information for all areas.
    RequestListProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable

    // Virtual link information.
    VirtualLink Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink

    // OSPFv3 flood list information table for all areas.
    FloodListProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable

    // Summarize OSPFv3 local RIB tables.
    RouteSummary Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary

    // OSPFv3 area table.
    Areas Ospfv3_Processes_Process_Vrfs_Vrf_Areas

    // OSPFv3 internal route information table.
    InternalRoutes Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes

    // Protocol area table .
    ProtocolAreas Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas

    // OSPFv3 connected route information table.
    ConnectedRoutes Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes

    // Container for Statistics.
    VrfStatistics Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics

    // OSPFv3 summary.
    Summary Ospfv3_Processes_Process_Vrfs_Vrf_Summary

    // OSPFv3 retransmission list information table for all areas.
    RetransmissionListProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable

    // Bad Checksum Packets information table.
    BadChecksums Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable

    // OSPFv3 neighbor information table for all areas.
    NeighborProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable

    // OSPFv3 fast reroute topology information table.
    FastReroutes Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes

    // OSPFv3 interface brief information table for all areas.
    InterfaceBriefProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable

    // OSPFv3 neighbor information table for all areas.
    NeighborDetailProcessTable Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "summary-prefixes" { return "SummaryPrefixes" }
    if yname == "border-routers" { return "BorderRouters" }
    if yname == "sham-link-table" { return "ShamLinkTable" }
    if yname == "area-informations" { return "AreaInformations" }
    if yname == "database-table" { return "DatabaseTable" }
    if yname == "interface-process-table" { return "InterfaceProcessTable" }
    if yname == "redistributions" { return "Redistributions" }
    if yname == "external-routes" { return "ExternalRoutes" }
    if yname == "request-list-process-table" { return "RequestListProcessTable" }
    if yname == "virtual-link" { return "VirtualLink" }
    if yname == "flood-list-process-table" { return "FloodListProcessTable" }
    if yname == "route-summary" { return "RouteSummary" }
    if yname == "areas" { return "Areas" }
    if yname == "internal-routes" { return "InternalRoutes" }
    if yname == "protocol-areas" { return "ProtocolAreas" }
    if yname == "connected-routes" { return "ConnectedRoutes" }
    if yname == "vrf-statistics" { return "VrfStatistics" }
    if yname == "summary" { return "Summary" }
    if yname == "retransmission-list-process-table" { return "RetransmissionListProcessTable" }
    if yname == "bad-checksums" { return "BadChecksums" }
    if yname == "database-summary-table" { return "DatabaseSummaryTable" }
    if yname == "neighbor-process-table" { return "NeighborProcessTable" }
    if yname == "fast-reroutes" { return "FastReroutes" }
    if yname == "interface-brief-process-table" { return "InterfaceBriefProcessTable" }
    if yname == "neighbor-detail-process-table" { return "NeighborDetailProcessTable" }
    return ""
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefixes" {
        return &vrf.SummaryPrefixes
    }
    if childYangName == "border-routers" {
        return &vrf.BorderRouters
    }
    if childYangName == "sham-link-table" {
        return &vrf.ShamLinkTable
    }
    if childYangName == "area-informations" {
        return &vrf.AreaInformations
    }
    if childYangName == "database-table" {
        return &vrf.DatabaseTable
    }
    if childYangName == "interface-process-table" {
        return &vrf.InterfaceProcessTable
    }
    if childYangName == "redistributions" {
        return &vrf.Redistributions
    }
    if childYangName == "external-routes" {
        return &vrf.ExternalRoutes
    }
    if childYangName == "request-list-process-table" {
        return &vrf.RequestListProcessTable
    }
    if childYangName == "virtual-link" {
        return &vrf.VirtualLink
    }
    if childYangName == "flood-list-process-table" {
        return &vrf.FloodListProcessTable
    }
    if childYangName == "route-summary" {
        return &vrf.RouteSummary
    }
    if childYangName == "areas" {
        return &vrf.Areas
    }
    if childYangName == "internal-routes" {
        return &vrf.InternalRoutes
    }
    if childYangName == "protocol-areas" {
        return &vrf.ProtocolAreas
    }
    if childYangName == "connected-routes" {
        return &vrf.ConnectedRoutes
    }
    if childYangName == "vrf-statistics" {
        return &vrf.VrfStatistics
    }
    if childYangName == "summary" {
        return &vrf.Summary
    }
    if childYangName == "retransmission-list-process-table" {
        return &vrf.RetransmissionListProcessTable
    }
    if childYangName == "bad-checksums" {
        return &vrf.BadChecksums
    }
    if childYangName == "database-summary-table" {
        return &vrf.DatabaseSummaryTable
    }
    if childYangName == "neighbor-process-table" {
        return &vrf.NeighborProcessTable
    }
    if childYangName == "fast-reroutes" {
        return &vrf.FastReroutes
    }
    if childYangName == "interface-brief-process-table" {
        return &vrf.InterfaceBriefProcessTable
    }
    if childYangName == "neighbor-detail-process-table" {
        return &vrf.NeighborDetailProcessTable
    }
    return nil
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefixes"] = &vrf.SummaryPrefixes
    children["border-routers"] = &vrf.BorderRouters
    children["sham-link-table"] = &vrf.ShamLinkTable
    children["area-informations"] = &vrf.AreaInformations
    children["database-table"] = &vrf.DatabaseTable
    children["interface-process-table"] = &vrf.InterfaceProcessTable
    children["redistributions"] = &vrf.Redistributions
    children["external-routes"] = &vrf.ExternalRoutes
    children["request-list-process-table"] = &vrf.RequestListProcessTable
    children["virtual-link"] = &vrf.VirtualLink
    children["flood-list-process-table"] = &vrf.FloodListProcessTable
    children["route-summary"] = &vrf.RouteSummary
    children["areas"] = &vrf.Areas
    children["internal-routes"] = &vrf.InternalRoutes
    children["protocol-areas"] = &vrf.ProtocolAreas
    children["connected-routes"] = &vrf.ConnectedRoutes
    children["vrf-statistics"] = &vrf.VrfStatistics
    children["summary"] = &vrf.Summary
    children["retransmission-list-process-table"] = &vrf.RetransmissionListProcessTable
    children["bad-checksums"] = &vrf.BadChecksums
    children["database-summary-table"] = &vrf.DatabaseSummaryTable
    children["neighbor-process-table"] = &vrf.NeighborProcessTable
    children["fast-reroutes"] = &vrf.FastReroutes
    children["interface-brief-process-table"] = &vrf.InterfaceBriefProcessTable
    children["neighbor-detail-process-table"] = &vrf.NeighborDetailProcessTable
    return children
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Ospfv3_Processes_Process_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes
// Summary prefix information table
type Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary prefix information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetFilter() yfilter.YFilter { return summaryPrefixes.YFilter }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) SetFilter(yf yfilter.YFilter) { summaryPrefixes.YFilter = yf }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetGoName(yname string) string {
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetSegmentPath() string {
    return "summary-prefixes"
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        for _, c := range summaryPrefixes.SummaryPrefix {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix{}
        summaryPrefixes.SummaryPrefix = append(summaryPrefixes.SummaryPrefix, child)
        return &summaryPrefixes.SummaryPrefix[len(summaryPrefixes.SummaryPrefix)-1]
    }
    return nil
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryPrefixes.SummaryPrefix {
        children[summaryPrefixes.SummaryPrefix[i].GetSegmentPath()] = &summaryPrefixes.SummaryPrefix[i]
    }
    return children
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetYangName() string { return "summary-prefixes" }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) SetParent(parent types.Entity) { summaryPrefixes.parent = parent }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetParent() types.Entity { return summaryPrefixes.parent }

func (summaryPrefixes *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix
// Summary prefix information
type Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Prefix metric. The type is interface{} with range: 0..4294967295.
    PrefixMetric interface{}

    // Prefix metric type. The type is Ospfv3DefaultMetric.
    PrefixMetricType interface{}

    // Tag. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix-metric" { return "PrefixMetric" }
    if yname == "prefix-metric-type" { return "PrefixMetricType" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix"
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    leafs["prefix-metric"] = summaryPrefix.PrefixMetric
    leafs["prefix-metric-type"] = summaryPrefix.PrefixMetricType
    leafs["tag"] = summaryPrefix.Tag
    return leafs
}

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Ospfv3_Processes_Process_Vrfs_Vrf_SummaryPrefixes_SummaryPrefix) GetParentYangName() string { return "summary-prefixes" }

// Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters
// OSPFv3 border router information table
type Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 border router information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter.
    BorderRouter []Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter
}

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetFilter() yfilter.YFilter { return borderRouters.YFilter }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) SetFilter(yf yfilter.YFilter) { borderRouters.YFilter = yf }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetGoName(yname string) string {
    if yname == "border-router" { return "BorderRouter" }
    return ""
}

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetSegmentPath() string {
    return "border-routers"
}

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "border-router" {
        for _, c := range borderRouters.BorderRouter {
            if borderRouters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter{}
        borderRouters.BorderRouter = append(borderRouters.BorderRouter, child)
        return &borderRouters.BorderRouter[len(borderRouters.BorderRouter)-1]
    }
    return nil
}

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range borderRouters.BorderRouter {
        children[borderRouters.BorderRouter[i].GetSegmentPath()] = &borderRouters.BorderRouter[i]
    }
    return children
}

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetBundleName() string { return "cisco_ios_xr" }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetYangName() string { return "border-routers" }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) SetParent(parent types.Entity) { borderRouters.parent = parent }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetParent() types.Entity { return borderRouters.parent }

func (borderRouters *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter
// OSPFv3 border router information
type Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterId interface{}

    // List of border router paths. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath.
    BorderRouterPath []Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath
}

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetFilter() yfilter.YFilter { return borderRouter.YFilter }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) SetFilter(yf yfilter.YFilter) { borderRouter.YFilter = yf }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetGoName(yname string) string {
    if yname == "border-router-id" { return "BorderRouterId" }
    if yname == "border-router-path" { return "BorderRouterPath" }
    return ""
}

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetSegmentPath() string {
    return "border-router" + "[border-router-id='" + fmt.Sprintf("%v", borderRouter.BorderRouterId) + "']"
}

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "border-router-path" {
        for _, c := range borderRouter.BorderRouterPath {
            if borderRouter.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath{}
        borderRouter.BorderRouterPath = append(borderRouter.BorderRouterPath, child)
        return &borderRouter.BorderRouterPath[len(borderRouter.BorderRouterPath)-1]
    }
    return nil
}

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range borderRouter.BorderRouterPath {
        children[borderRouter.BorderRouterPath[i].GetSegmentPath()] = &borderRouter.BorderRouterPath[i]
    }
    return children
}

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["border-router-id"] = borderRouter.BorderRouterId
    return leafs
}

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetBundleName() string { return "cisco_ios_xr" }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetYangName() string { return "border-router" }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) SetParent(parent types.Entity) { borderRouter.parent = parent }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetParent() types.Entity { return borderRouter.parent }

func (borderRouter *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter) GetParentYangName() string { return "border-routers" }

// Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath
// List of border router paths
type Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // If true, intra-area router else inter-area router. The type is bool.
    IsIntraAreaRouter interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BorderRouterRouteMetric interface{}

    // Next hop address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BorderRouterNextHop interface{}

    // Next hop interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Border router type . The type is Ospfv3BorderRoute.
    BorderRouterType interface{}

    // Area string in decimal or dotted-decimal format . The type is string with
    // length: 0..16.
    BorderRouterAreaId interface{}

    // SPF version. The type is interface{} with range: 0..4294967295.
    SpfVersion interface{}
}

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetFilter() yfilter.YFilter { return borderRouterPath.YFilter }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) SetFilter(yf yfilter.YFilter) { borderRouterPath.YFilter = yf }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetGoName(yname string) string {
    if yname == "is-intra-area-router" { return "IsIntraAreaRouter" }
    if yname == "border-router-route-metric" { return "BorderRouterRouteMetric" }
    if yname == "border-router-next-hop" { return "BorderRouterNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "border-router-type" { return "BorderRouterType" }
    if yname == "border-router-area-id" { return "BorderRouterAreaId" }
    if yname == "spf-version" { return "SpfVersion" }
    return ""
}

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetSegmentPath() string {
    return "border-router-path"
}

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-intra-area-router"] = borderRouterPath.IsIntraAreaRouter
    leafs["border-router-route-metric"] = borderRouterPath.BorderRouterRouteMetric
    leafs["border-router-next-hop"] = borderRouterPath.BorderRouterNextHop
    leafs["interface-name"] = borderRouterPath.InterfaceName
    leafs["border-router-type"] = borderRouterPath.BorderRouterType
    leafs["border-router-area-id"] = borderRouterPath.BorderRouterAreaId
    leafs["spf-version"] = borderRouterPath.SpfVersion
    return leafs
}

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetBundleName() string { return "cisco_ios_xr" }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetYangName() string { return "border-router-path" }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) SetParent(parent types.Entity) { borderRouterPath.parent = parent }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetParent() types.Entity { return borderRouterPath.parent }

func (borderRouterPath *Ospfv3_Processes_Process_Vrfs_Vrf_BorderRouters_BorderRouter_BorderRouterPath) GetParentYangName() string { return "border-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable
// Sham link information
type Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor on other end of this sham link. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ShamLinkNeighborId interface{}

    // Sham-link source. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkSourceAddress interface{}

    // Sham-link dest. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkDestAddress interface{}

    // OSPF interface state for the sham link. The type is Ospfv3InterfaceState.
    ShamLinkState interface{}

    // If true, the link runs as demand circuit. The type is bool.
    ShamLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set. The type is interface{}
    // with range: 0..4294967295.
    ShamLinkDcBitlessLsa interface{}

    // Sham-link ifindex. The type is interface{} with range: 0..4294967295.
    ShamLinkIfindex interface{}

    // Area id. The type is string.
    ShamLinkArea interface{}

    // Cost of the sham link. The type is interface{} with range: 0..65535.
    ShamLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    ShamLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    ShamLinkPassive interface{}

    // If true, sham link IP security is required . The type is bool.
    IsShamLinkIpSecurityRequired interface{}

    // If true, Sham link IP security is active . The type is bool.
    IsShamLinkIpSecurityActive interface{}

    // If true, sham link authentication is enabled . The type is bool.
    IsShamLinkAuthenticationEnabled interface{}

    // Sham link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Sham link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkAuthenticationTransmit interface{}

    // If true, sham link encryption is enabled . The type is bool.
    IsShamLinkEncryptionEnabled interface{}

    // Sham link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionSpi interface{}

    // Sham link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionTransmitted interface{}

    // Sham link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    ShamLinkEncryptedAuthenticationTransmitted interface{}

    // If true,  enabled. The type is bool.
    ShamLinkGrEnabled interface{}

    // If true, Gracefule restart in progress. The type is bool.
    ShamLinkGr interface{}

    // Time in seconds since last GR. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ShamLinkLastGr interface{}

    // Neighbor information.
    ShamLinkNeighbor Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor
}

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetFilter() yfilter.YFilter { return shamLinkTable.YFilter }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) SetFilter(yf yfilter.YFilter) { shamLinkTable.YFilter = yf }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetGoName(yname string) string {
    if yname == "sham-link-neighbor-id" { return "ShamLinkNeighborId" }
    if yname == "sham-link-source-address" { return "ShamLinkSourceAddress" }
    if yname == "sham-link-dest-address" { return "ShamLinkDestAddress" }
    if yname == "sham-link-state" { return "ShamLinkState" }
    if yname == "sham-link-demand-circuit" { return "ShamLinkDemandCircuit" }
    if yname == "sham-link-dc-bitless-lsa" { return "ShamLinkDcBitlessLsa" }
    if yname == "sham-link-ifindex" { return "ShamLinkIfindex" }
    if yname == "sham-link-area" { return "ShamLinkArea" }
    if yname == "sham-link-cost" { return "ShamLinkCost" }
    if yname == "sham-link-transmission-delay" { return "ShamLinkTransmissionDelay" }
    if yname == "sham-link-hello-interval" { return "ShamLinkHelloInterval" }
    if yname == "sham-link-dead-interval" { return "ShamLinkDeadInterval" }
    if yname == "sham-link-wait-interval" { return "ShamLinkWaitInterval" }
    if yname == "sham-link-retransmission-interval" { return "ShamLinkRetransmissionInterval" }
    if yname == "sham-link-next-hello" { return "ShamLinkNextHello" }
    if yname == "sham-link-passive" { return "ShamLinkPassive" }
    if yname == "is-sham-link-ip-security-required" { return "IsShamLinkIpSecurityRequired" }
    if yname == "is-sham-link-ip-security-active" { return "IsShamLinkIpSecurityActive" }
    if yname == "is-sham-link-authentication-enabled" { return "IsShamLinkAuthenticationEnabled" }
    if yname == "virtual-link-authentication-spi" { return "VirtualLinkAuthenticationSpi" }
    if yname == "sham-link-authentication-transmit" { return "ShamLinkAuthenticationTransmit" }
    if yname == "is-sham-link-encryption-enabled" { return "IsShamLinkEncryptionEnabled" }
    if yname == "sham-link-encryption-spi" { return "ShamLinkEncryptionSpi" }
    if yname == "sham-link-encryption-transmitted" { return "ShamLinkEncryptionTransmitted" }
    if yname == "sham-link-encrypted-authentication-transmitted" { return "ShamLinkEncryptedAuthenticationTransmitted" }
    if yname == "sham-link-gr-enabled" { return "ShamLinkGrEnabled" }
    if yname == "sham-link-gr" { return "ShamLinkGr" }
    if yname == "sham-link-last-gr" { return "ShamLinkLastGr" }
    if yname == "sham-link-neighbor" { return "ShamLinkNeighbor" }
    return ""
}

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetSegmentPath() string {
    return "sham-link-table"
}

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-neighbor" {
        return &shamLinkTable.ShamLinkNeighbor
    }
    return nil
}

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sham-link-neighbor"] = &shamLinkTable.ShamLinkNeighbor
    return children
}

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sham-link-neighbor-id"] = shamLinkTable.ShamLinkNeighborId
    leafs["sham-link-source-address"] = shamLinkTable.ShamLinkSourceAddress
    leafs["sham-link-dest-address"] = shamLinkTable.ShamLinkDestAddress
    leafs["sham-link-state"] = shamLinkTable.ShamLinkState
    leafs["sham-link-demand-circuit"] = shamLinkTable.ShamLinkDemandCircuit
    leafs["sham-link-dc-bitless-lsa"] = shamLinkTable.ShamLinkDcBitlessLsa
    leafs["sham-link-ifindex"] = shamLinkTable.ShamLinkIfindex
    leafs["sham-link-area"] = shamLinkTable.ShamLinkArea
    leafs["sham-link-cost"] = shamLinkTable.ShamLinkCost
    leafs["sham-link-transmission-delay"] = shamLinkTable.ShamLinkTransmissionDelay
    leafs["sham-link-hello-interval"] = shamLinkTable.ShamLinkHelloInterval
    leafs["sham-link-dead-interval"] = shamLinkTable.ShamLinkDeadInterval
    leafs["sham-link-wait-interval"] = shamLinkTable.ShamLinkWaitInterval
    leafs["sham-link-retransmission-interval"] = shamLinkTable.ShamLinkRetransmissionInterval
    leafs["sham-link-next-hello"] = shamLinkTable.ShamLinkNextHello
    leafs["sham-link-passive"] = shamLinkTable.ShamLinkPassive
    leafs["is-sham-link-ip-security-required"] = shamLinkTable.IsShamLinkIpSecurityRequired
    leafs["is-sham-link-ip-security-active"] = shamLinkTable.IsShamLinkIpSecurityActive
    leafs["is-sham-link-authentication-enabled"] = shamLinkTable.IsShamLinkAuthenticationEnabled
    leafs["virtual-link-authentication-spi"] = shamLinkTable.VirtualLinkAuthenticationSpi
    leafs["sham-link-authentication-transmit"] = shamLinkTable.ShamLinkAuthenticationTransmit
    leafs["is-sham-link-encryption-enabled"] = shamLinkTable.IsShamLinkEncryptionEnabled
    leafs["sham-link-encryption-spi"] = shamLinkTable.ShamLinkEncryptionSpi
    leafs["sham-link-encryption-transmitted"] = shamLinkTable.ShamLinkEncryptionTransmitted
    leafs["sham-link-encrypted-authentication-transmitted"] = shamLinkTable.ShamLinkEncryptedAuthenticationTransmitted
    leafs["sham-link-gr-enabled"] = shamLinkTable.ShamLinkGrEnabled
    leafs["sham-link-gr"] = shamLinkTable.ShamLinkGr
    leafs["sham-link-last-gr"] = shamLinkTable.ShamLinkLastGr
    return leafs
}

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetYangName() string { return "sham-link-table" }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) SetParent(parent types.Entity) { shamLinkTable.parent = parent }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetParent() types.Entity { return shamLinkTable.parent }

func (shamLinkTable *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor
// Neighbor information
type Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // If true Hellos suppressed. The type is bool.
    ShamLinkSuppressHello interface{}

    // Adjacency state. The type is Ospfv3NeighborState.
    ShamLinkState interface{}

    // Neighbor retransmission info.
    ShamLinkRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetFilter() yfilter.YFilter { return shamLinkNeighbor.YFilter }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) SetFilter(yf yfilter.YFilter) { shamLinkNeighbor.YFilter = yf }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetGoName(yname string) string {
    if yname == "sham-link-suppress-hello" { return "ShamLinkSuppressHello" }
    if yname == "sham-link-state" { return "ShamLinkState" }
    if yname == "sham-link-retransmission" { return "ShamLinkRetransmission" }
    return ""
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetSegmentPath() string {
    return "sham-link-neighbor"
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-retransmission" {
        return &shamLinkNeighbor.ShamLinkRetransmission
    }
    return nil
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sham-link-retransmission"] = &shamLinkNeighbor.ShamLinkRetransmission
    return children
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sham-link-suppress-hello"] = shamLinkNeighbor.ShamLinkSuppressHello
    leafs["sham-link-state"] = shamLinkNeighbor.ShamLinkState
    return leafs
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetYangName() string { return "sham-link-neighbor" }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) SetParent(parent types.Entity) { shamLinkNeighbor.parent = parent }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetParent() types.Entity { return shamLinkNeighbor.parent }

func (shamLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor) GetParentYangName() string { return "sham-link-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
// Neighbor retransmission info
type Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetFilter() yfilter.YFilter { return shamLinkRetransmission.YFilter }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) SetFilter(yf yfilter.YFilter) { shamLinkRetransmission.YFilter = yf }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetSegmentPath() string {
    return "sham-link-retransmission"
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = shamLinkRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = shamLinkRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = shamLinkRetransmission.AsFloodIndex
    leafs["link-flood-index"] = shamLinkRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = shamLinkRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = shamLinkRetransmission.Retransmissions
    leafs["area-first-flood"] = shamLinkRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = shamLinkRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = shamLinkRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = shamLinkRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = shamLinkRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = shamLinkRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = shamLinkRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = shamLinkRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = shamLinkRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = shamLinkRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = shamLinkRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = shamLinkRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = shamLinkRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = shamLinkRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = shamLinkRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = shamLinkRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = shamLinkRetransmission.LsaRetransmissionTimer
    return leafs
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetYangName() string { return "sham-link-retransmission" }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) SetParent(parent types.Entity) { shamLinkRetransmission.parent = parent }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetParent() types.Entity { return shamLinkRetransmission.parent }

func (shamLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetParentYangName() string { return "sham-link-neighbor" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations
// OSPFv3 area information table
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 area information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation.
    AreaInformation []Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation
}

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetFilter() yfilter.YFilter { return areaInformations.YFilter }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) SetFilter(yf yfilter.YFilter) { areaInformations.YFilter = yf }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetGoName(yname string) string {
    if yname == "area-information" { return "AreaInformation" }
    return ""
}

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetSegmentPath() string {
    return "area-informations"
}

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-information" {
        for _, c := range areaInformations.AreaInformation {
            if areaInformations.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation{}
        areaInformations.AreaInformation = append(areaInformations.AreaInformation, child)
        return &areaInformations.AreaInformation[len(areaInformations.AreaInformation)-1]
    }
    return nil
}

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaInformations.AreaInformation {
        children[areaInformations.AreaInformation[i].GetSegmentPath()] = &areaInformations.AreaInformation[i]
    }
    return children
}

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetBundleName() string { return "cisco_ios_xr" }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetYangName() string { return "area-informations" }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) SetParent(parent types.Entity) { areaInformations.parent = parent }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetParent() types.Entity { return areaInformations.parent }

func (areaInformations *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation
// OSPFv3 area information
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // -2147483648..2147483647.
    AreaId interface{}

    // If true, Backbone area is active. The type is bool.
    IsBackboneAreaActive interface{}

    // Number of interfaces in the area. The type is interface{} with range:
    // 0..65535.
    AreaInterfaces interface{}

    // If true, stub area. The type is bool.
    IsAreaStubbed interface{}

    // If true, totally stubby area. The type is bool.
    IsAreaTotalStubbed interface{}

    // Default cost for Stub or NSSA area. The type is interface{} with range:
    // 0..65535.
    StubDefaultCost interface{}

    // If true, area is a NSSA. The type is bool.
    IsAreaNssa interface{}

    // If true, No redistribution into this NSSA area. The type is bool.
    NssaNoRedistribution interface{}

    // If true, perform 7/5 translation. The type is bool.
    IsNssaTranslated interface{}

    // If true, generate NSSA default route. The type is bool.
    IsNssaDefault interface{}

    // If true, RRR is enabled. The type is bool.
    IsRrrEnabled interface{}

    // Number of SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}

    // Number of opaque LSAs in the area. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsas interface{}

    // Sum of opaque LSA checksums. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaChecksum interface{}

    // Number of LSA with demand circuit bit not set. The type is interface{} with
    // range: 0..4294967295.
    AreaDcBitlessLsAs interface{}

    // Number of indication LSAs. The type is interface{} with range:
    // 0..4294967295.
    IndicationLsAs interface{}

    // Number of do not age LSAs. The type is interface{} with range:
    // 0..4294967295.
    DoNotAgeLsAs interface{}

    // Number of LSAs which need to be flooded. The type is interface{} with
    // range: 0..4294967295.
    FloodListLength interface{}

    // Number of LFA enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    AreaLfaInterfaceCount interface{}

    // Number of Per Prefix LFA enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    AreaPerPrefixLfaInterfaceCount interface{}

    // Area LFA revision. The type is interface{} with range: 0..4294967295.
    AreaLfaRevision interface{}

    // List of ranges to summarize. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange.
    AreaRange []Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange
}

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetFilter() yfilter.YFilter { return areaInformation.YFilter }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) SetFilter(yf yfilter.YFilter) { areaInformation.YFilter = yf }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "is-backbone-area-active" { return "IsBackboneAreaActive" }
    if yname == "area-interfaces" { return "AreaInterfaces" }
    if yname == "is-area-stubbed" { return "IsAreaStubbed" }
    if yname == "is-area-total-stubbed" { return "IsAreaTotalStubbed" }
    if yname == "stub-default-cost" { return "StubDefaultCost" }
    if yname == "is-area-nssa" { return "IsAreaNssa" }
    if yname == "nssa-no-redistribution" { return "NssaNoRedistribution" }
    if yname == "is-nssa-translated" { return "IsNssaTranslated" }
    if yname == "is-nssa-default" { return "IsNssaDefault" }
    if yname == "is-rrr-enabled" { return "IsRrrEnabled" }
    if yname == "sp-fs" { return "SpFs" }
    if yname == "area-opaque-lsas" { return "AreaOpaqueLsas" }
    if yname == "area-opaque-lsa-checksum" { return "AreaOpaqueLsaChecksum" }
    if yname == "area-dc-bitless-ls-as" { return "AreaDcBitlessLsAs" }
    if yname == "indication-ls-as" { return "IndicationLsAs" }
    if yname == "do-not-age-ls-as" { return "DoNotAgeLsAs" }
    if yname == "flood-list-length" { return "FloodListLength" }
    if yname == "area-lfa-interface-count" { return "AreaLfaInterfaceCount" }
    if yname == "area-per-prefix-lfa-interface-count" { return "AreaPerPrefixLfaInterfaceCount" }
    if yname == "area-lfa-revision" { return "AreaLfaRevision" }
    if yname == "area-range" { return "AreaRange" }
    return ""
}

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetSegmentPath() string {
    return "area-information" + "[area-id='" + fmt.Sprintf("%v", areaInformation.AreaId) + "']"
}

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-range" {
        for _, c := range areaInformation.AreaRange {
            if areaInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange{}
        areaInformation.AreaRange = append(areaInformation.AreaRange, child)
        return &areaInformation.AreaRange[len(areaInformation.AreaRange)-1]
    }
    return nil
}

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaInformation.AreaRange {
        children[areaInformation.AreaRange[i].GetSegmentPath()] = &areaInformation.AreaRange[i]
    }
    return children
}

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaInformation.AreaId
    leafs["is-backbone-area-active"] = areaInformation.IsBackboneAreaActive
    leafs["area-interfaces"] = areaInformation.AreaInterfaces
    leafs["is-area-stubbed"] = areaInformation.IsAreaStubbed
    leafs["is-area-total-stubbed"] = areaInformation.IsAreaTotalStubbed
    leafs["stub-default-cost"] = areaInformation.StubDefaultCost
    leafs["is-area-nssa"] = areaInformation.IsAreaNssa
    leafs["nssa-no-redistribution"] = areaInformation.NssaNoRedistribution
    leafs["is-nssa-translated"] = areaInformation.IsNssaTranslated
    leafs["is-nssa-default"] = areaInformation.IsNssaDefault
    leafs["is-rrr-enabled"] = areaInformation.IsRrrEnabled
    leafs["sp-fs"] = areaInformation.SpFs
    leafs["area-opaque-lsas"] = areaInformation.AreaOpaqueLsas
    leafs["area-opaque-lsa-checksum"] = areaInformation.AreaOpaqueLsaChecksum
    leafs["area-dc-bitless-ls-as"] = areaInformation.AreaDcBitlessLsAs
    leafs["indication-ls-as"] = areaInformation.IndicationLsAs
    leafs["do-not-age-ls-as"] = areaInformation.DoNotAgeLsAs
    leafs["flood-list-length"] = areaInformation.FloodListLength
    leafs["area-lfa-interface-count"] = areaInformation.AreaLfaInterfaceCount
    leafs["area-per-prefix-lfa-interface-count"] = areaInformation.AreaPerPrefixLfaInterfaceCount
    leafs["area-lfa-revision"] = areaInformation.AreaLfaRevision
    return leafs
}

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetBundleName() string { return "cisco_ios_xr" }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetYangName() string { return "area-information" }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) SetParent(parent types.Entity) { areaInformation.parent = parent }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetParent() types.Entity { return areaInformation.parent }

func (areaInformation *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation) GetParentYangName() string { return "area-informations" }

// Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange
// List of ranges to summarize
type Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP prefix for summarization. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RangePrefix interface{}

    // IP prefix length for summarization. The type is interface{} with range:
    // 0..4294967295.
    RangePrefixLength interface{}

    // Net cost . The type is interface{} with range: 0..4294967295.
    NetCost interface{}

    // Area range status . The type is Ospfv3AreaRangeStatus.
    Status interface{}

    // If true, cost is configured . The type is bool.
    IsCostConfigured interface{}
}

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetFilter() yfilter.YFilter { return areaRange.YFilter }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) SetFilter(yf yfilter.YFilter) { areaRange.YFilter = yf }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetGoName(yname string) string {
    if yname == "range-prefix" { return "RangePrefix" }
    if yname == "range-prefix-length" { return "RangePrefixLength" }
    if yname == "net-cost" { return "NetCost" }
    if yname == "status" { return "Status" }
    if yname == "is-cost-configured" { return "IsCostConfigured" }
    return ""
}

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetSegmentPath() string {
    return "area-range"
}

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["range-prefix"] = areaRange.RangePrefix
    leafs["range-prefix-length"] = areaRange.RangePrefixLength
    leafs["net-cost"] = areaRange.NetCost
    leafs["status"] = areaRange.Status
    leafs["is-cost-configured"] = areaRange.IsCostConfigured
    return leafs
}

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetBundleName() string { return "cisco_ios_xr" }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetYangName() string { return "area-range" }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) SetParent(parent types.Entity) { areaRange.parent = parent }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetParent() types.Entity { return areaRange.parent }

func (areaRange *Ospfv3_Processes_Process_Vrfs_Vrf_AreaInformations_AreaInformation_AreaRange) GetParentYangName() string { return "area-information" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetFilter() yfilter.YFilter { return databaseTable.YFilter }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) SetFilter(yf yfilter.YFilter) { databaseTable.YFilter = yf }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetGoName(yname string) string {
    if yname == "lsa-table" { return "LsaTable" }
    if yname == "lsa-internal-table" { return "LsaInternalTable" }
    return ""
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetSegmentPath() string {
    return "database-table"
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-table" {
        return &databaseTable.LsaTable
    }
    if childYangName == "lsa-internal-table" {
        return &databaseTable.LsaInternalTable
    }
    return nil
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-table"] = &databaseTable.LsaTable
    children["lsa-internal-table"] = &databaseTable.LsaInternalTable
    return children
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetYangName() string { return "database-table" }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) SetParent(parent types.Entity) { databaseTable.parent = parent }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetParent() types.Entity { return databaseTable.parent }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa.
    Lsa []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetFilter() yfilter.YFilter { return lsaTable.YFilter }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) SetFilter(yf yfilter.YFilter) { lsaTable.YFilter = yf }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetSegmentPath() string {
    return "lsa-table"
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaTable.Lsa {
            if lsaTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa{}
        lsaTable.Lsa = append(lsaTable.Lsa, child)
        return &lsaTable.Lsa[len(lsaTable.Lsa)-1]
    }
    return nil
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaTable.Lsa {
        children[lsaTable.Lsa[i].GetSegmentPath()] = &lsaTable.Lsa[i]
    }
    return children
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetYangName() string { return "lsa-table" }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) SetParent(parent types.Entity) { lsaTable.parent = parent }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetParent() types.Entity { return lsaTable.parent }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa) GetParentYangName() string { return "lsa-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetFilter() yfilter.YFilter { return lsaInternalTable.YFilter }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) SetFilter(yf yfilter.YFilter) { lsaInternalTable.YFilter = yf }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetSegmentPath() string {
    return "lsa-internal-table"
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaInternalTable.Lsa {
            if lsaInternalTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa{}
        lsaInternalTable.Lsa = append(lsaInternalTable.Lsa, child)
        return &lsaInternalTable.Lsa[len(lsaInternalTable.Lsa)-1]
    }
    return nil
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaInternalTable.Lsa {
        children[lsaInternalTable.Lsa[i].GetSegmentPath()] = &lsaInternalTable.Lsa[i]
    }
    return children
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetYangName() string { return "lsa-internal-table" }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) SetParent(parent types.Entity) { lsaInternalTable.parent = parent }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetParent() types.Entity { return lsaInternalTable.parent }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa) GetParentYangName() string { return "lsa-internal-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable
// OSPFv3 interface information table for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface.
    Interface []Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface
}

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetFilter() yfilter.YFilter { return interfaceProcessTable.YFilter }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) SetFilter(yf yfilter.YFilter) { interfaceProcessTable.YFilter = yf }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetSegmentPath() string {
    return "interface-process-table"
}

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceProcessTable.Interface {
            if interfaceProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface{}
        interfaceProcessTable.Interface = append(interfaceProcessTable.Interface, child)
        return &interfaceProcessTable.Interface[len(interfaceProcessTable.Interface)-1]
    }
    return nil
}

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceProcessTable.Interface {
        children[interfaceProcessTable.Interface[i].GetSegmentPath()] = &interfaceProcessTable.Interface[i]
    }
    return children
}

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetYangName() string { return "interface-process-table" }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) SetParent(parent types.Entity) { interfaceProcessTable.parent = parent }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetParent() types.Entity { return interfaceProcessTable.parent }

func (interfaceProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-state" { return "InterfaceState" }
    if yname == "is-interface-line-up" { return "IsInterfaceLineUp" }
    if yname == "is-interface-ip-security-required" { return "IsInterfaceIpSecurityRequired" }
    if yname == "is-interface-ip-security-active" { return "IsInterfaceIpSecurityActive" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-number" { return "InterfaceNumber" }
    if yname == "interface-router-id" { return "InterfaceRouterId" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "is-interface-flood-reduction" { return "IsInterfaceFloodReduction" }
    if yname == "is-demand-circuit-configured" { return "IsDemandCircuitConfigured" }
    if yname == "is-interface-demand-circuit" { return "IsInterfaceDemandCircuit" }
    if yname == "interface-dc-bitless-ls-as" { return "InterfaceDcBitlessLsAs" }
    if yname == "transmission-delay" { return "TransmissionDelay" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-priority" { return "InterfacePriority" }
    if yname == "is-designated-router" { return "IsDesignatedRouter" }
    if yname == "designated-router-id" { return "DesignatedRouterId" }
    if yname == "designated-router-address" { return "DesignatedRouterAddress" }
    if yname == "backup-designated-router-id" { return "BackupDesignatedRouterId" }
    if yname == "backup-designated-router-address" { return "BackupDesignatedRouterAddress" }
    if yname == "network-lsa-flush-timer" { return "NetworkLsaFlushTimer" }
    if yname == "is-interface-lsa-filtered" { return "IsInterfaceLsaFiltered" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "wait-interval" { return "WaitInterval" }
    if yname == "interface-retransmission-interval" { return "InterfaceRetransmissionInterval" }
    if yname == "next-hello-time" { return "NextHelloTime" }
    if yname == "interface-authentication-spi" { return "InterfaceAuthenticationSpi" }
    if yname == "interface-authentication-transmit" { return "InterfaceAuthenticationTransmit" }
    if yname == "is-interface-encryption-enabled" { return "IsInterfaceEncryptionEnabled" }
    if yname == "is-prefix-suppress" { return "IsPrefixSuppress" }
    if yname == "interface-encryption-spi" { return "InterfaceEncryptionSpi" }
    if yname == "interface-encryption-transmitted" { return "InterfaceEncryptionTransmitted" }
    if yname == "interface-encrypted-authentication-transmitted" { return "InterfaceEncryptedAuthenticationTransmitted" }
    if yname == "adjacent-neighbor" { return "AdjacentNeighbor" }
    if yname == "interface-references" { return "InterfaceReferences" }
    if yname == "configured-ldp-sync" { return "ConfiguredLdpSync" }
    if yname == "interface-ldp-sync" { return "InterfaceLdpSync" }
    if yname == "active-interface" { return "ActiveInterface" }
    if yname == "interface-bfd" { return "InterfaceBfd" }
    if yname == "interface-neighbor" { return "InterfaceNeighbor" }
    return ""
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "active-interface" {
        return &self.ActiveInterface
    }
    if childYangName == "interface-bfd" {
        return &self.InterfaceBfd
    }
    if childYangName == "interface-neighbor" {
        for _, c := range self.InterfaceNeighbor {
            if self.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor{}
        self.InterfaceNeighbor = append(self.InterfaceNeighbor, child)
        return &self.InterfaceNeighbor[len(self.InterfaceNeighbor)-1]
    }
    return nil
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["active-interface"] = &self.ActiveInterface
    children["interface-bfd"] = &self.InterfaceBfd
    for i := range self.InterfaceNeighbor {
        children[self.InterfaceNeighbor[i].GetSegmentPath()] = &self.InterfaceNeighbor[i]
    }
    return children
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-state"] = self.InterfaceState
    leafs["is-interface-line-up"] = self.IsInterfaceLineUp
    leafs["is-interface-ip-security-required"] = self.IsInterfaceIpSecurityRequired
    leafs["is-interface-ip-security-active"] = self.IsInterfaceIpSecurityActive
    leafs["interface-address"] = self.InterfaceAddress
    leafs["interface-number"] = self.InterfaceNumber
    leafs["interface-router-id"] = self.InterfaceRouterId
    leafs["network-type"] = self.NetworkType
    leafs["interface-link-cost"] = self.InterfaceLinkCost
    leafs["is-interface-flood-reduction"] = self.IsInterfaceFloodReduction
    leafs["is-demand-circuit-configured"] = self.IsDemandCircuitConfigured
    leafs["is-interface-demand-circuit"] = self.IsInterfaceDemandCircuit
    leafs["interface-dc-bitless-ls-as"] = self.InterfaceDcBitlessLsAs
    leafs["transmission-delay"] = self.TransmissionDelay
    leafs["ospf-interface-state"] = self.OspfInterfaceState
    leafs["interface-priority"] = self.InterfacePriority
    leafs["is-designated-router"] = self.IsDesignatedRouter
    leafs["designated-router-id"] = self.DesignatedRouterId
    leafs["designated-router-address"] = self.DesignatedRouterAddress
    leafs["backup-designated-router-id"] = self.BackupDesignatedRouterId
    leafs["backup-designated-router-address"] = self.BackupDesignatedRouterAddress
    leafs["network-lsa-flush-timer"] = self.NetworkLsaFlushTimer
    leafs["is-interface-lsa-filtered"] = self.IsInterfaceLsaFiltered
    leafs["hello-interval"] = self.HelloInterval
    leafs["dead-interval"] = self.DeadInterval
    leafs["wait-interval"] = self.WaitInterval
    leafs["interface-retransmission-interval"] = self.InterfaceRetransmissionInterval
    leafs["next-hello-time"] = self.NextHelloTime
    leafs["interface-authentication-spi"] = self.InterfaceAuthenticationSpi
    leafs["interface-authentication-transmit"] = self.InterfaceAuthenticationTransmit
    leafs["is-interface-encryption-enabled"] = self.IsInterfaceEncryptionEnabled
    leafs["is-prefix-suppress"] = self.IsPrefixSuppress
    leafs["interface-encryption-spi"] = self.InterfaceEncryptionSpi
    leafs["interface-encryption-transmitted"] = self.InterfaceEncryptionTransmitted
    leafs["interface-encrypted-authentication-transmitted"] = self.InterfaceEncryptedAuthenticationTransmitted
    leafs["adjacent-neighbor"] = self.AdjacentNeighbor
    leafs["interface-references"] = self.InterfaceReferences
    leafs["configured-ldp-sync"] = self.ConfiguredLdpSync
    leafs["interface-ldp-sync"] = self.InterfaceLdpSync
    return leafs
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface) GetParentYangName() string { return "interface-process-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetFilter() yfilter.YFilter { return activeInterface.YFilter }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) SetFilter(yf yfilter.YFilter) { activeInterface.YFilter = yf }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetGoName(yname string) string {
    if yname == "wait-time" { return "WaitTime" }
    if yname == "interface-area-flood-index" { return "InterfaceAreaFloodIndex" }
    if yname == "interface-as-flood-index" { return "InterfaceAsFloodIndex" }
    if yname == "interface-link-flood-index" { return "InterfaceLinkFloodIndex" }
    if yname == "flood-queue-length" { return "FloodQueueLength" }
    if yname == "interface-area-next-flood" { return "InterfaceAreaNextFlood" }
    if yname == "interface-area-next-flood-index" { return "InterfaceAreaNextFloodIndex" }
    if yname == "interface-as-next-flood" { return "InterfaceAsNextFlood" }
    if yname == "interface-as-next-flood-index" { return "InterfaceAsNextFloodIndex" }
    if yname == "interface-link-next-flood" { return "InterfaceLinkNextFlood" }
    if yname == "interface-link-next-index" { return "InterfaceLinkNextIndex" }
    if yname == "flood-scan-length" { return "FloodScanLength" }
    if yname == "maximum-flood-length" { return "MaximumFloodLength" }
    if yname == "last-flood-time" { return "LastFloodTime" }
    if yname == "maximum-flood-time" { return "MaximumFloodTime" }
    if yname == "interface-flood-pacing-timer" { return "InterfaceFloodPacingTimer" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "suppressed-hellos" { return "SuppressedHellos" }
    return ""
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetSegmentPath() string {
    return "active-interface"
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-time"] = activeInterface.WaitTime
    leafs["interface-area-flood-index"] = activeInterface.InterfaceAreaFloodIndex
    leafs["interface-as-flood-index"] = activeInterface.InterfaceAsFloodIndex
    leafs["interface-link-flood-index"] = activeInterface.InterfaceLinkFloodIndex
    leafs["flood-queue-length"] = activeInterface.FloodQueueLength
    leafs["interface-area-next-flood"] = activeInterface.InterfaceAreaNextFlood
    leafs["interface-area-next-flood-index"] = activeInterface.InterfaceAreaNextFloodIndex
    leafs["interface-as-next-flood"] = activeInterface.InterfaceAsNextFlood
    leafs["interface-as-next-flood-index"] = activeInterface.InterfaceAsNextFloodIndex
    leafs["interface-link-next-flood"] = activeInterface.InterfaceLinkNextFlood
    leafs["interface-link-next-index"] = activeInterface.InterfaceLinkNextIndex
    leafs["flood-scan-length"] = activeInterface.FloodScanLength
    leafs["maximum-flood-length"] = activeInterface.MaximumFloodLength
    leafs["last-flood-time"] = activeInterface.LastFloodTime
    leafs["maximum-flood-time"] = activeInterface.MaximumFloodTime
    leafs["interface-flood-pacing-timer"] = activeInterface.InterfaceFloodPacingTimer
    leafs["interface-neighbors"] = activeInterface.InterfaceNeighbors
    leafs["suppressed-hellos"] = activeInterface.SuppressedHellos
    return leafs
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetBundleName() string { return "cisco_ios_xr" }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetYangName() string { return "active-interface" }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) SetParent(parent types.Entity) { activeInterface.parent = parent }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetParent() types.Entity { return activeInterface.parent }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_ActiveInterface) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetFilter() yfilter.YFilter { return interfaceBfd.YFilter }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) SetFilter(yf yfilter.YFilter) { interfaceBfd.YFilter = yf }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-interval" { return "BfdInterval" }
    if yname == "bfd-detection-multiplier" { return "BfdDetectionMultiplier" }
    return ""
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetSegmentPath() string {
    return "interface-bfd"
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = interfaceBfd.BfdIntfEnableMode
    leafs["bfd-interval"] = interfaceBfd.BfdInterval
    leafs["bfd-detection-multiplier"] = interfaceBfd.BfdDetectionMultiplier
    return leafs
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetYangName() string { return "interface-bfd" }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) SetParent(parent types.Entity) { interfaceBfd.parent = parent }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetParent() types.Entity { return interfaceBfd.parent }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceBfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetFilter() yfilter.YFilter { return interfaceNeighbor.YFilter }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) SetFilter(yf yfilter.YFilter) { interfaceNeighbor.YFilter = yf }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetGoName(yname string) string {
    if yname == "interface-neighbor-id" { return "InterfaceNeighborId" }
    if yname == "interface-neighbor-cost" { return "InterfaceNeighborCost" }
    if yname == "is-neighbor-dr" { return "IsNeighborDr" }
    if yname == "is-neighbor-bdr" { return "IsNeighborBdr" }
    if yname == "is-hello-suppressed" { return "IsHelloSuppressed" }
    return ""
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetSegmentPath() string {
    return "interface-neighbor"
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-id"] = interfaceNeighbor.InterfaceNeighborId
    leafs["interface-neighbor-cost"] = interfaceNeighbor.InterfaceNeighborCost
    leafs["is-neighbor-dr"] = interfaceNeighbor.IsNeighborDr
    leafs["is-neighbor-bdr"] = interfaceNeighbor.IsNeighborBdr
    leafs["is-hello-suppressed"] = interfaceNeighbor.IsHelloSuppressed
    return leafs
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetYangName() string { return "interface-neighbor" }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) SetParent(parent types.Entity) { interfaceNeighbor.parent = parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetParent() types.Entity { return interfaceNeighbor.parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions
// Redistribution information table
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribution information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution.
    Redistribution []Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution
}

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetFilter() yfilter.YFilter { return redistributions.YFilter }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) SetFilter(yf yfilter.YFilter) { redistributions.YFilter = yf }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetGoName(yname string) string {
    if yname == "redistribution" { return "Redistribution" }
    return ""
}

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetSegmentPath() string {
    return "redistributions"
}

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribution" {
        for _, c := range redistributions.Redistribution {
            if redistributions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution{}
        redistributions.Redistribution = append(redistributions.Redistribution, child)
        return &redistributions.Redistribution[len(redistributions.Redistribution)-1]
    }
    return nil
}

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributions.Redistribution {
        children[redistributions.Redistribution[i].GetSegmentPath()] = &redistributions.Redistribution[i]
    }
    return children
}

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetBundleName() string { return "cisco_ios_xr" }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetYangName() string { return "redistributions" }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) SetParent(parent types.Entity) { redistributions.parent = parent }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetParent() types.Entity { return redistributions.parent }

func (redistributions *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution
// Redistribution information
type Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol name that is redistributed. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ProtocolName interface{}

    // Process name of a protocolbeing redistributed . The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Protocol name . The type is string with length: 0..40.
    ProtocolNameXr interface{}

    // Process ID . The type is string with length: 0..40.
    ProcessId interface{}

    // red metric flag. The type is bool.
    RedMetricFlag interface{}

    // red metric. The type is interface{} with range: 0..4294967295.
    RedMetric interface{}

    // red mtype flag. The type is bool.
    RedMtypeFlag interface{}

    // red metric type. The type is interface{} with range: 0..255.
    RedMetricType interface{}

    // red tag. The type is interface{} with range: 0..4294967295.
    RedTag interface{}

    // Route policy name . The type is string.
    PolicyName interface{}
}

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetFilter() yfilter.YFilter { return redistribution.YFilter }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) SetFilter(yf yfilter.YFilter) { redistribution.YFilter = yf }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "protocol-name-xr" { return "ProtocolNameXr" }
    if yname == "process-id" { return "ProcessId" }
    if yname == "red-metric-flag" { return "RedMetricFlag" }
    if yname == "red-metric" { return "RedMetric" }
    if yname == "red-mtype-flag" { return "RedMtypeFlag" }
    if yname == "red-metric-type" { return "RedMetricType" }
    if yname == "red-tag" { return "RedTag" }
    if yname == "policy-name" { return "PolicyName" }
    return ""
}

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetSegmentPath() string {
    return "redistribution"
}

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = redistribution.ProtocolName
    leafs["process-name"] = redistribution.ProcessName
    leafs["protocol-name-xr"] = redistribution.ProtocolNameXr
    leafs["process-id"] = redistribution.ProcessId
    leafs["red-metric-flag"] = redistribution.RedMetricFlag
    leafs["red-metric"] = redistribution.RedMetric
    leafs["red-mtype-flag"] = redistribution.RedMtypeFlag
    leafs["red-metric-type"] = redistribution.RedMetricType
    leafs["red-tag"] = redistribution.RedTag
    leafs["policy-name"] = redistribution.PolicyName
    return leafs
}

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetBundleName() string { return "cisco_ios_xr" }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetYangName() string { return "redistribution" }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) SetParent(parent types.Entity) { redistribution.parent = parent }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetParent() types.Entity { return redistribution.parent }

func (redistribution *Ospfv3_Processes_Process_Vrfs_Vrf_Redistributions_Redistribution) GetParentYangName() string { return "redistributions" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes
// OSPFv3 external route information table
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 external route information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute.
    ExternalRoute []Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute
}

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetFilter() yfilter.YFilter { return externalRoutes.YFilter }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) SetFilter(yf yfilter.YFilter) { externalRoutes.YFilter = yf }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetGoName(yname string) string {
    if yname == "external-route" { return "ExternalRoute" }
    return ""
}

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetSegmentPath() string {
    return "external-routes"
}

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "external-route" {
        for _, c := range externalRoutes.ExternalRoute {
            if externalRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute{}
        externalRoutes.ExternalRoute = append(externalRoutes.ExternalRoute, child)
        return &externalRoutes.ExternalRoute[len(externalRoutes.ExternalRoute)-1]
    }
    return nil
}

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range externalRoutes.ExternalRoute {
        children[externalRoutes.ExternalRoute[i].GetSegmentPath()] = &externalRoutes.ExternalRoute[i]
    }
    return children
}

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetYangName() string { return "external-routes" }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) SetParent(parent types.Entity) { externalRoutes.parent = parent }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetParent() types.Entity { return externalRoutes.parent }

func (externalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute
// OSPFv3 external route information
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology

    // Extended communities in the route.
    RouteExtendedCommunity Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath.
    RoutePath []Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath
}

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetFilter() yfilter.YFilter { return externalRoute.YFilter }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) SetFilter(yf yfilter.YFilter) { externalRoute.YFilter = yf }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-topology" { return "RouteTopology" }
    if yname == "route-extended-community" { return "RouteExtendedCommunity" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetSegmentPath() string {
    return "external-route"
}

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-topology" {
        return &externalRoute.RouteTopology
    }
    if childYangName == "route-extended-community" {
        return &externalRoute.RouteExtendedCommunity
    }
    if childYangName == "route-path" {
        for _, c := range externalRoute.RoutePath {
            if externalRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath{}
        externalRoute.RoutePath = append(externalRoute.RoutePath, child)
        return &externalRoute.RoutePath[len(externalRoute.RoutePath)-1]
    }
    return nil
}

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-topology"] = &externalRoute.RouteTopology
    children["route-extended-community"] = &externalRoute.RouteExtendedCommunity
    for i := range externalRoute.RoutePath {
        children[externalRoute.RoutePath[i].GetSegmentPath()] = &externalRoute.RoutePath[i]
    }
    return children
}

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalRoute.Prefix
    leafs["prefix-length"] = externalRoute.PrefixLength
    return leafs
}

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetBundleName() string { return "cisco_ios_xr" }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetYangName() string { return "external-route" }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) SetParent(parent types.Entity) { externalRoute.parent = parent }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetParent() types.Entity { return externalRoute.parent }

func (externalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute) GetParentYangName() string { return "external-routes" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetFilter() yfilter.YFilter { return routeTopology.YFilter }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) SetFilter(yf yfilter.YFilter) { routeTopology.YFilter = yf }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "route-distance" { return "RouteDistance" }
    if yname == "route-cost" { return "RouteCost" }
    if yname == "route-type" { return "RouteType" }
    return ""
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetSegmentPath() string {
    return "route-topology"
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeTopology.RouteId
    leafs["route-distance"] = routeTopology.RouteDistance
    leafs["route-cost"] = routeTopology.RouteCost
    leafs["route-type"] = routeTopology.RouteType
    return leafs
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetBundleName() string { return "cisco_ios_xr" }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetYangName() string { return "route-topology" }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) SetParent(parent types.Entity) { routeTopology.parent = parent }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetParent() types.Entity { return routeTopology.parent }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteTopology) GetParentYangName() string { return "external-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
// Extended communities in the route
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunityDomainIdValue interface{}

    // Domain ID type. The type is interface{} with range: 0..65535.
    ExtendedCommunitylDomainIdType interface{}

    // Area id. The type is interface{} with range: 0..4294967295.
    ExtendedCommunityAreaId interface{}

    // Router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedCommunityRouterId interface{}

    // Route type. The type is interface{} with range: 0..255.
    ExtendedCommunityRouteType interface{}

    // Route Options. The type is interface{} with range: 0..255.
    ExtendedCommunityOptions interface{}
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetFilter() yfilter.YFilter { return routeExtendedCommunity.YFilter }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) SetFilter(yf yfilter.YFilter) { routeExtendedCommunity.YFilter = yf }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetGoName(yname string) string {
    if yname == "extended-community-domain-id-value" { return "ExtendedCommunityDomainIdValue" }
    if yname == "extended-communityl-domain-id-type" { return "ExtendedCommunitylDomainIdType" }
    if yname == "extended-community-area-id" { return "ExtendedCommunityAreaId" }
    if yname == "extended-community-router-id" { return "ExtendedCommunityRouterId" }
    if yname == "extended-community-route-type" { return "ExtendedCommunityRouteType" }
    if yname == "extended-community-options" { return "ExtendedCommunityOptions" }
    return ""
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetSegmentPath() string {
    return "route-extended-community"
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["extended-community-domain-id-value"] = routeExtendedCommunity.ExtendedCommunityDomainIdValue
    leafs["extended-communityl-domain-id-type"] = routeExtendedCommunity.ExtendedCommunitylDomainIdType
    leafs["extended-community-area-id"] = routeExtendedCommunity.ExtendedCommunityAreaId
    leafs["extended-community-router-id"] = routeExtendedCommunity.ExtendedCommunityRouterId
    leafs["extended-community-route-type"] = routeExtendedCommunity.ExtendedCommunityRouteType
    leafs["extended-community-options"] = routeExtendedCommunity.ExtendedCommunityOptions
    return leafs
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetYangName() string { return "route-extended-community" }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) SetParent(parent types.Entity) { routeExtendedCommunity.parent = parent }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetParent() types.Entity { return routeExtendedCommunity.parent }

func (routeExtendedCommunity *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetParentYangName() string { return "external-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "route-path-next-hop" { return "RoutePathNextHop" }
    if yname == "route-path-id" { return "RoutePathId" }
    if yname == "route-backup-path" { return "RouteBackupPath" }
    return ""
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-backup-path" {
        return &routePath.RouteBackupPath
    }
    return nil
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-backup-path"] = &routePath.RouteBackupPath
    return children
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = routePath.InterfaceName
    leafs["route-path-next-hop"] = routePath.RoutePathNextHop
    leafs["route-path-id"] = routePath.RoutePathId
    return leafs
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath) GetParentYangName() string { return "external-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetFilter() yfilter.YFilter { return routeBackupPath.YFilter }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) SetFilter(yf yfilter.YFilter) { routeBackupPath.YFilter = yf }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetGoName(yname string) string {
    if yname == "backup-route-interface-name" { return "BackupRouteInterfaceName" }
    if yname == "backup-route-next-hop-address" { return "BackupRouteNextHopAddress" }
    if yname == "backup-route-source" { return "BackupRouteSource" }
    if yname == "backup-metric" { return "BackupMetric" }
    if yname == "primary-path" { return "PrimaryPath" }
    if yname == "line-card-disjoint" { return "LineCardDisjoint" }
    if yname == "downstream" { return "Downstream" }
    if yname == "node-protect" { return "NodeProtect" }
    if yname == "srlg-disjoint" { return "SrlgDisjoint" }
    return ""
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetSegmentPath() string {
    return "route-backup-path"
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-route-interface-name"] = routeBackupPath.BackupRouteInterfaceName
    leafs["backup-route-next-hop-address"] = routeBackupPath.BackupRouteNextHopAddress
    leafs["backup-route-source"] = routeBackupPath.BackupRouteSource
    leafs["backup-metric"] = routeBackupPath.BackupMetric
    leafs["primary-path"] = routeBackupPath.PrimaryPath
    leafs["line-card-disjoint"] = routeBackupPath.LineCardDisjoint
    leafs["downstream"] = routeBackupPath.Downstream
    leafs["node-protect"] = routeBackupPath.NodeProtect
    leafs["srlg-disjoint"] = routeBackupPath.SrlgDisjoint
    return leafs
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetBundleName() string { return "cisco_ios_xr" }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetYangName() string { return "route-backup-path" }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) SetParent(parent types.Entity) { routeBackupPath.parent = parent }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetParent() types.Entity { return routeBackupPath.parent }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetParentYangName() string { return "route-path" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable
// OSPFv3 request list information for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request.
    Request []Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request
}

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetFilter() yfilter.YFilter { return requestListProcessTable.YFilter }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) SetFilter(yf yfilter.YFilter) { requestListProcessTable.YFilter = yf }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetGoName(yname string) string {
    if yname == "request" { return "Request" }
    return ""
}

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetSegmentPath() string {
    return "request-list-process-table"
}

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range requestListProcessTable.Request {
            if requestListProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request{}
        requestListProcessTable.Request = append(requestListProcessTable.Request, child)
        return &requestListProcessTable.Request[len(requestListProcessTable.Request)-1]
    }
    return nil
}

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestListProcessTable.Request {
        children[requestListProcessTable.Request[i].GetSegmentPath()] = &requestListProcessTable.Request[i]
    }
    return children
}

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetYangName() string { return "request-list-process-table" }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) SetParent(parent types.Entity) { requestListProcessTable.parent = parent }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetParent() types.Entity { return requestListProcessTable.parent }

func (requestListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request.
    Request []Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "request-neighbor-address" { return "RequestNeighborAddress" }
    if yname == "is-request-virtual-link" { return "IsRequestVirtualLink" }
    if yname == "request-virtual-link-id" { return "RequestVirtualLinkId" }
    if yname == "is-request-sham-link" { return "IsRequestShamLink" }
    if yname == "request-sham-link-id" { return "RequestShamLinkId" }
    if yname == "request" { return "Request" }
    return ""
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range request.Request {
            if request.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request{}
        request.Request = append(request.Request, child)
        return &request.Request[len(request.Request)-1]
    }
    return nil
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range request.Request {
        children[request.Request[i].GetSegmentPath()] = &request.Request[i]
    }
    return children
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = request.InterfaceName
    leafs["neighbor-address"] = request.NeighborAddress
    leafs["request-neighbor-address"] = request.RequestNeighborAddress
    leafs["is-request-virtual-link"] = request.IsRequestVirtualLink
    leafs["request-virtual-link-id"] = request.RequestVirtualLinkId
    leafs["is-request-sham-link"] = request.IsRequestShamLink
    leafs["request-sham-link-id"] = request.RequestShamLinkId
    return leafs
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request) GetParentYangName() string { return "request-list-process-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = request.HeaderLsaType
    leafs["header-lsa-age"] = request.HeaderLsaAge
    leafs["header-lsa-id"] = request.HeaderLsaId
    leafs["header-advertising-router"] = request.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = request.HeaderSequenceNumber
    return leafs
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_RequestListProcessTable_Request_Request) GetParentYangName() string { return "request" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink
// Virtual link information
type Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor on other end of this virtual link. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborId interface{}

    // Virtual link interface number . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkInterfaceNumber interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // If true, virtual link IP security is required . The type is bool.
    IsVirtualLinkIpSecurityRequired interface{}

    // If true, Virtual link IP security is active . The type is bool.
    IsVirtualLinkIpSecurityActive interface{}

    // Virtual link neighbor addresss . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborAddress interface{}

    // If true, the link runs as demand circuit. The type is bool.
    IsVirtualLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkDcBitlessLsa interface{}

    // Transit area id . The type is string.
    TransitAreaId interface{}

    // Interface on which this virtual link is formed. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Cost of the virtual link. The type is interface{} with range: 0..65535.
    VirtualLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    VirualLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    IsVirtualLinkPassive interface{}

    // If true, virtual link authentication is enabled . The type is bool.
    IsVirtualLinkAuthenticationEnabled interface{}

    // Virtual link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Virtual link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationTransmit interface{}

    // If true, virtual link encryption is enabled . The type is bool.
    IsVirtualLinkEncryptionEnabled interface{}

    // Virtual link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionSpi interface{}

    // Virtual link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionTransmitted interface{}

    // Virtual link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkEncryptedAuthenticationTransmitted interface{}

    // Neighbor information .
    VirtualLinkNeighbor Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetFilter() yfilter.YFilter { return virtualLink.YFilter }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) SetFilter(yf yfilter.YFilter) { virtualLink.YFilter = yf }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetGoName(yname string) string {
    if yname == "virtual-link-neighbor-id" { return "VirtualLinkNeighborId" }
    if yname == "virtual-link-interface-number" { return "VirtualLinkInterfaceNumber" }
    if yname == "virtual-link-state" { return "VirtualLinkState" }
    if yname == "is-virtual-link-ip-security-required" { return "IsVirtualLinkIpSecurityRequired" }
    if yname == "is-virtual-link-ip-security-active" { return "IsVirtualLinkIpSecurityActive" }
    if yname == "virtual-link-neighbor-address" { return "VirtualLinkNeighborAddress" }
    if yname == "is-virtual-link-demand-circuit" { return "IsVirtualLinkDemandCircuit" }
    if yname == "virtual-link-dc-bitless-lsa" { return "VirtualLinkDcBitlessLsa" }
    if yname == "transit-area-id" { return "TransitAreaId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "virtual-link-cost" { return "VirtualLinkCost" }
    if yname == "virual-link-transmission-delay" { return "VirualLinkTransmissionDelay" }
    if yname == "virtual-link-hello-interval" { return "VirtualLinkHelloInterval" }
    if yname == "virtual-link-dead-interval" { return "VirtualLinkDeadInterval" }
    if yname == "virtual-link-wait-interval" { return "VirtualLinkWaitInterval" }
    if yname == "virtual-link-retransmission-interval" { return "VirtualLinkRetransmissionInterval" }
    if yname == "virtual-link-next-hello" { return "VirtualLinkNextHello" }
    if yname == "is-virtual-link-passive" { return "IsVirtualLinkPassive" }
    if yname == "is-virtual-link-authentication-enabled" { return "IsVirtualLinkAuthenticationEnabled" }
    if yname == "virtual-link-authentication-spi" { return "VirtualLinkAuthenticationSpi" }
    if yname == "virtual-link-authentication-transmit" { return "VirtualLinkAuthenticationTransmit" }
    if yname == "is-virtual-link-encryption-enabled" { return "IsVirtualLinkEncryptionEnabled" }
    if yname == "virtual-link-encryption-spi" { return "VirtualLinkEncryptionSpi" }
    if yname == "virtual-link-encryption-transmitted" { return "VirtualLinkEncryptionTransmitted" }
    if yname == "virtual-link-encrypted-authentication-transmitted" { return "VirtualLinkEncryptedAuthenticationTransmitted" }
    if yname == "virtual-link-neighbor" { return "VirtualLinkNeighbor" }
    return ""
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetSegmentPath() string {
    return "virtual-link"
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-neighbor" {
        return &virtualLink.VirtualLinkNeighbor
    }
    return nil
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-neighbor"] = &virtualLink.VirtualLinkNeighbor
    return children
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["virtual-link-neighbor-id"] = virtualLink.VirtualLinkNeighborId
    leafs["virtual-link-interface-number"] = virtualLink.VirtualLinkInterfaceNumber
    leafs["virtual-link-state"] = virtualLink.VirtualLinkState
    leafs["is-virtual-link-ip-security-required"] = virtualLink.IsVirtualLinkIpSecurityRequired
    leafs["is-virtual-link-ip-security-active"] = virtualLink.IsVirtualLinkIpSecurityActive
    leafs["virtual-link-neighbor-address"] = virtualLink.VirtualLinkNeighborAddress
    leafs["is-virtual-link-demand-circuit"] = virtualLink.IsVirtualLinkDemandCircuit
    leafs["virtual-link-dc-bitless-lsa"] = virtualLink.VirtualLinkDcBitlessLsa
    leafs["transit-area-id"] = virtualLink.TransitAreaId
    leafs["interface-name"] = virtualLink.InterfaceName
    leafs["virtual-link-cost"] = virtualLink.VirtualLinkCost
    leafs["virual-link-transmission-delay"] = virtualLink.VirualLinkTransmissionDelay
    leafs["virtual-link-hello-interval"] = virtualLink.VirtualLinkHelloInterval
    leafs["virtual-link-dead-interval"] = virtualLink.VirtualLinkDeadInterval
    leafs["virtual-link-wait-interval"] = virtualLink.VirtualLinkWaitInterval
    leafs["virtual-link-retransmission-interval"] = virtualLink.VirtualLinkRetransmissionInterval
    leafs["virtual-link-next-hello"] = virtualLink.VirtualLinkNextHello
    leafs["is-virtual-link-passive"] = virtualLink.IsVirtualLinkPassive
    leafs["is-virtual-link-authentication-enabled"] = virtualLink.IsVirtualLinkAuthenticationEnabled
    leafs["virtual-link-authentication-spi"] = virtualLink.VirtualLinkAuthenticationSpi
    leafs["virtual-link-authentication-transmit"] = virtualLink.VirtualLinkAuthenticationTransmit
    leafs["is-virtual-link-encryption-enabled"] = virtualLink.IsVirtualLinkEncryptionEnabled
    leafs["virtual-link-encryption-spi"] = virtualLink.VirtualLinkEncryptionSpi
    leafs["virtual-link-encryption-transmitted"] = virtualLink.VirtualLinkEncryptionTransmitted
    leafs["virtual-link-encrypted-authentication-transmitted"] = virtualLink.VirtualLinkEncryptedAuthenticationTransmitted
    return leafs
}

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetYangName() string { return "virtual-link" }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) SetParent(parent types.Entity) { virtualLink.parent = parent }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetParent() types.Entity { return virtualLink.parent }

func (virtualLink *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor
// Neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // If true, hello suppressed . The type is bool.
    IsVirtualLinkHelloSuppressed interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // Virtual link retransmission information .
    VirtualLinkRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetFilter() yfilter.YFilter { return virtualLinkNeighbor.YFilter }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) SetFilter(yf yfilter.YFilter) { virtualLinkNeighbor.YFilter = yf }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetGoName(yname string) string {
    if yname == "is-virtual-link-hello-suppressed" { return "IsVirtualLinkHelloSuppressed" }
    if yname == "virtual-link-state" { return "VirtualLinkState" }
    if yname == "virtual-link-retransmission" { return "VirtualLinkRetransmission" }
    return ""
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetSegmentPath() string {
    return "virtual-link-neighbor"
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-retransmission" {
        return &virtualLinkNeighbor.VirtualLinkRetransmission
    }
    return nil
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-retransmission"] = &virtualLinkNeighbor.VirtualLinkRetransmission
    return children
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-virtual-link-hello-suppressed"] = virtualLinkNeighbor.IsVirtualLinkHelloSuppressed
    leafs["virtual-link-state"] = virtualLinkNeighbor.VirtualLinkState
    return leafs
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetYangName() string { return "virtual-link-neighbor" }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) SetParent(parent types.Entity) { virtualLinkNeighbor.parent = parent }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetParent() types.Entity { return virtualLinkNeighbor.parent }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
// Virtual link retransmission information 
type Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetFilter() yfilter.YFilter { return virtualLinkRetransmission.YFilter }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) SetFilter(yf yfilter.YFilter) { virtualLinkRetransmission.YFilter = yf }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetSegmentPath() string {
    return "virtual-link-retransmission"
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = virtualLinkRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = virtualLinkRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = virtualLinkRetransmission.AsFloodIndex
    leafs["link-flood-index"] = virtualLinkRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = virtualLinkRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = virtualLinkRetransmission.Retransmissions
    leafs["area-first-flood"] = virtualLinkRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = virtualLinkRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = virtualLinkRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = virtualLinkRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = virtualLinkRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = virtualLinkRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = virtualLinkRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = virtualLinkRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = virtualLinkRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = virtualLinkRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = virtualLinkRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = virtualLinkRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = virtualLinkRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = virtualLinkRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = virtualLinkRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = virtualLinkRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = virtualLinkRetransmission.LsaRetransmissionTimer
    return leafs
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetYangName() string { return "virtual-link-retransmission" }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) SetParent(parent types.Entity) { virtualLinkRetransmission.parent = parent }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetParent() types.Entity { return virtualLinkRetransmission.parent }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetParentYangName() string { return "virtual-link-neighbor" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable
// OSPFv3 flood list information table for all
// areas
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood.
    Flood []Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood
}

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetFilter() yfilter.YFilter { return floodListProcessTable.YFilter }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) SetFilter(yf yfilter.YFilter) { floodListProcessTable.YFilter = yf }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetGoName(yname string) string {
    if yname == "flood" { return "Flood" }
    return ""
}

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetSegmentPath() string {
    return "flood-list-process-table"
}

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flood" {
        for _, c := range floodListProcessTable.Flood {
            if floodListProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood{}
        floodListProcessTable.Flood = append(floodListProcessTable.Flood, child)
        return &floodListProcessTable.Flood[len(floodListProcessTable.Flood)-1]
    }
    return nil
}

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range floodListProcessTable.Flood {
        children[floodListProcessTable.Flood[i].GetSegmentPath()] = &floodListProcessTable.Flood[i]
    }
    return children
}

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetYangName() string { return "flood-list-process-table" }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) SetParent(parent types.Entity) { floodListProcessTable.parent = parent }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetParent() types.Entity { return floodListProcessTable.parent }

func (floodListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood.
    LinkFlood []Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood.
    AreaFlood []Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood.
    AsFlood []Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetFilter() yfilter.YFilter { return flood.YFilter }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) SetFilter(yf yfilter.YFilter) { flood.YFilter = yf }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "ls-transmission-timer" { return "LsTransmissionTimer" }
    if yname == "queue-length" { return "QueueLength" }
    if yname == "link-flood" { return "LinkFlood" }
    if yname == "area-flood" { return "AreaFlood" }
    if yname == "as-flood" { return "AsFlood" }
    return ""
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetSegmentPath() string {
    return "flood" + "[interface-name='" + fmt.Sprintf("%v", flood.InterfaceName) + "']"
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "link-flood" {
        for _, c := range flood.LinkFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood{}
        flood.LinkFlood = append(flood.LinkFlood, child)
        return &flood.LinkFlood[len(flood.LinkFlood)-1]
    }
    if childYangName == "area-flood" {
        for _, c := range flood.AreaFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood{}
        flood.AreaFlood = append(flood.AreaFlood, child)
        return &flood.AreaFlood[len(flood.AreaFlood)-1]
    }
    if childYangName == "as-flood" {
        for _, c := range flood.AsFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood{}
        flood.AsFlood = append(flood.AsFlood, child)
        return &flood.AsFlood[len(flood.AsFlood)-1]
    }
    return nil
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range flood.LinkFlood {
        children[flood.LinkFlood[i].GetSegmentPath()] = &flood.LinkFlood[i]
    }
    for i := range flood.AreaFlood {
        children[flood.AreaFlood[i].GetSegmentPath()] = &flood.AreaFlood[i]
    }
    for i := range flood.AsFlood {
        children[flood.AsFlood[i].GetSegmentPath()] = &flood.AsFlood[i]
    }
    return children
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = flood.InterfaceName
    leafs["ls-transmission-timer"] = flood.LsTransmissionTimer
    leafs["queue-length"] = flood.QueueLength
    return leafs
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetBundleName() string { return "cisco_ios_xr" }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetYangName() string { return "flood" }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) SetParent(parent types.Entity) { flood.parent = parent }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetParent() types.Entity { return flood.parent }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood) GetParentYangName() string { return "flood-list-process-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetFilter() yfilter.YFilter { return linkFlood.YFilter }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) SetFilter(yf yfilter.YFilter) { linkFlood.YFilter = yf }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetSegmentPath() string {
    return "link-flood"
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = linkFlood.HeaderLsaType
    leafs["header-lsa-age"] = linkFlood.HeaderLsaAge
    leafs["header-lsa-id"] = linkFlood.HeaderLsaId
    leafs["header-advertising-router"] = linkFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = linkFlood.HeaderSequenceNumber
    return leafs
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetBundleName() string { return "cisco_ios_xr" }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetYangName() string { return "link-flood" }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) SetParent(parent types.Entity) { linkFlood.parent = parent }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetParent() types.Entity { return linkFlood.parent }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_LinkFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetFilter() yfilter.YFilter { return areaFlood.YFilter }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) SetFilter(yf yfilter.YFilter) { areaFlood.YFilter = yf }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetSegmentPath() string {
    return "area-flood"
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = areaFlood.HeaderLsaType
    leafs["header-lsa-age"] = areaFlood.HeaderLsaAge
    leafs["header-lsa-id"] = areaFlood.HeaderLsaId
    leafs["header-advertising-router"] = areaFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = areaFlood.HeaderSequenceNumber
    return leafs
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetBundleName() string { return "cisco_ios_xr" }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetYangName() string { return "area-flood" }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) SetParent(parent types.Entity) { areaFlood.parent = parent }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetParent() types.Entity { return areaFlood.parent }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AreaFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetFilter() yfilter.YFilter { return asFlood.YFilter }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) SetFilter(yf yfilter.YFilter) { asFlood.YFilter = yf }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetSegmentPath() string {
    return "as-flood"
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = asFlood.HeaderLsaType
    leafs["header-lsa-age"] = asFlood.HeaderLsaAge
    leafs["header-lsa-id"] = asFlood.HeaderLsaId
    leafs["header-advertising-router"] = asFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = asFlood.HeaderSequenceNumber
    return leafs
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetBundleName() string { return "cisco_ios_xr" }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetYangName() string { return "as-flood" }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) SetParent(parent types.Entity) { asFlood.parent = parent }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetParent() types.Entity { return asFlood.parent }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_FloodListProcessTable_Flood_AsFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary
// Summarize OSPFv3 local RIB tables
type Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetFilter() yfilter.YFilter { return routeSummary.YFilter }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) SetFilter(yf yfilter.YFilter) { routeSummary.YFilter = yf }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "intra-area-route" { return "IntraAreaRoute" }
    if yname == "inter-area-route" { return "InterAreaRoute" }
    if yname == "extern-one-route" { return "ExternOneRoute" }
    if yname == "extern-two-route" { return "ExternTwoRoute" }
    if yname == "nssa-one-route" { return "NssaOneRoute" }
    if yname == "nssa-two-route" { return "NssaTwoRoute" }
    if yname == "total-sent-route" { return "TotalSentRoute" }
    if yname == "route-connected" { return "RouteConnected" }
    if yname == "redistribution-route" { return "RedistributionRoute" }
    if yname == "total-received-route" { return "TotalReceivedRoute" }
    return ""
}

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetSegmentPath() string {
    return "route-summary"
}

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeSummary.RouteId
    leafs["intra-area-route"] = routeSummary.IntraAreaRoute
    leafs["inter-area-route"] = routeSummary.InterAreaRoute
    leafs["extern-one-route"] = routeSummary.ExternOneRoute
    leafs["extern-two-route"] = routeSummary.ExternTwoRoute
    leafs["nssa-one-route"] = routeSummary.NssaOneRoute
    leafs["nssa-two-route"] = routeSummary.NssaTwoRoute
    leafs["total-sent-route"] = routeSummary.TotalSentRoute
    leafs["route-connected"] = routeSummary.RouteConnected
    leafs["redistribution-route"] = routeSummary.RedistributionRoute
    leafs["total-received-route"] = routeSummary.TotalReceivedRoute
    return leafs
}

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetBundleName() string { return "cisco_ios_xr" }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetYangName() string { return "route-summary" }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) SetParent(parent types.Entity) { routeSummary.parent = parent }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetParent() types.Entity { return routeSummary.parent }

func (routeSummary *Ospfv3_Processes_Process_Vrfs_Vrf_RouteSummary) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas
// OSPFv3 area table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per-area information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area.
    Area []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area
}

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetFilter() yfilter.YFilter { return areas.YFilter }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) SetFilter(yf yfilter.YFilter) { areas.YFilter = yf }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetGoName(yname string) string {
    if yname == "area" { return "Area" }
    return ""
}

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetSegmentPath() string {
    return "areas"
}

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area" {
        for _, c := range areas.Area {
            if areas.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area{}
        areas.Area = append(areas.Area, child)
        return &areas.Area[len(areas.Area)-1]
    }
    return nil
}

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areas.Area {
        children[areas.Area[i].GetSegmentPath()] = &areas.Area[i]
    }
    return children
}

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetBundleName() string { return "cisco_ios_xr" }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetYangName() string { return "areas" }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) SetParent(parent types.Entity) { areas.parent = parent }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetParent() types.Entity { return areas.parent }

func (areas *Ospfv3_Processes_Process_Vrfs_Vrf_Areas) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area
// Per-area information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // -2147483648..2147483647.
    AreaId interface{}

    // OSPFv3 area neighbor information table.
    NeighborDetailTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable

    // OSPFv3 interface brief information table for an area.
    InterfaceBriefTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable

    // OSPFv3 request list information in an area.
    RequestListTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable

    // OSPFv3 neighbor information table.
    NeighborTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable

    // OSPFv3 interface information table for an area.
    InterfaceTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable

    // OSPFv3 flood list information table for an area.
    FloodListTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable

    // OSPFv3 retransmission list information table in an area.
    RetransmissionListTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable
}

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetFilter() yfilter.YFilter { return area.YFilter }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) SetFilter(yf yfilter.YFilter) { area.YFilter = yf }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "neighbor-detail-table" { return "NeighborDetailTable" }
    if yname == "interface-brief-table" { return "InterfaceBriefTable" }
    if yname == "request-list-table" { return "RequestListTable" }
    if yname == "neighbor-table" { return "NeighborTable" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "flood-list-table" { return "FloodListTable" }
    if yname == "retransmission-list-table" { return "RetransmissionListTable" }
    if yname == "database-table" { return "DatabaseTable" }
    if yname == "database-summary-table" { return "DatabaseSummaryTable" }
    return ""
}

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetSegmentPath() string {
    return "area" + "[area-id='" + fmt.Sprintf("%v", area.AreaId) + "']"
}

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail-table" {
        return &area.NeighborDetailTable
    }
    if childYangName == "interface-brief-table" {
        return &area.InterfaceBriefTable
    }
    if childYangName == "request-list-table" {
        return &area.RequestListTable
    }
    if childYangName == "neighbor-table" {
        return &area.NeighborTable
    }
    if childYangName == "interface-table" {
        return &area.InterfaceTable
    }
    if childYangName == "flood-list-table" {
        return &area.FloodListTable
    }
    if childYangName == "retransmission-list-table" {
        return &area.RetransmissionListTable
    }
    if childYangName == "database-table" {
        return &area.DatabaseTable
    }
    if childYangName == "database-summary-table" {
        return &area.DatabaseSummaryTable
    }
    return nil
}

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail-table"] = &area.NeighborDetailTable
    children["interface-brief-table"] = &area.InterfaceBriefTable
    children["request-list-table"] = &area.RequestListTable
    children["neighbor-table"] = &area.NeighborTable
    children["interface-table"] = &area.InterfaceTable
    children["flood-list-table"] = &area.FloodListTable
    children["retransmission-list-table"] = &area.RetransmissionListTable
    children["database-table"] = &area.DatabaseTable
    children["database-summary-table"] = &area.DatabaseSummaryTable
    return children
}

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = area.AreaId
    return leafs
}

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetBundleName() string { return "cisco_ios_xr" }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetYangName() string { return "area" }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) SetParent(parent types.Entity) { area.parent = parent }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetParent() types.Entity { return area.parent }

func (area *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area) GetParentYangName() string { return "areas" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable
// OSPFv3 area neighbor information table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail.
    NeighborDetail []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail
}

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetFilter() yfilter.YFilter { return neighborDetailTable.YFilter }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) SetFilter(yf yfilter.YFilter) { neighborDetailTable.YFilter = yf }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetGoName(yname string) string {
    if yname == "neighbor-detail" { return "NeighborDetail" }
    return ""
}

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetSegmentPath() string {
    return "neighbor-detail-table"
}

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        for _, c := range neighborDetailTable.NeighborDetail {
            if neighborDetailTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail{}
        neighborDetailTable.NeighborDetail = append(neighborDetailTable.NeighborDetail, child)
        return &neighborDetailTable.NeighborDetail[len(neighborDetailTable.NeighborDetail)-1]
    }
    return nil
}

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborDetailTable.NeighborDetail {
        children[neighborDetailTable.NeighborDetail[i].GetSegmentPath()] = &neighborDetailTable.NeighborDetail[i]
    }
    return children
}

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetYangName() string { return "neighbor-detail-table" }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) SetParent(parent types.Entity) { neighborDetailTable.parent = parent }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetParent() types.Entity { return neighborDetailTable.parent }

func (neighborDetailTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighborDetail.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighborDetail.NeighborBfdInfo
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighborDetail.NeighborDetail
    children["neighbor-bfd-info"] = &neighborDetail.NeighborBfdInfo
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighborDetail.InterfaceName
    leafs["neighbor-address"] = neighborDetail.NeighborAddress
    leafs["neighbor-address-xr"] = neighborDetail.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighborDetail.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighborDetail.NeighborDrPriority
    leafs["neighbor-state"] = neighborDetail.NeighborState
    leafs["neighbor-designated-router"] = neighborDetail.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighborDetail.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighborDetail.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighborDetail.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighborDetail.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighborDetail.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighborDetail.IsNeighborShamLink
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetParentYangName() string { return "neighbor-detail-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable
// OSPFv3 interface brief information table for
// an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief.
    InterfaceBrief []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
}

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetFilter() yfilter.YFilter { return interfaceBriefTable.YFilter }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) SetFilter(yf yfilter.YFilter) { interfaceBriefTable.YFilter = yf }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetGoName(yname string) string {
    if yname == "interface-brief" { return "InterfaceBrief" }
    return ""
}

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetSegmentPath() string {
    return "interface-brief-table"
}

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-brief" {
        for _, c := range interfaceBriefTable.InterfaceBrief {
            if interfaceBriefTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief{}
        interfaceBriefTable.InterfaceBrief = append(interfaceBriefTable.InterfaceBrief, child)
        return &interfaceBriefTable.InterfaceBrief[len(interfaceBriefTable.InterfaceBrief)-1]
    }
    return nil
}

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceBriefTable.InterfaceBrief {
        children[interfaceBriefTable.InterfaceBrief[i].GetSegmentPath()] = &interfaceBriefTable.InterfaceBrief[i]
    }
    return children
}

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetYangName() string { return "interface-brief-table" }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) SetParent(parent types.Entity) { interfaceBriefTable.parent = parent }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetParent() types.Entity { return interfaceBriefTable.parent }

func (interfaceBriefTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetFilter() yfilter.YFilter { return interfaceBrief.YFilter }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) SetFilter(yf yfilter.YFilter) { interfaceBrief.YFilter = yf }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "interface-adjacent-neighbors" { return "InterfaceAdjacentNeighbors" }
    if yname == "network-type" { return "NetworkType" }
    return ""
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetSegmentPath() string {
    return "interface-brief" + "[interface-name='" + fmt.Sprintf("%v", interfaceBrief.InterfaceName) + "']"
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceBrief.InterfaceName
    leafs["interface-address"] = interfaceBrief.InterfaceAddress
    leafs["interface-link-cost"] = interfaceBrief.InterfaceLinkCost
    leafs["ospf-interface-state"] = interfaceBrief.OspfInterfaceState
    leafs["interface-neighbors"] = interfaceBrief.InterfaceNeighbors
    leafs["interface-adjacent-neighbors"] = interfaceBrief.InterfaceAdjacentNeighbors
    leafs["network-type"] = interfaceBrief.NetworkType
    return leafs
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetYangName() string { return "interface-brief" }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) SetParent(parent types.Entity) { interfaceBrief.parent = parent }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetParent() types.Entity { return interfaceBrief.parent }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetParentYangName() string { return "interface-brief-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable
// OSPFv3 request list information in an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request.
    Request []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request
}

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetFilter() yfilter.YFilter { return requestListTable.YFilter }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) SetFilter(yf yfilter.YFilter) { requestListTable.YFilter = yf }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetGoName(yname string) string {
    if yname == "request" { return "Request" }
    return ""
}

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetSegmentPath() string {
    return "request-list-table"
}

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range requestListTable.Request {
            if requestListTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request{}
        requestListTable.Request = append(requestListTable.Request, child)
        return &requestListTable.Request[len(requestListTable.Request)-1]
    }
    return nil
}

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestListTable.Request {
        children[requestListTable.Request[i].GetSegmentPath()] = &requestListTable.Request[i]
    }
    return children
}

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetBundleName() string { return "cisco_ios_xr" }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetYangName() string { return "request-list-table" }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) SetParent(parent types.Entity) { requestListTable.parent = parent }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetParent() types.Entity { return requestListTable.parent }

func (requestListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request.
    Request []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "request-neighbor-address" { return "RequestNeighborAddress" }
    if yname == "is-request-virtual-link" { return "IsRequestVirtualLink" }
    if yname == "request-virtual-link-id" { return "RequestVirtualLinkId" }
    if yname == "is-request-sham-link" { return "IsRequestShamLink" }
    if yname == "request-sham-link-id" { return "RequestShamLinkId" }
    if yname == "request" { return "Request" }
    return ""
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range request.Request {
            if request.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request{}
        request.Request = append(request.Request, child)
        return &request.Request[len(request.Request)-1]
    }
    return nil
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range request.Request {
        children[request.Request[i].GetSegmentPath()] = &request.Request[i]
    }
    return children
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = request.InterfaceName
    leafs["neighbor-address"] = request.NeighborAddress
    leafs["request-neighbor-address"] = request.RequestNeighborAddress
    leafs["is-request-virtual-link"] = request.IsRequestVirtualLink
    leafs["request-virtual-link-id"] = request.RequestVirtualLinkId
    leafs["is-request-sham-link"] = request.IsRequestShamLink
    leafs["request-sham-link-id"] = request.RequestShamLinkId
    return leafs
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request) GetParentYangName() string { return "request-list-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = request.HeaderLsaType
    leafs["header-lsa-age"] = request.HeaderLsaAge
    leafs["header-lsa-id"] = request.HeaderLsaId
    leafs["header-advertising-router"] = request.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = request.HeaderSequenceNumber
    return leafs
}

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RequestListTable_Request_Request) GetParentYangName() string { return "request" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable
// OSPFv3 neighbor information table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor.
    Neighbor []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor
}

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetFilter() yfilter.YFilter { return neighborTable.YFilter }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) SetFilter(yf yfilter.YFilter) { neighborTable.YFilter = yf }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetSegmentPath() string {
    return "neighbor-table"
}

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighborTable.Neighbor {
            if neighborTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor{}
        neighborTable.Neighbor = append(neighborTable.Neighbor, child)
        return &neighborTable.Neighbor[len(neighborTable.Neighbor)-1]
    }
    return nil
}

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborTable.Neighbor {
        children[neighborTable.Neighbor[i].GetSegmentPath()] = &neighborTable.Neighbor[i]
    }
    return children
}

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetYangName() string { return "neighbor-table" }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) SetParent(parent types.Entity) { neighborTable.parent = parent }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetParent() types.Entity { return neighborTable.parent }

func (neighborTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetSegmentPath() string {
    return "neighbor"
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighbor.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighbor.NeighborBfdInfo
    }
    return nil
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighbor.NeighborDetail
    children["neighbor-bfd-info"] = &neighbor.NeighborBfdInfo
    return children
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighbor.InterfaceName
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["neighbor-address-xr"] = neighbor.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighbor.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighbor.NeighborDrPriority
    leafs["neighbor-state"] = neighbor.NeighborState
    leafs["neighbor-designated-router"] = neighbor.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighbor.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighbor.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighbor.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighbor.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighbor.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighbor.IsNeighborShamLink
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor) GetParentYangName() string { return "neighbor-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable
// OSPFv3 interface information table for an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface.
    Interface []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface
}

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-state" { return "InterfaceState" }
    if yname == "is-interface-line-up" { return "IsInterfaceLineUp" }
    if yname == "is-interface-ip-security-required" { return "IsInterfaceIpSecurityRequired" }
    if yname == "is-interface-ip-security-active" { return "IsInterfaceIpSecurityActive" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-number" { return "InterfaceNumber" }
    if yname == "interface-router-id" { return "InterfaceRouterId" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "is-interface-flood-reduction" { return "IsInterfaceFloodReduction" }
    if yname == "is-demand-circuit-configured" { return "IsDemandCircuitConfigured" }
    if yname == "is-interface-demand-circuit" { return "IsInterfaceDemandCircuit" }
    if yname == "interface-dc-bitless-ls-as" { return "InterfaceDcBitlessLsAs" }
    if yname == "transmission-delay" { return "TransmissionDelay" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-priority" { return "InterfacePriority" }
    if yname == "is-designated-router" { return "IsDesignatedRouter" }
    if yname == "designated-router-id" { return "DesignatedRouterId" }
    if yname == "designated-router-address" { return "DesignatedRouterAddress" }
    if yname == "backup-designated-router-id" { return "BackupDesignatedRouterId" }
    if yname == "backup-designated-router-address" { return "BackupDesignatedRouterAddress" }
    if yname == "network-lsa-flush-timer" { return "NetworkLsaFlushTimer" }
    if yname == "is-interface-lsa-filtered" { return "IsInterfaceLsaFiltered" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "wait-interval" { return "WaitInterval" }
    if yname == "interface-retransmission-interval" { return "InterfaceRetransmissionInterval" }
    if yname == "next-hello-time" { return "NextHelloTime" }
    if yname == "interface-authentication-spi" { return "InterfaceAuthenticationSpi" }
    if yname == "interface-authentication-transmit" { return "InterfaceAuthenticationTransmit" }
    if yname == "is-interface-encryption-enabled" { return "IsInterfaceEncryptionEnabled" }
    if yname == "is-prefix-suppress" { return "IsPrefixSuppress" }
    if yname == "interface-encryption-spi" { return "InterfaceEncryptionSpi" }
    if yname == "interface-encryption-transmitted" { return "InterfaceEncryptionTransmitted" }
    if yname == "interface-encrypted-authentication-transmitted" { return "InterfaceEncryptedAuthenticationTransmitted" }
    if yname == "adjacent-neighbor" { return "AdjacentNeighbor" }
    if yname == "interface-references" { return "InterfaceReferences" }
    if yname == "configured-ldp-sync" { return "ConfiguredLdpSync" }
    if yname == "interface-ldp-sync" { return "InterfaceLdpSync" }
    if yname == "active-interface" { return "ActiveInterface" }
    if yname == "interface-bfd" { return "InterfaceBfd" }
    if yname == "interface-neighbor" { return "InterfaceNeighbor" }
    return ""
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "active-interface" {
        return &self.ActiveInterface
    }
    if childYangName == "interface-bfd" {
        return &self.InterfaceBfd
    }
    if childYangName == "interface-neighbor" {
        for _, c := range self.InterfaceNeighbor {
            if self.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor{}
        self.InterfaceNeighbor = append(self.InterfaceNeighbor, child)
        return &self.InterfaceNeighbor[len(self.InterfaceNeighbor)-1]
    }
    return nil
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["active-interface"] = &self.ActiveInterface
    children["interface-bfd"] = &self.InterfaceBfd
    for i := range self.InterfaceNeighbor {
        children[self.InterfaceNeighbor[i].GetSegmentPath()] = &self.InterfaceNeighbor[i]
    }
    return children
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-state"] = self.InterfaceState
    leafs["is-interface-line-up"] = self.IsInterfaceLineUp
    leafs["is-interface-ip-security-required"] = self.IsInterfaceIpSecurityRequired
    leafs["is-interface-ip-security-active"] = self.IsInterfaceIpSecurityActive
    leafs["interface-address"] = self.InterfaceAddress
    leafs["interface-number"] = self.InterfaceNumber
    leafs["interface-router-id"] = self.InterfaceRouterId
    leafs["network-type"] = self.NetworkType
    leafs["interface-link-cost"] = self.InterfaceLinkCost
    leafs["is-interface-flood-reduction"] = self.IsInterfaceFloodReduction
    leafs["is-demand-circuit-configured"] = self.IsDemandCircuitConfigured
    leafs["is-interface-demand-circuit"] = self.IsInterfaceDemandCircuit
    leafs["interface-dc-bitless-ls-as"] = self.InterfaceDcBitlessLsAs
    leafs["transmission-delay"] = self.TransmissionDelay
    leafs["ospf-interface-state"] = self.OspfInterfaceState
    leafs["interface-priority"] = self.InterfacePriority
    leafs["is-designated-router"] = self.IsDesignatedRouter
    leafs["designated-router-id"] = self.DesignatedRouterId
    leafs["designated-router-address"] = self.DesignatedRouterAddress
    leafs["backup-designated-router-id"] = self.BackupDesignatedRouterId
    leafs["backup-designated-router-address"] = self.BackupDesignatedRouterAddress
    leafs["network-lsa-flush-timer"] = self.NetworkLsaFlushTimer
    leafs["is-interface-lsa-filtered"] = self.IsInterfaceLsaFiltered
    leafs["hello-interval"] = self.HelloInterval
    leafs["dead-interval"] = self.DeadInterval
    leafs["wait-interval"] = self.WaitInterval
    leafs["interface-retransmission-interval"] = self.InterfaceRetransmissionInterval
    leafs["next-hello-time"] = self.NextHelloTime
    leafs["interface-authentication-spi"] = self.InterfaceAuthenticationSpi
    leafs["interface-authentication-transmit"] = self.InterfaceAuthenticationTransmit
    leafs["is-interface-encryption-enabled"] = self.IsInterfaceEncryptionEnabled
    leafs["is-prefix-suppress"] = self.IsPrefixSuppress
    leafs["interface-encryption-spi"] = self.InterfaceEncryptionSpi
    leafs["interface-encryption-transmitted"] = self.InterfaceEncryptionTransmitted
    leafs["interface-encrypted-authentication-transmitted"] = self.InterfaceEncryptedAuthenticationTransmitted
    leafs["adjacent-neighbor"] = self.AdjacentNeighbor
    leafs["interface-references"] = self.InterfaceReferences
    leafs["configured-ldp-sync"] = self.ConfiguredLdpSync
    leafs["interface-ldp-sync"] = self.InterfaceLdpSync
    return leafs
}

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetFilter() yfilter.YFilter { return activeInterface.YFilter }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) SetFilter(yf yfilter.YFilter) { activeInterface.YFilter = yf }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetGoName(yname string) string {
    if yname == "wait-time" { return "WaitTime" }
    if yname == "interface-area-flood-index" { return "InterfaceAreaFloodIndex" }
    if yname == "interface-as-flood-index" { return "InterfaceAsFloodIndex" }
    if yname == "interface-link-flood-index" { return "InterfaceLinkFloodIndex" }
    if yname == "flood-queue-length" { return "FloodQueueLength" }
    if yname == "interface-area-next-flood" { return "InterfaceAreaNextFlood" }
    if yname == "interface-area-next-flood-index" { return "InterfaceAreaNextFloodIndex" }
    if yname == "interface-as-next-flood" { return "InterfaceAsNextFlood" }
    if yname == "interface-as-next-flood-index" { return "InterfaceAsNextFloodIndex" }
    if yname == "interface-link-next-flood" { return "InterfaceLinkNextFlood" }
    if yname == "interface-link-next-index" { return "InterfaceLinkNextIndex" }
    if yname == "flood-scan-length" { return "FloodScanLength" }
    if yname == "maximum-flood-length" { return "MaximumFloodLength" }
    if yname == "last-flood-time" { return "LastFloodTime" }
    if yname == "maximum-flood-time" { return "MaximumFloodTime" }
    if yname == "interface-flood-pacing-timer" { return "InterfaceFloodPacingTimer" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "suppressed-hellos" { return "SuppressedHellos" }
    return ""
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetSegmentPath() string {
    return "active-interface"
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-time"] = activeInterface.WaitTime
    leafs["interface-area-flood-index"] = activeInterface.InterfaceAreaFloodIndex
    leafs["interface-as-flood-index"] = activeInterface.InterfaceAsFloodIndex
    leafs["interface-link-flood-index"] = activeInterface.InterfaceLinkFloodIndex
    leafs["flood-queue-length"] = activeInterface.FloodQueueLength
    leafs["interface-area-next-flood"] = activeInterface.InterfaceAreaNextFlood
    leafs["interface-area-next-flood-index"] = activeInterface.InterfaceAreaNextFloodIndex
    leafs["interface-as-next-flood"] = activeInterface.InterfaceAsNextFlood
    leafs["interface-as-next-flood-index"] = activeInterface.InterfaceAsNextFloodIndex
    leafs["interface-link-next-flood"] = activeInterface.InterfaceLinkNextFlood
    leafs["interface-link-next-index"] = activeInterface.InterfaceLinkNextIndex
    leafs["flood-scan-length"] = activeInterface.FloodScanLength
    leafs["maximum-flood-length"] = activeInterface.MaximumFloodLength
    leafs["last-flood-time"] = activeInterface.LastFloodTime
    leafs["maximum-flood-time"] = activeInterface.MaximumFloodTime
    leafs["interface-flood-pacing-timer"] = activeInterface.InterfaceFloodPacingTimer
    leafs["interface-neighbors"] = activeInterface.InterfaceNeighbors
    leafs["suppressed-hellos"] = activeInterface.SuppressedHellos
    return leafs
}

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetBundleName() string { return "cisco_ios_xr" }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetYangName() string { return "active-interface" }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) SetParent(parent types.Entity) { activeInterface.parent = parent }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetParent() types.Entity { return activeInterface.parent }

func (activeInterface *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetFilter() yfilter.YFilter { return interfaceBfd.YFilter }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) SetFilter(yf yfilter.YFilter) { interfaceBfd.YFilter = yf }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-interval" { return "BfdInterval" }
    if yname == "bfd-detection-multiplier" { return "BfdDetectionMultiplier" }
    return ""
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetSegmentPath() string {
    return "interface-bfd"
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = interfaceBfd.BfdIntfEnableMode
    leafs["bfd-interval"] = interfaceBfd.BfdInterval
    leafs["bfd-detection-multiplier"] = interfaceBfd.BfdDetectionMultiplier
    return leafs
}

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetYangName() string { return "interface-bfd" }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) SetParent(parent types.Entity) { interfaceBfd.parent = parent }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetParent() types.Entity { return interfaceBfd.parent }

func (interfaceBfd *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetFilter() yfilter.YFilter { return interfaceNeighbor.YFilter }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) SetFilter(yf yfilter.YFilter) { interfaceNeighbor.YFilter = yf }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetGoName(yname string) string {
    if yname == "interface-neighbor-id" { return "InterfaceNeighborId" }
    if yname == "interface-neighbor-cost" { return "InterfaceNeighborCost" }
    if yname == "is-neighbor-dr" { return "IsNeighborDr" }
    if yname == "is-neighbor-bdr" { return "IsNeighborBdr" }
    if yname == "is-hello-suppressed" { return "IsHelloSuppressed" }
    return ""
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetSegmentPath() string {
    return "interface-neighbor"
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-id"] = interfaceNeighbor.InterfaceNeighborId
    leafs["interface-neighbor-cost"] = interfaceNeighbor.InterfaceNeighborCost
    leafs["is-neighbor-dr"] = interfaceNeighbor.IsNeighborDr
    leafs["is-neighbor-bdr"] = interfaceNeighbor.IsNeighborBdr
    leafs["is-hello-suppressed"] = interfaceNeighbor.IsHelloSuppressed
    return leafs
}

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetYangName() string { return "interface-neighbor" }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) SetParent(parent types.Entity) { interfaceNeighbor.parent = parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetParent() types.Entity { return interfaceNeighbor.parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable
// OSPFv3 flood list information table for an
// area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood.
    Flood []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood
}

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetFilter() yfilter.YFilter { return floodListTable.YFilter }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) SetFilter(yf yfilter.YFilter) { floodListTable.YFilter = yf }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetGoName(yname string) string {
    if yname == "flood" { return "Flood" }
    return ""
}

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetSegmentPath() string {
    return "flood-list-table"
}

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flood" {
        for _, c := range floodListTable.Flood {
            if floodListTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood{}
        floodListTable.Flood = append(floodListTable.Flood, child)
        return &floodListTable.Flood[len(floodListTable.Flood)-1]
    }
    return nil
}

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range floodListTable.Flood {
        children[floodListTable.Flood[i].GetSegmentPath()] = &floodListTable.Flood[i]
    }
    return children
}

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetBundleName() string { return "cisco_ios_xr" }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetYangName() string { return "flood-list-table" }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) SetParent(parent types.Entity) { floodListTable.parent = parent }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetParent() types.Entity { return floodListTable.parent }

func (floodListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood.
    LinkFlood []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood.
    AreaFlood []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood.
    AsFlood []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetFilter() yfilter.YFilter { return flood.YFilter }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) SetFilter(yf yfilter.YFilter) { flood.YFilter = yf }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "ls-transmission-timer" { return "LsTransmissionTimer" }
    if yname == "queue-length" { return "QueueLength" }
    if yname == "link-flood" { return "LinkFlood" }
    if yname == "area-flood" { return "AreaFlood" }
    if yname == "as-flood" { return "AsFlood" }
    return ""
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetSegmentPath() string {
    return "flood" + "[interface-name='" + fmt.Sprintf("%v", flood.InterfaceName) + "']"
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "link-flood" {
        for _, c := range flood.LinkFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood{}
        flood.LinkFlood = append(flood.LinkFlood, child)
        return &flood.LinkFlood[len(flood.LinkFlood)-1]
    }
    if childYangName == "area-flood" {
        for _, c := range flood.AreaFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood{}
        flood.AreaFlood = append(flood.AreaFlood, child)
        return &flood.AreaFlood[len(flood.AreaFlood)-1]
    }
    if childYangName == "as-flood" {
        for _, c := range flood.AsFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood{}
        flood.AsFlood = append(flood.AsFlood, child)
        return &flood.AsFlood[len(flood.AsFlood)-1]
    }
    return nil
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range flood.LinkFlood {
        children[flood.LinkFlood[i].GetSegmentPath()] = &flood.LinkFlood[i]
    }
    for i := range flood.AreaFlood {
        children[flood.AreaFlood[i].GetSegmentPath()] = &flood.AreaFlood[i]
    }
    for i := range flood.AsFlood {
        children[flood.AsFlood[i].GetSegmentPath()] = &flood.AsFlood[i]
    }
    return children
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = flood.InterfaceName
    leafs["ls-transmission-timer"] = flood.LsTransmissionTimer
    leafs["queue-length"] = flood.QueueLength
    return leafs
}

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetBundleName() string { return "cisco_ios_xr" }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetYangName() string { return "flood" }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) SetParent(parent types.Entity) { flood.parent = parent }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetParent() types.Entity { return flood.parent }

func (flood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood) GetParentYangName() string { return "flood-list-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetFilter() yfilter.YFilter { return linkFlood.YFilter }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) SetFilter(yf yfilter.YFilter) { linkFlood.YFilter = yf }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetSegmentPath() string {
    return "link-flood"
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = linkFlood.HeaderLsaType
    leafs["header-lsa-age"] = linkFlood.HeaderLsaAge
    leafs["header-lsa-id"] = linkFlood.HeaderLsaId
    leafs["header-advertising-router"] = linkFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = linkFlood.HeaderSequenceNumber
    return leafs
}

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetBundleName() string { return "cisco_ios_xr" }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetYangName() string { return "link-flood" }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) SetParent(parent types.Entity) { linkFlood.parent = parent }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetParent() types.Entity { return linkFlood.parent }

func (linkFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetFilter() yfilter.YFilter { return areaFlood.YFilter }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) SetFilter(yf yfilter.YFilter) { areaFlood.YFilter = yf }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetSegmentPath() string {
    return "area-flood"
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = areaFlood.HeaderLsaType
    leafs["header-lsa-age"] = areaFlood.HeaderLsaAge
    leafs["header-lsa-id"] = areaFlood.HeaderLsaId
    leafs["header-advertising-router"] = areaFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = areaFlood.HeaderSequenceNumber
    return leafs
}

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetBundleName() string { return "cisco_ios_xr" }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetYangName() string { return "area-flood" }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) SetParent(parent types.Entity) { areaFlood.parent = parent }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetParent() types.Entity { return areaFlood.parent }

func (areaFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetFilter() yfilter.YFilter { return asFlood.YFilter }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) SetFilter(yf yfilter.YFilter) { asFlood.YFilter = yf }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetSegmentPath() string {
    return "as-flood"
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = asFlood.HeaderLsaType
    leafs["header-lsa-age"] = asFlood.HeaderLsaAge
    leafs["header-lsa-id"] = asFlood.HeaderLsaId
    leafs["header-advertising-router"] = asFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = asFlood.HeaderSequenceNumber
    return leafs
}

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetBundleName() string { return "cisco_ios_xr" }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetYangName() string { return "as-flood" }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) SetParent(parent types.Entity) { asFlood.parent = parent }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetParent() types.Entity { return asFlood.parent }

func (asFlood *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_FloodListTable_Flood_AsFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable
// OSPFv3 retransmission list information table
// in an area
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission.
    Retransmission []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission
}

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetFilter() yfilter.YFilter { return retransmissionListTable.YFilter }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) SetFilter(yf yfilter.YFilter) { retransmissionListTable.YFilter = yf }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetGoName(yname string) string {
    if yname == "retransmission" { return "Retransmission" }
    return ""
}

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetSegmentPath() string {
    return "retransmission-list-table"
}

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmission" {
        for _, c := range retransmissionListTable.Retransmission {
            if retransmissionListTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission{}
        retransmissionListTable.Retransmission = append(retransmissionListTable.Retransmission, child)
        return &retransmissionListTable.Retransmission[len(retransmissionListTable.Retransmission)-1]
    }
    return nil
}

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmissionListTable.Retransmission {
        children[retransmissionListTable.Retransmission[i].GetSegmentPath()] = &retransmissionListTable.Retransmission[i]
    }
    return children
}

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetYangName() string { return "retransmission-list-table" }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) SetParent(parent types.Entity) { retransmissionListTable.parent = parent }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetParent() types.Entity { return retransmissionListTable.parent }

func (retransmissionListTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetFilter() yfilter.YFilter { return retransmission.YFilter }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) SetFilter(yf yfilter.YFilter) { retransmission.YFilter = yf }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "retransmission-neighbor-address" { return "RetransmissionNeighborAddress" }
    if yname == "is-retransmissionvirtual-link" { return "IsRetransmissionvirtualLink" }
    if yname == "retransmissionvirtual-link-id" { return "RetransmissionvirtualLinkId" }
    if yname == "is-retransmission-sham-link" { return "IsRetransmissionShamLink" }
    if yname == "retransmission-sham-link-id" { return "RetransmissionShamLinkId" }
    if yname == "retransmission-timer" { return "RetransmissionTimer" }
    if yname == "retransmission-length" { return "RetransmissionLength" }
    if yname == "retransmissionvirtual-link-db" { return "RetransmissionvirtualLinkDb" }
    if yname == "retransmission-area-db" { return "RetransmissionAreaDb" }
    if yname == "retransmission-asdb" { return "RetransmissionAsdb" }
    return ""
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetSegmentPath() string {
    return "retransmission"
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmissionvirtual-link-db" {
        for _, c := range retransmission.RetransmissionvirtualLinkDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb{}
        retransmission.RetransmissionvirtualLinkDb = append(retransmission.RetransmissionvirtualLinkDb, child)
        return &retransmission.RetransmissionvirtualLinkDb[len(retransmission.RetransmissionvirtualLinkDb)-1]
    }
    if childYangName == "retransmission-area-db" {
        for _, c := range retransmission.RetransmissionAreaDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb{}
        retransmission.RetransmissionAreaDb = append(retransmission.RetransmissionAreaDb, child)
        return &retransmission.RetransmissionAreaDb[len(retransmission.RetransmissionAreaDb)-1]
    }
    if childYangName == "retransmission-asdb" {
        for _, c := range retransmission.RetransmissionAsdb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb{}
        retransmission.RetransmissionAsdb = append(retransmission.RetransmissionAsdb, child)
        return &retransmission.RetransmissionAsdb[len(retransmission.RetransmissionAsdb)-1]
    }
    return nil
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmission.RetransmissionvirtualLinkDb {
        children[retransmission.RetransmissionvirtualLinkDb[i].GetSegmentPath()] = &retransmission.RetransmissionvirtualLinkDb[i]
    }
    for i := range retransmission.RetransmissionAreaDb {
        children[retransmission.RetransmissionAreaDb[i].GetSegmentPath()] = &retransmission.RetransmissionAreaDb[i]
    }
    for i := range retransmission.RetransmissionAsdb {
        children[retransmission.RetransmissionAsdb[i].GetSegmentPath()] = &retransmission.RetransmissionAsdb[i]
    }
    return children
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = retransmission.InterfaceName
    leafs["neighbor-address"] = retransmission.NeighborAddress
    leafs["retransmission-neighbor-address"] = retransmission.RetransmissionNeighborAddress
    leafs["is-retransmissionvirtual-link"] = retransmission.IsRetransmissionvirtualLink
    leafs["retransmissionvirtual-link-id"] = retransmission.RetransmissionvirtualLinkId
    leafs["is-retransmission-sham-link"] = retransmission.IsRetransmissionShamLink
    leafs["retransmission-sham-link-id"] = retransmission.RetransmissionShamLinkId
    leafs["retransmission-timer"] = retransmission.RetransmissionTimer
    leafs["retransmission-length"] = retransmission.RetransmissionLength
    return leafs
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetBundleName() string { return "cisco_ios_xr" }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetYangName() string { return "retransmission" }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) SetParent(parent types.Entity) { retransmission.parent = parent }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetParent() types.Entity { return retransmission.parent }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission) GetParentYangName() string { return "retransmission-list-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetFilter() yfilter.YFilter { return retransmissionvirtualLinkDb.YFilter }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) SetFilter(yf yfilter.YFilter) { retransmissionvirtualLinkDb.YFilter = yf }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetSegmentPath() string {
    return "retransmissionvirtual-link-db"
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionvirtualLinkDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionvirtualLinkDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionvirtualLinkDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionvirtualLinkDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionvirtualLinkDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetYangName() string { return "retransmissionvirtual-link-db" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) SetParent(parent types.Entity) { retransmissionvirtualLinkDb.parent = parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetParent() types.Entity { return retransmissionvirtualLinkDb.parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetFilter() yfilter.YFilter { return retransmissionAreaDb.YFilter }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) SetFilter(yf yfilter.YFilter) { retransmissionAreaDb.YFilter = yf }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetSegmentPath() string {
    return "retransmission-area-db"
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAreaDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAreaDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAreaDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAreaDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAreaDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetYangName() string { return "retransmission-area-db" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) SetParent(parent types.Entity) { retransmissionAreaDb.parent = parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetParent() types.Entity { return retransmissionAreaDb.parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetFilter() yfilter.YFilter { return retransmissionAsdb.YFilter }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) SetFilter(yf yfilter.YFilter) { retransmissionAsdb.YFilter = yf }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetSegmentPath() string {
    return "retransmission-asdb"
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAsdb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAsdb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAsdb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAsdb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAsdb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetYangName() string { return "retransmission-asdb" }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) SetParent(parent types.Entity) { retransmissionAsdb.parent = parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetParent() types.Entity { return retransmissionAsdb.parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetFilter() yfilter.YFilter { return databaseTable.YFilter }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) SetFilter(yf yfilter.YFilter) { databaseTable.YFilter = yf }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetGoName(yname string) string {
    if yname == "lsa-table" { return "LsaTable" }
    if yname == "lsa-internal-table" { return "LsaInternalTable" }
    return ""
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetSegmentPath() string {
    return "database-table"
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-table" {
        return &databaseTable.LsaTable
    }
    if childYangName == "lsa-internal-table" {
        return &databaseTable.LsaInternalTable
    }
    return nil
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-table"] = &databaseTable.LsaTable
    children["lsa-internal-table"] = &databaseTable.LsaInternalTable
    return children
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetYangName() string { return "database-table" }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) SetParent(parent types.Entity) { databaseTable.parent = parent }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetParent() types.Entity { return databaseTable.parent }

func (databaseTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa.
    Lsa []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetFilter() yfilter.YFilter { return lsaTable.YFilter }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) SetFilter(yf yfilter.YFilter) { lsaTable.YFilter = yf }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetSegmentPath() string {
    return "lsa-table"
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaTable.Lsa {
            if lsaTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa{}
        lsaTable.Lsa = append(lsaTable.Lsa, child)
        return &lsaTable.Lsa[len(lsaTable.Lsa)-1]
    }
    return nil
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaTable.Lsa {
        children[lsaTable.Lsa[i].GetSegmentPath()] = &lsaTable.Lsa[i]
    }
    return children
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetYangName() string { return "lsa-table" }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) SetParent(parent types.Entity) { lsaTable.parent = parent }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetParent() types.Entity { return lsaTable.parent }

func (lsaTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetParentYangName() string { return "lsa-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetFilter() yfilter.YFilter { return lsaInternalTable.YFilter }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) SetFilter(yf yfilter.YFilter) { lsaInternalTable.YFilter = yf }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetSegmentPath() string {
    return "lsa-internal-table"
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaInternalTable.Lsa {
            if lsaInternalTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa{}
        lsaInternalTable.Lsa = append(lsaInternalTable.Lsa, child)
        return &lsaInternalTable.Lsa[len(lsaInternalTable.Lsa)-1]
    }
    return nil
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaInternalTable.Lsa {
        children[lsaInternalTable.Lsa[i].GetSegmentPath()] = &lsaInternalTable.Lsa[i]
    }
    return children
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetYangName() string { return "lsa-internal-table" }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) SetParent(parent types.Entity) { lsaInternalTable.parent = parent }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetParent() types.Entity { return lsaInternalTable.parent }

func (lsaInternalTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetParentYangName() string { return "lsa-internal-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetFilter() yfilter.YFilter { return databaseSummaryTable.YFilter }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) SetFilter(yf yfilter.YFilter) { databaseSummaryTable.YFilter = yf }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetGoName(yname string) string {
    if yname == "database-summary" { return "DatabaseSummary" }
    return ""
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetSegmentPath() string {
    return "database-summary-table"
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-summary" {
        return &databaseSummaryTable.DatabaseSummary
    }
    return nil
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-summary"] = &databaseSummaryTable.DatabaseSummary
    return children
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetYangName() string { return "database-summary-table" }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) SetParent(parent types.Entity) { databaseSummaryTable.parent = parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetParent() types.Entity { return databaseSummaryTable.parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetFilter() yfilter.YFilter { return databaseSummary.YFilter }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) SetFilter(yf yfilter.YFilter) { databaseSummary.YFilter = yf }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetGoName(yname string) string {
    if yname == "database-router-id" { return "DatabaseRouterId" }
    if yname == "is-opaque-database-capable" { return "IsOpaqueDatabaseCapable" }
    if yname == "database-counters" { return "DatabaseCounters" }
    if yname == "area-database" { return "AreaDatabase" }
    return ""
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetSegmentPath() string {
    return "database-summary"
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-counters" {
        return &databaseSummary.DatabaseCounters
    }
    if childYangName == "area-database" {
        for _, c := range databaseSummary.AreaDatabase {
            if databaseSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase{}
        databaseSummary.AreaDatabase = append(databaseSummary.AreaDatabase, child)
        return &databaseSummary.AreaDatabase[len(databaseSummary.AreaDatabase)-1]
    }
    return nil
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-counters"] = &databaseSummary.DatabaseCounters
    for i := range databaseSummary.AreaDatabase {
        children[databaseSummary.AreaDatabase[i].GetSegmentPath()] = &databaseSummary.AreaDatabase[i]
    }
    return children
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-router-id"] = databaseSummary.DatabaseRouterId
    leafs["is-opaque-database-capable"] = databaseSummary.IsOpaqueDatabaseCapable
    return leafs
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetYangName() string { return "database-summary" }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) SetParent(parent types.Entity) { databaseSummary.parent = parent }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetParent() types.Entity { return databaseSummary.parent }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetParentYangName() string { return "database-summary-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetFilter() yfilter.YFilter { return databaseCounters.YFilter }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetFilter(yf yfilter.YFilter) { databaseCounters.YFilter = yf }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetSegmentPath() string {
    return "database-counters"
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = databaseCounters.Lsa
    leafs["deleted-lsa"] = databaseCounters.DeletedLsa
    leafs["max-age-lsa"] = databaseCounters.MaxAgeLsa
    leafs["lsa-checksum"] = databaseCounters.LsaChecksum
    return leafs
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleName() string { return "cisco_ios_xr" }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetYangName() string { return "database-counters" }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetParent(parent types.Entity) { databaseCounters.parent = parent }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParent() types.Entity { return databaseCounters.parent }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetFilter() yfilter.YFilter { return areaDatabase.YFilter }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetFilter(yf yfilter.YFilter) { areaDatabase.YFilter = yf }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetGoName(yname string) string {
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "area-database-summary" { return "AreaDatabaseSummary" }
    return ""
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetSegmentPath() string {
    return "area-database"
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-database-summary" {
        return &areaDatabase.AreaDatabaseSummary
    }
    return nil
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["area-database-summary"] = &areaDatabase.AreaDatabaseSummary
    return children
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-area-id"] = areaDatabase.LsaAreaId
    return leafs
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetYangName() string { return "area-database" }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetParent(parent types.Entity) { areaDatabase.parent = parent }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParent() types.Entity { return areaDatabase.parent }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetFilter() yfilter.YFilter { return areaDatabaseSummary.YFilter }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetFilter(yf yfilter.YFilter) { areaDatabaseSummary.YFilter = yf }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetSegmentPath() string {
    return "area-database-summary"
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = areaDatabaseSummary.Lsa
    leafs["deleted-lsa"] = areaDatabaseSummary.DeletedLsa
    leafs["max-age-lsa"] = areaDatabaseSummary.MaxAgeLsa
    leafs["lsa-checksum"] = areaDatabaseSummary.LsaChecksum
    return leafs
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetYangName() string { return "area-database-summary" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetParent(parent types.Entity) { areaDatabaseSummary.parent = parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParent() types.Entity { return areaDatabaseSummary.parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParentYangName() string { return "area-database" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes
// OSPFv3 internal route information table
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 internal route information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute.
    InternalRoute []Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute
}

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetFilter() yfilter.YFilter { return internalRoutes.YFilter }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) SetFilter(yf yfilter.YFilter) { internalRoutes.YFilter = yf }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetGoName(yname string) string {
    if yname == "internal-route" { return "InternalRoute" }
    return ""
}

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetSegmentPath() string {
    return "internal-routes"
}

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "internal-route" {
        for _, c := range internalRoutes.InternalRoute {
            if internalRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute{}
        internalRoutes.InternalRoute = append(internalRoutes.InternalRoute, child)
        return &internalRoutes.InternalRoute[len(internalRoutes.InternalRoute)-1]
    }
    return nil
}

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range internalRoutes.InternalRoute {
        children[internalRoutes.InternalRoute[i].GetSegmentPath()] = &internalRoutes.InternalRoute[i]
    }
    return children
}

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetYangName() string { return "internal-routes" }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) SetParent(parent types.Entity) { internalRoutes.parent = parent }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetParent() types.Entity { return internalRoutes.parent }

func (internalRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute
// OSPFv3 internal route information
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route area ID . The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology

    // List of topology source information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource.
    RouteSource []Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath.
    RoutePath []Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath
}

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetFilter() yfilter.YFilter { return internalRoute.YFilter }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) SetFilter(yf yfilter.YFilter) { internalRoute.YFilter = yf }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-area-id" { return "RouteAreaId" }
    if yname == "route-topology" { return "RouteTopology" }
    if yname == "route-source" { return "RouteSource" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetSegmentPath() string {
    return "internal-route"
}

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-topology" {
        return &internalRoute.RouteTopology
    }
    if childYangName == "route-source" {
        for _, c := range internalRoute.RouteSource {
            if internalRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource{}
        internalRoute.RouteSource = append(internalRoute.RouteSource, child)
        return &internalRoute.RouteSource[len(internalRoute.RouteSource)-1]
    }
    if childYangName == "route-path" {
        for _, c := range internalRoute.RoutePath {
            if internalRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath{}
        internalRoute.RoutePath = append(internalRoute.RoutePath, child)
        return &internalRoute.RoutePath[len(internalRoute.RoutePath)-1]
    }
    return nil
}

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-topology"] = &internalRoute.RouteTopology
    for i := range internalRoute.RouteSource {
        children[internalRoute.RouteSource[i].GetSegmentPath()] = &internalRoute.RouteSource[i]
    }
    for i := range internalRoute.RoutePath {
        children[internalRoute.RoutePath[i].GetSegmentPath()] = &internalRoute.RoutePath[i]
    }
    return children
}

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = internalRoute.Prefix
    leafs["prefix-length"] = internalRoute.PrefixLength
    leafs["route-area-id"] = internalRoute.RouteAreaId
    return leafs
}

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetBundleName() string { return "cisco_ios_xr" }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetYangName() string { return "internal-route" }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) SetParent(parent types.Entity) { internalRoute.parent = parent }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetParent() types.Entity { return internalRoute.parent }

func (internalRoute *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute) GetParentYangName() string { return "internal-routes" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetFilter() yfilter.YFilter { return routeTopology.YFilter }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) SetFilter(yf yfilter.YFilter) { routeTopology.YFilter = yf }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "route-distance" { return "RouteDistance" }
    if yname == "route-cost" { return "RouteCost" }
    if yname == "route-type" { return "RouteType" }
    return ""
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetSegmentPath() string {
    return "route-topology"
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeTopology.RouteId
    leafs["route-distance"] = routeTopology.RouteDistance
    leafs["route-cost"] = routeTopology.RouteCost
    leafs["route-type"] = routeTopology.RouteType
    return leafs
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetBundleName() string { return "cisco_ios_xr" }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetYangName() string { return "route-topology" }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) SetParent(parent types.Entity) { routeTopology.parent = parent }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetParent() types.Entity { return routeTopology.parent }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteTopology) GetParentYangName() string { return "internal-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource
// List of topology source information
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route source of the advertising router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceAdverstingRouter interface{}

    // Route source ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceId interface{}

    // Type of LSA advertising the prefix, see RFC5340. The type is interface{}
    // with range: 0..4294967295.
    RouteSourceLsaType interface{}
}

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetFilter() yfilter.YFilter { return routeSource.YFilter }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) SetFilter(yf yfilter.YFilter) { routeSource.YFilter = yf }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetGoName(yname string) string {
    if yname == "route-source-adversting-router" { return "RouteSourceAdverstingRouter" }
    if yname == "route-source-id" { return "RouteSourceId" }
    if yname == "route-source-lsa-type" { return "RouteSourceLsaType" }
    return ""
}

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetSegmentPath() string {
    return "route-source"
}

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-source-adversting-router"] = routeSource.RouteSourceAdverstingRouter
    leafs["route-source-id"] = routeSource.RouteSourceId
    leafs["route-source-lsa-type"] = routeSource.RouteSourceLsaType
    return leafs
}

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetBundleName() string { return "cisco_ios_xr" }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetYangName() string { return "route-source" }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) SetParent(parent types.Entity) { routeSource.parent = parent }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetParent() types.Entity { return routeSource.parent }

func (routeSource *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RouteSource) GetParentYangName() string { return "internal-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "route-path-next-hop" { return "RoutePathNextHop" }
    if yname == "route-path-id" { return "RoutePathId" }
    if yname == "route-backup-path" { return "RouteBackupPath" }
    return ""
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-backup-path" {
        return &routePath.RouteBackupPath
    }
    return nil
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-backup-path"] = &routePath.RouteBackupPath
    return children
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = routePath.InterfaceName
    leafs["route-path-next-hop"] = routePath.RoutePathNextHop
    leafs["route-path-id"] = routePath.RoutePathId
    return leafs
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath) GetParentYangName() string { return "internal-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetFilter() yfilter.YFilter { return routeBackupPath.YFilter }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) SetFilter(yf yfilter.YFilter) { routeBackupPath.YFilter = yf }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetGoName(yname string) string {
    if yname == "backup-route-interface-name" { return "BackupRouteInterfaceName" }
    if yname == "backup-route-next-hop-address" { return "BackupRouteNextHopAddress" }
    if yname == "backup-route-source" { return "BackupRouteSource" }
    if yname == "backup-metric" { return "BackupMetric" }
    if yname == "primary-path" { return "PrimaryPath" }
    if yname == "line-card-disjoint" { return "LineCardDisjoint" }
    if yname == "downstream" { return "Downstream" }
    if yname == "node-protect" { return "NodeProtect" }
    if yname == "srlg-disjoint" { return "SrlgDisjoint" }
    return ""
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetSegmentPath() string {
    return "route-backup-path"
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-route-interface-name"] = routeBackupPath.BackupRouteInterfaceName
    leafs["backup-route-next-hop-address"] = routeBackupPath.BackupRouteNextHopAddress
    leafs["backup-route-source"] = routeBackupPath.BackupRouteSource
    leafs["backup-metric"] = routeBackupPath.BackupMetric
    leafs["primary-path"] = routeBackupPath.PrimaryPath
    leafs["line-card-disjoint"] = routeBackupPath.LineCardDisjoint
    leafs["downstream"] = routeBackupPath.Downstream
    leafs["node-protect"] = routeBackupPath.NodeProtect
    leafs["srlg-disjoint"] = routeBackupPath.SrlgDisjoint
    return leafs
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetBundleName() string { return "cisco_ios_xr" }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetYangName() string { return "route-backup-path" }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) SetParent(parent types.Entity) { routeBackupPath.parent = parent }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetParent() types.Entity { return routeBackupPath.parent }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetParentYangName() string { return "route-path" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas
// Protocol area table 
type Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area information . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea.
    ProtocolArea []Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea
}

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetFilter() yfilter.YFilter { return protocolAreas.YFilter }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) SetFilter(yf yfilter.YFilter) { protocolAreas.YFilter = yf }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetGoName(yname string) string {
    if yname == "protocol-area" { return "ProtocolArea" }
    return ""
}

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetSegmentPath() string {
    return "protocol-areas"
}

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-area" {
        for _, c := range protocolAreas.ProtocolArea {
            if protocolAreas.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea{}
        protocolAreas.ProtocolArea = append(protocolAreas.ProtocolArea, child)
        return &protocolAreas.ProtocolArea[len(protocolAreas.ProtocolArea)-1]
    }
    return nil
}

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolAreas.ProtocolArea {
        children[protocolAreas.ProtocolArea[i].GetSegmentPath()] = &protocolAreas.ProtocolArea[i]
    }
    return children
}

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetBundleName() string { return "cisco_ios_xr" }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetYangName() string { return "protocol-areas" }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) SetParent(parent types.Entity) { protocolAreas.parent = parent }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetParent() types.Entity { return protocolAreas.parent }

func (protocolAreas *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea
// Area information 
type Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AreaId interface{}

    // Area ID string in decimal and dotted-decimal format. The type is string
    // with length: 0..16.
    ProtocolAreaId interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}

    // Interface list. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface.
    ProtocolInterface []Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface
}

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetFilter() yfilter.YFilter { return protocolArea.YFilter }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) SetFilter(yf yfilter.YFilter) { protocolArea.YFilter = yf }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "protocol-area-id" { return "ProtocolAreaId" }
    if yname == "distribute-list-in" { return "DistributeListIn" }
    if yname == "protocol-interface" { return "ProtocolInterface" }
    return ""
}

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetSegmentPath() string {
    return "protocol-area" + "[area-id='" + fmt.Sprintf("%v", protocolArea.AreaId) + "']"
}

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-interface" {
        for _, c := range protocolArea.ProtocolInterface {
            if protocolArea.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface{}
        protocolArea.ProtocolInterface = append(protocolArea.ProtocolInterface, child)
        return &protocolArea.ProtocolInterface[len(protocolArea.ProtocolInterface)-1]
    }
    return nil
}

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolArea.ProtocolInterface {
        children[protocolArea.ProtocolInterface[i].GetSegmentPath()] = &protocolArea.ProtocolInterface[i]
    }
    return children
}

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = protocolArea.AreaId
    leafs["protocol-area-id"] = protocolArea.ProtocolAreaId
    leafs["distribute-list-in"] = protocolArea.DistributeListIn
    return leafs
}

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetBundleName() string { return "cisco_ios_xr" }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetYangName() string { return "protocol-area" }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) SetParent(parent types.Entity) { protocolArea.parent = parent }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetParent() types.Entity { return protocolArea.parent }

func (protocolArea *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea) GetParentYangName() string { return "protocol-areas" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface
// Interface list
type Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetFilter() yfilter.YFilter { return protocolInterface.YFilter }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) SetFilter(yf yfilter.YFilter) { protocolInterface.YFilter = yf }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "distribute-list-in" { return "DistributeListIn" }
    return ""
}

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetSegmentPath() string {
    return "protocol-interface"
}

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = protocolInterface.InterfaceName
    leafs["distribute-list-in"] = protocolInterface.DistributeListIn
    return leafs
}

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetBundleName() string { return "cisco_ios_xr" }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetYangName() string { return "protocol-interface" }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) SetParent(parent types.Entity) { protocolInterface.parent = parent }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetParent() types.Entity { return protocolInterface.parent }

func (protocolInterface *Ospfv3_Processes_Process_Vrfs_Vrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetParentYangName() string { return "protocol-area" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes
// OSPFv3 connected route information table
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 connected route information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute.
    ConnectedRoute []Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute
}

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetFilter() yfilter.YFilter { return connectedRoutes.YFilter }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) SetFilter(yf yfilter.YFilter) { connectedRoutes.YFilter = yf }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetGoName(yname string) string {
    if yname == "connected-route" { return "ConnectedRoute" }
    return ""
}

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetSegmentPath() string {
    return "connected-routes"
}

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-route" {
        for _, c := range connectedRoutes.ConnectedRoute {
            if connectedRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute{}
        connectedRoutes.ConnectedRoute = append(connectedRoutes.ConnectedRoute, child)
        return &connectedRoutes.ConnectedRoute[len(connectedRoutes.ConnectedRoute)-1]
    }
    return nil
}

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range connectedRoutes.ConnectedRoute {
        children[connectedRoutes.ConnectedRoute[i].GetSegmentPath()] = &connectedRoutes.ConnectedRoute[i]
    }
    return children
}

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetYangName() string { return "connected-routes" }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) SetParent(parent types.Entity) { connectedRoutes.parent = parent }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetParent() types.Entity { return connectedRoutes.parent }

func (connectedRoutes *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute
// OSPFv3 connected route information
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath.
    RoutePath []Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath
}

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetFilter() yfilter.YFilter { return connectedRoute.YFilter }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) SetFilter(yf yfilter.YFilter) { connectedRoute.YFilter = yf }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-topology" { return "RouteTopology" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetSegmentPath() string {
    return "connected-route"
}

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-topology" {
        return &connectedRoute.RouteTopology
    }
    if childYangName == "route-path" {
        for _, c := range connectedRoute.RoutePath {
            if connectedRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath{}
        connectedRoute.RoutePath = append(connectedRoute.RoutePath, child)
        return &connectedRoute.RoutePath[len(connectedRoute.RoutePath)-1]
    }
    return nil
}

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-topology"] = &connectedRoute.RouteTopology
    for i := range connectedRoute.RoutePath {
        children[connectedRoute.RoutePath[i].GetSegmentPath()] = &connectedRoute.RoutePath[i]
    }
    return children
}

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = connectedRoute.Prefix
    leafs["prefix-length"] = connectedRoute.PrefixLength
    return leafs
}

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetBundleName() string { return "cisco_ios_xr" }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetYangName() string { return "connected-route" }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) SetParent(parent types.Entity) { connectedRoute.parent = parent }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetParent() types.Entity { return connectedRoute.parent }

func (connectedRoute *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute) GetParentYangName() string { return "connected-routes" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetFilter() yfilter.YFilter { return routeTopology.YFilter }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) SetFilter(yf yfilter.YFilter) { routeTopology.YFilter = yf }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "route-distance" { return "RouteDistance" }
    if yname == "route-cost" { return "RouteCost" }
    if yname == "route-type" { return "RouteType" }
    return ""
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetSegmentPath() string {
    return "route-topology"
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeTopology.RouteId
    leafs["route-distance"] = routeTopology.RouteDistance
    leafs["route-cost"] = routeTopology.RouteCost
    leafs["route-type"] = routeTopology.RouteType
    return leafs
}

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetBundleName() string { return "cisco_ios_xr" }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetYangName() string { return "route-topology" }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) SetParent(parent types.Entity) { routeTopology.parent = parent }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetParent() types.Entity { return routeTopology.parent }

func (routeTopology *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetParentYangName() string { return "connected-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "route-path-next-hop" { return "RoutePathNextHop" }
    if yname == "route-path-id" { return "RoutePathId" }
    if yname == "route-backup-path" { return "RouteBackupPath" }
    return ""
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-backup-path" {
        return &routePath.RouteBackupPath
    }
    return nil
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-backup-path"] = &routePath.RouteBackupPath
    return children
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = routePath.InterfaceName
    leafs["route-path-next-hop"] = routePath.RoutePathNextHop
    leafs["route-path-id"] = routePath.RoutePathId
    return leafs
}

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetParentYangName() string { return "connected-route" }

// Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetFilter() yfilter.YFilter { return routeBackupPath.YFilter }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) SetFilter(yf yfilter.YFilter) { routeBackupPath.YFilter = yf }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetGoName(yname string) string {
    if yname == "backup-route-interface-name" { return "BackupRouteInterfaceName" }
    if yname == "backup-route-next-hop-address" { return "BackupRouteNextHopAddress" }
    if yname == "backup-route-source" { return "BackupRouteSource" }
    if yname == "backup-metric" { return "BackupMetric" }
    if yname == "primary-path" { return "PrimaryPath" }
    if yname == "line-card-disjoint" { return "LineCardDisjoint" }
    if yname == "downstream" { return "Downstream" }
    if yname == "node-protect" { return "NodeProtect" }
    if yname == "srlg-disjoint" { return "SrlgDisjoint" }
    return ""
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetSegmentPath() string {
    return "route-backup-path"
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-route-interface-name"] = routeBackupPath.BackupRouteInterfaceName
    leafs["backup-route-next-hop-address"] = routeBackupPath.BackupRouteNextHopAddress
    leafs["backup-route-source"] = routeBackupPath.BackupRouteSource
    leafs["backup-metric"] = routeBackupPath.BackupMetric
    leafs["primary-path"] = routeBackupPath.PrimaryPath
    leafs["line-card-disjoint"] = routeBackupPath.LineCardDisjoint
    leafs["downstream"] = routeBackupPath.Downstream
    leafs["node-protect"] = routeBackupPath.NodeProtect
    leafs["srlg-disjoint"] = routeBackupPath.SrlgDisjoint
    return leafs
}

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetBundleName() string { return "cisco_ios_xr" }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetYangName() string { return "route-backup-path" }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) SetParent(parent types.Entity) { routeBackupPath.parent = parent }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetParent() types.Entity { return routeBackupPath.parent }

func (routeBackupPath *Ospfv3_Processes_Process_Vrfs_Vrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetParentYangName() string { return "route-path" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics
// Container for Statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol table.
    ProtocolStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats

    // OSPFv3 RIB batch statistics.
    SpfStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats

    // OSPF Prefix SPF Prioritization statistics.
    RawioStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats

    // OSPF Prefix SPF Prioritization statistics.
    PrefixPriorityStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats

    // OSPFv3 RIB batch statistics.
    VrfRibBatchStats Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats
}

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetFilter() yfilter.YFilter { return vrfStatistics.YFilter }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) SetFilter(yf yfilter.YFilter) { vrfStatistics.YFilter = yf }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetGoName(yname string) string {
    if yname == "protocol-stats" { return "ProtocolStats" }
    if yname == "spf-stats" { return "SpfStats" }
    if yname == "rawio-stats" { return "RawioStats" }
    if yname == "prefix-priority-stats" { return "PrefixPriorityStats" }
    if yname == "vrf-rib-batch-stats" { return "VrfRibBatchStats" }
    return ""
}

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetSegmentPath() string {
    return "vrf-statistics"
}

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-stats" {
        return &vrfStatistics.ProtocolStats
    }
    if childYangName == "spf-stats" {
        return &vrfStatistics.SpfStats
    }
    if childYangName == "rawio-stats" {
        return &vrfStatistics.RawioStats
    }
    if childYangName == "prefix-priority-stats" {
        return &vrfStatistics.PrefixPriorityStats
    }
    if childYangName == "vrf-rib-batch-stats" {
        return &vrfStatistics.VrfRibBatchStats
    }
    return nil
}

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-stats"] = &vrfStatistics.ProtocolStats
    children["spf-stats"] = &vrfStatistics.SpfStats
    children["rawio-stats"] = &vrfStatistics.RawioStats
    children["prefix-priority-stats"] = &vrfStatistics.PrefixPriorityStats
    children["vrf-rib-batch-stats"] = &vrfStatistics.VrfRibBatchStats
    return children
}

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetYangName() string { return "vrf-statistics" }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) SetParent(parent types.Entity) { vrfStatistics.parent = parent }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetParent() types.Entity { return vrfStatistics.parent }

func (vrfStatistics *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats
// Protocol table
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol statistics for an interface. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat.
    ProtocolStat []Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat
}

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetFilter() yfilter.YFilter { return protocolStats.YFilter }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) SetFilter(yf yfilter.YFilter) { protocolStats.YFilter = yf }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetGoName(yname string) string {
    if yname == "protocol-stat" { return "ProtocolStat" }
    return ""
}

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetSegmentPath() string {
    return "protocol-stats"
}

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-stat" {
        for _, c := range protocolStats.ProtocolStat {
            if protocolStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat{}
        protocolStats.ProtocolStat = append(protocolStats.ProtocolStat, child)
        return &protocolStats.ProtocolStat[len(protocolStats.ProtocolStat)-1]
    }
    return nil
}

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolStats.ProtocolStat {
        children[protocolStats.ProtocolStat[i].GetSegmentPath()] = &protocolStats.ProtocolStat[i]
    }
    return children
}

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetBundleName() string { return "cisco_ios_xr" }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetYangName() string { return "protocol-stats" }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) SetParent(parent types.Entity) { protocolStats.parent = parent }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetParent() types.Entity { return protocolStats.parent }

func (protocolStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat
// Protocol statistics for an interface
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Total inputs packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalInPackets interface{}

    // Hello packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloInPackets interface{}

    // Database Description Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInPackets interface{}

    // Database Description LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInLsAs interface{}

    // LSA Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInPackets interface{}

    // LS Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInLsAs interface{}

    // LS Updates Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInPackets interface{}

    // LS Updates ignored. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInIgnored interface{}

    // LS Updates LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInLsAs interface{}

    // LS Acks Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInPackets interface{}

    // LS Ack LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInLsAs interface{}

    // Total Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalOutPackets interface{}

    // Hello Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloOutPackets interface{}

    // Database Description Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutPackets interface{}

    // Database Description LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutLsAs interface{}

    // LS Request Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutPackets interface{}

    // LS Reuqests LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutLsAs interface{}

    // LS Update Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutPackets interface{}

    // LS Update LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutLsAs interface{}

    // LS Ack Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutPackets interface{}

    // LS Ack LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutLsAs interface{}

    // Dropped in GS. The type is interface{} with range: 0..18446744073709551615.
    DroppedInGs interface{}

    // Checksum Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErr interface{}
}

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetFilter() yfilter.YFilter { return protocolStat.YFilter }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) SetFilter(yf yfilter.YFilter) { protocolStat.YFilter = yf }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "total-in-packets" { return "TotalInPackets" }
    if yname == "hello-in-packets" { return "HelloInPackets" }
    if yname == "dbdes-in-packets" { return "DbdesInPackets" }
    if yname == "dbdes-in-ls-as" { return "DbdesInLsAs" }
    if yname == "ls-req-in-packets" { return "LsReqInPackets" }
    if yname == "ls-req-in-ls-as" { return "LsReqInLsAs" }
    if yname == "ls-upd-in-packets" { return "LsUpdInPackets" }
    if yname == "ls-upd-in-ignored" { return "LsUpdInIgnored" }
    if yname == "ls-upd-in-ls-as" { return "LsUpdInLsAs" }
    if yname == "ls-ack-in-packets" { return "LsAckInPackets" }
    if yname == "ls-ack-in-ls-as" { return "LsAckInLsAs" }
    if yname == "total-out-packets" { return "TotalOutPackets" }
    if yname == "hello-out-packets" { return "HelloOutPackets" }
    if yname == "dbdes-out-packets" { return "DbdesOutPackets" }
    if yname == "dbdes-out-ls-as" { return "DbdesOutLsAs" }
    if yname == "ls-req-out-packets" { return "LsReqOutPackets" }
    if yname == "ls-req-out-ls-as" { return "LsReqOutLsAs" }
    if yname == "ls-upd-out-packets" { return "LsUpdOutPackets" }
    if yname == "ls-upd-out-ls-as" { return "LsUpdOutLsAs" }
    if yname == "ls-ack-out-packets" { return "LsAckOutPackets" }
    if yname == "ls-ack-out-ls-as" { return "LsAckOutLsAs" }
    if yname == "dropped-in-gs" { return "DroppedInGs" }
    if yname == "checksum-err" { return "ChecksumErr" }
    return ""
}

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetSegmentPath() string {
    return "protocol-stat" + "[interface-name='" + fmt.Sprintf("%v", protocolStat.InterfaceName) + "']"
}

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = protocolStat.InterfaceName
    leafs["total-in-packets"] = protocolStat.TotalInPackets
    leafs["hello-in-packets"] = protocolStat.HelloInPackets
    leafs["dbdes-in-packets"] = protocolStat.DbdesInPackets
    leafs["dbdes-in-ls-as"] = protocolStat.DbdesInLsAs
    leafs["ls-req-in-packets"] = protocolStat.LsReqInPackets
    leafs["ls-req-in-ls-as"] = protocolStat.LsReqInLsAs
    leafs["ls-upd-in-packets"] = protocolStat.LsUpdInPackets
    leafs["ls-upd-in-ignored"] = protocolStat.LsUpdInIgnored
    leafs["ls-upd-in-ls-as"] = protocolStat.LsUpdInLsAs
    leafs["ls-ack-in-packets"] = protocolStat.LsAckInPackets
    leafs["ls-ack-in-ls-as"] = protocolStat.LsAckInLsAs
    leafs["total-out-packets"] = protocolStat.TotalOutPackets
    leafs["hello-out-packets"] = protocolStat.HelloOutPackets
    leafs["dbdes-out-packets"] = protocolStat.DbdesOutPackets
    leafs["dbdes-out-ls-as"] = protocolStat.DbdesOutLsAs
    leafs["ls-req-out-packets"] = protocolStat.LsReqOutPackets
    leafs["ls-req-out-ls-as"] = protocolStat.LsReqOutLsAs
    leafs["ls-upd-out-packets"] = protocolStat.LsUpdOutPackets
    leafs["ls-upd-out-ls-as"] = protocolStat.LsUpdOutLsAs
    leafs["ls-ack-out-packets"] = protocolStat.LsAckOutPackets
    leafs["ls-ack-out-ls-as"] = protocolStat.LsAckOutLsAs
    leafs["dropped-in-gs"] = protocolStat.DroppedInGs
    leafs["checksum-err"] = protocolStat.ChecksumErr
    return leafs
}

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetBundleName() string { return "cisco_ios_xr" }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetYangName() string { return "protocol-stat" }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) SetParent(parent types.Entity) { protocolStat.parent = parent }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetParent() types.Entity { return protocolStat.parent }

func (protocolStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_ProtocolStats_ProtocolStat) GetParentYangName() string { return "protocol-stats" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF statistics header.
    SpfHeader Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader

    // List of SPF run-time statistics. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime.
    SpfRuntime []Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime
}

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetFilter() yfilter.YFilter { return spfStats.YFilter }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) SetFilter(yf yfilter.YFilter) { spfStats.YFilter = yf }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetGoName(yname string) string {
    if yname == "spf-header" { return "SpfHeader" }
    if yname == "spf-runtime" { return "SpfRuntime" }
    return ""
}

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetSegmentPath() string {
    return "spf-stats"
}

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-header" {
        return &spfStats.SpfHeader
    }
    if childYangName == "spf-runtime" {
        for _, c := range spfStats.SpfRuntime {
            if spfStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime{}
        spfStats.SpfRuntime = append(spfStats.SpfRuntime, child)
        return &spfStats.SpfRuntime[len(spfStats.SpfRuntime)-1]
    }
    return nil
}

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-header"] = &spfStats.SpfHeader
    for i := range spfStats.SpfRuntime {
        children[spfStats.SpfRuntime[i].GetSegmentPath()] = &spfStats.SpfRuntime[i]
    }
    return children
}

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetBundleName() string { return "cisco_ios_xr" }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetYangName() string { return "spf-stats" }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) SetParent(parent types.Entity) { spfStats.parent = parent }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetParent() types.Entity { return spfStats.parent }

func (spfStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader
// SPF statistics header
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderRouterId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    HeaderSpFs interface{}

    // List of Areas with SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary.
    AreaSummary []Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
}

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetFilter() yfilter.YFilter { return spfHeader.YFilter }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) SetFilter(yf yfilter.YFilter) { spfHeader.YFilter = yf }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetGoName(yname string) string {
    if yname == "header-router-id" { return "HeaderRouterId" }
    if yname == "header-sp-fs" { return "HeaderSpFs" }
    if yname == "area-summary" { return "AreaSummary" }
    return ""
}

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetSegmentPath() string {
    return "spf-header"
}

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-summary" {
        for _, c := range spfHeader.AreaSummary {
            if spfHeader.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary{}
        spfHeader.AreaSummary = append(spfHeader.AreaSummary, child)
        return &spfHeader.AreaSummary[len(spfHeader.AreaSummary)-1]
    }
    return nil
}

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfHeader.AreaSummary {
        children[spfHeader.AreaSummary[i].GetSegmentPath()] = &spfHeader.AreaSummary[i]
    }
    return children
}

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-router-id"] = spfHeader.HeaderRouterId
    leafs["header-sp-fs"] = spfHeader.HeaderSpFs
    return leafs
}

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetBundleName() string { return "cisco_ios_xr" }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetYangName() string { return "spf-header" }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) SetParent(parent types.Entity) { spfHeader.parent = parent }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetParent() types.Entity { return spfHeader.parent }

func (spfHeader *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader) GetParentYangName() string { return "spf-stats" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
// List of Areas with SPF statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID of the area SPF statistics. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}
}

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetFilter() yfilter.YFilter { return areaSummary.YFilter }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) SetFilter(yf yfilter.YFilter) { areaSummary.YFilter = yf }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "sp-fs" { return "SpFs" }
    return ""
}

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetSegmentPath() string {
    return "area-summary"
}

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaSummary.AreaId
    leafs["sp-fs"] = areaSummary.SpFs
    return leafs
}

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetBundleName() string { return "cisco_ios_xr" }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetYangName() string { return "area-summary" }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) SetParent(parent types.Entity) { areaSummary.parent = parent }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetParent() types.Entity { return areaSummary.parent }

func (areaSummary *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetParentYangName() string { return "spf-header" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime
// List of SPF run-time statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF calculation start time. The type is interface{} with range:
    // 0..4294967295.
    StartTime interface{}

    // Number of routes added to RIB. The type is interface{} with range:
    // 0..4294967295.
    RibAddRoutes interface{}

    // Number of routes deleted from RIB. The type is interface{} with range:
    // 0..4294967295.
    RibDeleteRoutes interface{}

    // Reasons for triggering an SPF calculation Bit 1 - Router LSA update Bit 2 -
    // Network LSA update Bit 3 - Inter-Area Prefix LSA update Bit 4 - Inter-Area
    // Router LSA update Bit 5 - AS External LSA update Bit 6 - MOSPF LSA update
    // Bit 7 - Type 7 AS External LSA update Bit 8 - Link LSA update Bit 9 -
    // Prefix LSA update. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReasonFlags interface{}

    // Number of LSA changes triggering an SPF calculation. The type is
    // interface{} with range: -32768..32767.
    LsaChanges interface{}

    // Global SPF times.
    GlobalTime Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime

    // List of LSAs triggering the SPF calculation. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa.
    Lsa []Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa

    // List of per-area SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat.
    AreaStat []Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
}

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetFilter() yfilter.YFilter { return spfRuntime.YFilter }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) SetFilter(yf yfilter.YFilter) { spfRuntime.YFilter = yf }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "rib-add-routes" { return "RibAddRoutes" }
    if yname == "rib-delete-routes" { return "RibDeleteRoutes" }
    if yname == "reason-flags" { return "ReasonFlags" }
    if yname == "lsa-changes" { return "LsaChanges" }
    if yname == "global-time" { return "GlobalTime" }
    if yname == "lsa" { return "Lsa" }
    if yname == "area-stat" { return "AreaStat" }
    return ""
}

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetSegmentPath() string {
    return "spf-runtime"
}

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-time" {
        return &spfRuntime.GlobalTime
    }
    if childYangName == "lsa" {
        for _, c := range spfRuntime.Lsa {
            if spfRuntime.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa{}
        spfRuntime.Lsa = append(spfRuntime.Lsa, child)
        return &spfRuntime.Lsa[len(spfRuntime.Lsa)-1]
    }
    if childYangName == "area-stat" {
        for _, c := range spfRuntime.AreaStat {
            if spfRuntime.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat{}
        spfRuntime.AreaStat = append(spfRuntime.AreaStat, child)
        return &spfRuntime.AreaStat[len(spfRuntime.AreaStat)-1]
    }
    return nil
}

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-time"] = &spfRuntime.GlobalTime
    for i := range spfRuntime.Lsa {
        children[spfRuntime.Lsa[i].GetSegmentPath()] = &spfRuntime.Lsa[i]
    }
    for i := range spfRuntime.AreaStat {
        children[spfRuntime.AreaStat[i].GetSegmentPath()] = &spfRuntime.AreaStat[i]
    }
    return children
}

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = spfRuntime.StartTime
    leafs["rib-add-routes"] = spfRuntime.RibAddRoutes
    leafs["rib-delete-routes"] = spfRuntime.RibDeleteRoutes
    leafs["reason-flags"] = spfRuntime.ReasonFlags
    leafs["lsa-changes"] = spfRuntime.LsaChanges
    return leafs
}

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetBundleName() string { return "cisco_ios_xr" }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetYangName() string { return "spf-runtime" }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) SetParent(parent types.Entity) { spfRuntime.parent = parent }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetParent() types.Entity { return spfRuntime.parent }

func (spfRuntime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime) GetParentYangName() string { return "spf-stats" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime
// Global SPF times
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetFilter() yfilter.YFilter { return globalTime.YFilter }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) SetFilter(yf yfilter.YFilter) { globalTime.YFilter = yf }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetGoName(yname string) string {
    if yname == "dijkstra" { return "Dijkstra" }
    if yname == "intra-prefix" { return "IntraPrefix" }
    if yname == "intra-prefix-del" { return "IntraPrefixDel" }
    if yname == "inter-prefix" { return "InterPrefix" }
    if yname == "inter-prefix-del" { return "InterPrefixDel" }
    if yname == "external-prefix" { return "ExternalPrefix" }
    if yname == "external-prefix-del" { return "ExternalPrefixDel" }
    if yname == "rib-add" { return "RibAdd" }
    if yname == "rib-del" { return "RibDel" }
    return ""
}

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetSegmentPath() string {
    return "global-time"
}

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra"] = globalTime.Dijkstra
    leafs["intra-prefix"] = globalTime.IntraPrefix
    leafs["intra-prefix-del"] = globalTime.IntraPrefixDel
    leafs["inter-prefix"] = globalTime.InterPrefix
    leafs["inter-prefix-del"] = globalTime.InterPrefixDel
    leafs["external-prefix"] = globalTime.ExternalPrefix
    leafs["external-prefix-del"] = globalTime.ExternalPrefixDel
    leafs["rib-add"] = globalTime.RibAdd
    leafs["rib-del"] = globalTime.RibDel
    return leafs
}

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetBundleName() string { return "cisco_ios_xr" }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetYangName() string { return "global-time" }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) SetParent(parent types.Entity) { globalTime.parent = parent }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetParent() types.Entity { return globalTime.parent }

func (globalTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa
// List of LSAs triggering the SPF calculation
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    LsaAreaId interface{}

    // Advertising router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaAdvertisingRouter interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // LSA type. The type is interface{} with range: 0..255.
    LsaType interface{}

    // If true, the LSA change is a flush. The type is bool.
    LsaFlush interface{}
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetGoName(yname string) string {
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-advertising-router" { return "LsaAdvertisingRouter" }
    if yname == "lsa-id" { return "LsaId" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-flush" { return "LsaFlush" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-area-id"] = lsa.LsaAreaId
    leafs["lsa-advertising-router"] = lsa.LsaAdvertisingRouter
    leafs["lsa-id"] = lsa.LsaId
    leafs["lsa-type"] = lsa.LsaType
    leafs["lsa-flush"] = lsa.LsaFlush
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
// List of per-area SPF statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID for area of these SPF statistics. The type is interface{} with
    // range: 0..4294967295.
    SpfStatAreaId interface{}

    // Counts of LSA types triggering an SPF calculation. The type is slice of
    // interface{} with range: 0..4294967295.
    SpfStatLsaTypeCount []interface{}

    // SPF time calculations.
    SpfStatTime Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
}

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetFilter() yfilter.YFilter { return areaStat.YFilter }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) SetFilter(yf yfilter.YFilter) { areaStat.YFilter = yf }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetGoName(yname string) string {
    if yname == "spf-stat-area-id" { return "SpfStatAreaId" }
    if yname == "spf-stat-lsa-type-count" { return "SpfStatLsaTypeCount" }
    if yname == "spf-stat-time" { return "SpfStatTime" }
    return ""
}

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetSegmentPath() string {
    return "area-stat"
}

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-stat-time" {
        return &areaStat.SpfStatTime
    }
    return nil
}

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-stat-time"] = &areaStat.SpfStatTime
    return children
}

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-stat-area-id"] = areaStat.SpfStatAreaId
    leafs["spf-stat-lsa-type-count"] = areaStat.SpfStatLsaTypeCount
    return leafs
}

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetBundleName() string { return "cisco_ios_xr" }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetYangName() string { return "area-stat" }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) SetParent(parent types.Entity) { areaStat.parent = parent }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetParent() types.Entity { return areaStat.parent }

func (areaStat *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
// SPF time calculations
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetFilter() yfilter.YFilter { return spfStatTime.YFilter }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) SetFilter(yf yfilter.YFilter) { spfStatTime.YFilter = yf }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetGoName(yname string) string {
    if yname == "dijkstra" { return "Dijkstra" }
    if yname == "intra-prefix" { return "IntraPrefix" }
    if yname == "intra-prefix-del" { return "IntraPrefixDel" }
    if yname == "inter-prefix" { return "InterPrefix" }
    if yname == "inter-prefix-del" { return "InterPrefixDel" }
    if yname == "external-prefix" { return "ExternalPrefix" }
    if yname == "external-prefix-del" { return "ExternalPrefixDel" }
    if yname == "rib-add" { return "RibAdd" }
    if yname == "rib-del" { return "RibDel" }
    return ""
}

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetSegmentPath() string {
    return "spf-stat-time"
}

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra"] = spfStatTime.Dijkstra
    leafs["intra-prefix"] = spfStatTime.IntraPrefix
    leafs["intra-prefix-del"] = spfStatTime.IntraPrefixDel
    leafs["inter-prefix"] = spfStatTime.InterPrefix
    leafs["inter-prefix-del"] = spfStatTime.InterPrefixDel
    leafs["external-prefix"] = spfStatTime.ExternalPrefix
    leafs["external-prefix-del"] = spfStatTime.ExternalPrefixDel
    leafs["rib-add"] = spfStatTime.RibAdd
    leafs["rib-del"] = spfStatTime.RibDel
    return leafs
}

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetBundleName() string { return "cisco_ios_xr" }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetYangName() string { return "spf-stat-time" }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) SetParent(parent types.Entity) { spfStatTime.parent = parent }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetParent() types.Entity { return spfStatTime.parent }

func (spfStatTime *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetParentYangName() string { return "area-stat" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Raw Connections Open. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnOpen interface{}

    // Raw Connections Close. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnClose interface{}

    // Raw Connections Error. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnError interface{}

    // Received Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InPackets interface{}

    // Received Bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    InBytes interface{}

    // Received Long Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InLongPackets interface{}

    // In Malloc Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InMallocDrops interface{}

    // In Handle Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InHandleDrops interface{}

    // In Short Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InShortDrops interface{}

    // In Error Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InErrorDrops interface{}

    // In IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InIpsecDrops interface{}

    // In Queue Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InQueueDrops interface{}

    // Packets Sent. The type is interface{} with range: 0..18446744073709551615.
    OutPackets interface{}

    // Sent Bytes. The type is interface{} with range: 0..18446744073709551615.
    // Units are byte.
    OutBytes interface{}

    // No FileDescriptor Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNofdDrops interface{}

    // Error Drops. The type is interface{} with range: 0..18446744073709551615.
    OutErrorDrops interface{}

    // Out IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutIpsecDrops interface{}

    // No Packet Buffers. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNopakDrops interface{}

    // PAK API Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPakapiErrors interface{}

    // Raw Connection State. The type is interface{} with range: 0..4294967295.
    RawConnState interface{}
}

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetFilter() yfilter.YFilter { return rawioStats.YFilter }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) SetFilter(yf yfilter.YFilter) { rawioStats.YFilter = yf }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetGoName(yname string) string {
    if yname == "raw-conn-open" { return "RawConnOpen" }
    if yname == "raw-conn-close" { return "RawConnClose" }
    if yname == "raw-conn-error" { return "RawConnError" }
    if yname == "in-packets" { return "InPackets" }
    if yname == "in-bytes" { return "InBytes" }
    if yname == "in-long-packets" { return "InLongPackets" }
    if yname == "in-malloc-drops" { return "InMallocDrops" }
    if yname == "in-handle-drops" { return "InHandleDrops" }
    if yname == "in-short-drops" { return "InShortDrops" }
    if yname == "in-error-drops" { return "InErrorDrops" }
    if yname == "in-ipsec-drops" { return "InIpsecDrops" }
    if yname == "in-queue-drops" { return "InQueueDrops" }
    if yname == "out-packets" { return "OutPackets" }
    if yname == "out-bytes" { return "OutBytes" }
    if yname == "out-nofd-drops" { return "OutNofdDrops" }
    if yname == "out-error-drops" { return "OutErrorDrops" }
    if yname == "out-ipsec-drops" { return "OutIpsecDrops" }
    if yname == "out-nopak-drops" { return "OutNopakDrops" }
    if yname == "out-pakapi-errors" { return "OutPakapiErrors" }
    if yname == "raw-conn-state" { return "RawConnState" }
    return ""
}

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetSegmentPath() string {
    return "rawio-stats"
}

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["raw-conn-open"] = rawioStats.RawConnOpen
    leafs["raw-conn-close"] = rawioStats.RawConnClose
    leafs["raw-conn-error"] = rawioStats.RawConnError
    leafs["in-packets"] = rawioStats.InPackets
    leafs["in-bytes"] = rawioStats.InBytes
    leafs["in-long-packets"] = rawioStats.InLongPackets
    leafs["in-malloc-drops"] = rawioStats.InMallocDrops
    leafs["in-handle-drops"] = rawioStats.InHandleDrops
    leafs["in-short-drops"] = rawioStats.InShortDrops
    leafs["in-error-drops"] = rawioStats.InErrorDrops
    leafs["in-ipsec-drops"] = rawioStats.InIpsecDrops
    leafs["in-queue-drops"] = rawioStats.InQueueDrops
    leafs["out-packets"] = rawioStats.OutPackets
    leafs["out-bytes"] = rawioStats.OutBytes
    leafs["out-nofd-drops"] = rawioStats.OutNofdDrops
    leafs["out-error-drops"] = rawioStats.OutErrorDrops
    leafs["out-ipsec-drops"] = rawioStats.OutIpsecDrops
    leafs["out-nopak-drops"] = rawioStats.OutNopakDrops
    leafs["out-pakapi-errors"] = rawioStats.OutPakapiErrors
    leafs["raw-conn-state"] = rawioStats.RawConnState
    return leafs
}

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetBundleName() string { return "cisco_ios_xr" }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetYangName() string { return "rawio-stats" }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) SetParent(parent types.Entity) { rawioStats.parent = parent }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetParent() types.Entity { return rawioStats.parent }

func (rawioStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_RawioStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Critical interface{}

    // High priority classifications. The type is interface{} with range:
    // 0..4294967295.
    High interface{}

    // Medium priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Medium interface{}

    // Low priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Low interface{}
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetFilter() yfilter.YFilter { return prefixPriorityStats.YFilter }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) SetFilter(yf yfilter.YFilter) { prefixPriorityStats.YFilter = yf }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetSegmentPath() string {
    return "prefix-priority-stats"
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = prefixPriorityStats.Critical
    leafs["high"] = prefixPriorityStats.High
    leafs["medium"] = prefixPriorityStats.Medium
    leafs["low"] = prefixPriorityStats.Low
    return leafs
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetBundleName() string { return "cisco_ios_xr" }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetYangName() string { return "prefix-priority-stats" }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) SetParent(parent types.Entity) { prefixPriorityStats.parent = parent }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetParent() types.Entity { return prefixPriorityStats.parent }

func (prefixPriorityStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_PrefixPriorityStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of RIB batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // No. of Routes sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    RoutesSent interface{}

    // No of Pending Routes. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // Max No. of Routes in a batch. The type is interface{} with range:
    // 0..4294967295.
    MaxRoutes interface{}

    // No. of Paths sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsSent interface{}

    // No. of paths waiting to be sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsPending interface{}

    // No. of paths added to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsAdd interface{}

    // No. of paths add errors. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // No. of paths del sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsDel interface{}

    // No. of Paths del errors. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetFilter() yfilter.YFilter { return vrfRibBatchStats.YFilter }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) SetFilter(yf yfilter.YFilter) { vrfRibBatchStats.YFilter = yf }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetGoName(yname string) string {
    if yname == "batches-sent" { return "BatchesSent" }
    if yname == "routes-sent" { return "RoutesSent" }
    if yname == "routes-pending" { return "RoutesPending" }
    if yname == "max-routes" { return "MaxRoutes" }
    if yname == "paths-sent" { return "PathsSent" }
    if yname == "paths-pending" { return "PathsPending" }
    if yname == "paths-add" { return "PathsAdd" }
    if yname == "paths-add-errs" { return "PathsAddErrs" }
    if yname == "paths-del" { return "PathsDel" }
    if yname == "paths-del-errs" { return "PathsDelErrs" }
    return ""
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetSegmentPath() string {
    return "vrf-rib-batch-stats"
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["batches-sent"] = vrfRibBatchStats.BatchesSent
    leafs["routes-sent"] = vrfRibBatchStats.RoutesSent
    leafs["routes-pending"] = vrfRibBatchStats.RoutesPending
    leafs["max-routes"] = vrfRibBatchStats.MaxRoutes
    leafs["paths-sent"] = vrfRibBatchStats.PathsSent
    leafs["paths-pending"] = vrfRibBatchStats.PathsPending
    leafs["paths-add"] = vrfRibBatchStats.PathsAdd
    leafs["paths-add-errs"] = vrfRibBatchStats.PathsAddErrs
    leafs["paths-del"] = vrfRibBatchStats.PathsDel
    leafs["paths-del-errs"] = vrfRibBatchStats.PathsDelErrs
    return leafs
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetBundleName() string { return "cisco_ios_xr" }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetYangName() string { return "vrf-rib-batch-stats" }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) SetParent(parent types.Entity) { vrfRibBatchStats.parent = parent }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetParent() types.Entity { return vrfRibBatchStats.parent }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Vrfs_Vrf_VrfStatistics_VrfRibBatchStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary
// OSPFv3 summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 protocol summary.
    Protocol Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol

    // OSPFv3 summary.
    Ospfv3 Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3

    // OSPFv3 route summary.
    Route Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route
}

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "ospfv3" { return "Ospfv3" }
    if yname == "route" { return "Route" }
    return ""
}

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol" {
        return &summary.Protocol
    }
    if childYangName == "ospfv3" {
        return &summary.Ospfv3
    }
    if childYangName == "route" {
        return &summary.Route
    }
    return nil
}

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol"] = &summary.Protocol
    children["ospfv3"] = &summary.Ospfv3
    children["route"] = &summary.Route
    return children
}

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetYangName() string { return "summary" }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Ospfv3_Processes_Process_Vrfs_Vrf_Summary) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol
// OSPFv3 protocol summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ProtocolRouterId interface{}

    // Administrative distance. The type is interface{} with range: 0..4294967295.
    AdministrativeDistance interface{}

    // Administrative Distance for Inter Area routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceInterArea interface{}

    // Administrative Distance for External routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceExternal interface{}

    // If true, Graceful restart is enabled . The type is bool.
    IsGracefulRestart interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetFilter() yfilter.YFilter { return protocol.YFilter }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) SetFilter(yf yfilter.YFilter) { protocol.YFilter = yf }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetGoName(yname string) string {
    if yname == "protocol-router-id" { return "ProtocolRouterId" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "administrative-distance-inter-area" { return "AdministrativeDistanceInterArea" }
    if yname == "administrative-distance-external" { return "AdministrativeDistanceExternal" }
    if yname == "is-graceful-restart" { return "IsGracefulRestart" }
    if yname == "distribute-list-in" { return "DistributeListIn" }
    return ""
}

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetSegmentPath() string {
    return "protocol"
}

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-router-id"] = protocol.ProtocolRouterId
    leafs["administrative-distance"] = protocol.AdministrativeDistance
    leafs["administrative-distance-inter-area"] = protocol.AdministrativeDistanceInterArea
    leafs["administrative-distance-external"] = protocol.AdministrativeDistanceExternal
    leafs["is-graceful-restart"] = protocol.IsGracefulRestart
    leafs["distribute-list-in"] = protocol.DistributeListIn
    return leafs
}

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetBundleName() string { return "cisco_ios_xr" }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetYangName() string { return "protocol" }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) SetParent(parent types.Entity) { protocol.parent = parent }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetParent() types.Entity { return protocol.parent }

func (protocol *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Protocol) GetParentYangName() string { return "summary" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3
// OSPFv3 summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // If true, the process is running as stanby role. The type is bool.
    IsRoleStandby interface{}

    // Role, V1/V2 Active/Standby. The type is interface{} with range:
    // 0..4294967295.
    Role interface{}

    // If true, NSR is enabled. The type is bool.
    IsNsrEnabled interface{}

    // Trigger RP Switchover on detectable process restart. The type is bool.
    IsNsrSwitchoverOnRestart interface{}

    // Stalled Router ID . The type is bool.
    IsRouterIdStalled interface{}

    // Opaque LSA capable . The type is bool.
    IsOpaqueCapable interface{}

    // If true, is an area border router. The type is bool.
    IsAreaBorderRouter interface{}

    // If true, is an AS border router. The type is bool.
    IsAsBorderRouter interface{}

    // Redistribution metric . The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // If true, origin is by default . The type is bool.
    IsDefaultOriginated interface{}

    // If true, default always . The type is bool.
    IsDefaultAlways interface{}

    // Default metric . The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Default metric type . The type is Ospfv3DefaultMetric.
    DefaultMetricType interface{}

    // Default tag . The type is interface{} with range: 0..4294967295.
    DefaultTag interface{}

    // If true, is a default policy . The type is bool.
    IsDefaultPolicy interface{}

    // Default policy name . The type is string.
    DefaultPolicyName interface{}

    // Scheduling delay for SPF (ms). The type is interface{} with range:
    // 0..4294967295.
    SpfStartTime interface{}

    // Minimum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfHoldTime interface{}

    // Maximum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfMaximumTime interface{}

    // Initial LSA throttle delay (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaStartTime interface{}

    // Second delay before generating next LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaHoldTime interface{}

    // Maximum delay before generating an LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaMaximumTime interface{}

    // Minimum time between LSA regeneration (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaInterval interface{}

    // LSA refresh interval (sec). The type is interface{} with range:
    // 0..4294967295.
    LsaGroupInterval interface{}

    // LSA flood pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaFloodPacingInterval interface{}

    // LSA retransmission pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRetransmissionPacingInterval interface{}

    // Number of AS scope LSAs. The type is interface{} with range: 0..4294967295.
    AsLsAs interface{}

    // Number of opaque LSAs. The type is interface{} with range: 0..4294967295.
    OpaqueLsas interface{}

    // Sum of opaque LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    OpaqueLsaChecksum interface{}

    // Number of external and AS opaque LSAs with demand circut bit not set. The
    // type is interface{} with range: 0..4294967295.
    AsDcBitlessLsAs interface{}

    // Number of external and AS opaque LSAs with do not age set . The type is
    // interface{} with range: 0..4294967295.
    AsDoNotAgeLsAs interface{}

    // Number of areas. The type is interface{} with range: 0..65535.
    Areas interface{}

    // Number of normal areas. The type is interface{} with range: 0..65535.
    NormalAreas interface{}

    // Number of stub and total stub areas. The type is interface{} with range:
    // 0..65535.
    StubAreas interface{}

    // Number of NSSA areas. The type is interface{} with range: 0..65535.
    NssaAreas interface{}

    // Length of AS LSAs flood list. The type is interface{} with range:
    // 0..4294967295.
    AsLsaFloodListLength interface{}

    // If true, grace restart is enabled . The type is bool.
    IsGraceRestartEnabled interface{}

    // Length of time since the last NSF (s). The type is interface{} with range:
    // 0..4294967295.
    LastNsfTime interface{}

    // Grace time to resync . The type is interface{} with range: 0..4294967295.
    GraceResyncTime interface{}

    // Maximum number of interfaces. The type is interface{} with range:
    // 0..4294967295.
    MaximumInterfaces interface{}

    // Maximum number of paths. The type is interface{} with range: 0..4294967295.
    MaximumPaths interface{}

    // The number of redistributed prefixes allowed. The type is interface{} with
    // range: 0..4294967295.
    RedistributionLimit interface{}

    // When the number of redistributed prefixes reaches this threshold, a warning
    // message is issued . The type is interface{} with range: 0..4294967295.
    RedistributionThreshold interface{}

    // If true, auto cost is enabled. The type is bool.
    IsAutoCost interface{}

    // Reference Bandwdith. The type is interface{} with range: 0..4294967295.
    ReferenceBandwidth interface{}

    // Context name. The type is string with length: 0..32.
    ContextName interface{}

    // If true, snmp trap is enabled. The type is bool.
    SnmpTrapEnabled interface{}

    // Graceful shutdown state. The type is Ospfv3GracefulShutdownState.
    GracefulShutdownState interface{}

    // Domain ID information.
    DomainId Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId

    // Stub Router Information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter.
    StubRouter []Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers.
    IpfrrTiebreakers []Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetFilter() yfilter.YFilter { return ospfv3.YFilter }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) SetFilter(yf yfilter.YFilter) { ospfv3.YFilter = yf }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetGoName(yname string) string {
    if yname == "router-id" { return "RouterId" }
    if yname == "is-role-standby" { return "IsRoleStandby" }
    if yname == "role" { return "Role" }
    if yname == "is-nsr-enabled" { return "IsNsrEnabled" }
    if yname == "is-nsr-switchover-on-restart" { return "IsNsrSwitchoverOnRestart" }
    if yname == "is-router-id-stalled" { return "IsRouterIdStalled" }
    if yname == "is-opaque-capable" { return "IsOpaqueCapable" }
    if yname == "is-area-border-router" { return "IsAreaBorderRouter" }
    if yname == "is-as-border-router" { return "IsAsBorderRouter" }
    if yname == "metric" { return "Metric" }
    if yname == "is-default-originated" { return "IsDefaultOriginated" }
    if yname == "is-default-always" { return "IsDefaultAlways" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "default-metric-type" { return "DefaultMetricType" }
    if yname == "default-tag" { return "DefaultTag" }
    if yname == "is-default-policy" { return "IsDefaultPolicy" }
    if yname == "default-policy-name" { return "DefaultPolicyName" }
    if yname == "spf-start-time" { return "SpfStartTime" }
    if yname == "spf-hold-time" { return "SpfHoldTime" }
    if yname == "spf-maximum-time" { return "SpfMaximumTime" }
    if yname == "lsa-start-time" { return "LsaStartTime" }
    if yname == "lsa-hold-time" { return "LsaHoldTime" }
    if yname == "lsa-maximum-time" { return "LsaMaximumTime" }
    if yname == "minimum-lsa-interval" { return "MinimumLsaInterval" }
    if yname == "lsa-group-interval" { return "LsaGroupInterval" }
    if yname == "lsa-flood-pacing-interval" { return "LsaFloodPacingInterval" }
    if yname == "lsa-retransmission-pacing-interval" { return "LsaRetransmissionPacingInterval" }
    if yname == "as-ls-as" { return "AsLsAs" }
    if yname == "opaque-lsas" { return "OpaqueLsas" }
    if yname == "opaque-lsa-checksum" { return "OpaqueLsaChecksum" }
    if yname == "as-dc-bitless-ls-as" { return "AsDcBitlessLsAs" }
    if yname == "as-do-not-age-ls-as" { return "AsDoNotAgeLsAs" }
    if yname == "areas" { return "Areas" }
    if yname == "normal-areas" { return "NormalAreas" }
    if yname == "stub-areas" { return "StubAreas" }
    if yname == "nssa-areas" { return "NssaAreas" }
    if yname == "as-lsa-flood-list-length" { return "AsLsaFloodListLength" }
    if yname == "is-grace-restart-enabled" { return "IsGraceRestartEnabled" }
    if yname == "last-nsf-time" { return "LastNsfTime" }
    if yname == "grace-resync-time" { return "GraceResyncTime" }
    if yname == "maximum-interfaces" { return "MaximumInterfaces" }
    if yname == "maximum-paths" { return "MaximumPaths" }
    if yname == "redistribution-limit" { return "RedistributionLimit" }
    if yname == "redistribution-threshold" { return "RedistributionThreshold" }
    if yname == "is-auto-cost" { return "IsAutoCost" }
    if yname == "reference-bandwidth" { return "ReferenceBandwidth" }
    if yname == "context-name" { return "ContextName" }
    if yname == "snmp-trap-enabled" { return "SnmpTrapEnabled" }
    if yname == "graceful-shutdown-state" { return "GracefulShutdownState" }
    if yname == "domain-id" { return "DomainId" }
    if yname == "stub-router" { return "StubRouter" }
    if yname == "ipfrr-tiebreakers" { return "IpfrrTiebreakers" }
    return ""
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetSegmentPath() string {
    return "ospfv3"
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "domain-id" {
        return &ospfv3.DomainId
    }
    if childYangName == "stub-router" {
        for _, c := range ospfv3.StubRouter {
            if ospfv3.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter{}
        ospfv3.StubRouter = append(ospfv3.StubRouter, child)
        return &ospfv3.StubRouter[len(ospfv3.StubRouter)-1]
    }
    if childYangName == "ipfrr-tiebreakers" {
        for _, c := range ospfv3.IpfrrTiebreakers {
            if ospfv3.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers{}
        ospfv3.IpfrrTiebreakers = append(ospfv3.IpfrrTiebreakers, child)
        return &ospfv3.IpfrrTiebreakers[len(ospfv3.IpfrrTiebreakers)-1]
    }
    return nil
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["domain-id"] = &ospfv3.DomainId
    for i := range ospfv3.StubRouter {
        children[ospfv3.StubRouter[i].GetSegmentPath()] = &ospfv3.StubRouter[i]
    }
    for i := range ospfv3.IpfrrTiebreakers {
        children[ospfv3.IpfrrTiebreakers[i].GetSegmentPath()] = &ospfv3.IpfrrTiebreakers[i]
    }
    return children
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-id"] = ospfv3.RouterId
    leafs["is-role-standby"] = ospfv3.IsRoleStandby
    leafs["role"] = ospfv3.Role
    leafs["is-nsr-enabled"] = ospfv3.IsNsrEnabled
    leafs["is-nsr-switchover-on-restart"] = ospfv3.IsNsrSwitchoverOnRestart
    leafs["is-router-id-stalled"] = ospfv3.IsRouterIdStalled
    leafs["is-opaque-capable"] = ospfv3.IsOpaqueCapable
    leafs["is-area-border-router"] = ospfv3.IsAreaBorderRouter
    leafs["is-as-border-router"] = ospfv3.IsAsBorderRouter
    leafs["metric"] = ospfv3.Metric
    leafs["is-default-originated"] = ospfv3.IsDefaultOriginated
    leafs["is-default-always"] = ospfv3.IsDefaultAlways
    leafs["default-metric"] = ospfv3.DefaultMetric
    leafs["default-metric-type"] = ospfv3.DefaultMetricType
    leafs["default-tag"] = ospfv3.DefaultTag
    leafs["is-default-policy"] = ospfv3.IsDefaultPolicy
    leafs["default-policy-name"] = ospfv3.DefaultPolicyName
    leafs["spf-start-time"] = ospfv3.SpfStartTime
    leafs["spf-hold-time"] = ospfv3.SpfHoldTime
    leafs["spf-maximum-time"] = ospfv3.SpfMaximumTime
    leafs["lsa-start-time"] = ospfv3.LsaStartTime
    leafs["lsa-hold-time"] = ospfv3.LsaHoldTime
    leafs["lsa-maximum-time"] = ospfv3.LsaMaximumTime
    leafs["minimum-lsa-interval"] = ospfv3.MinimumLsaInterval
    leafs["lsa-group-interval"] = ospfv3.LsaGroupInterval
    leafs["lsa-flood-pacing-interval"] = ospfv3.LsaFloodPacingInterval
    leafs["lsa-retransmission-pacing-interval"] = ospfv3.LsaRetransmissionPacingInterval
    leafs["as-ls-as"] = ospfv3.AsLsAs
    leafs["opaque-lsas"] = ospfv3.OpaqueLsas
    leafs["opaque-lsa-checksum"] = ospfv3.OpaqueLsaChecksum
    leafs["as-dc-bitless-ls-as"] = ospfv3.AsDcBitlessLsAs
    leafs["as-do-not-age-ls-as"] = ospfv3.AsDoNotAgeLsAs
    leafs["areas"] = ospfv3.Areas
    leafs["normal-areas"] = ospfv3.NormalAreas
    leafs["stub-areas"] = ospfv3.StubAreas
    leafs["nssa-areas"] = ospfv3.NssaAreas
    leafs["as-lsa-flood-list-length"] = ospfv3.AsLsaFloodListLength
    leafs["is-grace-restart-enabled"] = ospfv3.IsGraceRestartEnabled
    leafs["last-nsf-time"] = ospfv3.LastNsfTime
    leafs["grace-resync-time"] = ospfv3.GraceResyncTime
    leafs["maximum-interfaces"] = ospfv3.MaximumInterfaces
    leafs["maximum-paths"] = ospfv3.MaximumPaths
    leafs["redistribution-limit"] = ospfv3.RedistributionLimit
    leafs["redistribution-threshold"] = ospfv3.RedistributionThreshold
    leafs["is-auto-cost"] = ospfv3.IsAutoCost
    leafs["reference-bandwidth"] = ospfv3.ReferenceBandwidth
    leafs["context-name"] = ospfv3.ContextName
    leafs["snmp-trap-enabled"] = ospfv3.SnmpTrapEnabled
    leafs["graceful-shutdown-state"] = ospfv3.GracefulShutdownState
    return leafs
}

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetYangName() string { return "ospfv3" }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) SetParent(parent types.Entity) { ospfv3.parent = parent }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetParent() types.Entity { return ospfv3.parent }

func (ospfv3 *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3) GetParentYangName() string { return "summary" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId
// Domain ID information
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary Domain ID.
    PrimaryDomainId Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId

    // List of secondary domain IDs. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId.
    SecondaryDomainId []Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetFilter() yfilter.YFilter { return domainId.YFilter }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) SetFilter(yf yfilter.YFilter) { domainId.YFilter = yf }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetGoName(yname string) string {
    if yname == "primary-domain-id" { return "PrimaryDomainId" }
    if yname == "secondary-domain-id" { return "SecondaryDomainId" }
    return ""
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetSegmentPath() string {
    return "domain-id"
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary-domain-id" {
        return &domainId.PrimaryDomainId
    }
    if childYangName == "secondary-domain-id" {
        for _, c := range domainId.SecondaryDomainId {
            if domainId.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId{}
        domainId.SecondaryDomainId = append(domainId.SecondaryDomainId, child)
        return &domainId.SecondaryDomainId[len(domainId.SecondaryDomainId)-1]
    }
    return nil
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["primary-domain-id"] = &domainId.PrimaryDomainId
    for i := range domainId.SecondaryDomainId {
        children[domainId.SecondaryDomainId[i].GetSegmentPath()] = &domainId.SecondaryDomainId[i]
    }
    return children
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetBundleName() string { return "cisco_ios_xr" }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetYangName() string { return "domain-id" }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) SetParent(parent types.Entity) { domainId.parent = parent }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetParent() types.Entity { return domainId.parent }

func (domainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId
// Primary Domain ID
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetFilter() yfilter.YFilter { return primaryDomainId.YFilter }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) SetFilter(yf yfilter.YFilter) { primaryDomainId.YFilter = yf }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-value" { return "DomainIdValue" }
    return ""
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetSegmentPath() string {
    return "primary-domain-id"
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = primaryDomainId.DomainIdType
    leafs["domain-id-value"] = primaryDomainId.DomainIdValue
    return leafs
}

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetYangName() string { return "primary-domain-id" }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) SetParent(parent types.Entity) { primaryDomainId.parent = parent }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetParent() types.Entity { return primaryDomainId.parent }

func (primaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetParentYangName() string { return "domain-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId
// List of secondary domain IDs
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetFilter() yfilter.YFilter { return secondaryDomainId.YFilter }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) SetFilter(yf yfilter.YFilter) { secondaryDomainId.YFilter = yf }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-value" { return "DomainIdValue" }
    return ""
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetSegmentPath() string {
    return "secondary-domain-id"
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = secondaryDomainId.DomainIdType
    leafs["domain-id-value"] = secondaryDomainId.DomainIdValue
    return leafs
}

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetYangName() string { return "secondary-domain-id" }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) SetParent(parent types.Entity) { secondaryDomainId.parent = parent }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetParent() types.Entity { return secondaryDomainId.parent }

func (secondaryDomainId *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetParentYangName() string { return "domain-id" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter
// Stub Router Information
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Stub router mode. The type is StubRouterMode.
    Mode interface{}

    // If true, stub router mode is active. The type is bool.
    Active interface{}

    // Remaining time (in seconds) in stub router mode. The type is interface{}
    // with range: 0..4294967295. Units are second.
    RemainingTime interface{}

    // Reason for entering stub router mode. The type is StubRouterTrigger.
    SetReason interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // If true, advertise maximum metric for stub links. The type is bool.
    IncludeStubLinks interface{}

    // Metric for summary LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    SummaryLsaMetric interface{}

    // Metric for external LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    ExternalLsaMetric interface{}

    // Reason for being in ABR off mode. The type is StubRouterAbrOffReason.
    AbrOffReason interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime

    // Timestamp (relative to 1970/1/1 00:00) when ABR duties were resumed.
    AbrResumeTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime

    // Triggers for entering stub router mode. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger.
    Trigger []Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetFilter() yfilter.YFilter { return stubRouter.YFilter }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) SetFilter(yf yfilter.YFilter) { stubRouter.YFilter = yf }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetGoName(yname string) string {
    if yname == "mode" { return "Mode" }
    if yname == "active" { return "Active" }
    if yname == "remaining-time" { return "RemainingTime" }
    if yname == "set-reason" { return "SetReason" }
    if yname == "unset-reason" { return "UnsetReason" }
    if yname == "include-stub-links" { return "IncludeStubLinks" }
    if yname == "summary-lsa-metric" { return "SummaryLsaMetric" }
    if yname == "external-lsa-metric" { return "ExternalLsaMetric" }
    if yname == "abr-off-reason" { return "AbrOffReason" }
    if yname == "unset-time" { return "UnsetTime" }
    if yname == "start-time" { return "StartTime" }
    if yname == "abr-resume-time" { return "AbrResumeTime" }
    if yname == "trigger" { return "Trigger" }
    return ""
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetSegmentPath() string {
    return "stub-router"
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unset-time" {
        return &stubRouter.UnsetTime
    }
    if childYangName == "start-time" {
        return &stubRouter.StartTime
    }
    if childYangName == "abr-resume-time" {
        return &stubRouter.AbrResumeTime
    }
    if childYangName == "trigger" {
        for _, c := range stubRouter.Trigger {
            if stubRouter.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger{}
        stubRouter.Trigger = append(stubRouter.Trigger, child)
        return &stubRouter.Trigger[len(stubRouter.Trigger)-1]
    }
    return nil
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unset-time"] = &stubRouter.UnsetTime
    children["start-time"] = &stubRouter.StartTime
    children["abr-resume-time"] = &stubRouter.AbrResumeTime
    for i := range stubRouter.Trigger {
        children[stubRouter.Trigger[i].GetSegmentPath()] = &stubRouter.Trigger[i]
    }
    return children
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mode"] = stubRouter.Mode
    leafs["active"] = stubRouter.Active
    leafs["remaining-time"] = stubRouter.RemainingTime
    leafs["set-reason"] = stubRouter.SetReason
    leafs["unset-reason"] = stubRouter.UnsetReason
    leafs["include-stub-links"] = stubRouter.IncludeStubLinks
    leafs["summary-lsa-metric"] = stubRouter.SummaryLsaMetric
    leafs["external-lsa-metric"] = stubRouter.ExternalLsaMetric
    leafs["abr-off-reason"] = stubRouter.AbrOffReason
    return leafs
}

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetBundleName() string { return "cisco_ios_xr" }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetYangName() string { return "stub-router" }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) SetParent(parent types.Entity) { stubRouter.parent = parent }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetParent() types.Entity { return stubRouter.parent }

func (stubRouter *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetFilter() yfilter.YFilter { return unsetTime.YFilter }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) SetFilter(yf yfilter.YFilter) { unsetTime.YFilter = yf }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetSegmentPath() string {
    return "unset-time"
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = unsetTime.Second
    leafs["nanosecond"] = unsetTime.Nanosecond
    return leafs
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetBundleName() string { return "cisco_ios_xr" }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetYangName() string { return "unset-time" }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) SetParent(parent types.Entity) { unsetTime.parent = parent }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetParent() types.Entity { return unsetTime.parent }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_UnsetTime) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetFilter() yfilter.YFilter { return startTime.YFilter }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) SetFilter(yf yfilter.YFilter) { startTime.YFilter = yf }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetSegmentPath() string {
    return "start-time"
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = startTime.Second
    leafs["nanosecond"] = startTime.Nanosecond
    return leafs
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetBundleName() string { return "cisco_ios_xr" }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetYangName() string { return "start-time" }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) SetParent(parent types.Entity) { startTime.parent = parent }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetParent() types.Entity { return startTime.parent }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_StartTime) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime
// Timestamp (relative to 1970/1/1 00:00) when ABR
// duties were resumed
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetFilter() yfilter.YFilter { return abrResumeTime.YFilter }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) SetFilter(yf yfilter.YFilter) { abrResumeTime.YFilter = yf }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetSegmentPath() string {
    return "abr-resume-time"
}

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = abrResumeTime.Second
    leafs["nanosecond"] = abrResumeTime.Nanosecond
    return leafs
}

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetBundleName() string { return "cisco_ios_xr" }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetYangName() string { return "abr-resume-time" }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) SetParent(parent types.Entity) { abrResumeTime.parent = parent }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetParent() types.Entity { return abrResumeTime.parent }

func (abrResumeTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger
// Triggers for entering stub router mode
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Stub Router Trigger type. The type is StubRouterTrigger.
    Trigger interface{}

    // If true, stub router is terminated when BGP converges. The type is bool.
    WaitForBgp interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // Time (in seconds) to stay in stub router mode. The type is interface{} with
    // range: 0..4294967295. Units are second.
    Time interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
}

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetFilter() yfilter.YFilter { return trigger.YFilter }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) SetFilter(yf yfilter.YFilter) { trigger.YFilter = yf }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetGoName(yname string) string {
    if yname == "trigger" { return "Trigger" }
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "unset-reason" { return "UnsetReason" }
    if yname == "time" { return "Time" }
    if yname == "unset-time" { return "UnsetTime" }
    if yname == "start-time" { return "StartTime" }
    return ""
}

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetSegmentPath() string {
    return "trigger"
}

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unset-time" {
        return &trigger.UnsetTime
    }
    if childYangName == "start-time" {
        return &trigger.StartTime
    }
    return nil
}

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unset-time"] = &trigger.UnsetTime
    children["start-time"] = &trigger.StartTime
    return children
}

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["trigger"] = trigger.Trigger
    leafs["wait-for-bgp"] = trigger.WaitForBgp
    leafs["unset-reason"] = trigger.UnsetReason
    leafs["time"] = trigger.Time
    return leafs
}

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetBundleName() string { return "cisco_ios_xr" }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetYangName() string { return "trigger" }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) SetParent(parent types.Entity) { trigger.parent = parent }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetParent() types.Entity { return trigger.parent }

func (trigger *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetFilter() yfilter.YFilter { return unsetTime.YFilter }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) SetFilter(yf yfilter.YFilter) { unsetTime.YFilter = yf }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetSegmentPath() string {
    return "unset-time"
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = unsetTime.Second
    leafs["nanosecond"] = unsetTime.Nanosecond
    return leafs
}

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetBundleName() string { return "cisco_ios_xr" }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetYangName() string { return "unset-time" }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) SetParent(parent types.Entity) { unsetTime.parent = parent }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetParent() types.Entity { return unsetTime.parent }

func (unsetTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetParentYangName() string { return "trigger" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetFilter() yfilter.YFilter { return startTime.YFilter }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) SetFilter(yf yfilter.YFilter) { startTime.YFilter = yf }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetSegmentPath() string {
    return "start-time"
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = startTime.Second
    leafs["nanosecond"] = startTime.Nanosecond
    return leafs
}

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetBundleName() string { return "cisco_ios_xr" }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetYangName() string { return "start-time" }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) SetParent(parent types.Entity) { startTime.parent = parent }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetParent() types.Entity { return startTime.parent }

func (startTime *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetParentYangName() string { return "trigger" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetFilter() yfilter.YFilter { return ipfrrTiebreakers.YFilter }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) SetFilter(yf yfilter.YFilter) { ipfrrTiebreakers.YFilter = yf }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetSegmentPath() string {
    return "ipfrr-tiebreakers"
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = ipfrrTiebreakers.TiebreakerType
    leafs["tiebreaker-index"] = ipfrrTiebreakers.TiebreakerIndex
    return leafs
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetYangName() string { return "ipfrr-tiebreakers" }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) SetParent(parent types.Entity) { ipfrrTiebreakers.parent = parent }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetParent() types.Entity { return ipfrrTiebreakers.parent }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Ospfv3_IpfrrTiebreakers) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route
// OSPFv3 route summary
type Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetFilter() yfilter.YFilter { return route.YFilter }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) SetFilter(yf yfilter.YFilter) { route.YFilter = yf }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "intra-area-route" { return "IntraAreaRoute" }
    if yname == "inter-area-route" { return "InterAreaRoute" }
    if yname == "extern-one-route" { return "ExternOneRoute" }
    if yname == "extern-two-route" { return "ExternTwoRoute" }
    if yname == "nssa-one-route" { return "NssaOneRoute" }
    if yname == "nssa-two-route" { return "NssaTwoRoute" }
    if yname == "total-sent-route" { return "TotalSentRoute" }
    if yname == "route-connected" { return "RouteConnected" }
    if yname == "redistribution-route" { return "RedistributionRoute" }
    if yname == "total-received-route" { return "TotalReceivedRoute" }
    return ""
}

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetSegmentPath() string {
    return "route"
}

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = route.RouteId
    leafs["intra-area-route"] = route.IntraAreaRoute
    leafs["inter-area-route"] = route.InterAreaRoute
    leafs["extern-one-route"] = route.ExternOneRoute
    leafs["extern-two-route"] = route.ExternTwoRoute
    leafs["nssa-one-route"] = route.NssaOneRoute
    leafs["nssa-two-route"] = route.NssaTwoRoute
    leafs["total-sent-route"] = route.TotalSentRoute
    leafs["route-connected"] = route.RouteConnected
    leafs["redistribution-route"] = route.RedistributionRoute
    leafs["total-received-route"] = route.TotalReceivedRoute
    return leafs
}

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetBundleName() string { return "cisco_ios_xr" }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetYangName() string { return "route" }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) SetParent(parent types.Entity) { route.parent = parent }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetParent() types.Entity { return route.parent }

func (route *Ospfv3_Processes_Process_Vrfs_Vrf_Summary_Route) GetParentYangName() string { return "summary" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable
// OSPFv3 retransmission list information table for
// all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission.
    Retransmission []Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetFilter() yfilter.YFilter { return retransmissionListProcessTable.YFilter }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) SetFilter(yf yfilter.YFilter) { retransmissionListProcessTable.YFilter = yf }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetGoName(yname string) string {
    if yname == "retransmission" { return "Retransmission" }
    return ""
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetSegmentPath() string {
    return "retransmission-list-process-table"
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmission" {
        for _, c := range retransmissionListProcessTable.Retransmission {
            if retransmissionListProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission{}
        retransmissionListProcessTable.Retransmission = append(retransmissionListProcessTable.Retransmission, child)
        return &retransmissionListProcessTable.Retransmission[len(retransmissionListProcessTable.Retransmission)-1]
    }
    return nil
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmissionListProcessTable.Retransmission {
        children[retransmissionListProcessTable.Retransmission[i].GetSegmentPath()] = &retransmissionListProcessTable.Retransmission[i]
    }
    return children
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetYangName() string { return "retransmission-list-process-table" }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) SetParent(parent types.Entity) { retransmissionListProcessTable.parent = parent }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetParent() types.Entity { return retransmissionListProcessTable.parent }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetFilter() yfilter.YFilter { return retransmission.YFilter }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) SetFilter(yf yfilter.YFilter) { retransmission.YFilter = yf }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "retransmission-neighbor-address" { return "RetransmissionNeighborAddress" }
    if yname == "is-retransmissionvirtual-link" { return "IsRetransmissionvirtualLink" }
    if yname == "retransmissionvirtual-link-id" { return "RetransmissionvirtualLinkId" }
    if yname == "is-retransmission-sham-link" { return "IsRetransmissionShamLink" }
    if yname == "retransmission-sham-link-id" { return "RetransmissionShamLinkId" }
    if yname == "retransmission-timer" { return "RetransmissionTimer" }
    if yname == "retransmission-length" { return "RetransmissionLength" }
    if yname == "retransmissionvirtual-link-db" { return "RetransmissionvirtualLinkDb" }
    if yname == "retransmission-area-db" { return "RetransmissionAreaDb" }
    if yname == "retransmission-asdb" { return "RetransmissionAsdb" }
    return ""
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetSegmentPath() string {
    return "retransmission"
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmissionvirtual-link-db" {
        for _, c := range retransmission.RetransmissionvirtualLinkDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb{}
        retransmission.RetransmissionvirtualLinkDb = append(retransmission.RetransmissionvirtualLinkDb, child)
        return &retransmission.RetransmissionvirtualLinkDb[len(retransmission.RetransmissionvirtualLinkDb)-1]
    }
    if childYangName == "retransmission-area-db" {
        for _, c := range retransmission.RetransmissionAreaDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb{}
        retransmission.RetransmissionAreaDb = append(retransmission.RetransmissionAreaDb, child)
        return &retransmission.RetransmissionAreaDb[len(retransmission.RetransmissionAreaDb)-1]
    }
    if childYangName == "retransmission-asdb" {
        for _, c := range retransmission.RetransmissionAsdb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb{}
        retransmission.RetransmissionAsdb = append(retransmission.RetransmissionAsdb, child)
        return &retransmission.RetransmissionAsdb[len(retransmission.RetransmissionAsdb)-1]
    }
    return nil
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmission.RetransmissionvirtualLinkDb {
        children[retransmission.RetransmissionvirtualLinkDb[i].GetSegmentPath()] = &retransmission.RetransmissionvirtualLinkDb[i]
    }
    for i := range retransmission.RetransmissionAreaDb {
        children[retransmission.RetransmissionAreaDb[i].GetSegmentPath()] = &retransmission.RetransmissionAreaDb[i]
    }
    for i := range retransmission.RetransmissionAsdb {
        children[retransmission.RetransmissionAsdb[i].GetSegmentPath()] = &retransmission.RetransmissionAsdb[i]
    }
    return children
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = retransmission.InterfaceName
    leafs["neighbor-address"] = retransmission.NeighborAddress
    leafs["retransmission-neighbor-address"] = retransmission.RetransmissionNeighborAddress
    leafs["is-retransmissionvirtual-link"] = retransmission.IsRetransmissionvirtualLink
    leafs["retransmissionvirtual-link-id"] = retransmission.RetransmissionvirtualLinkId
    leafs["is-retransmission-sham-link"] = retransmission.IsRetransmissionShamLink
    leafs["retransmission-sham-link-id"] = retransmission.RetransmissionShamLinkId
    leafs["retransmission-timer"] = retransmission.RetransmissionTimer
    leafs["retransmission-length"] = retransmission.RetransmissionLength
    return leafs
}

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetBundleName() string { return "cisco_ios_xr" }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetYangName() string { return "retransmission" }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) SetParent(parent types.Entity) { retransmission.parent = parent }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetParent() types.Entity { return retransmission.parent }

func (retransmission *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission) GetParentYangName() string { return "retransmission-list-process-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetFilter() yfilter.YFilter { return retransmissionvirtualLinkDb.YFilter }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) SetFilter(yf yfilter.YFilter) { retransmissionvirtualLinkDb.YFilter = yf }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetSegmentPath() string {
    return "retransmissionvirtual-link-db"
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionvirtualLinkDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionvirtualLinkDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionvirtualLinkDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionvirtualLinkDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionvirtualLinkDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetYangName() string { return "retransmissionvirtual-link-db" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) SetParent(parent types.Entity) { retransmissionvirtualLinkDb.parent = parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetParent() types.Entity { return retransmissionvirtualLinkDb.parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetFilter() yfilter.YFilter { return retransmissionAreaDb.YFilter }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) SetFilter(yf yfilter.YFilter) { retransmissionAreaDb.YFilter = yf }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetSegmentPath() string {
    return "retransmission-area-db"
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAreaDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAreaDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAreaDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAreaDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAreaDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetYangName() string { return "retransmission-area-db" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) SetParent(parent types.Entity) { retransmissionAreaDb.parent = parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetParent() types.Entity { return retransmissionAreaDb.parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetFilter() yfilter.YFilter { return retransmissionAsdb.YFilter }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) SetFilter(yf yfilter.YFilter) { retransmissionAsdb.YFilter = yf }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetSegmentPath() string {
    return "retransmission-asdb"
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAsdb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAsdb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAsdb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAsdb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAsdb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetYangName() string { return "retransmission-asdb" }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) SetParent(parent types.Entity) { retransmissionAsdb.parent = parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetParent() types.Entity { return retransmissionAsdb.parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_Vrfs_Vrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums
// Bad Checksum Packets information table
type Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bad Checksum Packet information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum.
    BadChecksum []Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum
}

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetFilter() yfilter.YFilter { return badChecksums.YFilter }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) SetFilter(yf yfilter.YFilter) { badChecksums.YFilter = yf }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetGoName(yname string) string {
    if yname == "bad-checksum" { return "BadChecksum" }
    return ""
}

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetSegmentPath() string {
    return "bad-checksums"
}

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bad-checksum" {
        for _, c := range badChecksums.BadChecksum {
            if badChecksums.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum{}
        badChecksums.BadChecksum = append(badChecksums.BadChecksum, child)
        return &badChecksums.BadChecksum[len(badChecksums.BadChecksum)-1]
    }
    return nil
}

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range badChecksums.BadChecksum {
        children[badChecksums.BadChecksum[i].GetSegmentPath()] = &badChecksums.BadChecksum[i]
    }
    return children
}

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetBundleName() string { return "cisco_ios_xr" }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetYangName() string { return "bad-checksums" }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) SetParent(parent types.Entity) { badChecksums.parent = parent }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetParent() types.Entity { return badChecksums.parent }

func (badChecksums *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum
// Bad Checksum Packet information
type Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bad Checksum Packets number. The type is
    // interface{} with range: 0..9.
    PacketNumber interface{}

    // Received Checksum. The type is interface{} with range: 0..65535.
    ReceivedChecksum interface{}

    // Computed Checksum. The type is interface{} with range: 0..65535.
    ComputedChecksum interface{}

    // Received Hexadecimal Data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReceivedData interface{}

    // Packet Timestamp (relative to 1970/1/1 00:00).
    Timestamp Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp
}

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetFilter() yfilter.YFilter { return badChecksum.YFilter }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) SetFilter(yf yfilter.YFilter) { badChecksum.YFilter = yf }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetGoName(yname string) string {
    if yname == "packet-number" { return "PacketNumber" }
    if yname == "received-checksum" { return "ReceivedChecksum" }
    if yname == "computed-checksum" { return "ComputedChecksum" }
    if yname == "received-data" { return "ReceivedData" }
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetSegmentPath() string {
    return "bad-checksum" + "[packet-number='" + fmt.Sprintf("%v", badChecksum.PacketNumber) + "']"
}

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &badChecksum.Timestamp
    }
    return nil
}

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &badChecksum.Timestamp
    return children
}

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["packet-number"] = badChecksum.PacketNumber
    leafs["received-checksum"] = badChecksum.ReceivedChecksum
    leafs["computed-checksum"] = badChecksum.ComputedChecksum
    leafs["received-data"] = badChecksum.ReceivedData
    return leafs
}

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetBundleName() string { return "cisco_ios_xr" }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetYangName() string { return "bad-checksum" }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) SetParent(parent types.Entity) { badChecksum.parent = parent }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetParent() types.Entity { return badChecksum.parent }

func (badChecksum *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum) GetParentYangName() string { return "bad-checksums" }

// Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp
// Packet Timestamp (relative to 1970/1/1 00:00)
type Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = timestamp.Second
    leafs["nanosecond"] = timestamp.Nanosecond
    return leafs
}

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Ospfv3_Processes_Process_Vrfs_Vrf_BadChecksums_BadChecksum_Timestamp) GetParentYangName() string { return "bad-checksum" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetFilter() yfilter.YFilter { return databaseSummaryTable.YFilter }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) SetFilter(yf yfilter.YFilter) { databaseSummaryTable.YFilter = yf }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetGoName(yname string) string {
    if yname == "database-summary" { return "DatabaseSummary" }
    return ""
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetSegmentPath() string {
    return "database-summary-table"
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-summary" {
        return &databaseSummaryTable.DatabaseSummary
    }
    return nil
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-summary"] = &databaseSummaryTable.DatabaseSummary
    return children
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetYangName() string { return "database-summary-table" }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) SetParent(parent types.Entity) { databaseSummaryTable.parent = parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetParent() types.Entity { return databaseSummaryTable.parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetFilter() yfilter.YFilter { return databaseSummary.YFilter }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) SetFilter(yf yfilter.YFilter) { databaseSummary.YFilter = yf }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetGoName(yname string) string {
    if yname == "database-router-id" { return "DatabaseRouterId" }
    if yname == "is-opaque-database-capable" { return "IsOpaqueDatabaseCapable" }
    if yname == "database-counters" { return "DatabaseCounters" }
    if yname == "area-database" { return "AreaDatabase" }
    return ""
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetSegmentPath() string {
    return "database-summary"
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-counters" {
        return &databaseSummary.DatabaseCounters
    }
    if childYangName == "area-database" {
        for _, c := range databaseSummary.AreaDatabase {
            if databaseSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase{}
        databaseSummary.AreaDatabase = append(databaseSummary.AreaDatabase, child)
        return &databaseSummary.AreaDatabase[len(databaseSummary.AreaDatabase)-1]
    }
    return nil
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-counters"] = &databaseSummary.DatabaseCounters
    for i := range databaseSummary.AreaDatabase {
        children[databaseSummary.AreaDatabase[i].GetSegmentPath()] = &databaseSummary.AreaDatabase[i]
    }
    return children
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-router-id"] = databaseSummary.DatabaseRouterId
    leafs["is-opaque-database-capable"] = databaseSummary.IsOpaqueDatabaseCapable
    return leafs
}

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetYangName() string { return "database-summary" }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) SetParent(parent types.Entity) { databaseSummary.parent = parent }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetParent() types.Entity { return databaseSummary.parent }

func (databaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary) GetParentYangName() string { return "database-summary-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetFilter() yfilter.YFilter { return databaseCounters.YFilter }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetFilter(yf yfilter.YFilter) { databaseCounters.YFilter = yf }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetSegmentPath() string {
    return "database-counters"
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = databaseCounters.Lsa
    leafs["deleted-lsa"] = databaseCounters.DeletedLsa
    leafs["max-age-lsa"] = databaseCounters.MaxAgeLsa
    leafs["lsa-checksum"] = databaseCounters.LsaChecksum
    return leafs
}

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleName() string { return "cisco_ios_xr" }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetYangName() string { return "database-counters" }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetParent(parent types.Entity) { databaseCounters.parent = parent }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParent() types.Entity { return databaseCounters.parent }

func (databaseCounters *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetFilter() yfilter.YFilter { return areaDatabase.YFilter }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetFilter(yf yfilter.YFilter) { areaDatabase.YFilter = yf }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetGoName(yname string) string {
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "area-database-summary" { return "AreaDatabaseSummary" }
    return ""
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetSegmentPath() string {
    return "area-database"
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-database-summary" {
        return &areaDatabase.AreaDatabaseSummary
    }
    return nil
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["area-database-summary"] = &areaDatabase.AreaDatabaseSummary
    return children
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-area-id"] = areaDatabase.LsaAreaId
    return leafs
}

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetYangName() string { return "area-database" }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetParent(parent types.Entity) { areaDatabase.parent = parent }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParent() types.Entity { return areaDatabase.parent }

func (areaDatabase *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetFilter() yfilter.YFilter { return areaDatabaseSummary.YFilter }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetFilter(yf yfilter.YFilter) { areaDatabaseSummary.YFilter = yf }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetSegmentPath() string {
    return "area-database-summary"
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = areaDatabaseSummary.Lsa
    leafs["deleted-lsa"] = areaDatabaseSummary.DeletedLsa
    leafs["max-age-lsa"] = areaDatabaseSummary.MaxAgeLsa
    leafs["lsa-checksum"] = areaDatabaseSummary.LsaChecksum
    return leafs
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetYangName() string { return "area-database-summary" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetParent(parent types.Entity) { areaDatabaseSummary.parent = parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParent() types.Entity { return areaDatabaseSummary.parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_Vrfs_Vrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParentYangName() string { return "area-database" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor.
    Neighbor []Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor
}

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetFilter() yfilter.YFilter { return neighborProcessTable.YFilter }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) SetFilter(yf yfilter.YFilter) { neighborProcessTable.YFilter = yf }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetSegmentPath() string {
    return "neighbor-process-table"
}

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighborProcessTable.Neighbor {
            if neighborProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor{}
        neighborProcessTable.Neighbor = append(neighborProcessTable.Neighbor, child)
        return &neighborProcessTable.Neighbor[len(neighborProcessTable.Neighbor)-1]
    }
    return nil
}

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborProcessTable.Neighbor {
        children[neighborProcessTable.Neighbor[i].GetSegmentPath()] = &neighborProcessTable.Neighbor[i]
    }
    return children
}

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetYangName() string { return "neighbor-process-table" }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) SetParent(parent types.Entity) { neighborProcessTable.parent = parent }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetParent() types.Entity { return neighborProcessTable.parent }

func (neighborProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetSegmentPath() string {
    return "neighbor"
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighbor.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighbor.NeighborBfdInfo
    }
    return nil
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighbor.NeighborDetail
    children["neighbor-bfd-info"] = &neighbor.NeighborBfdInfo
    return children
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighbor.InterfaceName
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["neighbor-address-xr"] = neighbor.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighbor.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighbor.NeighborDrPriority
    leafs["neighbor-state"] = neighbor.NeighborState
    leafs["neighbor-designated-router"] = neighbor.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighbor.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighbor.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighbor.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighbor.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighbor.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighbor.IsNeighborShamLink
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor) GetParentYangName() string { return "neighbor-process-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes
// OSPFv3 fast reroute topology information table
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 fast reroute topology information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute.
    FastReroute []Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute
}

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetFilter() yfilter.YFilter { return fastReroutes.YFilter }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) SetFilter(yf yfilter.YFilter) { fastReroutes.YFilter = yf }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetSegmentPath() string {
    return "fast-reroutes"
}

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        for _, c := range fastReroutes.FastReroute {
            if fastReroutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute{}
        fastReroutes.FastReroute = append(fastReroutes.FastReroute, child)
        return &fastReroutes.FastReroute[len(fastReroutes.FastReroute)-1]
    }
    return nil
}

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fastReroutes.FastReroute {
        children[fastReroutes.FastReroute[i].GetSegmentPath()] = &fastReroutes.FastReroute[i]
    }
    return children
}

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetYangName() string { return "fast-reroutes" }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) SetParent(parent types.Entity) { fastReroutes.parent = parent }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetParent() types.Entity { return fastReroutes.parent }

func (fastReroutes *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute
// OSPFv3 fast reroute topology information
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // AreaID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    IpfrrTopoAreaId interface{}

    // OSPF Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpfrrRouterId interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    IpfrrAreaRevision interface{}

    // IPFRR Topology entries. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo.
    IpfrrTopo []Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetGoName(yname string) string {
    if yname == "router-id" { return "RouterId" }
    if yname == "area-id" { return "AreaId" }
    if yname == "ipfrr-topo-area-id" { return "IpfrrTopoAreaId" }
    if yname == "ipfrr-router-id" { return "IpfrrRouterId" }
    if yname == "ipfrr-area-revision" { return "IpfrrAreaRevision" }
    if yname == "ipfrr-topo" { return "IpfrrTopo" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-topo" {
        for _, c := range fastReroute.IpfrrTopo {
            if fastReroute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo{}
        fastReroute.IpfrrTopo = append(fastReroute.IpfrrTopo, child)
        return &fastReroute.IpfrrTopo[len(fastReroute.IpfrrTopo)-1]
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fastReroute.IpfrrTopo {
        children[fastReroute.IpfrrTopo[i].GetSegmentPath()] = &fastReroute.IpfrrTopo[i]
    }
    return children
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-id"] = fastReroute.RouterId
    leafs["area-id"] = fastReroute.AreaId
    leafs["ipfrr-topo-area-id"] = fastReroute.IpfrrTopoAreaId
    leafs["ipfrr-router-id"] = fastReroute.IpfrrRouterId
    leafs["ipfrr-area-revision"] = fastReroute.IpfrrAreaRevision
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute) GetParentYangName() string { return "fast-reroutes" }

// Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo
// IPFRR Topology entries
type Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPFRR Topology Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // IPFRR Topology LSA ID. The type is interface{} with range: 0..4294967295.
    Lsaid interface{}

    // IPFRR Topology Distance. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // IPFRR Topoogy Type-4 entry. The type is bool.
    Type4 interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    Revision interface{}

    // IPFRR Topology Neighbor Sourced. The type is bool.
    NeighborSourced interface{}

    // IPFRR Topology DR entry. The type is bool.
    Dr interface{}
}

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetFilter() yfilter.YFilter { return ipfrrTopo.YFilter }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) SetFilter(yf yfilter.YFilter) { ipfrrTopo.YFilter = yf }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "lsaid" { return "Lsaid" }
    if yname == "distance" { return "Distance" }
    if yname == "type4" { return "Type4" }
    if yname == "revision" { return "Revision" }
    if yname == "neighbor-sourced" { return "NeighborSourced" }
    if yname == "dr" { return "Dr" }
    return ""
}

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetSegmentPath() string {
    return "ipfrr-topo"
}

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = ipfrrTopo.NodeId
    leafs["lsaid"] = ipfrrTopo.Lsaid
    leafs["distance"] = ipfrrTopo.Distance
    leafs["type4"] = ipfrrTopo.Type4
    leafs["revision"] = ipfrrTopo.Revision
    leafs["neighbor-sourced"] = ipfrrTopo.NeighborSourced
    leafs["dr"] = ipfrrTopo.Dr
    return leafs
}

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetYangName() string { return "ipfrr-topo" }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) SetParent(parent types.Entity) { ipfrrTopo.parent = parent }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetParent() types.Entity { return ipfrrTopo.parent }

func (ipfrrTopo *Ospfv3_Processes_Process_Vrfs_Vrf_FastReroutes_FastReroute_IpfrrTopo) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable
// OSPFv3 interface brief information table for all
// areas
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief.
    InterfaceBrief []Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetFilter() yfilter.YFilter { return interfaceBriefProcessTable.YFilter }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) SetFilter(yf yfilter.YFilter) { interfaceBriefProcessTable.YFilter = yf }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetGoName(yname string) string {
    if yname == "interface-brief" { return "InterfaceBrief" }
    return ""
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetSegmentPath() string {
    return "interface-brief-process-table"
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-brief" {
        for _, c := range interfaceBriefProcessTable.InterfaceBrief {
            if interfaceBriefProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief{}
        interfaceBriefProcessTable.InterfaceBrief = append(interfaceBriefProcessTable.InterfaceBrief, child)
        return &interfaceBriefProcessTable.InterfaceBrief[len(interfaceBriefProcessTable.InterfaceBrief)-1]
    }
    return nil
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceBriefProcessTable.InterfaceBrief {
        children[interfaceBriefProcessTable.InterfaceBrief[i].GetSegmentPath()] = &interfaceBriefProcessTable.InterfaceBrief[i]
    }
    return children
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetYangName() string { return "interface-brief-process-table" }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) SetParent(parent types.Entity) { interfaceBriefProcessTable.parent = parent }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetParent() types.Entity { return interfaceBriefProcessTable.parent }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetFilter() yfilter.YFilter { return interfaceBrief.YFilter }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) SetFilter(yf yfilter.YFilter) { interfaceBrief.YFilter = yf }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "interface-adjacent-neighbors" { return "InterfaceAdjacentNeighbors" }
    if yname == "network-type" { return "NetworkType" }
    return ""
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetSegmentPath() string {
    return "interface-brief" + "[interface-name='" + fmt.Sprintf("%v", interfaceBrief.InterfaceName) + "']"
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceBrief.InterfaceName
    leafs["interface-address"] = interfaceBrief.InterfaceAddress
    leafs["interface-link-cost"] = interfaceBrief.InterfaceLinkCost
    leafs["ospf-interface-state"] = interfaceBrief.OspfInterfaceState
    leafs["interface-neighbors"] = interfaceBrief.InterfaceNeighbors
    leafs["interface-adjacent-neighbors"] = interfaceBrief.InterfaceAdjacentNeighbors
    leafs["network-type"] = interfaceBrief.NetworkType
    return leafs
}

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetYangName() string { return "interface-brief" }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) SetParent(parent types.Entity) { interfaceBrief.parent = parent }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetParent() types.Entity { return interfaceBrief.parent }

func (interfaceBrief *Ospfv3_Processes_Process_Vrfs_Vrf_InterfaceBriefProcessTable_InterfaceBrief) GetParentYangName() string { return "interface-brief-process-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail.
    NeighborDetail []Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetFilter() yfilter.YFilter { return neighborDetailProcessTable.YFilter }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) SetFilter(yf yfilter.YFilter) { neighborDetailProcessTable.YFilter = yf }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetGoName(yname string) string {
    if yname == "neighbor-detail" { return "NeighborDetail" }
    return ""
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetSegmentPath() string {
    return "neighbor-detail-process-table"
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        for _, c := range neighborDetailProcessTable.NeighborDetail {
            if neighborDetailProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail{}
        neighborDetailProcessTable.NeighborDetail = append(neighborDetailProcessTable.NeighborDetail, child)
        return &neighborDetailProcessTable.NeighborDetail[len(neighborDetailProcessTable.NeighborDetail)-1]
    }
    return nil
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborDetailProcessTable.NeighborDetail {
        children[neighborDetailProcessTable.NeighborDetail[i].GetSegmentPath()] = &neighborDetailProcessTable.NeighborDetail[i]
    }
    return children
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetYangName() string { return "neighbor-detail-process-table" }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) SetParent(parent types.Entity) { neighborDetailProcessTable.parent = parent }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetParent() types.Entity { return neighborDetailProcessTable.parent }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable) GetParentYangName() string { return "vrf" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighborDetail.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighborDetail.NeighborBfdInfo
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighborDetail.NeighborDetail
    children["neighbor-bfd-info"] = &neighborDetail.NeighborBfdInfo
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighborDetail.InterfaceName
    leafs["neighbor-address"] = neighborDetail.NeighborAddress
    leafs["neighbor-address-xr"] = neighborDetail.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighborDetail.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighborDetail.NeighborDrPriority
    leafs["neighbor-state"] = neighborDetail.NeighborState
    leafs["neighbor-designated-router"] = neighborDetail.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighborDetail.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighborDetail.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighborDetail.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighborDetail.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighborDetail.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighborDetail.IsNeighborShamLink
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail) GetParentYangName() string { return "neighbor-detail-process-table" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_Vrfs_Vrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_Statistics
// Container for Statistics
type Ospfv3_Processes_Process_Statistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPF NSR statistics.
    NsrStats Ospfv3_Processes_Process_Statistics_NsrStats

    // OSPFv3 RIB thread statistics.
    RibThreadStats Ospfv3_Processes_Process_Statistics_RibThreadStats

    // OSPF ISSU statistics.
    IssuStats Ospfv3_Processes_Process_Statistics_IssuStats

    // OSPF NSR packet library statistics.
    NsrPlStats Ospfv3_Processes_Process_Statistics_NsrPlStats

    // Protocol table.
    ProtocolStats Ospfv3_Processes_Process_Statistics_ProtocolStats

    // OSPFv3 RIB batch statistics.
    SpfStats Ospfv3_Processes_Process_Statistics_SpfStats

    // OSPF Prefix SPF Prioritization statistics.
    RawioStats Ospfv3_Processes_Process_Statistics_RawioStats

    // OSPF Prefix SPF Prioritization statistics.
    PrefixPriorityStats Ospfv3_Processes_Process_Statistics_PrefixPriorityStats

    // OSPFv3 RIB batch statistics.
    VrfRibBatchStats Ospfv3_Processes_Process_Statistics_VrfRibBatchStats
}

func (statistics *Ospfv3_Processes_Process_Statistics) GetFilter() yfilter.YFilter { return statistics.YFilter }

func (statistics *Ospfv3_Processes_Process_Statistics) SetFilter(yf yfilter.YFilter) { statistics.YFilter = yf }

func (statistics *Ospfv3_Processes_Process_Statistics) GetGoName(yname string) string {
    if yname == "nsr-stats" { return "NsrStats" }
    if yname == "rib-thread-stats" { return "RibThreadStats" }
    if yname == "issu-stats" { return "IssuStats" }
    if yname == "nsr-pl-stats" { return "NsrPlStats" }
    if yname == "protocol-stats" { return "ProtocolStats" }
    if yname == "spf-stats" { return "SpfStats" }
    if yname == "rawio-stats" { return "RawioStats" }
    if yname == "prefix-priority-stats" { return "PrefixPriorityStats" }
    if yname == "vrf-rib-batch-stats" { return "VrfRibBatchStats" }
    return ""
}

func (statistics *Ospfv3_Processes_Process_Statistics) GetSegmentPath() string {
    return "statistics"
}

func (statistics *Ospfv3_Processes_Process_Statistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nsr-stats" {
        return &statistics.NsrStats
    }
    if childYangName == "rib-thread-stats" {
        return &statistics.RibThreadStats
    }
    if childYangName == "issu-stats" {
        return &statistics.IssuStats
    }
    if childYangName == "nsr-pl-stats" {
        return &statistics.NsrPlStats
    }
    if childYangName == "protocol-stats" {
        return &statistics.ProtocolStats
    }
    if childYangName == "spf-stats" {
        return &statistics.SpfStats
    }
    if childYangName == "rawio-stats" {
        return &statistics.RawioStats
    }
    if childYangName == "prefix-priority-stats" {
        return &statistics.PrefixPriorityStats
    }
    if childYangName == "vrf-rib-batch-stats" {
        return &statistics.VrfRibBatchStats
    }
    return nil
}

func (statistics *Ospfv3_Processes_Process_Statistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nsr-stats"] = &statistics.NsrStats
    children["rib-thread-stats"] = &statistics.RibThreadStats
    children["issu-stats"] = &statistics.IssuStats
    children["nsr-pl-stats"] = &statistics.NsrPlStats
    children["protocol-stats"] = &statistics.ProtocolStats
    children["spf-stats"] = &statistics.SpfStats
    children["rawio-stats"] = &statistics.RawioStats
    children["prefix-priority-stats"] = &statistics.PrefixPriorityStats
    children["vrf-rib-batch-stats"] = &statistics.VrfRibBatchStats
    return children
}

func (statistics *Ospfv3_Processes_Process_Statistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (statistics *Ospfv3_Processes_Process_Statistics) GetBundleName() string { return "cisco_ios_xr" }

func (statistics *Ospfv3_Processes_Process_Statistics) GetYangName() string { return "statistics" }

func (statistics *Ospfv3_Processes_Process_Statistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (statistics *Ospfv3_Processes_Process_Statistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (statistics *Ospfv3_Processes_Process_Statistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (statistics *Ospfv3_Processes_Process_Statistics) SetParent(parent types.Entity) { statistics.parent = parent }

func (statistics *Ospfv3_Processes_Process_Statistics) GetParent() types.Entity { return statistics.parent }

func (statistics *Ospfv3_Processes_Process_Statistics) GetParentYangName() string { return "process" }

// Ospfv3_Processes_Process_Statistics_NsrStats
// OSPF NSR statistics
type Ospfv3_Processes_Process_Statistics_NsrStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NSR revision. The type is interface{} with range: -2147483648..2147483647.
    NsrRevision interface{}

    // FSM state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // NSR version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // My nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeId interface{}

    // Partner NSR version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // Partner NodeID. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeId interface{}

    // Fabric MTU. The type is interface{} with range: 0..4294967295.
    NsrMtu interface{}

    // NBR QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // LSA QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // NBR QAD pending msg. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // LSA QAD pending msgs. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // Pending init-sync NBR msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // Pending init-sync LSA msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // Neighbor TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrNbrSeqNo interface{}

    // Interface TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrIntfSeqNo interface{}

    // Timers processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrTmrQuant interface{}

    // Attempts to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // Failures to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // Conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // Conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // Conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // NSR thread scheduler stats.
    NsrThdStats Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats

    // Rtr thread NSR pulse handler stats.
    NsrRtrThdSched Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched
}

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetFilter() yfilter.YFilter { return nsrStats.YFilter }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) SetFilter(yf yfilter.YFilter) { nsrStats.YFilter = yf }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetGoName(yname string) string {
    if yname == "nsr-revision" { return "NsrRevision" }
    if yname == "nsr-fsm-state" { return "NsrFsmState" }
    if yname == "nsr-version" { return "NsrVersion" }
    if yname == "nsr-node-id" { return "NsrNodeId" }
    if yname == "nsr-peer-version" { return "NsrPeerVersion" }
    if yname == "nsr-peer-node-id" { return "NsrPeerNodeId" }
    if yname == "nsr-mtu" { return "NsrMtu" }
    if yname == "nsr-nbr-qad-qid" { return "NsrNbrQadQid" }
    if yname == "nsr-lsa-qad-qid" { return "NsrLsaQadQid" }
    if yname == "nsr-nbr-qad-mdata-count" { return "NsrNbrQadMdataCount" }
    if yname == "nsr-lsa-qad-mdata-count" { return "NsrLsaQadMdataCount" }
    if yname == "nsr-nbr-init-sync-pend-count" { return "NsrNbrInitSyncPendCount" }
    if yname == "nsr-lsa-init-sync-pend-count" { return "NsrLsaInitSyncPendCount" }
    if yname == "nsr-nbr-seq-no" { return "NsrNbrSeqNo" }
    if yname == "nsr-intf-seq-no" { return "NsrIntfSeqNo" }
    if yname == "nsr-tmr-quant" { return "NsrTmrQuant" }
    if yname == "nsr-conn-to-active-attempts" { return "NsrConnToActiveAttempts" }
    if yname == "nsr-conn-to-active-fails" { return "NsrConnToActiveFails" }
    if yname == "nsr-conn-to-active-opens" { return "NsrConnToActiveOpens" }
    if yname == "nsr-conn-to-active-closes" { return "NsrConnToActiveCloses" }
    if yname == "nsr-conn-to-active-errors" { return "NsrConnToActiveErrors" }
    if yname == "nsr-thd-stats" { return "NsrThdStats" }
    if yname == "nsr-rtr-thd-sched" { return "NsrRtrThdSched" }
    return ""
}

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetSegmentPath() string {
    return "nsr-stats"
}

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nsr-thd-stats" {
        return &nsrStats.NsrThdStats
    }
    if childYangName == "nsr-rtr-thd-sched" {
        return &nsrStats.NsrRtrThdSched
    }
    return nil
}

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nsr-thd-stats"] = &nsrStats.NsrThdStats
    children["nsr-rtr-thd-sched"] = &nsrStats.NsrRtrThdSched
    return children
}

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-revision"] = nsrStats.NsrRevision
    leafs["nsr-fsm-state"] = nsrStats.NsrFsmState
    leafs["nsr-version"] = nsrStats.NsrVersion
    leafs["nsr-node-id"] = nsrStats.NsrNodeId
    leafs["nsr-peer-version"] = nsrStats.NsrPeerVersion
    leafs["nsr-peer-node-id"] = nsrStats.NsrPeerNodeId
    leafs["nsr-mtu"] = nsrStats.NsrMtu
    leafs["nsr-nbr-qad-qid"] = nsrStats.NsrNbrQadQid
    leafs["nsr-lsa-qad-qid"] = nsrStats.NsrLsaQadQid
    leafs["nsr-nbr-qad-mdata-count"] = nsrStats.NsrNbrQadMdataCount
    leafs["nsr-lsa-qad-mdata-count"] = nsrStats.NsrLsaQadMdataCount
    leafs["nsr-nbr-init-sync-pend-count"] = nsrStats.NsrNbrInitSyncPendCount
    leafs["nsr-lsa-init-sync-pend-count"] = nsrStats.NsrLsaInitSyncPendCount
    leafs["nsr-nbr-seq-no"] = nsrStats.NsrNbrSeqNo
    leafs["nsr-intf-seq-no"] = nsrStats.NsrIntfSeqNo
    leafs["nsr-tmr-quant"] = nsrStats.NsrTmrQuant
    leafs["nsr-conn-to-active-attempts"] = nsrStats.NsrConnToActiveAttempts
    leafs["nsr-conn-to-active-fails"] = nsrStats.NsrConnToActiveFails
    leafs["nsr-conn-to-active-opens"] = nsrStats.NsrConnToActiveOpens
    leafs["nsr-conn-to-active-closes"] = nsrStats.NsrConnToActiveCloses
    leafs["nsr-conn-to-active-errors"] = nsrStats.NsrConnToActiveErrors
    return leafs
}

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetBundleName() string { return "cisco_ios_xr" }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetYangName() string { return "nsr-stats" }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) SetParent(parent types.Entity) { nsrStats.parent = parent }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetParent() types.Entity { return nsrStats.parent }

func (nsrStats *Ospfv3_Processes_Process_Statistics_NsrStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats
// NSR thread scheduler stats
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri.
    NsrPri []Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetFilter() yfilter.YFilter { return nsrThdStats.YFilter }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) SetFilter(yf yfilter.YFilter) { nsrThdStats.YFilter = yf }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetGoName(yname string) string {
    if yname == "nsr-pulse-quant" { return "NsrPulseQuant" }
    if yname == "nsr-events-in-q" { return "NsrEventsInQ" }
    if yname == "nsr-events-tx" { return "NsrEventsTx" }
    if yname == "nsr-events-rx" { return "NsrEventsRx" }
    if yname == "nsr-bad-pulses-rx" { return "NsrBadPulsesRx" }
    if yname == "nsr-good-pulses-rx" { return "NsrGoodPulsesRx" }
    if yname == "nsr-pulses-tx" { return "NsrPulsesTx" }
    if yname == "nsr-pulse-tx-fails" { return "NsrPulseTxFails" }
    if yname == "nsr-pri" { return "NsrPri" }
    return ""
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetSegmentPath() string {
    return "nsr-thd-stats"
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nsr-pri" {
        for _, c := range nsrThdStats.NsrPri {
            if nsrThdStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri{}
        nsrThdStats.NsrPri = append(nsrThdStats.NsrPri, child)
        return &nsrThdStats.NsrPri[len(nsrThdStats.NsrPri)-1]
    }
    return nil
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nsrThdStats.NsrPri {
        children[nsrThdStats.NsrPri[i].GetSegmentPath()] = &nsrThdStats.NsrPri[i]
    }
    return children
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-pulse-quant"] = nsrThdStats.NsrPulseQuant
    leafs["nsr-events-in-q"] = nsrThdStats.NsrEventsInQ
    leafs["nsr-events-tx"] = nsrThdStats.NsrEventsTx
    leafs["nsr-events-rx"] = nsrThdStats.NsrEventsRx
    leafs["nsr-bad-pulses-rx"] = nsrThdStats.NsrBadPulsesRx
    leafs["nsr-good-pulses-rx"] = nsrThdStats.NsrGoodPulsesRx
    leafs["nsr-pulses-tx"] = nsrThdStats.NsrPulsesTx
    leafs["nsr-pulse-tx-fails"] = nsrThdStats.NsrPulseTxFails
    return leafs
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetBundleName() string { return "cisco_ios_xr" }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetYangName() string { return "nsr-thd-stats" }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) SetParent(parent types.Entity) { nsrThdStats.parent = parent }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetParent() types.Entity { return nsrThdStats.parent }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats) GetParentYangName() string { return "nsr-stats" }

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetFilter() yfilter.YFilter { return nsrPri.YFilter }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) SetFilter(yf yfilter.YFilter) { nsrPri.YFilter = yf }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetGoName(yname string) string {
    if yname == "nsr-sched-pri" { return "NsrSchedPri" }
    if yname == "nsr-sched-quant" { return "NsrSchedQuant" }
    if yname == "nsr-sched-remain-quant" { return "NsrSchedRemainQuant" }
    if yname == "nsr-sched-evs-in-q" { return "NsrSchedEvsInQ" }
    if yname == "nsr-sched-max-evs" { return "NsrSchedMaxEvs" }
    if yname == "nsr-sched-peak-q-len" { return "NsrSchedPeakQLen" }
    if yname == "nsr-sched-evs-qd" { return "NsrSchedEvsQd" }
    if yname == "nsr-sched-enq-fails" { return "NsrSchedEnqFails" }
    if yname == "nsr-sched-evs-deqd" { return "NsrSchedEvsDeqd" }
    return ""
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetSegmentPath() string {
    return "nsr-pri"
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-sched-pri"] = nsrPri.NsrSchedPri
    leafs["nsr-sched-quant"] = nsrPri.NsrSchedQuant
    leafs["nsr-sched-remain-quant"] = nsrPri.NsrSchedRemainQuant
    leafs["nsr-sched-evs-in-q"] = nsrPri.NsrSchedEvsInQ
    leafs["nsr-sched-max-evs"] = nsrPri.NsrSchedMaxEvs
    leafs["nsr-sched-peak-q-len"] = nsrPri.NsrSchedPeakQLen
    leafs["nsr-sched-evs-qd"] = nsrPri.NsrSchedEvsQd
    leafs["nsr-sched-enq-fails"] = nsrPri.NsrSchedEnqFails
    leafs["nsr-sched-evs-deqd"] = nsrPri.NsrSchedEvsDeqd
    return leafs
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetBundleName() string { return "cisco_ios_xr" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetYangName() string { return "nsr-pri" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) SetParent(parent types.Entity) { nsrPri.parent = parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetParent() types.Entity { return nsrPri.parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrThdStats_NsrPri) GetParentYangName() string { return "nsr-thd-stats" }

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched
// Rtr thread NSR pulse handler stats
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri.
    NsrPri []Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetFilter() yfilter.YFilter { return nsrRtrThdSched.YFilter }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) SetFilter(yf yfilter.YFilter) { nsrRtrThdSched.YFilter = yf }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetGoName(yname string) string {
    if yname == "nsr-pulse-quant" { return "NsrPulseQuant" }
    if yname == "nsr-events-in-q" { return "NsrEventsInQ" }
    if yname == "nsr-events-tx" { return "NsrEventsTx" }
    if yname == "nsr-events-rx" { return "NsrEventsRx" }
    if yname == "nsr-bad-pulses-rx" { return "NsrBadPulsesRx" }
    if yname == "nsr-good-pulses-rx" { return "NsrGoodPulsesRx" }
    if yname == "nsr-pulses-tx" { return "NsrPulsesTx" }
    if yname == "nsr-pulse-tx-fails" { return "NsrPulseTxFails" }
    if yname == "nsr-pri" { return "NsrPri" }
    return ""
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetSegmentPath() string {
    return "nsr-rtr-thd-sched"
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nsr-pri" {
        for _, c := range nsrRtrThdSched.NsrPri {
            if nsrRtrThdSched.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri{}
        nsrRtrThdSched.NsrPri = append(nsrRtrThdSched.NsrPri, child)
        return &nsrRtrThdSched.NsrPri[len(nsrRtrThdSched.NsrPri)-1]
    }
    return nil
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nsrRtrThdSched.NsrPri {
        children[nsrRtrThdSched.NsrPri[i].GetSegmentPath()] = &nsrRtrThdSched.NsrPri[i]
    }
    return children
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-pulse-quant"] = nsrRtrThdSched.NsrPulseQuant
    leafs["nsr-events-in-q"] = nsrRtrThdSched.NsrEventsInQ
    leafs["nsr-events-tx"] = nsrRtrThdSched.NsrEventsTx
    leafs["nsr-events-rx"] = nsrRtrThdSched.NsrEventsRx
    leafs["nsr-bad-pulses-rx"] = nsrRtrThdSched.NsrBadPulsesRx
    leafs["nsr-good-pulses-rx"] = nsrRtrThdSched.NsrGoodPulsesRx
    leafs["nsr-pulses-tx"] = nsrRtrThdSched.NsrPulsesTx
    leafs["nsr-pulse-tx-fails"] = nsrRtrThdSched.NsrPulseTxFails
    return leafs
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetBundleName() string { return "cisco_ios_xr" }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetYangName() string { return "nsr-rtr-thd-sched" }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) SetParent(parent types.Entity) { nsrRtrThdSched.parent = parent }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetParent() types.Entity { return nsrRtrThdSched.parent }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched) GetParentYangName() string { return "nsr-stats" }

// Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetFilter() yfilter.YFilter { return nsrPri.YFilter }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) SetFilter(yf yfilter.YFilter) { nsrPri.YFilter = yf }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetGoName(yname string) string {
    if yname == "nsr-sched-pri" { return "NsrSchedPri" }
    if yname == "nsr-sched-quant" { return "NsrSchedQuant" }
    if yname == "nsr-sched-remain-quant" { return "NsrSchedRemainQuant" }
    if yname == "nsr-sched-evs-in-q" { return "NsrSchedEvsInQ" }
    if yname == "nsr-sched-max-evs" { return "NsrSchedMaxEvs" }
    if yname == "nsr-sched-peak-q-len" { return "NsrSchedPeakQLen" }
    if yname == "nsr-sched-evs-qd" { return "NsrSchedEvsQd" }
    if yname == "nsr-sched-enq-fails" { return "NsrSchedEnqFails" }
    if yname == "nsr-sched-evs-deqd" { return "NsrSchedEvsDeqd" }
    return ""
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetSegmentPath() string {
    return "nsr-pri"
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-sched-pri"] = nsrPri.NsrSchedPri
    leafs["nsr-sched-quant"] = nsrPri.NsrSchedQuant
    leafs["nsr-sched-remain-quant"] = nsrPri.NsrSchedRemainQuant
    leafs["nsr-sched-evs-in-q"] = nsrPri.NsrSchedEvsInQ
    leafs["nsr-sched-max-evs"] = nsrPri.NsrSchedMaxEvs
    leafs["nsr-sched-peak-q-len"] = nsrPri.NsrSchedPeakQLen
    leafs["nsr-sched-evs-qd"] = nsrPri.NsrSchedEvsQd
    leafs["nsr-sched-enq-fails"] = nsrPri.NsrSchedEnqFails
    leafs["nsr-sched-evs-deqd"] = nsrPri.NsrSchedEvsDeqd
    return leafs
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetBundleName() string { return "cisco_ios_xr" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetYangName() string { return "nsr-pri" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) SetParent(parent types.Entity) { nsrPri.parent = parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetParent() types.Entity { return nsrPri.parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_NsrStats_NsrRtrThdSched_NsrPri) GetParentYangName() string { return "nsr-rtr-thd-sched" }

// Ospfv3_Processes_Process_Statistics_RibThreadStats
// OSPFv3 RIB thread statistics
type Ospfv3_Processes_Process_Statistics_RibThreadStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RIB Thread Active Indicator. The type is bool.
    WqThreadActive interface{}

    // Signals sent to RIB Thread. The type is interface{} with range:
    // 0..4294967295.
    WqSignals interface{}

    // Rib Base Clock. The type is interface{} with range:
    // 0..18446744073709551615.
    RibBaseClock interface{}

    // No. of Rib batches sent. The type is interface{} with range: 0..4294967295.
    RibBatchSent interface{}

    // No. of Rib batches purged. The type is interface{} with range:
    // 0..4294967295.
    RibBatchPurged interface{}

    // Rib drop version. The type is interface{} with range: 0..4294967295.
    RibDropVersion interface{}

    // Rib drop connections. The type is interface{} with range: 0..4294967295.
    RibDropConn interface{}

    // Rib Batches Ok. The type is interface{} with range: 0..4294967295.
    RibBatchOk interface{}

    // Rib Batches Back up. The type is interface{} with range: 0..4294967295.
    RibBatchBackup interface{}

    // Rib Batches Limit. The type is interface{} with range: 0..4294967295.
    RibBatchLimit interface{}

    // Batches no table. The type is interface{} with range: 0..4294967295.
    RibBatchNoTable interface{}

    // Batches with some error. The type is interface{} with range: 0..4294967295.
    RibBatchSomeErr interface{}

    // Batch errors. The type is interface{} with range: 0..4294967295.
    RibBatchErr interface{}

    // Route table limit. The type is interface{} with range: 0..4294967295.
    RibRouteLimit interface{}

    // Route some errors. The type is interface{} with range: 0..4294967295.
    RibRouteSomeErr interface{}

    // Route Errors. The type is interface{} with range: 0..4294967295.
    RibRouteErr interface{}

    // Route path limits. The type is interface{} with range: 0..4294967295.
    RibPathLimit interface{}

    // Route path errors. The type is interface{} with range: 0..4294967295.
    RibPathErr interface{}

    // Max time entry was in queue. The type is interface{} with range:
    // 0..18446744073709551615.
    RibMaxLatency interface{}

    // Sum latencies to calc average. The type is interface{} with range:
    // 0..18446744073709551615.
    RibSumLatency interface{}

    // Inter Thread Queue.
    ThreadQ Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ

    // rib base time.
    RibBaseTime Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime

    // holdq. The type is slice of
    // Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq.
    Holdq []Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq
}

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetFilter() yfilter.YFilter { return ribThreadStats.YFilter }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) SetFilter(yf yfilter.YFilter) { ribThreadStats.YFilter = yf }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetGoName(yname string) string {
    if yname == "wq-thread-active" { return "WqThreadActive" }
    if yname == "wq-signals" { return "WqSignals" }
    if yname == "rib-base-clock" { return "RibBaseClock" }
    if yname == "rib-batch-sent" { return "RibBatchSent" }
    if yname == "rib-batch-purged" { return "RibBatchPurged" }
    if yname == "rib-drop-version" { return "RibDropVersion" }
    if yname == "rib-drop-conn" { return "RibDropConn" }
    if yname == "rib-batch-ok" { return "RibBatchOk" }
    if yname == "rib-batch-backup" { return "RibBatchBackup" }
    if yname == "rib-batch-limit" { return "RibBatchLimit" }
    if yname == "rib-batch-no-table" { return "RibBatchNoTable" }
    if yname == "rib-batch-some-err" { return "RibBatchSomeErr" }
    if yname == "rib-batch-err" { return "RibBatchErr" }
    if yname == "rib-route-limit" { return "RibRouteLimit" }
    if yname == "rib-route-some-err" { return "RibRouteSomeErr" }
    if yname == "rib-route-err" { return "RibRouteErr" }
    if yname == "rib-path-limit" { return "RibPathLimit" }
    if yname == "rib-path-err" { return "RibPathErr" }
    if yname == "rib-max-latency" { return "RibMaxLatency" }
    if yname == "rib-sum-latency" { return "RibSumLatency" }
    if yname == "thread-q" { return "ThreadQ" }
    if yname == "rib-base-time" { return "RibBaseTime" }
    if yname == "holdq" { return "Holdq" }
    return ""
}

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetSegmentPath() string {
    return "rib-thread-stats"
}

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "thread-q" {
        return &ribThreadStats.ThreadQ
    }
    if childYangName == "rib-base-time" {
        return &ribThreadStats.RibBaseTime
    }
    if childYangName == "holdq" {
        for _, c := range ribThreadStats.Holdq {
            if ribThreadStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq{}
        ribThreadStats.Holdq = append(ribThreadStats.Holdq, child)
        return &ribThreadStats.Holdq[len(ribThreadStats.Holdq)-1]
    }
    return nil
}

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["thread-q"] = &ribThreadStats.ThreadQ
    children["rib-base-time"] = &ribThreadStats.RibBaseTime
    for i := range ribThreadStats.Holdq {
        children[ribThreadStats.Holdq[i].GetSegmentPath()] = &ribThreadStats.Holdq[i]
    }
    return children
}

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wq-thread-active"] = ribThreadStats.WqThreadActive
    leafs["wq-signals"] = ribThreadStats.WqSignals
    leafs["rib-base-clock"] = ribThreadStats.RibBaseClock
    leafs["rib-batch-sent"] = ribThreadStats.RibBatchSent
    leafs["rib-batch-purged"] = ribThreadStats.RibBatchPurged
    leafs["rib-drop-version"] = ribThreadStats.RibDropVersion
    leafs["rib-drop-conn"] = ribThreadStats.RibDropConn
    leafs["rib-batch-ok"] = ribThreadStats.RibBatchOk
    leafs["rib-batch-backup"] = ribThreadStats.RibBatchBackup
    leafs["rib-batch-limit"] = ribThreadStats.RibBatchLimit
    leafs["rib-batch-no-table"] = ribThreadStats.RibBatchNoTable
    leafs["rib-batch-some-err"] = ribThreadStats.RibBatchSomeErr
    leafs["rib-batch-err"] = ribThreadStats.RibBatchErr
    leafs["rib-route-limit"] = ribThreadStats.RibRouteLimit
    leafs["rib-route-some-err"] = ribThreadStats.RibRouteSomeErr
    leafs["rib-route-err"] = ribThreadStats.RibRouteErr
    leafs["rib-path-limit"] = ribThreadStats.RibPathLimit
    leafs["rib-path-err"] = ribThreadStats.RibPathErr
    leafs["rib-max-latency"] = ribThreadStats.RibMaxLatency
    leafs["rib-sum-latency"] = ribThreadStats.RibSumLatency
    return leafs
}

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetBundleName() string { return "cisco_ios_xr" }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetYangName() string { return "rib-thread-stats" }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) SetParent(parent types.Entity) { ribThreadStats.parent = parent }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetParent() types.Entity { return ribThreadStats.parent }

func (ribThreadStats *Ospfv3_Processes_Process_Statistics_RibThreadStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ
// Inter Thread Queue
type Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Head Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqEqtime interface{}

    // Last Entry Dequeue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqDqtime interface{}

    // First Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqFirstEqtime interface{}

    // Current Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenCur interface{}

    // Largest Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenMax interface{}

    // Total Entries Enqueued. The type is interface{} with range: 0..4294967295.
    WqTotalEnqueued interface{}

    // Total Entries Dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // Enqueue Errors. The type is interface{} with range: 0..4294967295.
    WqEneueueErrs interface{}

    // Dequeue Errors. The type is interface{} with range: 0..4294967295.
    WqDequeueErrs interface{}

    // Max Time Entry Was In Q. The type is interface{} with range:
    // 0..18446744073709551615.
    WqMaxLatency interface{}

    // Sum Latencies To Calc Average. The type is interface{} with range:
    // 0..18446744073709551615.
    WqSumLatency interface{}
}

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetFilter() yfilter.YFilter { return threadQ.YFilter }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) SetFilter(yf yfilter.YFilter) { threadQ.YFilter = yf }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetGoName(yname string) string {
    if yname == "wq-eqtime" { return "WqEqtime" }
    if yname == "wq-dqtime" { return "WqDqtime" }
    if yname == "wq-first-eqtime" { return "WqFirstEqtime" }
    if yname == "wq-len-cur" { return "WqLenCur" }
    if yname == "wq-len-max" { return "WqLenMax" }
    if yname == "wq-total-enqueued" { return "WqTotalEnqueued" }
    if yname == "wq-total-dequeued" { return "WqTotalDequeued" }
    if yname == "wq-eneueue-errs" { return "WqEneueueErrs" }
    if yname == "wq-dequeue-errs" { return "WqDequeueErrs" }
    if yname == "wq-max-latency" { return "WqMaxLatency" }
    if yname == "wq-sum-latency" { return "WqSumLatency" }
    return ""
}

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetSegmentPath() string {
    return "thread-q"
}

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wq-eqtime"] = threadQ.WqEqtime
    leafs["wq-dqtime"] = threadQ.WqDqtime
    leafs["wq-first-eqtime"] = threadQ.WqFirstEqtime
    leafs["wq-len-cur"] = threadQ.WqLenCur
    leafs["wq-len-max"] = threadQ.WqLenMax
    leafs["wq-total-enqueued"] = threadQ.WqTotalEnqueued
    leafs["wq-total-dequeued"] = threadQ.WqTotalDequeued
    leafs["wq-eneueue-errs"] = threadQ.WqEneueueErrs
    leafs["wq-dequeue-errs"] = threadQ.WqDequeueErrs
    leafs["wq-max-latency"] = threadQ.WqMaxLatency
    leafs["wq-sum-latency"] = threadQ.WqSumLatency
    return leafs
}

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetBundleName() string { return "cisco_ios_xr" }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetYangName() string { return "thread-q" }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) SetParent(parent types.Entity) { threadQ.parent = parent }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetParent() types.Entity { return threadQ.parent }

func (threadQ *Ospfv3_Processes_Process_Statistics_RibThreadStats_ThreadQ) GetParentYangName() string { return "rib-thread-stats" }

// Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime
// rib base time
type Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetFilter() yfilter.YFilter { return ribBaseTime.YFilter }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) SetFilter(yf yfilter.YFilter) { ribBaseTime.YFilter = yf }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetSegmentPath() string {
    return "rib-base-time"
}

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = ribBaseTime.Second
    leafs["nanosecond"] = ribBaseTime.Nanosecond
    return leafs
}

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetBundleName() string { return "cisco_ios_xr" }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetYangName() string { return "rib-base-time" }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) SetParent(parent types.Entity) { ribBaseTime.parent = parent }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetParent() types.Entity { return ribBaseTime.parent }

func (ribBaseTime *Ospfv3_Processes_Process_Statistics_RibThreadStats_RibBaseTime) GetParentYangName() string { return "rib-thread-stats" }

// Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq
// holdq
type Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Head Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqEqtime interface{}

    // Last Entry Dequeue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqDqtime interface{}

    // First Entry Enqueue. The type is interface{} with range:
    // 0..18446744073709551615.
    WqFirstEqtime interface{}

    // Current Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenCur interface{}

    // Largest Work Queue Length. The type is interface{} with range:
    // -2147483648..2147483647.
    WqLenMax interface{}

    // Total Entries Enqueued. The type is interface{} with range: 0..4294967295.
    WqTotalEnqueued interface{}

    // Total Entries Dequeued. The type is interface{} with range: 0..4294967295.
    WqTotalDequeued interface{}

    // Enqueue Errors. The type is interface{} with range: 0..4294967295.
    WqEneueueErrs interface{}

    // Dequeue Errors. The type is interface{} with range: 0..4294967295.
    WqDequeueErrs interface{}

    // Max Time Entry Was In Q. The type is interface{} with range:
    // 0..18446744073709551615.
    WqMaxLatency interface{}

    // Sum Latencies To Calc Average. The type is interface{} with range:
    // 0..18446744073709551615.
    WqSumLatency interface{}
}

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetFilter() yfilter.YFilter { return holdq.YFilter }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) SetFilter(yf yfilter.YFilter) { holdq.YFilter = yf }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetGoName(yname string) string {
    if yname == "wq-eqtime" { return "WqEqtime" }
    if yname == "wq-dqtime" { return "WqDqtime" }
    if yname == "wq-first-eqtime" { return "WqFirstEqtime" }
    if yname == "wq-len-cur" { return "WqLenCur" }
    if yname == "wq-len-max" { return "WqLenMax" }
    if yname == "wq-total-enqueued" { return "WqTotalEnqueued" }
    if yname == "wq-total-dequeued" { return "WqTotalDequeued" }
    if yname == "wq-eneueue-errs" { return "WqEneueueErrs" }
    if yname == "wq-dequeue-errs" { return "WqDequeueErrs" }
    if yname == "wq-max-latency" { return "WqMaxLatency" }
    if yname == "wq-sum-latency" { return "WqSumLatency" }
    return ""
}

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetSegmentPath() string {
    return "holdq"
}

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wq-eqtime"] = holdq.WqEqtime
    leafs["wq-dqtime"] = holdq.WqDqtime
    leafs["wq-first-eqtime"] = holdq.WqFirstEqtime
    leafs["wq-len-cur"] = holdq.WqLenCur
    leafs["wq-len-max"] = holdq.WqLenMax
    leafs["wq-total-enqueued"] = holdq.WqTotalEnqueued
    leafs["wq-total-dequeued"] = holdq.WqTotalDequeued
    leafs["wq-eneueue-errs"] = holdq.WqEneueueErrs
    leafs["wq-dequeue-errs"] = holdq.WqDequeueErrs
    leafs["wq-max-latency"] = holdq.WqMaxLatency
    leafs["wq-sum-latency"] = holdq.WqSumLatency
    return leafs
}

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetBundleName() string { return "cisco_ios_xr" }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetYangName() string { return "holdq" }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) SetParent(parent types.Entity) { holdq.parent = parent }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetParent() types.Entity { return holdq.parent }

func (holdq *Ospfv3_Processes_Process_Statistics_RibThreadStats_Holdq) GetParentYangName() string { return "rib-thread-stats" }

// Ospfv3_Processes_Process_Statistics_IssuStats
// OSPF ISSU statistics
type Ospfv3_Processes_Process_Statistics_IssuStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // NSR revision. The type is interface{} with range: -2147483648..2147483647.
    NsrRevision interface{}

    // FSM state. The type is interface{} with range: -2147483648..2147483647.
    NsrFsmState interface{}

    // NSR version. The type is interface{} with range: 0..4294967295.
    NsrVersion interface{}

    // My nodeid. The type is interface{} with range: 0..4294967295.
    NsrNodeId interface{}

    // Partner NSR version. The type is interface{} with range: 0..4294967295.
    NsrPeerVersion interface{}

    // Partner NodeID. The type is interface{} with range: 0..4294967295.
    NsrPeerNodeId interface{}

    // Fabric MTU. The type is interface{} with range: 0..4294967295.
    NsrMtu interface{}

    // NBR QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrNbrQadQid interface{}

    // LSA QAD queue id. The type is interface{} with range: 0..4294967295.
    NsrLsaQadQid interface{}

    // NBR QAD pending msg. The type is interface{} with range: 0..4294967295.
    NsrNbrQadMdataCount interface{}

    // LSA QAD pending msgs. The type is interface{} with range: 0..4294967295.
    NsrLsaQadMdataCount interface{}

    // Pending init-sync NBR msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrNbrInitSyncPendCount interface{}

    // Pending init-sync LSA msgs. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrLsaInitSyncPendCount interface{}

    // Neighbor TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrNbrSeqNo interface{}

    // Interface TLV sequence no. The type is interface{} with range:
    // 0..4294967295.
    NsrIntfSeqNo interface{}

    // Timers processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrTmrQuant interface{}

    // Attempts to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveAttempts interface{}

    // Failures to connect to active. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveFails interface{}

    // Conn to active opens. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveOpens interface{}

    // Conn to active closes. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveCloses interface{}

    // Conn to active errors. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrConnToActiveErrors interface{}

    // NSR thread scheduler stats.
    NsrThdStats Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats

    // Rtr thread NSR pulse handler stats.
    NsrRtrThdSched Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched
}

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetFilter() yfilter.YFilter { return issuStats.YFilter }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) SetFilter(yf yfilter.YFilter) { issuStats.YFilter = yf }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetGoName(yname string) string {
    if yname == "nsr-revision" { return "NsrRevision" }
    if yname == "nsr-fsm-state" { return "NsrFsmState" }
    if yname == "nsr-version" { return "NsrVersion" }
    if yname == "nsr-node-id" { return "NsrNodeId" }
    if yname == "nsr-peer-version" { return "NsrPeerVersion" }
    if yname == "nsr-peer-node-id" { return "NsrPeerNodeId" }
    if yname == "nsr-mtu" { return "NsrMtu" }
    if yname == "nsr-nbr-qad-qid" { return "NsrNbrQadQid" }
    if yname == "nsr-lsa-qad-qid" { return "NsrLsaQadQid" }
    if yname == "nsr-nbr-qad-mdata-count" { return "NsrNbrQadMdataCount" }
    if yname == "nsr-lsa-qad-mdata-count" { return "NsrLsaQadMdataCount" }
    if yname == "nsr-nbr-init-sync-pend-count" { return "NsrNbrInitSyncPendCount" }
    if yname == "nsr-lsa-init-sync-pend-count" { return "NsrLsaInitSyncPendCount" }
    if yname == "nsr-nbr-seq-no" { return "NsrNbrSeqNo" }
    if yname == "nsr-intf-seq-no" { return "NsrIntfSeqNo" }
    if yname == "nsr-tmr-quant" { return "NsrTmrQuant" }
    if yname == "nsr-conn-to-active-attempts" { return "NsrConnToActiveAttempts" }
    if yname == "nsr-conn-to-active-fails" { return "NsrConnToActiveFails" }
    if yname == "nsr-conn-to-active-opens" { return "NsrConnToActiveOpens" }
    if yname == "nsr-conn-to-active-closes" { return "NsrConnToActiveCloses" }
    if yname == "nsr-conn-to-active-errors" { return "NsrConnToActiveErrors" }
    if yname == "nsr-thd-stats" { return "NsrThdStats" }
    if yname == "nsr-rtr-thd-sched" { return "NsrRtrThdSched" }
    return ""
}

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetSegmentPath() string {
    return "issu-stats"
}

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nsr-thd-stats" {
        return &issuStats.NsrThdStats
    }
    if childYangName == "nsr-rtr-thd-sched" {
        return &issuStats.NsrRtrThdSched
    }
    return nil
}

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["nsr-thd-stats"] = &issuStats.NsrThdStats
    children["nsr-rtr-thd-sched"] = &issuStats.NsrRtrThdSched
    return children
}

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-revision"] = issuStats.NsrRevision
    leafs["nsr-fsm-state"] = issuStats.NsrFsmState
    leafs["nsr-version"] = issuStats.NsrVersion
    leafs["nsr-node-id"] = issuStats.NsrNodeId
    leafs["nsr-peer-version"] = issuStats.NsrPeerVersion
    leafs["nsr-peer-node-id"] = issuStats.NsrPeerNodeId
    leafs["nsr-mtu"] = issuStats.NsrMtu
    leafs["nsr-nbr-qad-qid"] = issuStats.NsrNbrQadQid
    leafs["nsr-lsa-qad-qid"] = issuStats.NsrLsaQadQid
    leafs["nsr-nbr-qad-mdata-count"] = issuStats.NsrNbrQadMdataCount
    leafs["nsr-lsa-qad-mdata-count"] = issuStats.NsrLsaQadMdataCount
    leafs["nsr-nbr-init-sync-pend-count"] = issuStats.NsrNbrInitSyncPendCount
    leafs["nsr-lsa-init-sync-pend-count"] = issuStats.NsrLsaInitSyncPendCount
    leafs["nsr-nbr-seq-no"] = issuStats.NsrNbrSeqNo
    leafs["nsr-intf-seq-no"] = issuStats.NsrIntfSeqNo
    leafs["nsr-tmr-quant"] = issuStats.NsrTmrQuant
    leafs["nsr-conn-to-active-attempts"] = issuStats.NsrConnToActiveAttempts
    leafs["nsr-conn-to-active-fails"] = issuStats.NsrConnToActiveFails
    leafs["nsr-conn-to-active-opens"] = issuStats.NsrConnToActiveOpens
    leafs["nsr-conn-to-active-closes"] = issuStats.NsrConnToActiveCloses
    leafs["nsr-conn-to-active-errors"] = issuStats.NsrConnToActiveErrors
    return leafs
}

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetBundleName() string { return "cisco_ios_xr" }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetYangName() string { return "issu-stats" }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) SetParent(parent types.Entity) { issuStats.parent = parent }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetParent() types.Entity { return issuStats.parent }

func (issuStats *Ospfv3_Processes_Process_Statistics_IssuStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats
// NSR thread scheduler stats
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri.
    NsrPri []Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetFilter() yfilter.YFilter { return nsrThdStats.YFilter }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) SetFilter(yf yfilter.YFilter) { nsrThdStats.YFilter = yf }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetGoName(yname string) string {
    if yname == "nsr-pulse-quant" { return "NsrPulseQuant" }
    if yname == "nsr-events-in-q" { return "NsrEventsInQ" }
    if yname == "nsr-events-tx" { return "NsrEventsTx" }
    if yname == "nsr-events-rx" { return "NsrEventsRx" }
    if yname == "nsr-bad-pulses-rx" { return "NsrBadPulsesRx" }
    if yname == "nsr-good-pulses-rx" { return "NsrGoodPulsesRx" }
    if yname == "nsr-pulses-tx" { return "NsrPulsesTx" }
    if yname == "nsr-pulse-tx-fails" { return "NsrPulseTxFails" }
    if yname == "nsr-pri" { return "NsrPri" }
    return ""
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetSegmentPath() string {
    return "nsr-thd-stats"
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nsr-pri" {
        for _, c := range nsrThdStats.NsrPri {
            if nsrThdStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri{}
        nsrThdStats.NsrPri = append(nsrThdStats.NsrPri, child)
        return &nsrThdStats.NsrPri[len(nsrThdStats.NsrPri)-1]
    }
    return nil
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nsrThdStats.NsrPri {
        children[nsrThdStats.NsrPri[i].GetSegmentPath()] = &nsrThdStats.NsrPri[i]
    }
    return children
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-pulse-quant"] = nsrThdStats.NsrPulseQuant
    leafs["nsr-events-in-q"] = nsrThdStats.NsrEventsInQ
    leafs["nsr-events-tx"] = nsrThdStats.NsrEventsTx
    leafs["nsr-events-rx"] = nsrThdStats.NsrEventsRx
    leafs["nsr-bad-pulses-rx"] = nsrThdStats.NsrBadPulsesRx
    leafs["nsr-good-pulses-rx"] = nsrThdStats.NsrGoodPulsesRx
    leafs["nsr-pulses-tx"] = nsrThdStats.NsrPulsesTx
    leafs["nsr-pulse-tx-fails"] = nsrThdStats.NsrPulseTxFails
    return leafs
}

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetBundleName() string { return "cisco_ios_xr" }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetYangName() string { return "nsr-thd-stats" }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) SetParent(parent types.Entity) { nsrThdStats.parent = parent }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetParent() types.Entity { return nsrThdStats.parent }

func (nsrThdStats *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats) GetParentYangName() string { return "issu-stats" }

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetFilter() yfilter.YFilter { return nsrPri.YFilter }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) SetFilter(yf yfilter.YFilter) { nsrPri.YFilter = yf }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetGoName(yname string) string {
    if yname == "nsr-sched-pri" { return "NsrSchedPri" }
    if yname == "nsr-sched-quant" { return "NsrSchedQuant" }
    if yname == "nsr-sched-remain-quant" { return "NsrSchedRemainQuant" }
    if yname == "nsr-sched-evs-in-q" { return "NsrSchedEvsInQ" }
    if yname == "nsr-sched-max-evs" { return "NsrSchedMaxEvs" }
    if yname == "nsr-sched-peak-q-len" { return "NsrSchedPeakQLen" }
    if yname == "nsr-sched-evs-qd" { return "NsrSchedEvsQd" }
    if yname == "nsr-sched-enq-fails" { return "NsrSchedEnqFails" }
    if yname == "nsr-sched-evs-deqd" { return "NsrSchedEvsDeqd" }
    return ""
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetSegmentPath() string {
    return "nsr-pri"
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-sched-pri"] = nsrPri.NsrSchedPri
    leafs["nsr-sched-quant"] = nsrPri.NsrSchedQuant
    leafs["nsr-sched-remain-quant"] = nsrPri.NsrSchedRemainQuant
    leafs["nsr-sched-evs-in-q"] = nsrPri.NsrSchedEvsInQ
    leafs["nsr-sched-max-evs"] = nsrPri.NsrSchedMaxEvs
    leafs["nsr-sched-peak-q-len"] = nsrPri.NsrSchedPeakQLen
    leafs["nsr-sched-evs-qd"] = nsrPri.NsrSchedEvsQd
    leafs["nsr-sched-enq-fails"] = nsrPri.NsrSchedEnqFails
    leafs["nsr-sched-evs-deqd"] = nsrPri.NsrSchedEvsDeqd
    return leafs
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetBundleName() string { return "cisco_ios_xr" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetYangName() string { return "nsr-pri" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) SetParent(parent types.Entity) { nsrPri.parent = parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetParent() types.Entity { return nsrPri.parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrThdStats_NsrPri) GetParentYangName() string { return "nsr-thd-stats" }

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched
// Rtr thread NSR pulse handler stats
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Events processed per pulse. The type is interface{} with range:
    // -2147483648..2147483647.
    NsrPulseQuant interface{}

    // Events pending. The type is interface{} with range: 0..4294967295.
    NsrEventsInQ interface{}

    // Events to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsTx interface{}

    // Events processed. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrEventsRx interface{}

    // Bad pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrBadPulsesRx interface{}

    // Good pulses received. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrGoodPulsesRx interface{}

    // Pulses to Router thread. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulsesTx interface{}

    // Pulse send failures. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrPulseTxFails interface{}

    // nsr pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri.
    NsrPri []Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetFilter() yfilter.YFilter { return nsrRtrThdSched.YFilter }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) SetFilter(yf yfilter.YFilter) { nsrRtrThdSched.YFilter = yf }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetGoName(yname string) string {
    if yname == "nsr-pulse-quant" { return "NsrPulseQuant" }
    if yname == "nsr-events-in-q" { return "NsrEventsInQ" }
    if yname == "nsr-events-tx" { return "NsrEventsTx" }
    if yname == "nsr-events-rx" { return "NsrEventsRx" }
    if yname == "nsr-bad-pulses-rx" { return "NsrBadPulsesRx" }
    if yname == "nsr-good-pulses-rx" { return "NsrGoodPulsesRx" }
    if yname == "nsr-pulses-tx" { return "NsrPulsesTx" }
    if yname == "nsr-pulse-tx-fails" { return "NsrPulseTxFails" }
    if yname == "nsr-pri" { return "NsrPri" }
    return ""
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetSegmentPath() string {
    return "nsr-rtr-thd-sched"
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "nsr-pri" {
        for _, c := range nsrRtrThdSched.NsrPri {
            if nsrRtrThdSched.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri{}
        nsrRtrThdSched.NsrPri = append(nsrRtrThdSched.NsrPri, child)
        return &nsrRtrThdSched.NsrPri[len(nsrRtrThdSched.NsrPri)-1]
    }
    return nil
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nsrRtrThdSched.NsrPri {
        children[nsrRtrThdSched.NsrPri[i].GetSegmentPath()] = &nsrRtrThdSched.NsrPri[i]
    }
    return children
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-pulse-quant"] = nsrRtrThdSched.NsrPulseQuant
    leafs["nsr-events-in-q"] = nsrRtrThdSched.NsrEventsInQ
    leafs["nsr-events-tx"] = nsrRtrThdSched.NsrEventsTx
    leafs["nsr-events-rx"] = nsrRtrThdSched.NsrEventsRx
    leafs["nsr-bad-pulses-rx"] = nsrRtrThdSched.NsrBadPulsesRx
    leafs["nsr-good-pulses-rx"] = nsrRtrThdSched.NsrGoodPulsesRx
    leafs["nsr-pulses-tx"] = nsrRtrThdSched.NsrPulsesTx
    leafs["nsr-pulse-tx-fails"] = nsrRtrThdSched.NsrPulseTxFails
    return leafs
}

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetBundleName() string { return "cisco_ios_xr" }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetYangName() string { return "nsr-rtr-thd-sched" }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) SetParent(parent types.Entity) { nsrRtrThdSched.parent = parent }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetParent() types.Entity { return nsrRtrThdSched.parent }

func (nsrRtrThdSched *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched) GetParentYangName() string { return "issu-stats" }

// Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri
// nsr pri
type Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Priority Type. The type is OspfNsrSchedPri.
    NsrSchedPri interface{}

    // Priority Queue. The type is interface{} with range: 0..255.
    NsrSchedQuant interface{}

    // Remaining quantum. The type is interface{} with range: 0..255.
    NsrSchedRemainQuant interface{}

    // Events pending. The type is interface{} with range: 0..65535.
    NsrSchedEvsInQ interface{}

    // Max Queued. The type is interface{} with range: 0..65535.
    NsrSchedMaxEvs interface{}

    // Peak queue length. The type is interface{} with range: 0..65535.
    NsrSchedPeakQLen interface{}

    // Events queued. The type is interface{} with range: 0..18446744073709551615.
    NsrSchedEvsQd interface{}

    // Event enqueue fails. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEnqFails interface{}

    // Events dequeued. The type is interface{} with range:
    // 0..18446744073709551615.
    NsrSchedEvsDeqd interface{}
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetFilter() yfilter.YFilter { return nsrPri.YFilter }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) SetFilter(yf yfilter.YFilter) { nsrPri.YFilter = yf }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetGoName(yname string) string {
    if yname == "nsr-sched-pri" { return "NsrSchedPri" }
    if yname == "nsr-sched-quant" { return "NsrSchedQuant" }
    if yname == "nsr-sched-remain-quant" { return "NsrSchedRemainQuant" }
    if yname == "nsr-sched-evs-in-q" { return "NsrSchedEvsInQ" }
    if yname == "nsr-sched-max-evs" { return "NsrSchedMaxEvs" }
    if yname == "nsr-sched-peak-q-len" { return "NsrSchedPeakQLen" }
    if yname == "nsr-sched-evs-qd" { return "NsrSchedEvsQd" }
    if yname == "nsr-sched-enq-fails" { return "NsrSchedEnqFails" }
    if yname == "nsr-sched-evs-deqd" { return "NsrSchedEvsDeqd" }
    return ""
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetSegmentPath() string {
    return "nsr-pri"
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-sched-pri"] = nsrPri.NsrSchedPri
    leafs["nsr-sched-quant"] = nsrPri.NsrSchedQuant
    leafs["nsr-sched-remain-quant"] = nsrPri.NsrSchedRemainQuant
    leafs["nsr-sched-evs-in-q"] = nsrPri.NsrSchedEvsInQ
    leafs["nsr-sched-max-evs"] = nsrPri.NsrSchedMaxEvs
    leafs["nsr-sched-peak-q-len"] = nsrPri.NsrSchedPeakQLen
    leafs["nsr-sched-evs-qd"] = nsrPri.NsrSchedEvsQd
    leafs["nsr-sched-enq-fails"] = nsrPri.NsrSchedEnqFails
    leafs["nsr-sched-evs-deqd"] = nsrPri.NsrSchedEvsDeqd
    return leafs
}

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetBundleName() string { return "cisco_ios_xr" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetYangName() string { return "nsr-pri" }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) SetParent(parent types.Entity) { nsrPri.parent = parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetParent() types.Entity { return nsrPri.parent }

func (nsrPri *Ospfv3_Processes_Process_Statistics_IssuStats_NsrRtrThdSched_NsrPri) GetParentYangName() string { return "nsr-rtr-thd-sched" }

// Ospfv3_Processes_Process_Statistics_NsrPlStats
// OSPF NSR packet library statistics
type Ospfv3_Processes_Process_Statistics_NsrPlStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ncd pri. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri.
    NcdPri []Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri
}

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetFilter() yfilter.YFilter { return nsrPlStats.YFilter }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) SetFilter(yf yfilter.YFilter) { nsrPlStats.YFilter = yf }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetGoName(yname string) string {
    if yname == "ncd-pri" { return "NcdPri" }
    return ""
}

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetSegmentPath() string {
    return "nsr-pl-stats"
}

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ncd-pri" {
        for _, c := range nsrPlStats.NcdPri {
            if nsrPlStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri{}
        nsrPlStats.NcdPri = append(nsrPlStats.NcdPri, child)
        return &nsrPlStats.NcdPri[len(nsrPlStats.NcdPri)-1]
    }
    return nil
}

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range nsrPlStats.NcdPri {
        children[nsrPlStats.NcdPri[i].GetSegmentPath()] = &nsrPlStats.NcdPri[i]
    }
    return children
}

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetBundleName() string { return "cisco_ios_xr" }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetYangName() string { return "nsr-pl-stats" }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) SetParent(parent types.Entity) { nsrPlStats.parent = parent }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetParent() types.Entity { return nsrPlStats.parent }

func (nsrPlStats *Ospfv3_Processes_Process_Statistics_NsrPlStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri
// ncd pri
type Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total sent. The type is slice of interface{} with range:
    // 0..18446744073709551615.
    NumSent []interface{}

    // Total recvd. The type is slice of interface{} with range:
    // 0..18446744073709551615.
    NumRecv []interface{}

    // Sent Error/drops. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop.
    NumSentDrop []Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop

    // Recv Errors/drops. The type is slice of
    // Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop.
    NumRecvDrop []Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop
}

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetFilter() yfilter.YFilter { return ncdPri.YFilter }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) SetFilter(yf yfilter.YFilter) { ncdPri.YFilter = yf }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetGoName(yname string) string {
    if yname == "num-sent" { return "NumSent" }
    if yname == "num-recv" { return "NumRecv" }
    if yname == "num-sent-drop" { return "NumSentDrop" }
    if yname == "num-recv-drop" { return "NumRecvDrop" }
    return ""
}

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetSegmentPath() string {
    return "ncd-pri"
}

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "num-sent-drop" {
        for _, c := range ncdPri.NumSentDrop {
            if ncdPri.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop{}
        ncdPri.NumSentDrop = append(ncdPri.NumSentDrop, child)
        return &ncdPri.NumSentDrop[len(ncdPri.NumSentDrop)-1]
    }
    if childYangName == "num-recv-drop" {
        for _, c := range ncdPri.NumRecvDrop {
            if ncdPri.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop{}
        ncdPri.NumRecvDrop = append(ncdPri.NumRecvDrop, child)
        return &ncdPri.NumRecvDrop[len(ncdPri.NumRecvDrop)-1]
    }
    return nil
}

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ncdPri.NumSentDrop {
        children[ncdPri.NumSentDrop[i].GetSegmentPath()] = &ncdPri.NumSentDrop[i]
    }
    for i := range ncdPri.NumRecvDrop {
        children[ncdPri.NumRecvDrop[i].GetSegmentPath()] = &ncdPri.NumRecvDrop[i]
    }
    return children
}

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["num-sent"] = ncdPri.NumSent
    leafs["num-recv"] = ncdPri.NumRecv
    return leafs
}

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetBundleName() string { return "cisco_ios_xr" }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetYangName() string { return "ncd-pri" }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) SetParent(parent types.Entity) { ncdPri.parent = parent }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetParent() types.Entity { return ncdPri.parent }

func (ncdPri *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri) GetParentYangName() string { return "nsr-pl-stats" }

// Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop
// Sent Error/drops
type Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // nsr pl send drop array. The type is slice of interface{} with range:
    // 0..4294967295.
    NsrPlSendDropArray []interface{}
}

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetFilter() yfilter.YFilter { return numSentDrop.YFilter }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) SetFilter(yf yfilter.YFilter) { numSentDrop.YFilter = yf }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetGoName(yname string) string {
    if yname == "nsr-pl-send-drop-array" { return "NsrPlSendDropArray" }
    return ""
}

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetSegmentPath() string {
    return "num-sent-drop"
}

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-pl-send-drop-array"] = numSentDrop.NsrPlSendDropArray
    return leafs
}

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetBundleName() string { return "cisco_ios_xr" }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetYangName() string { return "num-sent-drop" }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) SetParent(parent types.Entity) { numSentDrop.parent = parent }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetParent() types.Entity { return numSentDrop.parent }

func (numSentDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumSentDrop) GetParentYangName() string { return "ncd-pri" }

// Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop
// Recv Errors/drops
type Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // nsr pl recv drop array. The type is slice of interface{} with range:
    // 0..4294967295.
    NsrPlRecvDropArray []interface{}
}

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetFilter() yfilter.YFilter { return numRecvDrop.YFilter }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) SetFilter(yf yfilter.YFilter) { numRecvDrop.YFilter = yf }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetGoName(yname string) string {
    if yname == "nsr-pl-recv-drop-array" { return "NsrPlRecvDropArray" }
    return ""
}

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetSegmentPath() string {
    return "num-recv-drop"
}

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["nsr-pl-recv-drop-array"] = numRecvDrop.NsrPlRecvDropArray
    return leafs
}

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetBundleName() string { return "cisco_ios_xr" }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetYangName() string { return "num-recv-drop" }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) SetParent(parent types.Entity) { numRecvDrop.parent = parent }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetParent() types.Entity { return numRecvDrop.parent }

func (numRecvDrop *Ospfv3_Processes_Process_Statistics_NsrPlStats_NcdPri_NumRecvDrop) GetParentYangName() string { return "ncd-pri" }

// Ospfv3_Processes_Process_Statistics_ProtocolStats
// Protocol table
type Ospfv3_Processes_Process_Statistics_ProtocolStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol statistics for an interface. The type is slice of
    // Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat.
    ProtocolStat []Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat
}

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetFilter() yfilter.YFilter { return protocolStats.YFilter }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) SetFilter(yf yfilter.YFilter) { protocolStats.YFilter = yf }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetGoName(yname string) string {
    if yname == "protocol-stat" { return "ProtocolStat" }
    return ""
}

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetSegmentPath() string {
    return "protocol-stats"
}

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-stat" {
        for _, c := range protocolStats.ProtocolStat {
            if protocolStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat{}
        protocolStats.ProtocolStat = append(protocolStats.ProtocolStat, child)
        return &protocolStats.ProtocolStat[len(protocolStats.ProtocolStat)-1]
    }
    return nil
}

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolStats.ProtocolStat {
        children[protocolStats.ProtocolStat[i].GetSegmentPath()] = &protocolStats.ProtocolStat[i]
    }
    return children
}

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetBundleName() string { return "cisco_ios_xr" }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetYangName() string { return "protocol-stats" }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) SetParent(parent types.Entity) { protocolStats.parent = parent }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetParent() types.Entity { return protocolStats.parent }

func (protocolStats *Ospfv3_Processes_Process_Statistics_ProtocolStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat
// Protocol statistics for an interface
type Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Total inputs packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalInPackets interface{}

    // Hello packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloInPackets interface{}

    // Database Description Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInPackets interface{}

    // Database Description LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInLsAs interface{}

    // LSA Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInPackets interface{}

    // LS Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInLsAs interface{}

    // LS Updates Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInPackets interface{}

    // LS Updates ignored. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInIgnored interface{}

    // LS Updates LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInLsAs interface{}

    // LS Acks Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInPackets interface{}

    // LS Ack LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInLsAs interface{}

    // Total Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalOutPackets interface{}

    // Hello Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloOutPackets interface{}

    // Database Description Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutPackets interface{}

    // Database Description LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutLsAs interface{}

    // LS Request Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutPackets interface{}

    // LS Reuqests LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutLsAs interface{}

    // LS Update Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutPackets interface{}

    // LS Update LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutLsAs interface{}

    // LS Ack Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutPackets interface{}

    // LS Ack LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutLsAs interface{}

    // Dropped in GS. The type is interface{} with range: 0..18446744073709551615.
    DroppedInGs interface{}

    // Checksum Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErr interface{}
}

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetFilter() yfilter.YFilter { return protocolStat.YFilter }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) SetFilter(yf yfilter.YFilter) { protocolStat.YFilter = yf }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "total-in-packets" { return "TotalInPackets" }
    if yname == "hello-in-packets" { return "HelloInPackets" }
    if yname == "dbdes-in-packets" { return "DbdesInPackets" }
    if yname == "dbdes-in-ls-as" { return "DbdesInLsAs" }
    if yname == "ls-req-in-packets" { return "LsReqInPackets" }
    if yname == "ls-req-in-ls-as" { return "LsReqInLsAs" }
    if yname == "ls-upd-in-packets" { return "LsUpdInPackets" }
    if yname == "ls-upd-in-ignored" { return "LsUpdInIgnored" }
    if yname == "ls-upd-in-ls-as" { return "LsUpdInLsAs" }
    if yname == "ls-ack-in-packets" { return "LsAckInPackets" }
    if yname == "ls-ack-in-ls-as" { return "LsAckInLsAs" }
    if yname == "total-out-packets" { return "TotalOutPackets" }
    if yname == "hello-out-packets" { return "HelloOutPackets" }
    if yname == "dbdes-out-packets" { return "DbdesOutPackets" }
    if yname == "dbdes-out-ls-as" { return "DbdesOutLsAs" }
    if yname == "ls-req-out-packets" { return "LsReqOutPackets" }
    if yname == "ls-req-out-ls-as" { return "LsReqOutLsAs" }
    if yname == "ls-upd-out-packets" { return "LsUpdOutPackets" }
    if yname == "ls-upd-out-ls-as" { return "LsUpdOutLsAs" }
    if yname == "ls-ack-out-packets" { return "LsAckOutPackets" }
    if yname == "ls-ack-out-ls-as" { return "LsAckOutLsAs" }
    if yname == "dropped-in-gs" { return "DroppedInGs" }
    if yname == "checksum-err" { return "ChecksumErr" }
    return ""
}

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetSegmentPath() string {
    return "protocol-stat" + "[interface-name='" + fmt.Sprintf("%v", protocolStat.InterfaceName) + "']"
}

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = protocolStat.InterfaceName
    leafs["total-in-packets"] = protocolStat.TotalInPackets
    leafs["hello-in-packets"] = protocolStat.HelloInPackets
    leafs["dbdes-in-packets"] = protocolStat.DbdesInPackets
    leafs["dbdes-in-ls-as"] = protocolStat.DbdesInLsAs
    leafs["ls-req-in-packets"] = protocolStat.LsReqInPackets
    leafs["ls-req-in-ls-as"] = protocolStat.LsReqInLsAs
    leafs["ls-upd-in-packets"] = protocolStat.LsUpdInPackets
    leafs["ls-upd-in-ignored"] = protocolStat.LsUpdInIgnored
    leafs["ls-upd-in-ls-as"] = protocolStat.LsUpdInLsAs
    leafs["ls-ack-in-packets"] = protocolStat.LsAckInPackets
    leafs["ls-ack-in-ls-as"] = protocolStat.LsAckInLsAs
    leafs["total-out-packets"] = protocolStat.TotalOutPackets
    leafs["hello-out-packets"] = protocolStat.HelloOutPackets
    leafs["dbdes-out-packets"] = protocolStat.DbdesOutPackets
    leafs["dbdes-out-ls-as"] = protocolStat.DbdesOutLsAs
    leafs["ls-req-out-packets"] = protocolStat.LsReqOutPackets
    leafs["ls-req-out-ls-as"] = protocolStat.LsReqOutLsAs
    leafs["ls-upd-out-packets"] = protocolStat.LsUpdOutPackets
    leafs["ls-upd-out-ls-as"] = protocolStat.LsUpdOutLsAs
    leafs["ls-ack-out-packets"] = protocolStat.LsAckOutPackets
    leafs["ls-ack-out-ls-as"] = protocolStat.LsAckOutLsAs
    leafs["dropped-in-gs"] = protocolStat.DroppedInGs
    leafs["checksum-err"] = protocolStat.ChecksumErr
    return leafs
}

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetBundleName() string { return "cisco_ios_xr" }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetYangName() string { return "protocol-stat" }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) SetParent(parent types.Entity) { protocolStat.parent = parent }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetParent() types.Entity { return protocolStat.parent }

func (protocolStat *Ospfv3_Processes_Process_Statistics_ProtocolStats_ProtocolStat) GetParentYangName() string { return "protocol-stats" }

// Ospfv3_Processes_Process_Statistics_SpfStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Statistics_SpfStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF statistics header.
    SpfHeader Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader

    // List of SPF run-time statistics. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime.
    SpfRuntime []Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime
}

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetFilter() yfilter.YFilter { return spfStats.YFilter }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) SetFilter(yf yfilter.YFilter) { spfStats.YFilter = yf }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetGoName(yname string) string {
    if yname == "spf-header" { return "SpfHeader" }
    if yname == "spf-runtime" { return "SpfRuntime" }
    return ""
}

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetSegmentPath() string {
    return "spf-stats"
}

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-header" {
        return &spfStats.SpfHeader
    }
    if childYangName == "spf-runtime" {
        for _, c := range spfStats.SpfRuntime {
            if spfStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime{}
        spfStats.SpfRuntime = append(spfStats.SpfRuntime, child)
        return &spfStats.SpfRuntime[len(spfStats.SpfRuntime)-1]
    }
    return nil
}

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-header"] = &spfStats.SpfHeader
    for i := range spfStats.SpfRuntime {
        children[spfStats.SpfRuntime[i].GetSegmentPath()] = &spfStats.SpfRuntime[i]
    }
    return children
}

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetBundleName() string { return "cisco_ios_xr" }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetYangName() string { return "spf-stats" }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) SetParent(parent types.Entity) { spfStats.parent = parent }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetParent() types.Entity { return spfStats.parent }

func (spfStats *Ospfv3_Processes_Process_Statistics_SpfStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader
// SPF statistics header
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderRouterId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    HeaderSpFs interface{}

    // List of Areas with SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary.
    AreaSummary []Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary
}

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetFilter() yfilter.YFilter { return spfHeader.YFilter }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) SetFilter(yf yfilter.YFilter) { spfHeader.YFilter = yf }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetGoName(yname string) string {
    if yname == "header-router-id" { return "HeaderRouterId" }
    if yname == "header-sp-fs" { return "HeaderSpFs" }
    if yname == "area-summary" { return "AreaSummary" }
    return ""
}

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetSegmentPath() string {
    return "spf-header"
}

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-summary" {
        for _, c := range spfHeader.AreaSummary {
            if spfHeader.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary{}
        spfHeader.AreaSummary = append(spfHeader.AreaSummary, child)
        return &spfHeader.AreaSummary[len(spfHeader.AreaSummary)-1]
    }
    return nil
}

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfHeader.AreaSummary {
        children[spfHeader.AreaSummary[i].GetSegmentPath()] = &spfHeader.AreaSummary[i]
    }
    return children
}

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-router-id"] = spfHeader.HeaderRouterId
    leafs["header-sp-fs"] = spfHeader.HeaderSpFs
    return leafs
}

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetBundleName() string { return "cisco_ios_xr" }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetYangName() string { return "spf-header" }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) SetParent(parent types.Entity) { spfHeader.parent = parent }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetParent() types.Entity { return spfHeader.parent }

func (spfHeader *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader) GetParentYangName() string { return "spf-stats" }

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary
// List of Areas with SPF statistics
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID of the area SPF statistics. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}
}

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetFilter() yfilter.YFilter { return areaSummary.YFilter }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) SetFilter(yf yfilter.YFilter) { areaSummary.YFilter = yf }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "sp-fs" { return "SpFs" }
    return ""
}

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetSegmentPath() string {
    return "area-summary"
}

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaSummary.AreaId
    leafs["sp-fs"] = areaSummary.SpFs
    return leafs
}

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetBundleName() string { return "cisco_ios_xr" }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetYangName() string { return "area-summary" }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) SetParent(parent types.Entity) { areaSummary.parent = parent }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetParent() types.Entity { return areaSummary.parent }

func (areaSummary *Ospfv3_Processes_Process_Statistics_SpfStats_SpfHeader_AreaSummary) GetParentYangName() string { return "spf-header" }

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime
// List of SPF run-time statistics
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF calculation start time. The type is interface{} with range:
    // 0..4294967295.
    StartTime interface{}

    // Number of routes added to RIB. The type is interface{} with range:
    // 0..4294967295.
    RibAddRoutes interface{}

    // Number of routes deleted from RIB. The type is interface{} with range:
    // 0..4294967295.
    RibDeleteRoutes interface{}

    // Reasons for triggering an SPF calculation Bit 1 - Router LSA update Bit 2 -
    // Network LSA update Bit 3 - Inter-Area Prefix LSA update Bit 4 - Inter-Area
    // Router LSA update Bit 5 - AS External LSA update Bit 6 - MOSPF LSA update
    // Bit 7 - Type 7 AS External LSA update Bit 8 - Link LSA update Bit 9 -
    // Prefix LSA update. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReasonFlags interface{}

    // Number of LSA changes triggering an SPF calculation. The type is
    // interface{} with range: -32768..32767.
    LsaChanges interface{}

    // Global SPF times.
    GlobalTime Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime

    // List of LSAs triggering the SPF calculation. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa.
    Lsa []Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa

    // List of per-area SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat.
    AreaStat []Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat
}

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetFilter() yfilter.YFilter { return spfRuntime.YFilter }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) SetFilter(yf yfilter.YFilter) { spfRuntime.YFilter = yf }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "rib-add-routes" { return "RibAddRoutes" }
    if yname == "rib-delete-routes" { return "RibDeleteRoutes" }
    if yname == "reason-flags" { return "ReasonFlags" }
    if yname == "lsa-changes" { return "LsaChanges" }
    if yname == "global-time" { return "GlobalTime" }
    if yname == "lsa" { return "Lsa" }
    if yname == "area-stat" { return "AreaStat" }
    return ""
}

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetSegmentPath() string {
    return "spf-runtime"
}

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-time" {
        return &spfRuntime.GlobalTime
    }
    if childYangName == "lsa" {
        for _, c := range spfRuntime.Lsa {
            if spfRuntime.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa{}
        spfRuntime.Lsa = append(spfRuntime.Lsa, child)
        return &spfRuntime.Lsa[len(spfRuntime.Lsa)-1]
    }
    if childYangName == "area-stat" {
        for _, c := range spfRuntime.AreaStat {
            if spfRuntime.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat{}
        spfRuntime.AreaStat = append(spfRuntime.AreaStat, child)
        return &spfRuntime.AreaStat[len(spfRuntime.AreaStat)-1]
    }
    return nil
}

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-time"] = &spfRuntime.GlobalTime
    for i := range spfRuntime.Lsa {
        children[spfRuntime.Lsa[i].GetSegmentPath()] = &spfRuntime.Lsa[i]
    }
    for i := range spfRuntime.AreaStat {
        children[spfRuntime.AreaStat[i].GetSegmentPath()] = &spfRuntime.AreaStat[i]
    }
    return children
}

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = spfRuntime.StartTime
    leafs["rib-add-routes"] = spfRuntime.RibAddRoutes
    leafs["rib-delete-routes"] = spfRuntime.RibDeleteRoutes
    leafs["reason-flags"] = spfRuntime.ReasonFlags
    leafs["lsa-changes"] = spfRuntime.LsaChanges
    return leafs
}

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetBundleName() string { return "cisco_ios_xr" }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetYangName() string { return "spf-runtime" }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) SetParent(parent types.Entity) { spfRuntime.parent = parent }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetParent() types.Entity { return spfRuntime.parent }

func (spfRuntime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime) GetParentYangName() string { return "spf-stats" }

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime
// Global SPF times
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetFilter() yfilter.YFilter { return globalTime.YFilter }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) SetFilter(yf yfilter.YFilter) { globalTime.YFilter = yf }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetGoName(yname string) string {
    if yname == "dijkstra" { return "Dijkstra" }
    if yname == "intra-prefix" { return "IntraPrefix" }
    if yname == "intra-prefix-del" { return "IntraPrefixDel" }
    if yname == "inter-prefix" { return "InterPrefix" }
    if yname == "inter-prefix-del" { return "InterPrefixDel" }
    if yname == "external-prefix" { return "ExternalPrefix" }
    if yname == "external-prefix-del" { return "ExternalPrefixDel" }
    if yname == "rib-add" { return "RibAdd" }
    if yname == "rib-del" { return "RibDel" }
    return ""
}

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetSegmentPath() string {
    return "global-time"
}

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra"] = globalTime.Dijkstra
    leafs["intra-prefix"] = globalTime.IntraPrefix
    leafs["intra-prefix-del"] = globalTime.IntraPrefixDel
    leafs["inter-prefix"] = globalTime.InterPrefix
    leafs["inter-prefix-del"] = globalTime.InterPrefixDel
    leafs["external-prefix"] = globalTime.ExternalPrefix
    leafs["external-prefix-del"] = globalTime.ExternalPrefixDel
    leafs["rib-add"] = globalTime.RibAdd
    leafs["rib-del"] = globalTime.RibDel
    return leafs
}

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetBundleName() string { return "cisco_ios_xr" }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetYangName() string { return "global-time" }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) SetParent(parent types.Entity) { globalTime.parent = parent }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetParent() types.Entity { return globalTime.parent }

func (globalTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_GlobalTime) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa
// List of LSAs triggering the SPF calculation
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    LsaAreaId interface{}

    // Advertising router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaAdvertisingRouter interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // LSA type. The type is interface{} with range: 0..255.
    LsaType interface{}

    // If true, the LSA change is a flush. The type is bool.
    LsaFlush interface{}
}

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetGoName(yname string) string {
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-advertising-router" { return "LsaAdvertisingRouter" }
    if yname == "lsa-id" { return "LsaId" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-flush" { return "LsaFlush" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-area-id"] = lsa.LsaAreaId
    leafs["lsa-advertising-router"] = lsa.LsaAdvertisingRouter
    leafs["lsa-id"] = lsa.LsaId
    leafs["lsa-type"] = lsa.LsaType
    leafs["lsa-flush"] = lsa.LsaFlush
    return leafs
}

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_Lsa) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat
// List of per-area SPF statistics
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID for area of these SPF statistics. The type is interface{} with
    // range: 0..4294967295.
    SpfStatAreaId interface{}

    // Counts of LSA types triggering an SPF calculation. The type is slice of
    // interface{} with range: 0..4294967295.
    SpfStatLsaTypeCount []interface{}

    // SPF time calculations.
    SpfStatTime Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
}

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetFilter() yfilter.YFilter { return areaStat.YFilter }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) SetFilter(yf yfilter.YFilter) { areaStat.YFilter = yf }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetGoName(yname string) string {
    if yname == "spf-stat-area-id" { return "SpfStatAreaId" }
    if yname == "spf-stat-lsa-type-count" { return "SpfStatLsaTypeCount" }
    if yname == "spf-stat-time" { return "SpfStatTime" }
    return ""
}

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetSegmentPath() string {
    return "area-stat"
}

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-stat-time" {
        return &areaStat.SpfStatTime
    }
    return nil
}

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-stat-time"] = &areaStat.SpfStatTime
    return children
}

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-stat-area-id"] = areaStat.SpfStatAreaId
    leafs["spf-stat-lsa-type-count"] = areaStat.SpfStatLsaTypeCount
    return leafs
}

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetBundleName() string { return "cisco_ios_xr" }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetYangName() string { return "area-stat" }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) SetParent(parent types.Entity) { areaStat.parent = parent }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetParent() types.Entity { return areaStat.parent }

func (areaStat *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
// SPF time calculations
type Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetFilter() yfilter.YFilter { return spfStatTime.YFilter }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) SetFilter(yf yfilter.YFilter) { spfStatTime.YFilter = yf }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetGoName(yname string) string {
    if yname == "dijkstra" { return "Dijkstra" }
    if yname == "intra-prefix" { return "IntraPrefix" }
    if yname == "intra-prefix-del" { return "IntraPrefixDel" }
    if yname == "inter-prefix" { return "InterPrefix" }
    if yname == "inter-prefix-del" { return "InterPrefixDel" }
    if yname == "external-prefix" { return "ExternalPrefix" }
    if yname == "external-prefix-del" { return "ExternalPrefixDel" }
    if yname == "rib-add" { return "RibAdd" }
    if yname == "rib-del" { return "RibDel" }
    return ""
}

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetSegmentPath() string {
    return "spf-stat-time"
}

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra"] = spfStatTime.Dijkstra
    leafs["intra-prefix"] = spfStatTime.IntraPrefix
    leafs["intra-prefix-del"] = spfStatTime.IntraPrefixDel
    leafs["inter-prefix"] = spfStatTime.InterPrefix
    leafs["inter-prefix-del"] = spfStatTime.InterPrefixDel
    leafs["external-prefix"] = spfStatTime.ExternalPrefix
    leafs["external-prefix-del"] = spfStatTime.ExternalPrefixDel
    leafs["rib-add"] = spfStatTime.RibAdd
    leafs["rib-del"] = spfStatTime.RibDel
    return leafs
}

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetBundleName() string { return "cisco_ios_xr" }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetYangName() string { return "spf-stat-time" }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) SetParent(parent types.Entity) { spfStatTime.parent = parent }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetParent() types.Entity { return spfStatTime.parent }

func (spfStatTime *Ospfv3_Processes_Process_Statistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetParentYangName() string { return "area-stat" }

// Ospfv3_Processes_Process_Statistics_RawioStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Statistics_RawioStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Raw Connections Open. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnOpen interface{}

    // Raw Connections Close. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnClose interface{}

    // Raw Connections Error. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnError interface{}

    // Received Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InPackets interface{}

    // Received Bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    InBytes interface{}

    // Received Long Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InLongPackets interface{}

    // In Malloc Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InMallocDrops interface{}

    // In Handle Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InHandleDrops interface{}

    // In Short Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InShortDrops interface{}

    // In Error Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InErrorDrops interface{}

    // In IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InIpsecDrops interface{}

    // In Queue Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InQueueDrops interface{}

    // Packets Sent. The type is interface{} with range: 0..18446744073709551615.
    OutPackets interface{}

    // Sent Bytes. The type is interface{} with range: 0..18446744073709551615.
    // Units are byte.
    OutBytes interface{}

    // No FileDescriptor Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNofdDrops interface{}

    // Error Drops. The type is interface{} with range: 0..18446744073709551615.
    OutErrorDrops interface{}

    // Out IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutIpsecDrops interface{}

    // No Packet Buffers. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNopakDrops interface{}

    // PAK API Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPakapiErrors interface{}

    // Raw Connection State. The type is interface{} with range: 0..4294967295.
    RawConnState interface{}
}

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetFilter() yfilter.YFilter { return rawioStats.YFilter }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) SetFilter(yf yfilter.YFilter) { rawioStats.YFilter = yf }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetGoName(yname string) string {
    if yname == "raw-conn-open" { return "RawConnOpen" }
    if yname == "raw-conn-close" { return "RawConnClose" }
    if yname == "raw-conn-error" { return "RawConnError" }
    if yname == "in-packets" { return "InPackets" }
    if yname == "in-bytes" { return "InBytes" }
    if yname == "in-long-packets" { return "InLongPackets" }
    if yname == "in-malloc-drops" { return "InMallocDrops" }
    if yname == "in-handle-drops" { return "InHandleDrops" }
    if yname == "in-short-drops" { return "InShortDrops" }
    if yname == "in-error-drops" { return "InErrorDrops" }
    if yname == "in-ipsec-drops" { return "InIpsecDrops" }
    if yname == "in-queue-drops" { return "InQueueDrops" }
    if yname == "out-packets" { return "OutPackets" }
    if yname == "out-bytes" { return "OutBytes" }
    if yname == "out-nofd-drops" { return "OutNofdDrops" }
    if yname == "out-error-drops" { return "OutErrorDrops" }
    if yname == "out-ipsec-drops" { return "OutIpsecDrops" }
    if yname == "out-nopak-drops" { return "OutNopakDrops" }
    if yname == "out-pakapi-errors" { return "OutPakapiErrors" }
    if yname == "raw-conn-state" { return "RawConnState" }
    return ""
}

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetSegmentPath() string {
    return "rawio-stats"
}

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["raw-conn-open"] = rawioStats.RawConnOpen
    leafs["raw-conn-close"] = rawioStats.RawConnClose
    leafs["raw-conn-error"] = rawioStats.RawConnError
    leafs["in-packets"] = rawioStats.InPackets
    leafs["in-bytes"] = rawioStats.InBytes
    leafs["in-long-packets"] = rawioStats.InLongPackets
    leafs["in-malloc-drops"] = rawioStats.InMallocDrops
    leafs["in-handle-drops"] = rawioStats.InHandleDrops
    leafs["in-short-drops"] = rawioStats.InShortDrops
    leafs["in-error-drops"] = rawioStats.InErrorDrops
    leafs["in-ipsec-drops"] = rawioStats.InIpsecDrops
    leafs["in-queue-drops"] = rawioStats.InQueueDrops
    leafs["out-packets"] = rawioStats.OutPackets
    leafs["out-bytes"] = rawioStats.OutBytes
    leafs["out-nofd-drops"] = rawioStats.OutNofdDrops
    leafs["out-error-drops"] = rawioStats.OutErrorDrops
    leafs["out-ipsec-drops"] = rawioStats.OutIpsecDrops
    leafs["out-nopak-drops"] = rawioStats.OutNopakDrops
    leafs["out-pakapi-errors"] = rawioStats.OutPakapiErrors
    leafs["raw-conn-state"] = rawioStats.RawConnState
    return leafs
}

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetBundleName() string { return "cisco_ios_xr" }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetYangName() string { return "rawio-stats" }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) SetParent(parent types.Entity) { rawioStats.parent = parent }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetParent() types.Entity { return rawioStats.parent }

func (rawioStats *Ospfv3_Processes_Process_Statistics_RawioStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_PrefixPriorityStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_Statistics_PrefixPriorityStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Critical interface{}

    // High priority classifications. The type is interface{} with range:
    // 0..4294967295.
    High interface{}

    // Medium priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Medium interface{}

    // Low priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Low interface{}
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetFilter() yfilter.YFilter { return prefixPriorityStats.YFilter }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) SetFilter(yf yfilter.YFilter) { prefixPriorityStats.YFilter = yf }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetSegmentPath() string {
    return "prefix-priority-stats"
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = prefixPriorityStats.Critical
    leafs["high"] = prefixPriorityStats.High
    leafs["medium"] = prefixPriorityStats.Medium
    leafs["low"] = prefixPriorityStats.Low
    return leafs
}

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetBundleName() string { return "cisco_ios_xr" }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetYangName() string { return "prefix-priority-stats" }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) SetParent(parent types.Entity) { prefixPriorityStats.parent = parent }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetParent() types.Entity { return prefixPriorityStats.parent }

func (prefixPriorityStats *Ospfv3_Processes_Process_Statistics_PrefixPriorityStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_Statistics_VrfRibBatchStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_Statistics_VrfRibBatchStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of RIB batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // No. of Routes sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    RoutesSent interface{}

    // No of Pending Routes. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // Max No. of Routes in a batch. The type is interface{} with range:
    // 0..4294967295.
    MaxRoutes interface{}

    // No. of Paths sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsSent interface{}

    // No. of paths waiting to be sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsPending interface{}

    // No. of paths added to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsAdd interface{}

    // No. of paths add errors. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // No. of paths del sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsDel interface{}

    // No. of Paths del errors. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetFilter() yfilter.YFilter { return vrfRibBatchStats.YFilter }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) SetFilter(yf yfilter.YFilter) { vrfRibBatchStats.YFilter = yf }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetGoName(yname string) string {
    if yname == "batches-sent" { return "BatchesSent" }
    if yname == "routes-sent" { return "RoutesSent" }
    if yname == "routes-pending" { return "RoutesPending" }
    if yname == "max-routes" { return "MaxRoutes" }
    if yname == "paths-sent" { return "PathsSent" }
    if yname == "paths-pending" { return "PathsPending" }
    if yname == "paths-add" { return "PathsAdd" }
    if yname == "paths-add-errs" { return "PathsAddErrs" }
    if yname == "paths-del" { return "PathsDel" }
    if yname == "paths-del-errs" { return "PathsDelErrs" }
    return ""
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetSegmentPath() string {
    return "vrf-rib-batch-stats"
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["batches-sent"] = vrfRibBatchStats.BatchesSent
    leafs["routes-sent"] = vrfRibBatchStats.RoutesSent
    leafs["routes-pending"] = vrfRibBatchStats.RoutesPending
    leafs["max-routes"] = vrfRibBatchStats.MaxRoutes
    leafs["paths-sent"] = vrfRibBatchStats.PathsSent
    leafs["paths-pending"] = vrfRibBatchStats.PathsPending
    leafs["paths-add"] = vrfRibBatchStats.PathsAdd
    leafs["paths-add-errs"] = vrfRibBatchStats.PathsAddErrs
    leafs["paths-del"] = vrfRibBatchStats.PathsDel
    leafs["paths-del-errs"] = vrfRibBatchStats.PathsDelErrs
    return leafs
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetBundleName() string { return "cisco_ios_xr" }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetYangName() string { return "vrf-rib-batch-stats" }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) SetParent(parent types.Entity) { vrfRibBatchStats.parent = parent }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetParent() types.Entity { return vrfRibBatchStats.parent }

func (vrfRibBatchStats *Ospfv3_Processes_Process_Statistics_VrfRibBatchStats) GetParentYangName() string { return "statistics" }

// Ospfv3_Processes_Process_DefaultVrf
// Operational data for the default VRF
// (instance) in the OSPFv3 process
type Ospfv3_Processes_Process_DefaultVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary prefix information table.
    SummaryPrefixes Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes

    // OSPFv3 border router information table.
    BorderRouters Ospfv3_Processes_Process_DefaultVrf_BorderRouters

    // Sham link information.
    ShamLinkTable Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable

    // OSPFv3 area information table.
    AreaInformations Ospfv3_Processes_Process_DefaultVrf_AreaInformations

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_DefaultVrf_DatabaseTable

    // OSPFv3 interface information table for all areas.
    InterfaceProcessTable Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable

    // Redistribution information table.
    Redistributions Ospfv3_Processes_Process_DefaultVrf_Redistributions

    // OSPFv3 external route information table.
    ExternalRoutes Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes

    // OSPFv3 request list information for all areas.
    RequestListProcessTable Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable

    // Virtual link information.
    VirtualLink Ospfv3_Processes_Process_DefaultVrf_VirtualLink

    // OSPFv3 flood list information table for all areas.
    FloodListProcessTable Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable

    // Summarize OSPFv3 local RIB tables.
    RouteSummary Ospfv3_Processes_Process_DefaultVrf_RouteSummary

    // OSPFv3 area table.
    Areas Ospfv3_Processes_Process_DefaultVrf_Areas

    // OSPFv3 internal route information table.
    InternalRoutes Ospfv3_Processes_Process_DefaultVrf_InternalRoutes

    // Protocol area table .
    ProtocolAreas Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas

    // OSPFv3 connected route information table.
    ConnectedRoutes Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes

    // Container for Statistics.
    VrfStatistics Ospfv3_Processes_Process_DefaultVrf_VrfStatistics

    // OSPFv3 summary.
    Summary Ospfv3_Processes_Process_DefaultVrf_Summary

    // OSPFv3 retransmission list information table for all areas.
    RetransmissionListProcessTable Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable

    // Bad Checksum Packets information table.
    BadChecksums Ospfv3_Processes_Process_DefaultVrf_BadChecksums

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable

    // OSPFv3 neighbor information table for all areas.
    NeighborProcessTable Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable

    // OSPFv3 fast reroute topology information table.
    FastReroutes Ospfv3_Processes_Process_DefaultVrf_FastReroutes

    // OSPFv3 interface brief information table for all areas.
    InterfaceBriefProcessTable Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable

    // OSPFv3 neighbor information table for all areas.
    NeighborDetailProcessTable Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetFilter() yfilter.YFilter { return defaultVrf.YFilter }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) SetFilter(yf yfilter.YFilter) { defaultVrf.YFilter = yf }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetGoName(yname string) string {
    if yname == "summary-prefixes" { return "SummaryPrefixes" }
    if yname == "border-routers" { return "BorderRouters" }
    if yname == "sham-link-table" { return "ShamLinkTable" }
    if yname == "area-informations" { return "AreaInformations" }
    if yname == "database-table" { return "DatabaseTable" }
    if yname == "interface-process-table" { return "InterfaceProcessTable" }
    if yname == "redistributions" { return "Redistributions" }
    if yname == "external-routes" { return "ExternalRoutes" }
    if yname == "request-list-process-table" { return "RequestListProcessTable" }
    if yname == "virtual-link" { return "VirtualLink" }
    if yname == "flood-list-process-table" { return "FloodListProcessTable" }
    if yname == "route-summary" { return "RouteSummary" }
    if yname == "areas" { return "Areas" }
    if yname == "internal-routes" { return "InternalRoutes" }
    if yname == "protocol-areas" { return "ProtocolAreas" }
    if yname == "connected-routes" { return "ConnectedRoutes" }
    if yname == "vrf-statistics" { return "VrfStatistics" }
    if yname == "summary" { return "Summary" }
    if yname == "retransmission-list-process-table" { return "RetransmissionListProcessTable" }
    if yname == "bad-checksums" { return "BadChecksums" }
    if yname == "database-summary-table" { return "DatabaseSummaryTable" }
    if yname == "neighbor-process-table" { return "NeighborProcessTable" }
    if yname == "fast-reroutes" { return "FastReroutes" }
    if yname == "interface-brief-process-table" { return "InterfaceBriefProcessTable" }
    if yname == "neighbor-detail-process-table" { return "NeighborDetailProcessTable" }
    return ""
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetSegmentPath() string {
    return "default-vrf"
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefixes" {
        return &defaultVrf.SummaryPrefixes
    }
    if childYangName == "border-routers" {
        return &defaultVrf.BorderRouters
    }
    if childYangName == "sham-link-table" {
        return &defaultVrf.ShamLinkTable
    }
    if childYangName == "area-informations" {
        return &defaultVrf.AreaInformations
    }
    if childYangName == "database-table" {
        return &defaultVrf.DatabaseTable
    }
    if childYangName == "interface-process-table" {
        return &defaultVrf.InterfaceProcessTable
    }
    if childYangName == "redistributions" {
        return &defaultVrf.Redistributions
    }
    if childYangName == "external-routes" {
        return &defaultVrf.ExternalRoutes
    }
    if childYangName == "request-list-process-table" {
        return &defaultVrf.RequestListProcessTable
    }
    if childYangName == "virtual-link" {
        return &defaultVrf.VirtualLink
    }
    if childYangName == "flood-list-process-table" {
        return &defaultVrf.FloodListProcessTable
    }
    if childYangName == "route-summary" {
        return &defaultVrf.RouteSummary
    }
    if childYangName == "areas" {
        return &defaultVrf.Areas
    }
    if childYangName == "internal-routes" {
        return &defaultVrf.InternalRoutes
    }
    if childYangName == "protocol-areas" {
        return &defaultVrf.ProtocolAreas
    }
    if childYangName == "connected-routes" {
        return &defaultVrf.ConnectedRoutes
    }
    if childYangName == "vrf-statistics" {
        return &defaultVrf.VrfStatistics
    }
    if childYangName == "summary" {
        return &defaultVrf.Summary
    }
    if childYangName == "retransmission-list-process-table" {
        return &defaultVrf.RetransmissionListProcessTable
    }
    if childYangName == "bad-checksums" {
        return &defaultVrf.BadChecksums
    }
    if childYangName == "database-summary-table" {
        return &defaultVrf.DatabaseSummaryTable
    }
    if childYangName == "neighbor-process-table" {
        return &defaultVrf.NeighborProcessTable
    }
    if childYangName == "fast-reroutes" {
        return &defaultVrf.FastReroutes
    }
    if childYangName == "interface-brief-process-table" {
        return &defaultVrf.InterfaceBriefProcessTable
    }
    if childYangName == "neighbor-detail-process-table" {
        return &defaultVrf.NeighborDetailProcessTable
    }
    return nil
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary-prefixes"] = &defaultVrf.SummaryPrefixes
    children["border-routers"] = &defaultVrf.BorderRouters
    children["sham-link-table"] = &defaultVrf.ShamLinkTable
    children["area-informations"] = &defaultVrf.AreaInformations
    children["database-table"] = &defaultVrf.DatabaseTable
    children["interface-process-table"] = &defaultVrf.InterfaceProcessTable
    children["redistributions"] = &defaultVrf.Redistributions
    children["external-routes"] = &defaultVrf.ExternalRoutes
    children["request-list-process-table"] = &defaultVrf.RequestListProcessTable
    children["virtual-link"] = &defaultVrf.VirtualLink
    children["flood-list-process-table"] = &defaultVrf.FloodListProcessTable
    children["route-summary"] = &defaultVrf.RouteSummary
    children["areas"] = &defaultVrf.Areas
    children["internal-routes"] = &defaultVrf.InternalRoutes
    children["protocol-areas"] = &defaultVrf.ProtocolAreas
    children["connected-routes"] = &defaultVrf.ConnectedRoutes
    children["vrf-statistics"] = &defaultVrf.VrfStatistics
    children["summary"] = &defaultVrf.Summary
    children["retransmission-list-process-table"] = &defaultVrf.RetransmissionListProcessTable
    children["bad-checksums"] = &defaultVrf.BadChecksums
    children["database-summary-table"] = &defaultVrf.DatabaseSummaryTable
    children["neighbor-process-table"] = &defaultVrf.NeighborProcessTable
    children["fast-reroutes"] = &defaultVrf.FastReroutes
    children["interface-brief-process-table"] = &defaultVrf.InterfaceBriefProcessTable
    children["neighbor-detail-process-table"] = &defaultVrf.NeighborDetailProcessTable
    return children
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetBundleName() string { return "cisco_ios_xr" }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetYangName() string { return "default-vrf" }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) SetParent(parent types.Entity) { defaultVrf.parent = parent }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetParent() types.Entity { return defaultVrf.parent }

func (defaultVrf *Ospfv3_Processes_Process_DefaultVrf) GetParentYangName() string { return "process" }

// Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes
// Summary prefix information table
type Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary prefix information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix.
    SummaryPrefix []Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetFilter() yfilter.YFilter { return summaryPrefixes.YFilter }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) SetFilter(yf yfilter.YFilter) { summaryPrefixes.YFilter = yf }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetGoName(yname string) string {
    if yname == "summary-prefix" { return "SummaryPrefix" }
    return ""
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetSegmentPath() string {
    return "summary-prefixes"
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary-prefix" {
        for _, c := range summaryPrefixes.SummaryPrefix {
            if summaryPrefixes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix{}
        summaryPrefixes.SummaryPrefix = append(summaryPrefixes.SummaryPrefix, child)
        return &summaryPrefixes.SummaryPrefix[len(summaryPrefixes.SummaryPrefix)-1]
    }
    return nil
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range summaryPrefixes.SummaryPrefix {
        children[summaryPrefixes.SummaryPrefix[i].GetSegmentPath()] = &summaryPrefixes.SummaryPrefix[i]
    }
    return children
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetYangName() string { return "summary-prefixes" }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) SetParent(parent types.Entity) { summaryPrefixes.parent = parent }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetParent() types.Entity { return summaryPrefixes.parent }

func (summaryPrefixes *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix
// Summary prefix information
type Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Prefix metric. The type is interface{} with range: 0..4294967295.
    PrefixMetric interface{}

    // Prefix metric type. The type is Ospfv3DefaultMetric.
    PrefixMetricType interface{}

    // Tag. The type is interface{} with range: 0..4294967295.
    Tag interface{}
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetFilter() yfilter.YFilter { return summaryPrefix.YFilter }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) SetFilter(yf yfilter.YFilter) { summaryPrefix.YFilter = yf }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "prefix-metric" { return "PrefixMetric" }
    if yname == "prefix-metric-type" { return "PrefixMetricType" }
    if yname == "tag" { return "Tag" }
    return ""
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetSegmentPath() string {
    return "summary-prefix"
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = summaryPrefix.Prefix
    leafs["prefix-length"] = summaryPrefix.PrefixLength
    leafs["prefix-metric"] = summaryPrefix.PrefixMetric
    leafs["prefix-metric-type"] = summaryPrefix.PrefixMetricType
    leafs["tag"] = summaryPrefix.Tag
    return leafs
}

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetBundleName() string { return "cisco_ios_xr" }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetYangName() string { return "summary-prefix" }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) SetParent(parent types.Entity) { summaryPrefix.parent = parent }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetParent() types.Entity { return summaryPrefix.parent }

func (summaryPrefix *Ospfv3_Processes_Process_DefaultVrf_SummaryPrefixes_SummaryPrefix) GetParentYangName() string { return "summary-prefixes" }

// Ospfv3_Processes_Process_DefaultVrf_BorderRouters
// OSPFv3 border router information table
type Ospfv3_Processes_Process_DefaultVrf_BorderRouters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 border router information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter.
    BorderRouter []Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter
}

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetFilter() yfilter.YFilter { return borderRouters.YFilter }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) SetFilter(yf yfilter.YFilter) { borderRouters.YFilter = yf }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetGoName(yname string) string {
    if yname == "border-router" { return "BorderRouter" }
    return ""
}

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetSegmentPath() string {
    return "border-routers"
}

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "border-router" {
        for _, c := range borderRouters.BorderRouter {
            if borderRouters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter{}
        borderRouters.BorderRouter = append(borderRouters.BorderRouter, child)
        return &borderRouters.BorderRouter[len(borderRouters.BorderRouter)-1]
    }
    return nil
}

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range borderRouters.BorderRouter {
        children[borderRouters.BorderRouter[i].GetSegmentPath()] = &borderRouters.BorderRouter[i]
    }
    return children
}

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetBundleName() string { return "cisco_ios_xr" }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetYangName() string { return "border-routers" }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) SetParent(parent types.Entity) { borderRouters.parent = parent }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetParent() types.Entity { return borderRouters.parent }

func (borderRouters *Ospfv3_Processes_Process_DefaultVrf_BorderRouters) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter
// OSPFv3 border router information
type Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Router address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BorderRouterId interface{}

    // List of border router paths. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath.
    BorderRouterPath []Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath
}

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetFilter() yfilter.YFilter { return borderRouter.YFilter }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) SetFilter(yf yfilter.YFilter) { borderRouter.YFilter = yf }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetGoName(yname string) string {
    if yname == "border-router-id" { return "BorderRouterId" }
    if yname == "border-router-path" { return "BorderRouterPath" }
    return ""
}

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetSegmentPath() string {
    return "border-router" + "[border-router-id='" + fmt.Sprintf("%v", borderRouter.BorderRouterId) + "']"
}

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "border-router-path" {
        for _, c := range borderRouter.BorderRouterPath {
            if borderRouter.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath{}
        borderRouter.BorderRouterPath = append(borderRouter.BorderRouterPath, child)
        return &borderRouter.BorderRouterPath[len(borderRouter.BorderRouterPath)-1]
    }
    return nil
}

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range borderRouter.BorderRouterPath {
        children[borderRouter.BorderRouterPath[i].GetSegmentPath()] = &borderRouter.BorderRouterPath[i]
    }
    return children
}

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["border-router-id"] = borderRouter.BorderRouterId
    return leafs
}

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetBundleName() string { return "cisco_ios_xr" }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetYangName() string { return "border-router" }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) SetParent(parent types.Entity) { borderRouter.parent = parent }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetParent() types.Entity { return borderRouter.parent }

func (borderRouter *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter) GetParentYangName() string { return "border-routers" }

// Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath
// List of border router paths
type Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // If true, intra-area router else inter-area router. The type is bool.
    IsIntraAreaRouter interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BorderRouterRouteMetric interface{}

    // Next hop address . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BorderRouterNextHop interface{}

    // Next hop interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Border router type . The type is Ospfv3BorderRoute.
    BorderRouterType interface{}

    // Area string in decimal or dotted-decimal format . The type is string with
    // length: 0..16.
    BorderRouterAreaId interface{}

    // SPF version. The type is interface{} with range: 0..4294967295.
    SpfVersion interface{}
}

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetFilter() yfilter.YFilter { return borderRouterPath.YFilter }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) SetFilter(yf yfilter.YFilter) { borderRouterPath.YFilter = yf }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetGoName(yname string) string {
    if yname == "is-intra-area-router" { return "IsIntraAreaRouter" }
    if yname == "border-router-route-metric" { return "BorderRouterRouteMetric" }
    if yname == "border-router-next-hop" { return "BorderRouterNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "border-router-type" { return "BorderRouterType" }
    if yname == "border-router-area-id" { return "BorderRouterAreaId" }
    if yname == "spf-version" { return "SpfVersion" }
    return ""
}

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetSegmentPath() string {
    return "border-router-path"
}

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-intra-area-router"] = borderRouterPath.IsIntraAreaRouter
    leafs["border-router-route-metric"] = borderRouterPath.BorderRouterRouteMetric
    leafs["border-router-next-hop"] = borderRouterPath.BorderRouterNextHop
    leafs["interface-name"] = borderRouterPath.InterfaceName
    leafs["border-router-type"] = borderRouterPath.BorderRouterType
    leafs["border-router-area-id"] = borderRouterPath.BorderRouterAreaId
    leafs["spf-version"] = borderRouterPath.SpfVersion
    return leafs
}

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetBundleName() string { return "cisco_ios_xr" }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetYangName() string { return "border-router-path" }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) SetParent(parent types.Entity) { borderRouterPath.parent = parent }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetParent() types.Entity { return borderRouterPath.parent }

func (borderRouterPath *Ospfv3_Processes_Process_DefaultVrf_BorderRouters_BorderRouter_BorderRouterPath) GetParentYangName() string { return "border-router" }

// Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable
// Sham link information
type Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor on other end of this sham link. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ShamLinkNeighborId interface{}

    // Sham-link source. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkSourceAddress interface{}

    // Sham-link dest. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ShamLinkDestAddress interface{}

    // OSPF interface state for the sham link. The type is Ospfv3InterfaceState.
    ShamLinkState interface{}

    // If true, the link runs as demand circuit. The type is bool.
    ShamLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set. The type is interface{}
    // with range: 0..4294967295.
    ShamLinkDcBitlessLsa interface{}

    // Sham-link ifindex. The type is interface{} with range: 0..4294967295.
    ShamLinkIfindex interface{}

    // Area id. The type is string.
    ShamLinkArea interface{}

    // Cost of the sham link. The type is interface{} with range: 0..65535.
    ShamLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    ShamLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    ShamLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    ShamLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    ShamLinkPassive interface{}

    // If true, sham link IP security is required . The type is bool.
    IsShamLinkIpSecurityRequired interface{}

    // If true, Sham link IP security is active . The type is bool.
    IsShamLinkIpSecurityActive interface{}

    // If true, sham link authentication is enabled . The type is bool.
    IsShamLinkAuthenticationEnabled interface{}

    // Sham link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Sham link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkAuthenticationTransmit interface{}

    // If true, sham link encryption is enabled . The type is bool.
    IsShamLinkEncryptionEnabled interface{}

    // Sham link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionSpi interface{}

    // Sham link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    ShamLinkEncryptionTransmitted interface{}

    // Sham link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    ShamLinkEncryptedAuthenticationTransmitted interface{}

    // If true,  enabled. The type is bool.
    ShamLinkGrEnabled interface{}

    // If true, Gracefule restart in progress. The type is bool.
    ShamLinkGr interface{}

    // Time in seconds since last GR. The type is interface{} with range:
    // 0..4294967295. Units are second.
    ShamLinkLastGr interface{}

    // Neighbor information.
    ShamLinkNeighbor Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor
}

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetFilter() yfilter.YFilter { return shamLinkTable.YFilter }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) SetFilter(yf yfilter.YFilter) { shamLinkTable.YFilter = yf }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetGoName(yname string) string {
    if yname == "sham-link-neighbor-id" { return "ShamLinkNeighborId" }
    if yname == "sham-link-source-address" { return "ShamLinkSourceAddress" }
    if yname == "sham-link-dest-address" { return "ShamLinkDestAddress" }
    if yname == "sham-link-state" { return "ShamLinkState" }
    if yname == "sham-link-demand-circuit" { return "ShamLinkDemandCircuit" }
    if yname == "sham-link-dc-bitless-lsa" { return "ShamLinkDcBitlessLsa" }
    if yname == "sham-link-ifindex" { return "ShamLinkIfindex" }
    if yname == "sham-link-area" { return "ShamLinkArea" }
    if yname == "sham-link-cost" { return "ShamLinkCost" }
    if yname == "sham-link-transmission-delay" { return "ShamLinkTransmissionDelay" }
    if yname == "sham-link-hello-interval" { return "ShamLinkHelloInterval" }
    if yname == "sham-link-dead-interval" { return "ShamLinkDeadInterval" }
    if yname == "sham-link-wait-interval" { return "ShamLinkWaitInterval" }
    if yname == "sham-link-retransmission-interval" { return "ShamLinkRetransmissionInterval" }
    if yname == "sham-link-next-hello" { return "ShamLinkNextHello" }
    if yname == "sham-link-passive" { return "ShamLinkPassive" }
    if yname == "is-sham-link-ip-security-required" { return "IsShamLinkIpSecurityRequired" }
    if yname == "is-sham-link-ip-security-active" { return "IsShamLinkIpSecurityActive" }
    if yname == "is-sham-link-authentication-enabled" { return "IsShamLinkAuthenticationEnabled" }
    if yname == "virtual-link-authentication-spi" { return "VirtualLinkAuthenticationSpi" }
    if yname == "sham-link-authentication-transmit" { return "ShamLinkAuthenticationTransmit" }
    if yname == "is-sham-link-encryption-enabled" { return "IsShamLinkEncryptionEnabled" }
    if yname == "sham-link-encryption-spi" { return "ShamLinkEncryptionSpi" }
    if yname == "sham-link-encryption-transmitted" { return "ShamLinkEncryptionTransmitted" }
    if yname == "sham-link-encrypted-authentication-transmitted" { return "ShamLinkEncryptedAuthenticationTransmitted" }
    if yname == "sham-link-gr-enabled" { return "ShamLinkGrEnabled" }
    if yname == "sham-link-gr" { return "ShamLinkGr" }
    if yname == "sham-link-last-gr" { return "ShamLinkLastGr" }
    if yname == "sham-link-neighbor" { return "ShamLinkNeighbor" }
    return ""
}

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetSegmentPath() string {
    return "sham-link-table"
}

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-neighbor" {
        return &shamLinkTable.ShamLinkNeighbor
    }
    return nil
}

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sham-link-neighbor"] = &shamLinkTable.ShamLinkNeighbor
    return children
}

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sham-link-neighbor-id"] = shamLinkTable.ShamLinkNeighborId
    leafs["sham-link-source-address"] = shamLinkTable.ShamLinkSourceAddress
    leafs["sham-link-dest-address"] = shamLinkTable.ShamLinkDestAddress
    leafs["sham-link-state"] = shamLinkTable.ShamLinkState
    leafs["sham-link-demand-circuit"] = shamLinkTable.ShamLinkDemandCircuit
    leafs["sham-link-dc-bitless-lsa"] = shamLinkTable.ShamLinkDcBitlessLsa
    leafs["sham-link-ifindex"] = shamLinkTable.ShamLinkIfindex
    leafs["sham-link-area"] = shamLinkTable.ShamLinkArea
    leafs["sham-link-cost"] = shamLinkTable.ShamLinkCost
    leafs["sham-link-transmission-delay"] = shamLinkTable.ShamLinkTransmissionDelay
    leafs["sham-link-hello-interval"] = shamLinkTable.ShamLinkHelloInterval
    leafs["sham-link-dead-interval"] = shamLinkTable.ShamLinkDeadInterval
    leafs["sham-link-wait-interval"] = shamLinkTable.ShamLinkWaitInterval
    leafs["sham-link-retransmission-interval"] = shamLinkTable.ShamLinkRetransmissionInterval
    leafs["sham-link-next-hello"] = shamLinkTable.ShamLinkNextHello
    leafs["sham-link-passive"] = shamLinkTable.ShamLinkPassive
    leafs["is-sham-link-ip-security-required"] = shamLinkTable.IsShamLinkIpSecurityRequired
    leafs["is-sham-link-ip-security-active"] = shamLinkTable.IsShamLinkIpSecurityActive
    leafs["is-sham-link-authentication-enabled"] = shamLinkTable.IsShamLinkAuthenticationEnabled
    leafs["virtual-link-authentication-spi"] = shamLinkTable.VirtualLinkAuthenticationSpi
    leafs["sham-link-authentication-transmit"] = shamLinkTable.ShamLinkAuthenticationTransmit
    leafs["is-sham-link-encryption-enabled"] = shamLinkTable.IsShamLinkEncryptionEnabled
    leafs["sham-link-encryption-spi"] = shamLinkTable.ShamLinkEncryptionSpi
    leafs["sham-link-encryption-transmitted"] = shamLinkTable.ShamLinkEncryptionTransmitted
    leafs["sham-link-encrypted-authentication-transmitted"] = shamLinkTable.ShamLinkEncryptedAuthenticationTransmitted
    leafs["sham-link-gr-enabled"] = shamLinkTable.ShamLinkGrEnabled
    leafs["sham-link-gr"] = shamLinkTable.ShamLinkGr
    leafs["sham-link-last-gr"] = shamLinkTable.ShamLinkLastGr
    return leafs
}

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetYangName() string { return "sham-link-table" }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) SetParent(parent types.Entity) { shamLinkTable.parent = parent }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetParent() types.Entity { return shamLinkTable.parent }

func (shamLinkTable *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor
// Neighbor information
type Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // If true Hellos suppressed. The type is bool.
    ShamLinkSuppressHello interface{}

    // Adjacency state. The type is Ospfv3NeighborState.
    ShamLinkState interface{}

    // Neighbor retransmission info.
    ShamLinkRetransmission Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetFilter() yfilter.YFilter { return shamLinkNeighbor.YFilter }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) SetFilter(yf yfilter.YFilter) { shamLinkNeighbor.YFilter = yf }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetGoName(yname string) string {
    if yname == "sham-link-suppress-hello" { return "ShamLinkSuppressHello" }
    if yname == "sham-link-state" { return "ShamLinkState" }
    if yname == "sham-link-retransmission" { return "ShamLinkRetransmission" }
    return ""
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetSegmentPath() string {
    return "sham-link-neighbor"
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sham-link-retransmission" {
        return &shamLinkNeighbor.ShamLinkRetransmission
    }
    return nil
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sham-link-retransmission"] = &shamLinkNeighbor.ShamLinkRetransmission
    return children
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sham-link-suppress-hello"] = shamLinkNeighbor.ShamLinkSuppressHello
    leafs["sham-link-state"] = shamLinkNeighbor.ShamLinkState
    return leafs
}

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetYangName() string { return "sham-link-neighbor" }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) SetParent(parent types.Entity) { shamLinkNeighbor.parent = parent }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetParent() types.Entity { return shamLinkNeighbor.parent }

func (shamLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor) GetParentYangName() string { return "sham-link-table" }

// Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission
// Neighbor retransmission info
type Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetFilter() yfilter.YFilter { return shamLinkRetransmission.YFilter }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) SetFilter(yf yfilter.YFilter) { shamLinkRetransmission.YFilter = yf }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetSegmentPath() string {
    return "sham-link-retransmission"
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = shamLinkRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = shamLinkRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = shamLinkRetransmission.AsFloodIndex
    leafs["link-flood-index"] = shamLinkRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = shamLinkRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = shamLinkRetransmission.Retransmissions
    leafs["area-first-flood"] = shamLinkRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = shamLinkRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = shamLinkRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = shamLinkRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = shamLinkRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = shamLinkRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = shamLinkRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = shamLinkRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = shamLinkRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = shamLinkRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = shamLinkRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = shamLinkRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = shamLinkRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = shamLinkRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = shamLinkRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = shamLinkRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = shamLinkRetransmission.LsaRetransmissionTimer
    return leafs
}

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetYangName() string { return "sham-link-retransmission" }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) SetParent(parent types.Entity) { shamLinkRetransmission.parent = parent }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetParent() types.Entity { return shamLinkRetransmission.parent }

func (shamLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_ShamLinkTable_ShamLinkNeighbor_ShamLinkRetransmission) GetParentYangName() string { return "sham-link-neighbor" }

// Ospfv3_Processes_Process_DefaultVrf_AreaInformations
// OSPFv3 area information table
type Ospfv3_Processes_Process_DefaultVrf_AreaInformations struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 area information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation.
    AreaInformation []Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation
}

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetFilter() yfilter.YFilter { return areaInformations.YFilter }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) SetFilter(yf yfilter.YFilter) { areaInformations.YFilter = yf }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetGoName(yname string) string {
    if yname == "area-information" { return "AreaInformation" }
    return ""
}

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetSegmentPath() string {
    return "area-informations"
}

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-information" {
        for _, c := range areaInformations.AreaInformation {
            if areaInformations.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation{}
        areaInformations.AreaInformation = append(areaInformations.AreaInformation, child)
        return &areaInformations.AreaInformation[len(areaInformations.AreaInformation)-1]
    }
    return nil
}

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaInformations.AreaInformation {
        children[areaInformations.AreaInformation[i].GetSegmentPath()] = &areaInformations.AreaInformation[i]
    }
    return children
}

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetBundleName() string { return "cisco_ios_xr" }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetYangName() string { return "area-informations" }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) SetParent(parent types.Entity) { areaInformations.parent = parent }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetParent() types.Entity { return areaInformations.parent }

func (areaInformations *Ospfv3_Processes_Process_DefaultVrf_AreaInformations) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation
// OSPFv3 area information
type Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // -2147483648..2147483647.
    AreaId interface{}

    // If true, Backbone area is active. The type is bool.
    IsBackboneAreaActive interface{}

    // Number of interfaces in the area. The type is interface{} with range:
    // 0..65535.
    AreaInterfaces interface{}

    // If true, stub area. The type is bool.
    IsAreaStubbed interface{}

    // If true, totally stubby area. The type is bool.
    IsAreaTotalStubbed interface{}

    // Default cost for Stub or NSSA area. The type is interface{} with range:
    // 0..65535.
    StubDefaultCost interface{}

    // If true, area is a NSSA. The type is bool.
    IsAreaNssa interface{}

    // If true, No redistribution into this NSSA area. The type is bool.
    NssaNoRedistribution interface{}

    // If true, perform 7/5 translation. The type is bool.
    IsNssaTranslated interface{}

    // If true, generate NSSA default route. The type is bool.
    IsNssaDefault interface{}

    // If true, RRR is enabled. The type is bool.
    IsRrrEnabled interface{}

    // Number of SPF calculations run. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}

    // Number of opaque LSAs in the area. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsas interface{}

    // Sum of opaque LSA checksums. The type is interface{} with range:
    // 0..4294967295.
    AreaOpaqueLsaChecksum interface{}

    // Number of LSA with demand circuit bit not set. The type is interface{} with
    // range: 0..4294967295.
    AreaDcBitlessLsAs interface{}

    // Number of indication LSAs. The type is interface{} with range:
    // 0..4294967295.
    IndicationLsAs interface{}

    // Number of do not age LSAs. The type is interface{} with range:
    // 0..4294967295.
    DoNotAgeLsAs interface{}

    // Number of LSAs which need to be flooded. The type is interface{} with
    // range: 0..4294967295.
    FloodListLength interface{}

    // Number of LFA enabled interfaces. The type is interface{} with range:
    // 0..4294967295.
    AreaLfaInterfaceCount interface{}

    // Number of Per Prefix LFA enabled interfaces. The type is interface{} with
    // range: 0..4294967295.
    AreaPerPrefixLfaInterfaceCount interface{}

    // Area LFA revision. The type is interface{} with range: 0..4294967295.
    AreaLfaRevision interface{}

    // List of ranges to summarize. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange.
    AreaRange []Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange
}

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetFilter() yfilter.YFilter { return areaInformation.YFilter }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) SetFilter(yf yfilter.YFilter) { areaInformation.YFilter = yf }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "is-backbone-area-active" { return "IsBackboneAreaActive" }
    if yname == "area-interfaces" { return "AreaInterfaces" }
    if yname == "is-area-stubbed" { return "IsAreaStubbed" }
    if yname == "is-area-total-stubbed" { return "IsAreaTotalStubbed" }
    if yname == "stub-default-cost" { return "StubDefaultCost" }
    if yname == "is-area-nssa" { return "IsAreaNssa" }
    if yname == "nssa-no-redistribution" { return "NssaNoRedistribution" }
    if yname == "is-nssa-translated" { return "IsNssaTranslated" }
    if yname == "is-nssa-default" { return "IsNssaDefault" }
    if yname == "is-rrr-enabled" { return "IsRrrEnabled" }
    if yname == "sp-fs" { return "SpFs" }
    if yname == "area-opaque-lsas" { return "AreaOpaqueLsas" }
    if yname == "area-opaque-lsa-checksum" { return "AreaOpaqueLsaChecksum" }
    if yname == "area-dc-bitless-ls-as" { return "AreaDcBitlessLsAs" }
    if yname == "indication-ls-as" { return "IndicationLsAs" }
    if yname == "do-not-age-ls-as" { return "DoNotAgeLsAs" }
    if yname == "flood-list-length" { return "FloodListLength" }
    if yname == "area-lfa-interface-count" { return "AreaLfaInterfaceCount" }
    if yname == "area-per-prefix-lfa-interface-count" { return "AreaPerPrefixLfaInterfaceCount" }
    if yname == "area-lfa-revision" { return "AreaLfaRevision" }
    if yname == "area-range" { return "AreaRange" }
    return ""
}

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetSegmentPath() string {
    return "area-information" + "[area-id='" + fmt.Sprintf("%v", areaInformation.AreaId) + "']"
}

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-range" {
        for _, c := range areaInformation.AreaRange {
            if areaInformation.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange{}
        areaInformation.AreaRange = append(areaInformation.AreaRange, child)
        return &areaInformation.AreaRange[len(areaInformation.AreaRange)-1]
    }
    return nil
}

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areaInformation.AreaRange {
        children[areaInformation.AreaRange[i].GetSegmentPath()] = &areaInformation.AreaRange[i]
    }
    return children
}

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaInformation.AreaId
    leafs["is-backbone-area-active"] = areaInformation.IsBackboneAreaActive
    leafs["area-interfaces"] = areaInformation.AreaInterfaces
    leafs["is-area-stubbed"] = areaInformation.IsAreaStubbed
    leafs["is-area-total-stubbed"] = areaInformation.IsAreaTotalStubbed
    leafs["stub-default-cost"] = areaInformation.StubDefaultCost
    leafs["is-area-nssa"] = areaInformation.IsAreaNssa
    leafs["nssa-no-redistribution"] = areaInformation.NssaNoRedistribution
    leafs["is-nssa-translated"] = areaInformation.IsNssaTranslated
    leafs["is-nssa-default"] = areaInformation.IsNssaDefault
    leafs["is-rrr-enabled"] = areaInformation.IsRrrEnabled
    leafs["sp-fs"] = areaInformation.SpFs
    leafs["area-opaque-lsas"] = areaInformation.AreaOpaqueLsas
    leafs["area-opaque-lsa-checksum"] = areaInformation.AreaOpaqueLsaChecksum
    leafs["area-dc-bitless-ls-as"] = areaInformation.AreaDcBitlessLsAs
    leafs["indication-ls-as"] = areaInformation.IndicationLsAs
    leafs["do-not-age-ls-as"] = areaInformation.DoNotAgeLsAs
    leafs["flood-list-length"] = areaInformation.FloodListLength
    leafs["area-lfa-interface-count"] = areaInformation.AreaLfaInterfaceCount
    leafs["area-per-prefix-lfa-interface-count"] = areaInformation.AreaPerPrefixLfaInterfaceCount
    leafs["area-lfa-revision"] = areaInformation.AreaLfaRevision
    return leafs
}

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetBundleName() string { return "cisco_ios_xr" }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetYangName() string { return "area-information" }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) SetParent(parent types.Entity) { areaInformation.parent = parent }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetParent() types.Entity { return areaInformation.parent }

func (areaInformation *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation) GetParentYangName() string { return "area-informations" }

// Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange
// List of ranges to summarize
type Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP prefix for summarization. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RangePrefix interface{}

    // IP prefix length for summarization. The type is interface{} with range:
    // 0..4294967295.
    RangePrefixLength interface{}

    // Net cost . The type is interface{} with range: 0..4294967295.
    NetCost interface{}

    // Area range status . The type is Ospfv3AreaRangeStatus.
    Status interface{}

    // If true, cost is configured . The type is bool.
    IsCostConfigured interface{}
}

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetFilter() yfilter.YFilter { return areaRange.YFilter }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) SetFilter(yf yfilter.YFilter) { areaRange.YFilter = yf }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetGoName(yname string) string {
    if yname == "range-prefix" { return "RangePrefix" }
    if yname == "range-prefix-length" { return "RangePrefixLength" }
    if yname == "net-cost" { return "NetCost" }
    if yname == "status" { return "Status" }
    if yname == "is-cost-configured" { return "IsCostConfigured" }
    return ""
}

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetSegmentPath() string {
    return "area-range"
}

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["range-prefix"] = areaRange.RangePrefix
    leafs["range-prefix-length"] = areaRange.RangePrefixLength
    leafs["net-cost"] = areaRange.NetCost
    leafs["status"] = areaRange.Status
    leafs["is-cost-configured"] = areaRange.IsCostConfigured
    return leafs
}

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetBundleName() string { return "cisco_ios_xr" }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetYangName() string { return "area-range" }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) SetParent(parent types.Entity) { areaRange.parent = parent }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetParent() types.Entity { return areaRange.parent }

func (areaRange *Ospfv3_Processes_Process_DefaultVrf_AreaInformations_AreaInformation_AreaRange) GetParentYangName() string { return "area-information" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetFilter() yfilter.YFilter { return databaseTable.YFilter }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) SetFilter(yf yfilter.YFilter) { databaseTable.YFilter = yf }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetGoName(yname string) string {
    if yname == "lsa-table" { return "LsaTable" }
    if yname == "lsa-internal-table" { return "LsaInternalTable" }
    return ""
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetSegmentPath() string {
    return "database-table"
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-table" {
        return &databaseTable.LsaTable
    }
    if childYangName == "lsa-internal-table" {
        return &databaseTable.LsaInternalTable
    }
    return nil
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-table"] = &databaseTable.LsaTable
    children["lsa-internal-table"] = &databaseTable.LsaInternalTable
    return children
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetYangName() string { return "database-table" }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) SetParent(parent types.Entity) { databaseTable.parent = parent }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetParent() types.Entity { return databaseTable.parent }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa.
    Lsa []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetFilter() yfilter.YFilter { return lsaTable.YFilter }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) SetFilter(yf yfilter.YFilter) { lsaTable.YFilter = yf }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetSegmentPath() string {
    return "lsa-table"
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaTable.Lsa {
            if lsaTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa{}
        lsaTable.Lsa = append(lsaTable.Lsa, child)
        return &lsaTable.Lsa[len(lsaTable.Lsa)-1]
    }
    return nil
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaTable.Lsa {
        children[lsaTable.Lsa[i].GetSegmentPath()] = &lsaTable.Lsa[i]
    }
    return children
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetYangName() string { return "lsa-table" }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) SetParent(parent types.Entity) { lsaTable.parent = parent }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetParent() types.Entity { return lsaTable.parent }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa) GetParentYangName() string { return "lsa-table" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetFilter() yfilter.YFilter { return lsaInternalTable.YFilter }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) SetFilter(yf yfilter.YFilter) { lsaInternalTable.YFilter = yf }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetSegmentPath() string {
    return "lsa-internal-table"
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaInternalTable.Lsa {
            if lsaInternalTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa{}
        lsaInternalTable.Lsa = append(lsaInternalTable.Lsa, child)
        return &lsaInternalTable.Lsa[len(lsaInternalTable.Lsa)-1]
    }
    return nil
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaInternalTable.Lsa {
        children[lsaInternalTable.Lsa[i].GetSegmentPath()] = &lsaInternalTable.Lsa[i]
    }
    return children
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetYangName() string { return "lsa-internal-table" }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) SetParent(parent types.Entity) { lsaInternalTable.parent = parent }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetParent() types.Entity { return lsaInternalTable.parent }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa) GetParentYangName() string { return "lsa-internal-table" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable
// OSPFv3 interface information table for all areas
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface.
    Interface []Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface
}

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetFilter() yfilter.YFilter { return interfaceProcessTable.YFilter }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) SetFilter(yf yfilter.YFilter) { interfaceProcessTable.YFilter = yf }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetSegmentPath() string {
    return "interface-process-table"
}

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceProcessTable.Interface {
            if interfaceProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface{}
        interfaceProcessTable.Interface = append(interfaceProcessTable.Interface, child)
        return &interfaceProcessTable.Interface[len(interfaceProcessTable.Interface)-1]
    }
    return nil
}

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceProcessTable.Interface {
        children[interfaceProcessTable.Interface[i].GetSegmentPath()] = &interfaceProcessTable.Interface[i]
    }
    return children
}

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetYangName() string { return "interface-process-table" }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) SetParent(parent types.Entity) { interfaceProcessTable.parent = parent }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetParent() types.Entity { return interfaceProcessTable.parent }

func (interfaceProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-state" { return "InterfaceState" }
    if yname == "is-interface-line-up" { return "IsInterfaceLineUp" }
    if yname == "is-interface-ip-security-required" { return "IsInterfaceIpSecurityRequired" }
    if yname == "is-interface-ip-security-active" { return "IsInterfaceIpSecurityActive" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-number" { return "InterfaceNumber" }
    if yname == "interface-router-id" { return "InterfaceRouterId" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "is-interface-flood-reduction" { return "IsInterfaceFloodReduction" }
    if yname == "is-demand-circuit-configured" { return "IsDemandCircuitConfigured" }
    if yname == "is-interface-demand-circuit" { return "IsInterfaceDemandCircuit" }
    if yname == "interface-dc-bitless-ls-as" { return "InterfaceDcBitlessLsAs" }
    if yname == "transmission-delay" { return "TransmissionDelay" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-priority" { return "InterfacePriority" }
    if yname == "is-designated-router" { return "IsDesignatedRouter" }
    if yname == "designated-router-id" { return "DesignatedRouterId" }
    if yname == "designated-router-address" { return "DesignatedRouterAddress" }
    if yname == "backup-designated-router-id" { return "BackupDesignatedRouterId" }
    if yname == "backup-designated-router-address" { return "BackupDesignatedRouterAddress" }
    if yname == "network-lsa-flush-timer" { return "NetworkLsaFlushTimer" }
    if yname == "is-interface-lsa-filtered" { return "IsInterfaceLsaFiltered" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "wait-interval" { return "WaitInterval" }
    if yname == "interface-retransmission-interval" { return "InterfaceRetransmissionInterval" }
    if yname == "next-hello-time" { return "NextHelloTime" }
    if yname == "interface-authentication-spi" { return "InterfaceAuthenticationSpi" }
    if yname == "interface-authentication-transmit" { return "InterfaceAuthenticationTransmit" }
    if yname == "is-interface-encryption-enabled" { return "IsInterfaceEncryptionEnabled" }
    if yname == "is-prefix-suppress" { return "IsPrefixSuppress" }
    if yname == "interface-encryption-spi" { return "InterfaceEncryptionSpi" }
    if yname == "interface-encryption-transmitted" { return "InterfaceEncryptionTransmitted" }
    if yname == "interface-encrypted-authentication-transmitted" { return "InterfaceEncryptedAuthenticationTransmitted" }
    if yname == "adjacent-neighbor" { return "AdjacentNeighbor" }
    if yname == "interface-references" { return "InterfaceReferences" }
    if yname == "configured-ldp-sync" { return "ConfiguredLdpSync" }
    if yname == "interface-ldp-sync" { return "InterfaceLdpSync" }
    if yname == "active-interface" { return "ActiveInterface" }
    if yname == "interface-bfd" { return "InterfaceBfd" }
    if yname == "interface-neighbor" { return "InterfaceNeighbor" }
    return ""
}

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "active-interface" {
        return &self.ActiveInterface
    }
    if childYangName == "interface-bfd" {
        return &self.InterfaceBfd
    }
    if childYangName == "interface-neighbor" {
        for _, c := range self.InterfaceNeighbor {
            if self.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor{}
        self.InterfaceNeighbor = append(self.InterfaceNeighbor, child)
        return &self.InterfaceNeighbor[len(self.InterfaceNeighbor)-1]
    }
    return nil
}

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["active-interface"] = &self.ActiveInterface
    children["interface-bfd"] = &self.InterfaceBfd
    for i := range self.InterfaceNeighbor {
        children[self.InterfaceNeighbor[i].GetSegmentPath()] = &self.InterfaceNeighbor[i]
    }
    return children
}

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-state"] = self.InterfaceState
    leafs["is-interface-line-up"] = self.IsInterfaceLineUp
    leafs["is-interface-ip-security-required"] = self.IsInterfaceIpSecurityRequired
    leafs["is-interface-ip-security-active"] = self.IsInterfaceIpSecurityActive
    leafs["interface-address"] = self.InterfaceAddress
    leafs["interface-number"] = self.InterfaceNumber
    leafs["interface-router-id"] = self.InterfaceRouterId
    leafs["network-type"] = self.NetworkType
    leafs["interface-link-cost"] = self.InterfaceLinkCost
    leafs["is-interface-flood-reduction"] = self.IsInterfaceFloodReduction
    leafs["is-demand-circuit-configured"] = self.IsDemandCircuitConfigured
    leafs["is-interface-demand-circuit"] = self.IsInterfaceDemandCircuit
    leafs["interface-dc-bitless-ls-as"] = self.InterfaceDcBitlessLsAs
    leafs["transmission-delay"] = self.TransmissionDelay
    leafs["ospf-interface-state"] = self.OspfInterfaceState
    leafs["interface-priority"] = self.InterfacePriority
    leafs["is-designated-router"] = self.IsDesignatedRouter
    leafs["designated-router-id"] = self.DesignatedRouterId
    leafs["designated-router-address"] = self.DesignatedRouterAddress
    leafs["backup-designated-router-id"] = self.BackupDesignatedRouterId
    leafs["backup-designated-router-address"] = self.BackupDesignatedRouterAddress
    leafs["network-lsa-flush-timer"] = self.NetworkLsaFlushTimer
    leafs["is-interface-lsa-filtered"] = self.IsInterfaceLsaFiltered
    leafs["hello-interval"] = self.HelloInterval
    leafs["dead-interval"] = self.DeadInterval
    leafs["wait-interval"] = self.WaitInterval
    leafs["interface-retransmission-interval"] = self.InterfaceRetransmissionInterval
    leafs["next-hello-time"] = self.NextHelloTime
    leafs["interface-authentication-spi"] = self.InterfaceAuthenticationSpi
    leafs["interface-authentication-transmit"] = self.InterfaceAuthenticationTransmit
    leafs["is-interface-encryption-enabled"] = self.IsInterfaceEncryptionEnabled
    leafs["is-prefix-suppress"] = self.IsPrefixSuppress
    leafs["interface-encryption-spi"] = self.InterfaceEncryptionSpi
    leafs["interface-encryption-transmitted"] = self.InterfaceEncryptionTransmitted
    leafs["interface-encrypted-authentication-transmitted"] = self.InterfaceEncryptedAuthenticationTransmitted
    leafs["adjacent-neighbor"] = self.AdjacentNeighbor
    leafs["interface-references"] = self.InterfaceReferences
    leafs["configured-ldp-sync"] = self.ConfiguredLdpSync
    leafs["interface-ldp-sync"] = self.InterfaceLdpSync
    return leafs
}

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface) GetParentYangName() string { return "interface-process-table" }

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetFilter() yfilter.YFilter { return activeInterface.YFilter }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) SetFilter(yf yfilter.YFilter) { activeInterface.YFilter = yf }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetGoName(yname string) string {
    if yname == "wait-time" { return "WaitTime" }
    if yname == "interface-area-flood-index" { return "InterfaceAreaFloodIndex" }
    if yname == "interface-as-flood-index" { return "InterfaceAsFloodIndex" }
    if yname == "interface-link-flood-index" { return "InterfaceLinkFloodIndex" }
    if yname == "flood-queue-length" { return "FloodQueueLength" }
    if yname == "interface-area-next-flood" { return "InterfaceAreaNextFlood" }
    if yname == "interface-area-next-flood-index" { return "InterfaceAreaNextFloodIndex" }
    if yname == "interface-as-next-flood" { return "InterfaceAsNextFlood" }
    if yname == "interface-as-next-flood-index" { return "InterfaceAsNextFloodIndex" }
    if yname == "interface-link-next-flood" { return "InterfaceLinkNextFlood" }
    if yname == "interface-link-next-index" { return "InterfaceLinkNextIndex" }
    if yname == "flood-scan-length" { return "FloodScanLength" }
    if yname == "maximum-flood-length" { return "MaximumFloodLength" }
    if yname == "last-flood-time" { return "LastFloodTime" }
    if yname == "maximum-flood-time" { return "MaximumFloodTime" }
    if yname == "interface-flood-pacing-timer" { return "InterfaceFloodPacingTimer" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "suppressed-hellos" { return "SuppressedHellos" }
    return ""
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetSegmentPath() string {
    return "active-interface"
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-time"] = activeInterface.WaitTime
    leafs["interface-area-flood-index"] = activeInterface.InterfaceAreaFloodIndex
    leafs["interface-as-flood-index"] = activeInterface.InterfaceAsFloodIndex
    leafs["interface-link-flood-index"] = activeInterface.InterfaceLinkFloodIndex
    leafs["flood-queue-length"] = activeInterface.FloodQueueLength
    leafs["interface-area-next-flood"] = activeInterface.InterfaceAreaNextFlood
    leafs["interface-area-next-flood-index"] = activeInterface.InterfaceAreaNextFloodIndex
    leafs["interface-as-next-flood"] = activeInterface.InterfaceAsNextFlood
    leafs["interface-as-next-flood-index"] = activeInterface.InterfaceAsNextFloodIndex
    leafs["interface-link-next-flood"] = activeInterface.InterfaceLinkNextFlood
    leafs["interface-link-next-index"] = activeInterface.InterfaceLinkNextIndex
    leafs["flood-scan-length"] = activeInterface.FloodScanLength
    leafs["maximum-flood-length"] = activeInterface.MaximumFloodLength
    leafs["last-flood-time"] = activeInterface.LastFloodTime
    leafs["maximum-flood-time"] = activeInterface.MaximumFloodTime
    leafs["interface-flood-pacing-timer"] = activeInterface.InterfaceFloodPacingTimer
    leafs["interface-neighbors"] = activeInterface.InterfaceNeighbors
    leafs["suppressed-hellos"] = activeInterface.SuppressedHellos
    return leafs
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetBundleName() string { return "cisco_ios_xr" }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetYangName() string { return "active-interface" }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) SetParent(parent types.Entity) { activeInterface.parent = parent }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetParent() types.Entity { return activeInterface.parent }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_ActiveInterface) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetFilter() yfilter.YFilter { return interfaceBfd.YFilter }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) SetFilter(yf yfilter.YFilter) { interfaceBfd.YFilter = yf }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-interval" { return "BfdInterval" }
    if yname == "bfd-detection-multiplier" { return "BfdDetectionMultiplier" }
    return ""
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetSegmentPath() string {
    return "interface-bfd"
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = interfaceBfd.BfdIntfEnableMode
    leafs["bfd-interval"] = interfaceBfd.BfdInterval
    leafs["bfd-detection-multiplier"] = interfaceBfd.BfdDetectionMultiplier
    return leafs
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetYangName() string { return "interface-bfd" }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) SetParent(parent types.Entity) { interfaceBfd.parent = parent }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetParent() types.Entity { return interfaceBfd.parent }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceBfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetFilter() yfilter.YFilter { return interfaceNeighbor.YFilter }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) SetFilter(yf yfilter.YFilter) { interfaceNeighbor.YFilter = yf }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetGoName(yname string) string {
    if yname == "interface-neighbor-id" { return "InterfaceNeighborId" }
    if yname == "interface-neighbor-cost" { return "InterfaceNeighborCost" }
    if yname == "is-neighbor-dr" { return "IsNeighborDr" }
    if yname == "is-neighbor-bdr" { return "IsNeighborBdr" }
    if yname == "is-hello-suppressed" { return "IsHelloSuppressed" }
    return ""
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetSegmentPath() string {
    return "interface-neighbor"
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-id"] = interfaceNeighbor.InterfaceNeighborId
    leafs["interface-neighbor-cost"] = interfaceNeighbor.InterfaceNeighborCost
    leafs["is-neighbor-dr"] = interfaceNeighbor.IsNeighborDr
    leafs["is-neighbor-bdr"] = interfaceNeighbor.IsNeighborBdr
    leafs["is-hello-suppressed"] = interfaceNeighbor.IsHelloSuppressed
    return leafs
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetYangName() string { return "interface-neighbor" }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) SetParent(parent types.Entity) { interfaceNeighbor.parent = parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetParent() types.Entity { return interfaceNeighbor.parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_InterfaceProcessTable_Interface_InterfaceNeighbor) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributions
// Redistribution information table
type Ospfv3_Processes_Process_DefaultVrf_Redistributions struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribution information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution.
    Redistribution []Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution
}

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetFilter() yfilter.YFilter { return redistributions.YFilter }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) SetFilter(yf yfilter.YFilter) { redistributions.YFilter = yf }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetGoName(yname string) string {
    if yname == "redistribution" { return "Redistribution" }
    return ""
}

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetSegmentPath() string {
    return "redistributions"
}

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "redistribution" {
        for _, c := range redistributions.Redistribution {
            if redistributions.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution{}
        redistributions.Redistribution = append(redistributions.Redistribution, child)
        return &redistributions.Redistribution[len(redistributions.Redistribution)-1]
    }
    return nil
}

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range redistributions.Redistribution {
        children[redistributions.Redistribution[i].GetSegmentPath()] = &redistributions.Redistribution[i]
    }
    return children
}

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetBundleName() string { return "cisco_ios_xr" }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetYangName() string { return "redistributions" }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) SetParent(parent types.Entity) { redistributions.parent = parent }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetParent() types.Entity { return redistributions.parent }

func (redistributions *Ospfv3_Processes_Process_DefaultVrf_Redistributions) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution
// Redistribution information
type Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol name that is redistributed. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    ProtocolName interface{}

    // Process name of a protocolbeing redistributed . The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    ProcessName interface{}

    // Protocol name . The type is string with length: 0..40.
    ProtocolNameXr interface{}

    // Process ID . The type is string with length: 0..40.
    ProcessId interface{}

    // red metric flag. The type is bool.
    RedMetricFlag interface{}

    // red metric. The type is interface{} with range: 0..4294967295.
    RedMetric interface{}

    // red mtype flag. The type is bool.
    RedMtypeFlag interface{}

    // red metric type. The type is interface{} with range: 0..255.
    RedMetricType interface{}

    // red tag. The type is interface{} with range: 0..4294967295.
    RedTag interface{}

    // Route policy name . The type is string.
    PolicyName interface{}
}

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetFilter() yfilter.YFilter { return redistribution.YFilter }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) SetFilter(yf yfilter.YFilter) { redistribution.YFilter = yf }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetGoName(yname string) string {
    if yname == "protocol-name" { return "ProtocolName" }
    if yname == "process-name" { return "ProcessName" }
    if yname == "protocol-name-xr" { return "ProtocolNameXr" }
    if yname == "process-id" { return "ProcessId" }
    if yname == "red-metric-flag" { return "RedMetricFlag" }
    if yname == "red-metric" { return "RedMetric" }
    if yname == "red-mtype-flag" { return "RedMtypeFlag" }
    if yname == "red-metric-type" { return "RedMetricType" }
    if yname == "red-tag" { return "RedTag" }
    if yname == "policy-name" { return "PolicyName" }
    return ""
}

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetSegmentPath() string {
    return "redistribution"
}

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-name"] = redistribution.ProtocolName
    leafs["process-name"] = redistribution.ProcessName
    leafs["protocol-name-xr"] = redistribution.ProtocolNameXr
    leafs["process-id"] = redistribution.ProcessId
    leafs["red-metric-flag"] = redistribution.RedMetricFlag
    leafs["red-metric"] = redistribution.RedMetric
    leafs["red-mtype-flag"] = redistribution.RedMtypeFlag
    leafs["red-metric-type"] = redistribution.RedMetricType
    leafs["red-tag"] = redistribution.RedTag
    leafs["policy-name"] = redistribution.PolicyName
    return leafs
}

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetBundleName() string { return "cisco_ios_xr" }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetYangName() string { return "redistribution" }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) SetParent(parent types.Entity) { redistribution.parent = parent }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetParent() types.Entity { return redistribution.parent }

func (redistribution *Ospfv3_Processes_Process_DefaultVrf_Redistributions_Redistribution) GetParentYangName() string { return "redistributions" }

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes
// OSPFv3 external route information table
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 external route information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute.
    ExternalRoute []Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute
}

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetFilter() yfilter.YFilter { return externalRoutes.YFilter }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) SetFilter(yf yfilter.YFilter) { externalRoutes.YFilter = yf }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetGoName(yname string) string {
    if yname == "external-route" { return "ExternalRoute" }
    return ""
}

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetSegmentPath() string {
    return "external-routes"
}

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "external-route" {
        for _, c := range externalRoutes.ExternalRoute {
            if externalRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute{}
        externalRoutes.ExternalRoute = append(externalRoutes.ExternalRoute, child)
        return &externalRoutes.ExternalRoute[len(externalRoutes.ExternalRoute)-1]
    }
    return nil
}

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range externalRoutes.ExternalRoute {
        children[externalRoutes.ExternalRoute[i].GetSegmentPath()] = &externalRoutes.ExternalRoute[i]
    }
    return children
}

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetYangName() string { return "external-routes" }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) SetParent(parent types.Entity) { externalRoutes.parent = parent }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetParent() types.Entity { return externalRoutes.parent }

func (externalRoutes *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute
// OSPFv3 external route information
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology

    // Extended communities in the route.
    RouteExtendedCommunity Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath.
    RoutePath []Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath
}

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetFilter() yfilter.YFilter { return externalRoute.YFilter }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) SetFilter(yf yfilter.YFilter) { externalRoute.YFilter = yf }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-topology" { return "RouteTopology" }
    if yname == "route-extended-community" { return "RouteExtendedCommunity" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetSegmentPath() string {
    return "external-route"
}

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-topology" {
        return &externalRoute.RouteTopology
    }
    if childYangName == "route-extended-community" {
        return &externalRoute.RouteExtendedCommunity
    }
    if childYangName == "route-path" {
        for _, c := range externalRoute.RoutePath {
            if externalRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath{}
        externalRoute.RoutePath = append(externalRoute.RoutePath, child)
        return &externalRoute.RoutePath[len(externalRoute.RoutePath)-1]
    }
    return nil
}

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-topology"] = &externalRoute.RouteTopology
    children["route-extended-community"] = &externalRoute.RouteExtendedCommunity
    for i := range externalRoute.RoutePath {
        children[externalRoute.RoutePath[i].GetSegmentPath()] = &externalRoute.RoutePath[i]
    }
    return children
}

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalRoute.Prefix
    leafs["prefix-length"] = externalRoute.PrefixLength
    return leafs
}

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetBundleName() string { return "cisco_ios_xr" }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetYangName() string { return "external-route" }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) SetParent(parent types.Entity) { externalRoute.parent = parent }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetParent() types.Entity { return externalRoute.parent }

func (externalRoute *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute) GetParentYangName() string { return "external-routes" }

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetFilter() yfilter.YFilter { return routeTopology.YFilter }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) SetFilter(yf yfilter.YFilter) { routeTopology.YFilter = yf }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "route-distance" { return "RouteDistance" }
    if yname == "route-cost" { return "RouteCost" }
    if yname == "route-type" { return "RouteType" }
    return ""
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetSegmentPath() string {
    return "route-topology"
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeTopology.RouteId
    leafs["route-distance"] = routeTopology.RouteDistance
    leafs["route-cost"] = routeTopology.RouteCost
    leafs["route-type"] = routeTopology.RouteType
    return leafs
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetBundleName() string { return "cisco_ios_xr" }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetYangName() string { return "route-topology" }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) SetParent(parent types.Entity) { routeTopology.parent = parent }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetParent() types.Entity { return routeTopology.parent }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteTopology) GetParentYangName() string { return "external-route" }

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity
// Extended communities in the route
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ExtendedCommunityDomainIdValue interface{}

    // Domain ID type. The type is interface{} with range: 0..65535.
    ExtendedCommunitylDomainIdType interface{}

    // Area id. The type is interface{} with range: 0..4294967295.
    ExtendedCommunityAreaId interface{}

    // Router id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedCommunityRouterId interface{}

    // Route type. The type is interface{} with range: 0..255.
    ExtendedCommunityRouteType interface{}

    // Route Options. The type is interface{} with range: 0..255.
    ExtendedCommunityOptions interface{}
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetFilter() yfilter.YFilter { return routeExtendedCommunity.YFilter }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) SetFilter(yf yfilter.YFilter) { routeExtendedCommunity.YFilter = yf }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetGoName(yname string) string {
    if yname == "extended-community-domain-id-value" { return "ExtendedCommunityDomainIdValue" }
    if yname == "extended-communityl-domain-id-type" { return "ExtendedCommunitylDomainIdType" }
    if yname == "extended-community-area-id" { return "ExtendedCommunityAreaId" }
    if yname == "extended-community-router-id" { return "ExtendedCommunityRouterId" }
    if yname == "extended-community-route-type" { return "ExtendedCommunityRouteType" }
    if yname == "extended-community-options" { return "ExtendedCommunityOptions" }
    return ""
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetSegmentPath() string {
    return "route-extended-community"
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["extended-community-domain-id-value"] = routeExtendedCommunity.ExtendedCommunityDomainIdValue
    leafs["extended-communityl-domain-id-type"] = routeExtendedCommunity.ExtendedCommunitylDomainIdType
    leafs["extended-community-area-id"] = routeExtendedCommunity.ExtendedCommunityAreaId
    leafs["extended-community-router-id"] = routeExtendedCommunity.ExtendedCommunityRouterId
    leafs["extended-community-route-type"] = routeExtendedCommunity.ExtendedCommunityRouteType
    leafs["extended-community-options"] = routeExtendedCommunity.ExtendedCommunityOptions
    return leafs
}

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetYangName() string { return "route-extended-community" }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) SetParent(parent types.Entity) { routeExtendedCommunity.parent = parent }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetParent() types.Entity { return routeExtendedCommunity.parent }

func (routeExtendedCommunity *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RouteExtendedCommunity) GetParentYangName() string { return "external-route" }

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "route-path-next-hop" { return "RoutePathNextHop" }
    if yname == "route-path-id" { return "RoutePathId" }
    if yname == "route-backup-path" { return "RouteBackupPath" }
    return ""
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-backup-path" {
        return &routePath.RouteBackupPath
    }
    return nil
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-backup-path"] = &routePath.RouteBackupPath
    return children
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = routePath.InterfaceName
    leafs["route-path-next-hop"] = routePath.RoutePathNextHop
    leafs["route-path-id"] = routePath.RoutePathId
    return leafs
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath) GetParentYangName() string { return "external-route" }

// Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetFilter() yfilter.YFilter { return routeBackupPath.YFilter }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) SetFilter(yf yfilter.YFilter) { routeBackupPath.YFilter = yf }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetGoName(yname string) string {
    if yname == "backup-route-interface-name" { return "BackupRouteInterfaceName" }
    if yname == "backup-route-next-hop-address" { return "BackupRouteNextHopAddress" }
    if yname == "backup-route-source" { return "BackupRouteSource" }
    if yname == "backup-metric" { return "BackupMetric" }
    if yname == "primary-path" { return "PrimaryPath" }
    if yname == "line-card-disjoint" { return "LineCardDisjoint" }
    if yname == "downstream" { return "Downstream" }
    if yname == "node-protect" { return "NodeProtect" }
    if yname == "srlg-disjoint" { return "SrlgDisjoint" }
    return ""
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetSegmentPath() string {
    return "route-backup-path"
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-route-interface-name"] = routeBackupPath.BackupRouteInterfaceName
    leafs["backup-route-next-hop-address"] = routeBackupPath.BackupRouteNextHopAddress
    leafs["backup-route-source"] = routeBackupPath.BackupRouteSource
    leafs["backup-metric"] = routeBackupPath.BackupMetric
    leafs["primary-path"] = routeBackupPath.PrimaryPath
    leafs["line-card-disjoint"] = routeBackupPath.LineCardDisjoint
    leafs["downstream"] = routeBackupPath.Downstream
    leafs["node-protect"] = routeBackupPath.NodeProtect
    leafs["srlg-disjoint"] = routeBackupPath.SrlgDisjoint
    return leafs
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetBundleName() string { return "cisco_ios_xr" }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetYangName() string { return "route-backup-path" }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) SetParent(parent types.Entity) { routeBackupPath.parent = parent }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetParent() types.Entity { return routeBackupPath.parent }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ExternalRoutes_ExternalRoute_RoutePath_RouteBackupPath) GetParentYangName() string { return "route-path" }

// Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable
// OSPFv3 request list information for all areas
type Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request.
    Request []Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request
}

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetFilter() yfilter.YFilter { return requestListProcessTable.YFilter }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) SetFilter(yf yfilter.YFilter) { requestListProcessTable.YFilter = yf }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetGoName(yname string) string {
    if yname == "request" { return "Request" }
    return ""
}

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetSegmentPath() string {
    return "request-list-process-table"
}

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range requestListProcessTable.Request {
            if requestListProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request{}
        requestListProcessTable.Request = append(requestListProcessTable.Request, child)
        return &requestListProcessTable.Request[len(requestListProcessTable.Request)-1]
    }
    return nil
}

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestListProcessTable.Request {
        children[requestListProcessTable.Request[i].GetSegmentPath()] = &requestListProcessTable.Request[i]
    }
    return children
}

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetYangName() string { return "request-list-process-table" }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) SetParent(parent types.Entity) { requestListProcessTable.parent = parent }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetParent() types.Entity { return requestListProcessTable.parent }

func (requestListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request.
    Request []Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "request-neighbor-address" { return "RequestNeighborAddress" }
    if yname == "is-request-virtual-link" { return "IsRequestVirtualLink" }
    if yname == "request-virtual-link-id" { return "RequestVirtualLinkId" }
    if yname == "is-request-sham-link" { return "IsRequestShamLink" }
    if yname == "request-sham-link-id" { return "RequestShamLinkId" }
    if yname == "request" { return "Request" }
    return ""
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range request.Request {
            if request.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request{}
        request.Request = append(request.Request, child)
        return &request.Request[len(request.Request)-1]
    }
    return nil
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range request.Request {
        children[request.Request[i].GetSegmentPath()] = &request.Request[i]
    }
    return children
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = request.InterfaceName
    leafs["neighbor-address"] = request.NeighborAddress
    leafs["request-neighbor-address"] = request.RequestNeighborAddress
    leafs["is-request-virtual-link"] = request.IsRequestVirtualLink
    leafs["request-virtual-link-id"] = request.RequestVirtualLinkId
    leafs["is-request-sham-link"] = request.IsRequestShamLink
    leafs["request-sham-link-id"] = request.RequestShamLinkId
    return leafs
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request) GetParentYangName() string { return "request-list-process-table" }

// Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = request.HeaderLsaType
    leafs["header-lsa-age"] = request.HeaderLsaAge
    leafs["header-lsa-id"] = request.HeaderLsaId
    leafs["header-advertising-router"] = request.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = request.HeaderSequenceNumber
    return leafs
}

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_RequestListProcessTable_Request_Request) GetParentYangName() string { return "request" }

// Ospfv3_Processes_Process_DefaultVrf_VirtualLink
// Virtual link information
type Ospfv3_Processes_Process_DefaultVrf_VirtualLink struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor on other end of this virtual link. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborId interface{}

    // Virtual link interface number . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkInterfaceNumber interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // If true, virtual link IP security is required . The type is bool.
    IsVirtualLinkIpSecurityRequired interface{}

    // If true, Virtual link IP security is active . The type is bool.
    IsVirtualLinkIpSecurityActive interface{}

    // Virtual link neighbor addresss . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    VirtualLinkNeighborAddress interface{}

    // If true, the link runs as demand circuit. The type is bool.
    IsVirtualLinkDemandCircuit interface{}

    // Number of LSA's with demand circuit bit not set . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkDcBitlessLsa interface{}

    // Transit area id . The type is string.
    TransitAreaId interface{}

    // Interface on which this virtual link is formed. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Cost of the virtual link. The type is interface{} with range: 0..65535.
    VirtualLinkCost interface{}

    // Transmission delay in seconds. The type is interface{} with range:
    // 0..65535. Units are second.
    VirualLinkTransmissionDelay interface{}

    // Hello interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkHelloInterval interface{}

    // Dead interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkDeadInterval interface{}

    // Wait interval (s). The type is interface{} with range: 0..4294967295.
    VirtualLinkWaitInterval interface{}

    // Retransmission interval (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkRetransmissionInterval interface{}

    // Time until next hello (s). The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkNextHello interface{}

    // If true, interface is passive. The type is bool.
    IsVirtualLinkPassive interface{}

    // If true, virtual link authentication is enabled . The type is bool.
    IsVirtualLinkAuthenticationEnabled interface{}

    // Virtual link authentication spi . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationSpi interface{}

    // Virtual link authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkAuthenticationTransmit interface{}

    // If true, virtual link encryption is enabled . The type is bool.
    IsVirtualLinkEncryptionEnabled interface{}

    // Virtual link encryption spi. The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionSpi interface{}

    // Virtual link encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    VirtualLinkEncryptionTransmitted interface{}

    // Virtual link encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    VirtualLinkEncryptedAuthenticationTransmitted interface{}

    // Neighbor information .
    VirtualLinkNeighbor Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetFilter() yfilter.YFilter { return virtualLink.YFilter }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) SetFilter(yf yfilter.YFilter) { virtualLink.YFilter = yf }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetGoName(yname string) string {
    if yname == "virtual-link-neighbor-id" { return "VirtualLinkNeighborId" }
    if yname == "virtual-link-interface-number" { return "VirtualLinkInterfaceNumber" }
    if yname == "virtual-link-state" { return "VirtualLinkState" }
    if yname == "is-virtual-link-ip-security-required" { return "IsVirtualLinkIpSecurityRequired" }
    if yname == "is-virtual-link-ip-security-active" { return "IsVirtualLinkIpSecurityActive" }
    if yname == "virtual-link-neighbor-address" { return "VirtualLinkNeighborAddress" }
    if yname == "is-virtual-link-demand-circuit" { return "IsVirtualLinkDemandCircuit" }
    if yname == "virtual-link-dc-bitless-lsa" { return "VirtualLinkDcBitlessLsa" }
    if yname == "transit-area-id" { return "TransitAreaId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "virtual-link-cost" { return "VirtualLinkCost" }
    if yname == "virual-link-transmission-delay" { return "VirualLinkTransmissionDelay" }
    if yname == "virtual-link-hello-interval" { return "VirtualLinkHelloInterval" }
    if yname == "virtual-link-dead-interval" { return "VirtualLinkDeadInterval" }
    if yname == "virtual-link-wait-interval" { return "VirtualLinkWaitInterval" }
    if yname == "virtual-link-retransmission-interval" { return "VirtualLinkRetransmissionInterval" }
    if yname == "virtual-link-next-hello" { return "VirtualLinkNextHello" }
    if yname == "is-virtual-link-passive" { return "IsVirtualLinkPassive" }
    if yname == "is-virtual-link-authentication-enabled" { return "IsVirtualLinkAuthenticationEnabled" }
    if yname == "virtual-link-authentication-spi" { return "VirtualLinkAuthenticationSpi" }
    if yname == "virtual-link-authentication-transmit" { return "VirtualLinkAuthenticationTransmit" }
    if yname == "is-virtual-link-encryption-enabled" { return "IsVirtualLinkEncryptionEnabled" }
    if yname == "virtual-link-encryption-spi" { return "VirtualLinkEncryptionSpi" }
    if yname == "virtual-link-encryption-transmitted" { return "VirtualLinkEncryptionTransmitted" }
    if yname == "virtual-link-encrypted-authentication-transmitted" { return "VirtualLinkEncryptedAuthenticationTransmitted" }
    if yname == "virtual-link-neighbor" { return "VirtualLinkNeighbor" }
    return ""
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetSegmentPath() string {
    return "virtual-link"
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-neighbor" {
        return &virtualLink.VirtualLinkNeighbor
    }
    return nil
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-neighbor"] = &virtualLink.VirtualLinkNeighbor
    return children
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["virtual-link-neighbor-id"] = virtualLink.VirtualLinkNeighborId
    leafs["virtual-link-interface-number"] = virtualLink.VirtualLinkInterfaceNumber
    leafs["virtual-link-state"] = virtualLink.VirtualLinkState
    leafs["is-virtual-link-ip-security-required"] = virtualLink.IsVirtualLinkIpSecurityRequired
    leafs["is-virtual-link-ip-security-active"] = virtualLink.IsVirtualLinkIpSecurityActive
    leafs["virtual-link-neighbor-address"] = virtualLink.VirtualLinkNeighborAddress
    leafs["is-virtual-link-demand-circuit"] = virtualLink.IsVirtualLinkDemandCircuit
    leafs["virtual-link-dc-bitless-lsa"] = virtualLink.VirtualLinkDcBitlessLsa
    leafs["transit-area-id"] = virtualLink.TransitAreaId
    leafs["interface-name"] = virtualLink.InterfaceName
    leafs["virtual-link-cost"] = virtualLink.VirtualLinkCost
    leafs["virual-link-transmission-delay"] = virtualLink.VirualLinkTransmissionDelay
    leafs["virtual-link-hello-interval"] = virtualLink.VirtualLinkHelloInterval
    leafs["virtual-link-dead-interval"] = virtualLink.VirtualLinkDeadInterval
    leafs["virtual-link-wait-interval"] = virtualLink.VirtualLinkWaitInterval
    leafs["virtual-link-retransmission-interval"] = virtualLink.VirtualLinkRetransmissionInterval
    leafs["virtual-link-next-hello"] = virtualLink.VirtualLinkNextHello
    leafs["is-virtual-link-passive"] = virtualLink.IsVirtualLinkPassive
    leafs["is-virtual-link-authentication-enabled"] = virtualLink.IsVirtualLinkAuthenticationEnabled
    leafs["virtual-link-authentication-spi"] = virtualLink.VirtualLinkAuthenticationSpi
    leafs["virtual-link-authentication-transmit"] = virtualLink.VirtualLinkAuthenticationTransmit
    leafs["is-virtual-link-encryption-enabled"] = virtualLink.IsVirtualLinkEncryptionEnabled
    leafs["virtual-link-encryption-spi"] = virtualLink.VirtualLinkEncryptionSpi
    leafs["virtual-link-encryption-transmitted"] = virtualLink.VirtualLinkEncryptionTransmitted
    leafs["virtual-link-encrypted-authentication-transmitted"] = virtualLink.VirtualLinkEncryptedAuthenticationTransmitted
    return leafs
}

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetYangName() string { return "virtual-link" }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) SetParent(parent types.Entity) { virtualLink.parent = parent }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetParent() types.Entity { return virtualLink.parent }

func (virtualLink *Ospfv3_Processes_Process_DefaultVrf_VirtualLink) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor
// Neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // If true, hello suppressed . The type is bool.
    IsVirtualLinkHelloSuppressed interface{}

    // OSPF interface state for the virtual link. The type is
    // Ospfv3InterfaceState.
    VirtualLinkState interface{}

    // Virtual link retransmission information .
    VirtualLinkRetransmission Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetFilter() yfilter.YFilter { return virtualLinkNeighbor.YFilter }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) SetFilter(yf yfilter.YFilter) { virtualLinkNeighbor.YFilter = yf }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetGoName(yname string) string {
    if yname == "is-virtual-link-hello-suppressed" { return "IsVirtualLinkHelloSuppressed" }
    if yname == "virtual-link-state" { return "VirtualLinkState" }
    if yname == "virtual-link-retransmission" { return "VirtualLinkRetransmission" }
    return ""
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetSegmentPath() string {
    return "virtual-link-neighbor"
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "virtual-link-retransmission" {
        return &virtualLinkNeighbor.VirtualLinkRetransmission
    }
    return nil
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["virtual-link-retransmission"] = &virtualLinkNeighbor.VirtualLinkRetransmission
    return children
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-virtual-link-hello-suppressed"] = virtualLinkNeighbor.IsVirtualLinkHelloSuppressed
    leafs["virtual-link-state"] = virtualLinkNeighbor.VirtualLinkState
    return leafs
}

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetYangName() string { return "virtual-link-neighbor" }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) SetParent(parent types.Entity) { virtualLinkNeighbor.parent = parent }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetParent() types.Entity { return virtualLinkNeighbor.parent }

func (virtualLinkNeighbor *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor) GetParentYangName() string { return "virtual-link" }

// Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission
// Virtual link retransmission information 
type Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetFilter() yfilter.YFilter { return virtualLinkRetransmission.YFilter }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) SetFilter(yf yfilter.YFilter) { virtualLinkRetransmission.YFilter = yf }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetSegmentPath() string {
    return "virtual-link-retransmission"
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = virtualLinkRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = virtualLinkRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = virtualLinkRetransmission.AsFloodIndex
    leafs["link-flood-index"] = virtualLinkRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = virtualLinkRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = virtualLinkRetransmission.Retransmissions
    leafs["area-first-flood"] = virtualLinkRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = virtualLinkRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = virtualLinkRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = virtualLinkRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = virtualLinkRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = virtualLinkRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = virtualLinkRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = virtualLinkRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = virtualLinkRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = virtualLinkRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = virtualLinkRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = virtualLinkRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = virtualLinkRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = virtualLinkRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = virtualLinkRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = virtualLinkRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = virtualLinkRetransmission.LsaRetransmissionTimer
    return leafs
}

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetYangName() string { return "virtual-link-retransmission" }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) SetParent(parent types.Entity) { virtualLinkRetransmission.parent = parent }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetParent() types.Entity { return virtualLinkRetransmission.parent }

func (virtualLinkRetransmission *Ospfv3_Processes_Process_DefaultVrf_VirtualLink_VirtualLinkNeighbor_VirtualLinkRetransmission) GetParentYangName() string { return "virtual-link-neighbor" }

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable
// OSPFv3 flood list information table for all
// areas
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood.
    Flood []Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood
}

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetFilter() yfilter.YFilter { return floodListProcessTable.YFilter }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) SetFilter(yf yfilter.YFilter) { floodListProcessTable.YFilter = yf }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetGoName(yname string) string {
    if yname == "flood" { return "Flood" }
    return ""
}

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetSegmentPath() string {
    return "flood-list-process-table"
}

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flood" {
        for _, c := range floodListProcessTable.Flood {
            if floodListProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood{}
        floodListProcessTable.Flood = append(floodListProcessTable.Flood, child)
        return &floodListProcessTable.Flood[len(floodListProcessTable.Flood)-1]
    }
    return nil
}

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range floodListProcessTable.Flood {
        children[floodListProcessTable.Flood[i].GetSegmentPath()] = &floodListProcessTable.Flood[i]
    }
    return children
}

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetYangName() string { return "flood-list-process-table" }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) SetParent(parent types.Entity) { floodListProcessTable.parent = parent }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetParent() types.Entity { return floodListProcessTable.parent }

func (floodListProcessTable *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood.
    LinkFlood []Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood.
    AreaFlood []Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood.
    AsFlood []Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetFilter() yfilter.YFilter { return flood.YFilter }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) SetFilter(yf yfilter.YFilter) { flood.YFilter = yf }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "ls-transmission-timer" { return "LsTransmissionTimer" }
    if yname == "queue-length" { return "QueueLength" }
    if yname == "link-flood" { return "LinkFlood" }
    if yname == "area-flood" { return "AreaFlood" }
    if yname == "as-flood" { return "AsFlood" }
    return ""
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetSegmentPath() string {
    return "flood" + "[interface-name='" + fmt.Sprintf("%v", flood.InterfaceName) + "']"
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "link-flood" {
        for _, c := range flood.LinkFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood{}
        flood.LinkFlood = append(flood.LinkFlood, child)
        return &flood.LinkFlood[len(flood.LinkFlood)-1]
    }
    if childYangName == "area-flood" {
        for _, c := range flood.AreaFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood{}
        flood.AreaFlood = append(flood.AreaFlood, child)
        return &flood.AreaFlood[len(flood.AreaFlood)-1]
    }
    if childYangName == "as-flood" {
        for _, c := range flood.AsFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood{}
        flood.AsFlood = append(flood.AsFlood, child)
        return &flood.AsFlood[len(flood.AsFlood)-1]
    }
    return nil
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range flood.LinkFlood {
        children[flood.LinkFlood[i].GetSegmentPath()] = &flood.LinkFlood[i]
    }
    for i := range flood.AreaFlood {
        children[flood.AreaFlood[i].GetSegmentPath()] = &flood.AreaFlood[i]
    }
    for i := range flood.AsFlood {
        children[flood.AsFlood[i].GetSegmentPath()] = &flood.AsFlood[i]
    }
    return children
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = flood.InterfaceName
    leafs["ls-transmission-timer"] = flood.LsTransmissionTimer
    leafs["queue-length"] = flood.QueueLength
    return leafs
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetBundleName() string { return "cisco_ios_xr" }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetYangName() string { return "flood" }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) SetParent(parent types.Entity) { flood.parent = parent }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetParent() types.Entity { return flood.parent }

func (flood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood) GetParentYangName() string { return "flood-list-process-table" }

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetFilter() yfilter.YFilter { return linkFlood.YFilter }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) SetFilter(yf yfilter.YFilter) { linkFlood.YFilter = yf }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetSegmentPath() string {
    return "link-flood"
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = linkFlood.HeaderLsaType
    leafs["header-lsa-age"] = linkFlood.HeaderLsaAge
    leafs["header-lsa-id"] = linkFlood.HeaderLsaId
    leafs["header-advertising-router"] = linkFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = linkFlood.HeaderSequenceNumber
    return leafs
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetBundleName() string { return "cisco_ios_xr" }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetYangName() string { return "link-flood" }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) SetParent(parent types.Entity) { linkFlood.parent = parent }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetParent() types.Entity { return linkFlood.parent }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_LinkFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetFilter() yfilter.YFilter { return areaFlood.YFilter }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) SetFilter(yf yfilter.YFilter) { areaFlood.YFilter = yf }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetSegmentPath() string {
    return "area-flood"
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = areaFlood.HeaderLsaType
    leafs["header-lsa-age"] = areaFlood.HeaderLsaAge
    leafs["header-lsa-id"] = areaFlood.HeaderLsaId
    leafs["header-advertising-router"] = areaFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = areaFlood.HeaderSequenceNumber
    return leafs
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetBundleName() string { return "cisco_ios_xr" }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetYangName() string { return "area-flood" }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) SetParent(parent types.Entity) { areaFlood.parent = parent }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetParent() types.Entity { return areaFlood.parent }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AreaFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetFilter() yfilter.YFilter { return asFlood.YFilter }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) SetFilter(yf yfilter.YFilter) { asFlood.YFilter = yf }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetSegmentPath() string {
    return "as-flood"
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = asFlood.HeaderLsaType
    leafs["header-lsa-age"] = asFlood.HeaderLsaAge
    leafs["header-lsa-id"] = asFlood.HeaderLsaId
    leafs["header-advertising-router"] = asFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = asFlood.HeaderSequenceNumber
    return leafs
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetBundleName() string { return "cisco_ios_xr" }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetYangName() string { return "as-flood" }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) SetParent(parent types.Entity) { asFlood.parent = parent }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetParent() types.Entity { return asFlood.parent }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_FloodListProcessTable_Flood_AsFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_DefaultVrf_RouteSummary
// Summarize OSPFv3 local RIB tables
type Ospfv3_Processes_Process_DefaultVrf_RouteSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetFilter() yfilter.YFilter { return routeSummary.YFilter }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) SetFilter(yf yfilter.YFilter) { routeSummary.YFilter = yf }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "intra-area-route" { return "IntraAreaRoute" }
    if yname == "inter-area-route" { return "InterAreaRoute" }
    if yname == "extern-one-route" { return "ExternOneRoute" }
    if yname == "extern-two-route" { return "ExternTwoRoute" }
    if yname == "nssa-one-route" { return "NssaOneRoute" }
    if yname == "nssa-two-route" { return "NssaTwoRoute" }
    if yname == "total-sent-route" { return "TotalSentRoute" }
    if yname == "route-connected" { return "RouteConnected" }
    if yname == "redistribution-route" { return "RedistributionRoute" }
    if yname == "total-received-route" { return "TotalReceivedRoute" }
    return ""
}

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetSegmentPath() string {
    return "route-summary"
}

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeSummary.RouteId
    leafs["intra-area-route"] = routeSummary.IntraAreaRoute
    leafs["inter-area-route"] = routeSummary.InterAreaRoute
    leafs["extern-one-route"] = routeSummary.ExternOneRoute
    leafs["extern-two-route"] = routeSummary.ExternTwoRoute
    leafs["nssa-one-route"] = routeSummary.NssaOneRoute
    leafs["nssa-two-route"] = routeSummary.NssaTwoRoute
    leafs["total-sent-route"] = routeSummary.TotalSentRoute
    leafs["route-connected"] = routeSummary.RouteConnected
    leafs["redistribution-route"] = routeSummary.RedistributionRoute
    leafs["total-received-route"] = routeSummary.TotalReceivedRoute
    return leafs
}

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetBundleName() string { return "cisco_ios_xr" }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetYangName() string { return "route-summary" }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) SetParent(parent types.Entity) { routeSummary.parent = parent }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetParent() types.Entity { return routeSummary.parent }

func (routeSummary *Ospfv3_Processes_Process_DefaultVrf_RouteSummary) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Areas
// OSPFv3 area table
type Ospfv3_Processes_Process_DefaultVrf_Areas struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Per-area information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area.
    Area []Ospfv3_Processes_Process_DefaultVrf_Areas_Area
}

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetFilter() yfilter.YFilter { return areas.YFilter }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) SetFilter(yf yfilter.YFilter) { areas.YFilter = yf }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetGoName(yname string) string {
    if yname == "area" { return "Area" }
    return ""
}

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetSegmentPath() string {
    return "areas"
}

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area" {
        for _, c := range areas.Area {
            if areas.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area{}
        areas.Area = append(areas.Area, child)
        return &areas.Area[len(areas.Area)-1]
    }
    return nil
}

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range areas.Area {
        children[areas.Area[i].GetSegmentPath()] = &areas.Area[i]
    }
    return children
}

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetBundleName() string { return "cisco_ios_xr" }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetYangName() string { return "areas" }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) SetParent(parent types.Entity) { areas.parent = parent }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetParent() types.Entity { return areas.parent }

func (areas *Ospfv3_Processes_Process_DefaultVrf_Areas) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area
// Per-area information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is interface{} with range:
    // -2147483648..2147483647.
    AreaId interface{}

    // OSPFv3 area neighbor information table.
    NeighborDetailTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable

    // OSPFv3 interface brief information table for an area.
    InterfaceBriefTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable

    // OSPFv3 request list information in an area.
    RequestListTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable

    // OSPFv3 neighbor information table.
    NeighborTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable

    // OSPFv3 interface information table for an area.
    InterfaceTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable

    // OSPFv3 flood list information table for an area.
    FloodListTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable

    // OSPFv3 retransmission list information table in an area.
    RetransmissionListTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable

    // OSPF Link State Database.
    DatabaseTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable

    // Database summary table.
    DatabaseSummaryTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable
}

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetFilter() yfilter.YFilter { return area.YFilter }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) SetFilter(yf yfilter.YFilter) { area.YFilter = yf }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "neighbor-detail-table" { return "NeighborDetailTable" }
    if yname == "interface-brief-table" { return "InterfaceBriefTable" }
    if yname == "request-list-table" { return "RequestListTable" }
    if yname == "neighbor-table" { return "NeighborTable" }
    if yname == "interface-table" { return "InterfaceTable" }
    if yname == "flood-list-table" { return "FloodListTable" }
    if yname == "retransmission-list-table" { return "RetransmissionListTable" }
    if yname == "database-table" { return "DatabaseTable" }
    if yname == "database-summary-table" { return "DatabaseSummaryTable" }
    return ""
}

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetSegmentPath() string {
    return "area" + "[area-id='" + fmt.Sprintf("%v", area.AreaId) + "']"
}

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail-table" {
        return &area.NeighborDetailTable
    }
    if childYangName == "interface-brief-table" {
        return &area.InterfaceBriefTable
    }
    if childYangName == "request-list-table" {
        return &area.RequestListTable
    }
    if childYangName == "neighbor-table" {
        return &area.NeighborTable
    }
    if childYangName == "interface-table" {
        return &area.InterfaceTable
    }
    if childYangName == "flood-list-table" {
        return &area.FloodListTable
    }
    if childYangName == "retransmission-list-table" {
        return &area.RetransmissionListTable
    }
    if childYangName == "database-table" {
        return &area.DatabaseTable
    }
    if childYangName == "database-summary-table" {
        return &area.DatabaseSummaryTable
    }
    return nil
}

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail-table"] = &area.NeighborDetailTable
    children["interface-brief-table"] = &area.InterfaceBriefTable
    children["request-list-table"] = &area.RequestListTable
    children["neighbor-table"] = &area.NeighborTable
    children["interface-table"] = &area.InterfaceTable
    children["flood-list-table"] = &area.FloodListTable
    children["retransmission-list-table"] = &area.RetransmissionListTable
    children["database-table"] = &area.DatabaseTable
    children["database-summary-table"] = &area.DatabaseSummaryTable
    return children
}

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = area.AreaId
    return leafs
}

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetBundleName() string { return "cisco_ios_xr" }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetYangName() string { return "area" }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) SetParent(parent types.Entity) { area.parent = parent }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetParent() types.Entity { return area.parent }

func (area *Ospfv3_Processes_Process_DefaultVrf_Areas_Area) GetParentYangName() string { return "areas" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable
// OSPFv3 area neighbor information table
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail.
    NeighborDetail []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail
}

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetFilter() yfilter.YFilter { return neighborDetailTable.YFilter }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) SetFilter(yf yfilter.YFilter) { neighborDetailTable.YFilter = yf }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetGoName(yname string) string {
    if yname == "neighbor-detail" { return "NeighborDetail" }
    return ""
}

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetSegmentPath() string {
    return "neighbor-detail-table"
}

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        for _, c := range neighborDetailTable.NeighborDetail {
            if neighborDetailTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail{}
        neighborDetailTable.NeighborDetail = append(neighborDetailTable.NeighborDetail, child)
        return &neighborDetailTable.NeighborDetail[len(neighborDetailTable.NeighborDetail)-1]
    }
    return nil
}

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborDetailTable.NeighborDetail {
        children[neighborDetailTable.NeighborDetail[i].GetSegmentPath()] = &neighborDetailTable.NeighborDetail[i]
    }
    return children
}

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetYangName() string { return "neighbor-detail-table" }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) SetParent(parent types.Entity) { neighborDetailTable.parent = parent }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetParent() types.Entity { return neighborDetailTable.parent }

func (neighborDetailTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighborDetail.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighborDetail.NeighborBfdInfo
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighborDetail.NeighborDetail
    children["neighbor-bfd-info"] = &neighborDetail.NeighborBfdInfo
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighborDetail.InterfaceName
    leafs["neighbor-address"] = neighborDetail.NeighborAddress
    leafs["neighbor-address-xr"] = neighborDetail.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighborDetail.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighborDetail.NeighborDrPriority
    leafs["neighbor-state"] = neighborDetail.NeighborState
    leafs["neighbor-designated-router"] = neighborDetail.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighborDetail.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighborDetail.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighborDetail.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighborDetail.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighborDetail.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighborDetail.IsNeighborShamLink
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail) GetParentYangName() string { return "neighbor-detail-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborDetailTable_NeighborDetail_NeighborBfdInfo) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable
// OSPFv3 interface brief information table for
// an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief.
    InterfaceBrief []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
}

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetFilter() yfilter.YFilter { return interfaceBriefTable.YFilter }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) SetFilter(yf yfilter.YFilter) { interfaceBriefTable.YFilter = yf }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetGoName(yname string) string {
    if yname == "interface-brief" { return "InterfaceBrief" }
    return ""
}

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetSegmentPath() string {
    return "interface-brief-table"
}

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-brief" {
        for _, c := range interfaceBriefTable.InterfaceBrief {
            if interfaceBriefTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief{}
        interfaceBriefTable.InterfaceBrief = append(interfaceBriefTable.InterfaceBrief, child)
        return &interfaceBriefTable.InterfaceBrief[len(interfaceBriefTable.InterfaceBrief)-1]
    }
    return nil
}

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceBriefTable.InterfaceBrief {
        children[interfaceBriefTable.InterfaceBrief[i].GetSegmentPath()] = &interfaceBriefTable.InterfaceBrief[i]
    }
    return children
}

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetYangName() string { return "interface-brief-table" }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) SetParent(parent types.Entity) { interfaceBriefTable.parent = parent }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetParent() types.Entity { return interfaceBriefTable.parent }

func (interfaceBriefTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetFilter() yfilter.YFilter { return interfaceBrief.YFilter }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) SetFilter(yf yfilter.YFilter) { interfaceBrief.YFilter = yf }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "interface-adjacent-neighbors" { return "InterfaceAdjacentNeighbors" }
    if yname == "network-type" { return "NetworkType" }
    return ""
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetSegmentPath() string {
    return "interface-brief" + "[interface-name='" + fmt.Sprintf("%v", interfaceBrief.InterfaceName) + "']"
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceBrief.InterfaceName
    leafs["interface-address"] = interfaceBrief.InterfaceAddress
    leafs["interface-link-cost"] = interfaceBrief.InterfaceLinkCost
    leafs["ospf-interface-state"] = interfaceBrief.OspfInterfaceState
    leafs["interface-neighbors"] = interfaceBrief.InterfaceNeighbors
    leafs["interface-adjacent-neighbors"] = interfaceBrief.InterfaceAdjacentNeighbors
    leafs["network-type"] = interfaceBrief.NetworkType
    return leafs
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetYangName() string { return "interface-brief" }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) SetParent(parent types.Entity) { interfaceBrief.parent = parent }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetParent() types.Entity { return interfaceBrief.parent }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceBriefTable_InterfaceBrief) GetParentYangName() string { return "interface-brief-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable
// OSPFv3 request list information in an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 request list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request.
    Request []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request
}

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetFilter() yfilter.YFilter { return requestListTable.YFilter }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) SetFilter(yf yfilter.YFilter) { requestListTable.YFilter = yf }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetGoName(yname string) string {
    if yname == "request" { return "Request" }
    return ""
}

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetSegmentPath() string {
    return "request-list-table"
}

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range requestListTable.Request {
            if requestListTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request{}
        requestListTable.Request = append(requestListTable.Request, child)
        return &requestListTable.Request[len(requestListTable.Request)-1]
    }
    return nil
}

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestListTable.Request {
        children[requestListTable.Request[i].GetSegmentPath()] = &requestListTable.Request[i]
    }
    return children
}

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetBundleName() string { return "cisco_ios_xr" }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetYangName() string { return "request-list-table" }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) SetParent(parent types.Entity) { requestListTable.parent = parent }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetParent() types.Entity { return requestListTable.parent }

func (requestListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request
// OSPFv3 request list information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RequestNeighborAddress interface{}

    // If true, virtual link is requested . The type is bool.
    IsRequestVirtualLink interface{}

    // Request virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RequestVirtualLinkId interface{}

    // If true, sham link is requested . The type is bool.
    IsRequestShamLink interface{}

    // Request sham link ID . The type is interface{} with range: 0..4294967295.
    RequestShamLinkId interface{}

    // List of request list entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request.
    Request []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "request-neighbor-address" { return "RequestNeighborAddress" }
    if yname == "is-request-virtual-link" { return "IsRequestVirtualLink" }
    if yname == "request-virtual-link-id" { return "RequestVirtualLinkId" }
    if yname == "is-request-sham-link" { return "IsRequestShamLink" }
    if yname == "request-sham-link-id" { return "RequestShamLinkId" }
    if yname == "request" { return "Request" }
    return ""
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request" {
        for _, c := range request.Request {
            if request.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request{}
        request.Request = append(request.Request, child)
        return &request.Request[len(request.Request)-1]
    }
    return nil
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range request.Request {
        children[request.Request[i].GetSegmentPath()] = &request.Request[i]
    }
    return children
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = request.InterfaceName
    leafs["neighbor-address"] = request.NeighborAddress
    leafs["request-neighbor-address"] = request.RequestNeighborAddress
    leafs["is-request-virtual-link"] = request.IsRequestVirtualLink
    leafs["request-virtual-link-id"] = request.RequestVirtualLinkId
    leafs["is-request-sham-link"] = request.IsRequestShamLink
    leafs["request-sham-link-id"] = request.RequestShamLinkId
    return leafs
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request) GetParentYangName() string { return "request-list-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request
// List of request list entries
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetFilter() yfilter.YFilter { return request.YFilter }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) SetFilter(yf yfilter.YFilter) { request.YFilter = yf }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetSegmentPath() string {
    return "request"
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = request.HeaderLsaType
    leafs["header-lsa-age"] = request.HeaderLsaAge
    leafs["header-lsa-id"] = request.HeaderLsaId
    leafs["header-advertising-router"] = request.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = request.HeaderSequenceNumber
    return leafs
}

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetBundleName() string { return "cisco_ios_xr" }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetYangName() string { return "request" }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) SetParent(parent types.Entity) { request.parent = parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetParent() types.Entity { return request.parent }

func (request *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RequestListTable_Request_Request) GetParentYangName() string { return "request" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable
// OSPFv3 neighbor information table
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor.
    Neighbor []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor
}

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetFilter() yfilter.YFilter { return neighborTable.YFilter }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) SetFilter(yf yfilter.YFilter) { neighborTable.YFilter = yf }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetSegmentPath() string {
    return "neighbor-table"
}

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighborTable.Neighbor {
            if neighborTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor{}
        neighborTable.Neighbor = append(neighborTable.Neighbor, child)
        return &neighborTable.Neighbor[len(neighborTable.Neighbor)-1]
    }
    return nil
}

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborTable.Neighbor {
        children[neighborTable.Neighbor[i].GetSegmentPath()] = &neighborTable.Neighbor[i]
    }
    return children
}

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetYangName() string { return "neighbor-table" }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) SetParent(parent types.Entity) { neighborTable.parent = parent }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetParent() types.Entity { return neighborTable.parent }

func (neighborTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetSegmentPath() string {
    return "neighbor"
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighbor.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighbor.NeighborBfdInfo
    }
    return nil
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighbor.NeighborDetail
    children["neighbor-bfd-info"] = &neighbor.NeighborBfdInfo
    return children
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighbor.InterfaceName
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["neighbor-address-xr"] = neighbor.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighbor.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighbor.NeighborDrPriority
    leafs["neighbor-state"] = neighbor.NeighborState
    leafs["neighbor-designated-router"] = neighbor.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighbor.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighbor.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighbor.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighbor.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighbor.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighbor.IsNeighborShamLink
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor) GetParentYangName() string { return "neighbor-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_NeighborTable_Neighbor_NeighborBfdInfo) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable
// OSPFv3 interface information table for an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 interface information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface.
    Interface []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface
}

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetFilter() yfilter.YFilter { return interfaceTable.YFilter }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) SetFilter(yf yfilter.YFilter) { interfaceTable.YFilter = yf }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetSegmentPath() string {
    return "interface-table"
}

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaceTable.Interface {
            if interfaceTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface{}
        interfaceTable.Interface = append(interfaceTable.Interface, child)
        return &interfaceTable.Interface[len(interfaceTable.Interface)-1]
    }
    return nil
}

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceTable.Interface {
        children[interfaceTable.Interface[i].GetSegmentPath()] = &interfaceTable.Interface[i]
    }
    return children
}

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetYangName() string { return "interface-table" }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) SetParent(parent types.Entity) { interfaceTable.parent = parent }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetParent() types.Entity { return interfaceTable.parent }

func (interfaceTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface
// OSPFv3 interface information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface state. The type is ImStateEnum.
    InterfaceState interface{}

    // If true, line protocol is up . The type is bool.
    IsInterfaceLineUp interface{}

    // If true, interface IP security is required . The type is bool.
    IsInterfaceIpSecurityRequired interface{}

    // If true, interface IP security is active . The type is bool.
    IsInterfaceIpSecurityActive interface{}

    // Interface IPv6 address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface number . The type is interface{} with range: 0..4294967295.
    InterfaceNumber interface{}

    // Interface router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceRouterId interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // If true, interface flood reduction is active . The type is bool.
    IsInterfaceFloodReduction interface{}

    // If true, configured as demand circuit . The type is bool.
    IsDemandCircuitConfigured interface{}

    // If true, interface running as demand circuit. The type is bool.
    IsInterfaceDemandCircuit interface{}

    // Number of LSAs with demand circuit bit not set for the area in which the
    // interface is running. The type is interface{} with range: 0..4294967295.
    InterfaceDcBitlessLsAs interface{}

    // Interface transmission delay (sec). The type is interface{} with range:
    // 0..65535.
    TransmissionDelay interface{}

    // Interface state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Interface priority. The type is interface{} with range: 0..255.
    InterfacePriority interface{}

    // If true, designated router. The type is bool.
    IsDesignatedRouter interface{}

    // Designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DesignatedRouterId interface{}

    // Designated router interface address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    DesignatedRouterAddress interface{}

    // Backup designated router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterId interface{}

    // Backup designated router interface address. The type is string with
    // pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupDesignatedRouterAddress interface{}

    // The amount of time in seconds before flush timer for old network LSA
    // expires . The type is interface{} with range: 0..4294967295. Units are
    // second.
    NetworkLsaFlushTimer interface{}

    // Filter is configured for out going LSAs . The type is bool.
    IsInterfaceLsaFiltered interface{}

    // Configured hello interval (s). The type is interface{} with range:
    // 0..4294967295.
    HelloInterval interface{}

    // Configured dead interval (s) . The type is interface{} with range:
    // 0..4294967295.
    DeadInterval interface{}

    // Configured wait interval (s) . The type is interface{} with range:
    // 0..4294967295.
    WaitInterval interface{}

    // Configured retransmit interval (s) . The type is interface{} with range:
    // 0..4294967295.
    InterfaceRetransmissionInterval interface{}

    // Time until next Hello (s) . The type is interface{} with range:
    // 0..4294967295.
    NextHelloTime interface{}

    // Interface authentication spi . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationSpi interface{}

    // Interface authentication transmit . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAuthenticationTransmit interface{}

    // If true, interface encryption is enabled . The type is bool.
    IsInterfaceEncryptionEnabled interface{}

    // If true prefix suppression is enabled. The type is bool.
    IsPrefixSuppress interface{}

    // Interface encryption spi. The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionSpi interface{}

    // Interface encryption transmitted . The type is interface{} with range:
    // 0..4294967295.
    InterfaceEncryptionTransmitted interface{}

    // Interface encrypted authentication transmitted . The type is interface{}
    // with range: 0..4294967295.
    InterfaceEncryptedAuthenticationTransmitted interface{}

    // Number of adjacent neighbors. The type is interface{} with range:
    // 0..4294967295.
    AdjacentNeighbor interface{}

    // Interface reference count . The type is interface{} with range:
    // 0..4294967295.
    InterfaceReferences interface{}

    // If true, configured as LDP sync. The type is bool.
    ConfiguredLdpSync interface{}

    // If true, interface LDP sync is achieved. The type is bool.
    InterfaceLdpSync interface{}

    // Active interface details .
    ActiveInterface Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface

    // BFD information .
    InterfaceBfd Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd

    // Information for neighbors on the interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor.
    InterfaceNeighbor []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
}

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-state" { return "InterfaceState" }
    if yname == "is-interface-line-up" { return "IsInterfaceLineUp" }
    if yname == "is-interface-ip-security-required" { return "IsInterfaceIpSecurityRequired" }
    if yname == "is-interface-ip-security-active" { return "IsInterfaceIpSecurityActive" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-number" { return "InterfaceNumber" }
    if yname == "interface-router-id" { return "InterfaceRouterId" }
    if yname == "network-type" { return "NetworkType" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "is-interface-flood-reduction" { return "IsInterfaceFloodReduction" }
    if yname == "is-demand-circuit-configured" { return "IsDemandCircuitConfigured" }
    if yname == "is-interface-demand-circuit" { return "IsInterfaceDemandCircuit" }
    if yname == "interface-dc-bitless-ls-as" { return "InterfaceDcBitlessLsAs" }
    if yname == "transmission-delay" { return "TransmissionDelay" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-priority" { return "InterfacePriority" }
    if yname == "is-designated-router" { return "IsDesignatedRouter" }
    if yname == "designated-router-id" { return "DesignatedRouterId" }
    if yname == "designated-router-address" { return "DesignatedRouterAddress" }
    if yname == "backup-designated-router-id" { return "BackupDesignatedRouterId" }
    if yname == "backup-designated-router-address" { return "BackupDesignatedRouterAddress" }
    if yname == "network-lsa-flush-timer" { return "NetworkLsaFlushTimer" }
    if yname == "is-interface-lsa-filtered" { return "IsInterfaceLsaFiltered" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "dead-interval" { return "DeadInterval" }
    if yname == "wait-interval" { return "WaitInterval" }
    if yname == "interface-retransmission-interval" { return "InterfaceRetransmissionInterval" }
    if yname == "next-hello-time" { return "NextHelloTime" }
    if yname == "interface-authentication-spi" { return "InterfaceAuthenticationSpi" }
    if yname == "interface-authentication-transmit" { return "InterfaceAuthenticationTransmit" }
    if yname == "is-interface-encryption-enabled" { return "IsInterfaceEncryptionEnabled" }
    if yname == "is-prefix-suppress" { return "IsPrefixSuppress" }
    if yname == "interface-encryption-spi" { return "InterfaceEncryptionSpi" }
    if yname == "interface-encryption-transmitted" { return "InterfaceEncryptionTransmitted" }
    if yname == "interface-encrypted-authentication-transmitted" { return "InterfaceEncryptedAuthenticationTransmitted" }
    if yname == "adjacent-neighbor" { return "AdjacentNeighbor" }
    if yname == "interface-references" { return "InterfaceReferences" }
    if yname == "configured-ldp-sync" { return "ConfiguredLdpSync" }
    if yname == "interface-ldp-sync" { return "InterfaceLdpSync" }
    if yname == "active-interface" { return "ActiveInterface" }
    if yname == "interface-bfd" { return "InterfaceBfd" }
    if yname == "interface-neighbor" { return "InterfaceNeighbor" }
    return ""
}

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "active-interface" {
        return &self.ActiveInterface
    }
    if childYangName == "interface-bfd" {
        return &self.InterfaceBfd
    }
    if childYangName == "interface-neighbor" {
        for _, c := range self.InterfaceNeighbor {
            if self.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor{}
        self.InterfaceNeighbor = append(self.InterfaceNeighbor, child)
        return &self.InterfaceNeighbor[len(self.InterfaceNeighbor)-1]
    }
    return nil
}

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["active-interface"] = &self.ActiveInterface
    children["interface-bfd"] = &self.InterfaceBfd
    for i := range self.InterfaceNeighbor {
        children[self.InterfaceNeighbor[i].GetSegmentPath()] = &self.InterfaceNeighbor[i]
    }
    return children
}

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["interface-state"] = self.InterfaceState
    leafs["is-interface-line-up"] = self.IsInterfaceLineUp
    leafs["is-interface-ip-security-required"] = self.IsInterfaceIpSecurityRequired
    leafs["is-interface-ip-security-active"] = self.IsInterfaceIpSecurityActive
    leafs["interface-address"] = self.InterfaceAddress
    leafs["interface-number"] = self.InterfaceNumber
    leafs["interface-router-id"] = self.InterfaceRouterId
    leafs["network-type"] = self.NetworkType
    leafs["interface-link-cost"] = self.InterfaceLinkCost
    leafs["is-interface-flood-reduction"] = self.IsInterfaceFloodReduction
    leafs["is-demand-circuit-configured"] = self.IsDemandCircuitConfigured
    leafs["is-interface-demand-circuit"] = self.IsInterfaceDemandCircuit
    leafs["interface-dc-bitless-ls-as"] = self.InterfaceDcBitlessLsAs
    leafs["transmission-delay"] = self.TransmissionDelay
    leafs["ospf-interface-state"] = self.OspfInterfaceState
    leafs["interface-priority"] = self.InterfacePriority
    leafs["is-designated-router"] = self.IsDesignatedRouter
    leafs["designated-router-id"] = self.DesignatedRouterId
    leafs["designated-router-address"] = self.DesignatedRouterAddress
    leafs["backup-designated-router-id"] = self.BackupDesignatedRouterId
    leafs["backup-designated-router-address"] = self.BackupDesignatedRouterAddress
    leafs["network-lsa-flush-timer"] = self.NetworkLsaFlushTimer
    leafs["is-interface-lsa-filtered"] = self.IsInterfaceLsaFiltered
    leafs["hello-interval"] = self.HelloInterval
    leafs["dead-interval"] = self.DeadInterval
    leafs["wait-interval"] = self.WaitInterval
    leafs["interface-retransmission-interval"] = self.InterfaceRetransmissionInterval
    leafs["next-hello-time"] = self.NextHelloTime
    leafs["interface-authentication-spi"] = self.InterfaceAuthenticationSpi
    leafs["interface-authentication-transmit"] = self.InterfaceAuthenticationTransmit
    leafs["is-interface-encryption-enabled"] = self.IsInterfaceEncryptionEnabled
    leafs["is-prefix-suppress"] = self.IsPrefixSuppress
    leafs["interface-encryption-spi"] = self.InterfaceEncryptionSpi
    leafs["interface-encryption-transmitted"] = self.InterfaceEncryptionTransmitted
    leafs["interface-encrypted-authentication-transmitted"] = self.InterfaceEncryptedAuthenticationTransmitted
    leafs["adjacent-neighbor"] = self.AdjacentNeighbor
    leafs["interface-references"] = self.InterfaceReferences
    leafs["configured-ldp-sync"] = self.ConfiguredLdpSync
    leafs["interface-ldp-sync"] = self.InterfaceLdpSync
    return leafs
}

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetYangName() string { return "interface" }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetParent() types.Entity { return self.parent }

func (self *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface) GetParentYangName() string { return "interface-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface
// Active interface details 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Wait time for DR/BDR selection (s). The type is interface{} with range:
    // 0..4294967295.
    WaitTime interface{}

    // Area scope LSAs flood index. The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaFloodIndex interface{}

    // AS scope LSAs flood index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsFloodIndex interface{}

    // Interface flood link index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkFloodIndex interface{}

    // Flood queue length. The type is interface{} with range: 0..4294967295.
    FloodQueueLength interface{}

    // Next LSA to flood (Area scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAreaNextFlood interface{}

    // Index of next LSA to flood (Area scope) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceAreaNextFloodIndex interface{}

    // Next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFlood interface{}

    // Index of next LSA to flood (AS scope). The type is interface{} with range:
    // 0..4294967295.
    InterfaceAsNextFloodIndex interface{}

    // Interface link next flood information . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextFlood interface{}

    // Interface link next information index . The type is interface{} with range:
    // 0..4294967295.
    InterfaceLinkNextIndex interface{}

    // Last flood scan length . The type is interface{} with range: 0..4294967295.
    FloodScanLength interface{}

    // Maximum flood length . The type is interface{} with range: 0..4294967295.
    MaximumFloodLength interface{}

    // Last flood scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastFloodTime interface{}

    // Maximum flood time (ms) . The type is interface{} with range:
    // 0..4294967295.
    MaximumFloodTime interface{}

    // Time until next flood pacing timer (ms) . The type is interface{} with
    // range: 0..4294967295.
    InterfaceFloodPacingTimer interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Number of neighbors for which hellos are suppressed . The type is
    // interface{} with range: 0..65535.
    SuppressedHellos interface{}
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetFilter() yfilter.YFilter { return activeInterface.YFilter }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) SetFilter(yf yfilter.YFilter) { activeInterface.YFilter = yf }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetGoName(yname string) string {
    if yname == "wait-time" { return "WaitTime" }
    if yname == "interface-area-flood-index" { return "InterfaceAreaFloodIndex" }
    if yname == "interface-as-flood-index" { return "InterfaceAsFloodIndex" }
    if yname == "interface-link-flood-index" { return "InterfaceLinkFloodIndex" }
    if yname == "flood-queue-length" { return "FloodQueueLength" }
    if yname == "interface-area-next-flood" { return "InterfaceAreaNextFlood" }
    if yname == "interface-area-next-flood-index" { return "InterfaceAreaNextFloodIndex" }
    if yname == "interface-as-next-flood" { return "InterfaceAsNextFlood" }
    if yname == "interface-as-next-flood-index" { return "InterfaceAsNextFloodIndex" }
    if yname == "interface-link-next-flood" { return "InterfaceLinkNextFlood" }
    if yname == "interface-link-next-index" { return "InterfaceLinkNextIndex" }
    if yname == "flood-scan-length" { return "FloodScanLength" }
    if yname == "maximum-flood-length" { return "MaximumFloodLength" }
    if yname == "last-flood-time" { return "LastFloodTime" }
    if yname == "maximum-flood-time" { return "MaximumFloodTime" }
    if yname == "interface-flood-pacing-timer" { return "InterfaceFloodPacingTimer" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "suppressed-hellos" { return "SuppressedHellos" }
    return ""
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetSegmentPath() string {
    return "active-interface"
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["wait-time"] = activeInterface.WaitTime
    leafs["interface-area-flood-index"] = activeInterface.InterfaceAreaFloodIndex
    leafs["interface-as-flood-index"] = activeInterface.InterfaceAsFloodIndex
    leafs["interface-link-flood-index"] = activeInterface.InterfaceLinkFloodIndex
    leafs["flood-queue-length"] = activeInterface.FloodQueueLength
    leafs["interface-area-next-flood"] = activeInterface.InterfaceAreaNextFlood
    leafs["interface-area-next-flood-index"] = activeInterface.InterfaceAreaNextFloodIndex
    leafs["interface-as-next-flood"] = activeInterface.InterfaceAsNextFlood
    leafs["interface-as-next-flood-index"] = activeInterface.InterfaceAsNextFloodIndex
    leafs["interface-link-next-flood"] = activeInterface.InterfaceLinkNextFlood
    leafs["interface-link-next-index"] = activeInterface.InterfaceLinkNextIndex
    leafs["flood-scan-length"] = activeInterface.FloodScanLength
    leafs["maximum-flood-length"] = activeInterface.MaximumFloodLength
    leafs["last-flood-time"] = activeInterface.LastFloodTime
    leafs["maximum-flood-time"] = activeInterface.MaximumFloodTime
    leafs["interface-flood-pacing-timer"] = activeInterface.InterfaceFloodPacingTimer
    leafs["interface-neighbors"] = activeInterface.InterfaceNeighbors
    leafs["suppressed-hellos"] = activeInterface.SuppressedHellos
    return leafs
}

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetBundleName() string { return "cisco_ios_xr" }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetYangName() string { return "active-interface" }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) SetParent(parent types.Entity) { activeInterface.parent = parent }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetParent() types.Entity { return activeInterface.parent }

func (activeInterface *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_ActiveInterface) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd
// BFD information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD Enable Mode on the interface - Default/Strict. The type is interface{}
    // with range: 0..4294967295.
    BfdIntfEnableMode interface{}

    // BFD interval (ms) . The type is interface{} with range: 0..4294967295.
    BfdInterval interface{}

    // BFD detection multiplier . The type is interface{} with range:
    // 0..4294967295.
    BfdDetectionMultiplier interface{}
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetFilter() yfilter.YFilter { return interfaceBfd.YFilter }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) SetFilter(yf yfilter.YFilter) { interfaceBfd.YFilter = yf }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-interval" { return "BfdInterval" }
    if yname == "bfd-detection-multiplier" { return "BfdDetectionMultiplier" }
    return ""
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetSegmentPath() string {
    return "interface-bfd"
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = interfaceBfd.BfdIntfEnableMode
    leafs["bfd-interval"] = interfaceBfd.BfdInterval
    leafs["bfd-detection-multiplier"] = interfaceBfd.BfdDetectionMultiplier
    return leafs
}

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetYangName() string { return "interface-bfd" }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) SetParent(parent types.Entity) { interfaceBfd.parent = parent }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetParent() types.Entity { return interfaceBfd.parent }

func (interfaceBfd *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceBfd) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor
// Information for neighbors on the interface
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborId interface{}

    // Cost of link to neighbor. The type is interface{} with range:
    // 0..4294967295.
    InterfaceNeighborCost interface{}

    // If true, designated router is found . The type is bool.
    IsNeighborDr interface{}

    // If true, backup designated router is found . The type is bool.
    IsNeighborBdr interface{}

    // If true, hello is suppressed . The type is bool.
    IsHelloSuppressed interface{}
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetFilter() yfilter.YFilter { return interfaceNeighbor.YFilter }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) SetFilter(yf yfilter.YFilter) { interfaceNeighbor.YFilter = yf }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetGoName(yname string) string {
    if yname == "interface-neighbor-id" { return "InterfaceNeighborId" }
    if yname == "interface-neighbor-cost" { return "InterfaceNeighborCost" }
    if yname == "is-neighbor-dr" { return "IsNeighborDr" }
    if yname == "is-neighbor-bdr" { return "IsNeighborBdr" }
    if yname == "is-hello-suppressed" { return "IsHelloSuppressed" }
    return ""
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetSegmentPath() string {
    return "interface-neighbor"
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-id"] = interfaceNeighbor.InterfaceNeighborId
    leafs["interface-neighbor-cost"] = interfaceNeighbor.InterfaceNeighborCost
    leafs["is-neighbor-dr"] = interfaceNeighbor.IsNeighborDr
    leafs["is-neighbor-bdr"] = interfaceNeighbor.IsNeighborBdr
    leafs["is-hello-suppressed"] = interfaceNeighbor.IsHelloSuppressed
    return leafs
}

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetYangName() string { return "interface-neighbor" }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) SetParent(parent types.Entity) { interfaceNeighbor.parent = parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetParent() types.Entity { return interfaceNeighbor.parent }

func (interfaceNeighbor *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_InterfaceTable_Interface_InterfaceNeighbor) GetParentYangName() string { return "interface" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable
// OSPFv3 flood list information table for an
// area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 flood list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood.
    Flood []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood
}

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetFilter() yfilter.YFilter { return floodListTable.YFilter }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) SetFilter(yf yfilter.YFilter) { floodListTable.YFilter = yf }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetGoName(yname string) string {
    if yname == "flood" { return "Flood" }
    return ""
}

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetSegmentPath() string {
    return "flood-list-table"
}

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flood" {
        for _, c := range floodListTable.Flood {
            if floodListTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood{}
        floodListTable.Flood = append(floodListTable.Flood, child)
        return &floodListTable.Flood[len(floodListTable.Flood)-1]
    }
    return nil
}

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range floodListTable.Flood {
        children[floodListTable.Flood[i].GetSegmentPath()] = &floodListTable.Flood[i]
    }
    return children
}

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetBundleName() string { return "cisco_ios_xr" }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetYangName() string { return "flood-list-table" }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) SetParent(parent types.Entity) { floodListTable.parent = parent }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetParent() types.Entity { return floodListTable.parent }

func (floodListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood
// OSPFv3 flood list information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Time until next LS transmission (ms) . The type is interface{} with range:
    // 0..4294967295.
    LsTransmissionTimer interface{}

    // Number of LSAs currently being flooded . The type is interface{} with
    // range: 0..4294967295.
    QueueLength interface{}

    // Link floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood.
    LinkFlood []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood

    // Area scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood.
    AreaFlood []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood

    // AS scope floodlist. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood.
    AsFlood []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetFilter() yfilter.YFilter { return flood.YFilter }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) SetFilter(yf yfilter.YFilter) { flood.YFilter = yf }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "ls-transmission-timer" { return "LsTransmissionTimer" }
    if yname == "queue-length" { return "QueueLength" }
    if yname == "link-flood" { return "LinkFlood" }
    if yname == "area-flood" { return "AreaFlood" }
    if yname == "as-flood" { return "AsFlood" }
    return ""
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetSegmentPath() string {
    return "flood" + "[interface-name='" + fmt.Sprintf("%v", flood.InterfaceName) + "']"
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "link-flood" {
        for _, c := range flood.LinkFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood{}
        flood.LinkFlood = append(flood.LinkFlood, child)
        return &flood.LinkFlood[len(flood.LinkFlood)-1]
    }
    if childYangName == "area-flood" {
        for _, c := range flood.AreaFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood{}
        flood.AreaFlood = append(flood.AreaFlood, child)
        return &flood.AreaFlood[len(flood.AreaFlood)-1]
    }
    if childYangName == "as-flood" {
        for _, c := range flood.AsFlood {
            if flood.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood{}
        flood.AsFlood = append(flood.AsFlood, child)
        return &flood.AsFlood[len(flood.AsFlood)-1]
    }
    return nil
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range flood.LinkFlood {
        children[flood.LinkFlood[i].GetSegmentPath()] = &flood.LinkFlood[i]
    }
    for i := range flood.AreaFlood {
        children[flood.AreaFlood[i].GetSegmentPath()] = &flood.AreaFlood[i]
    }
    for i := range flood.AsFlood {
        children[flood.AsFlood[i].GetSegmentPath()] = &flood.AsFlood[i]
    }
    return children
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = flood.InterfaceName
    leafs["ls-transmission-timer"] = flood.LsTransmissionTimer
    leafs["queue-length"] = flood.QueueLength
    return leafs
}

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetBundleName() string { return "cisco_ios_xr" }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetYangName() string { return "flood" }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) SetParent(parent types.Entity) { flood.parent = parent }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetParent() types.Entity { return flood.parent }

func (flood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood) GetParentYangName() string { return "flood-list-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood
// Link floodlist
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetFilter() yfilter.YFilter { return linkFlood.YFilter }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) SetFilter(yf yfilter.YFilter) { linkFlood.YFilter = yf }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetSegmentPath() string {
    return "link-flood"
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = linkFlood.HeaderLsaType
    leafs["header-lsa-age"] = linkFlood.HeaderLsaAge
    leafs["header-lsa-id"] = linkFlood.HeaderLsaId
    leafs["header-advertising-router"] = linkFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = linkFlood.HeaderSequenceNumber
    return leafs
}

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetBundleName() string { return "cisco_ios_xr" }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetYangName() string { return "link-flood" }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) SetParent(parent types.Entity) { linkFlood.parent = parent }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetParent() types.Entity { return linkFlood.parent }

func (linkFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_LinkFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood
// Area scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetFilter() yfilter.YFilter { return areaFlood.YFilter }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) SetFilter(yf yfilter.YFilter) { areaFlood.YFilter = yf }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetSegmentPath() string {
    return "area-flood"
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = areaFlood.HeaderLsaType
    leafs["header-lsa-age"] = areaFlood.HeaderLsaAge
    leafs["header-lsa-id"] = areaFlood.HeaderLsaId
    leafs["header-advertising-router"] = areaFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = areaFlood.HeaderSequenceNumber
    return leafs
}

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetBundleName() string { return "cisco_ios_xr" }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetYangName() string { return "area-flood" }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) SetParent(parent types.Entity) { areaFlood.parent = parent }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetParent() types.Entity { return areaFlood.parent }

func (areaFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AreaFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood
// AS scope floodlist
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetFilter() yfilter.YFilter { return asFlood.YFilter }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) SetFilter(yf yfilter.YFilter) { asFlood.YFilter = yf }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetSegmentPath() string {
    return "as-flood"
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = asFlood.HeaderLsaType
    leafs["header-lsa-age"] = asFlood.HeaderLsaAge
    leafs["header-lsa-id"] = asFlood.HeaderLsaId
    leafs["header-advertising-router"] = asFlood.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = asFlood.HeaderSequenceNumber
    return leafs
}

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetBundleName() string { return "cisco_ios_xr" }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetYangName() string { return "as-flood" }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) SetParent(parent types.Entity) { asFlood.parent = parent }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetParent() types.Entity { return asFlood.parent }

func (asFlood *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_FloodListTable_Flood_AsFlood) GetParentYangName() string { return "flood" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable
// OSPFv3 retransmission list information table
// in an area
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission.
    Retransmission []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission
}

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetFilter() yfilter.YFilter { return retransmissionListTable.YFilter }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) SetFilter(yf yfilter.YFilter) { retransmissionListTable.YFilter = yf }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetGoName(yname string) string {
    if yname == "retransmission" { return "Retransmission" }
    return ""
}

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetSegmentPath() string {
    return "retransmission-list-table"
}

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmission" {
        for _, c := range retransmissionListTable.Retransmission {
            if retransmissionListTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission{}
        retransmissionListTable.Retransmission = append(retransmissionListTable.Retransmission, child)
        return &retransmissionListTable.Retransmission[len(retransmissionListTable.Retransmission)-1]
    }
    return nil
}

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmissionListTable.Retransmission {
        children[retransmissionListTable.Retransmission[i].GetSegmentPath()] = &retransmissionListTable.Retransmission[i]
    }
    return children
}

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetYangName() string { return "retransmission-list-table" }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) SetParent(parent types.Entity) { retransmissionListTable.parent = parent }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetParent() types.Entity { return retransmissionListTable.parent }

func (retransmissionListTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetFilter() yfilter.YFilter { return retransmission.YFilter }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) SetFilter(yf yfilter.YFilter) { retransmission.YFilter = yf }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "retransmission-neighbor-address" { return "RetransmissionNeighborAddress" }
    if yname == "is-retransmissionvirtual-link" { return "IsRetransmissionvirtualLink" }
    if yname == "retransmissionvirtual-link-id" { return "RetransmissionvirtualLinkId" }
    if yname == "is-retransmission-sham-link" { return "IsRetransmissionShamLink" }
    if yname == "retransmission-sham-link-id" { return "RetransmissionShamLinkId" }
    if yname == "retransmission-timer" { return "RetransmissionTimer" }
    if yname == "retransmission-length" { return "RetransmissionLength" }
    if yname == "retransmissionvirtual-link-db" { return "RetransmissionvirtualLinkDb" }
    if yname == "retransmission-area-db" { return "RetransmissionAreaDb" }
    if yname == "retransmission-asdb" { return "RetransmissionAsdb" }
    return ""
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetSegmentPath() string {
    return "retransmission"
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmissionvirtual-link-db" {
        for _, c := range retransmission.RetransmissionvirtualLinkDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb{}
        retransmission.RetransmissionvirtualLinkDb = append(retransmission.RetransmissionvirtualLinkDb, child)
        return &retransmission.RetransmissionvirtualLinkDb[len(retransmission.RetransmissionvirtualLinkDb)-1]
    }
    if childYangName == "retransmission-area-db" {
        for _, c := range retransmission.RetransmissionAreaDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb{}
        retransmission.RetransmissionAreaDb = append(retransmission.RetransmissionAreaDb, child)
        return &retransmission.RetransmissionAreaDb[len(retransmission.RetransmissionAreaDb)-1]
    }
    if childYangName == "retransmission-asdb" {
        for _, c := range retransmission.RetransmissionAsdb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb{}
        retransmission.RetransmissionAsdb = append(retransmission.RetransmissionAsdb, child)
        return &retransmission.RetransmissionAsdb[len(retransmission.RetransmissionAsdb)-1]
    }
    return nil
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmission.RetransmissionvirtualLinkDb {
        children[retransmission.RetransmissionvirtualLinkDb[i].GetSegmentPath()] = &retransmission.RetransmissionvirtualLinkDb[i]
    }
    for i := range retransmission.RetransmissionAreaDb {
        children[retransmission.RetransmissionAreaDb[i].GetSegmentPath()] = &retransmission.RetransmissionAreaDb[i]
    }
    for i := range retransmission.RetransmissionAsdb {
        children[retransmission.RetransmissionAsdb[i].GetSegmentPath()] = &retransmission.RetransmissionAsdb[i]
    }
    return children
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = retransmission.InterfaceName
    leafs["neighbor-address"] = retransmission.NeighborAddress
    leafs["retransmission-neighbor-address"] = retransmission.RetransmissionNeighborAddress
    leafs["is-retransmissionvirtual-link"] = retransmission.IsRetransmissionvirtualLink
    leafs["retransmissionvirtual-link-id"] = retransmission.RetransmissionvirtualLinkId
    leafs["is-retransmission-sham-link"] = retransmission.IsRetransmissionShamLink
    leafs["retransmission-sham-link-id"] = retransmission.RetransmissionShamLinkId
    leafs["retransmission-timer"] = retransmission.RetransmissionTimer
    leafs["retransmission-length"] = retransmission.RetransmissionLength
    return leafs
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetBundleName() string { return "cisco_ios_xr" }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetYangName() string { return "retransmission" }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) SetParent(parent types.Entity) { retransmission.parent = parent }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetParent() types.Entity { return retransmission.parent }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission) GetParentYangName() string { return "retransmission-list-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetFilter() yfilter.YFilter { return retransmissionvirtualLinkDb.YFilter }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) SetFilter(yf yfilter.YFilter) { retransmissionvirtualLinkDb.YFilter = yf }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetSegmentPath() string {
    return "retransmissionvirtual-link-db"
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionvirtualLinkDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionvirtualLinkDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionvirtualLinkDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionvirtualLinkDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionvirtualLinkDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetYangName() string { return "retransmissionvirtual-link-db" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) SetParent(parent types.Entity) { retransmissionvirtualLinkDb.parent = parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetParent() types.Entity { return retransmissionvirtualLinkDb.parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionvirtualLinkDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetFilter() yfilter.YFilter { return retransmissionAreaDb.YFilter }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) SetFilter(yf yfilter.YFilter) { retransmissionAreaDb.YFilter = yf }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetSegmentPath() string {
    return "retransmission-area-db"
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAreaDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAreaDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAreaDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAreaDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAreaDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetYangName() string { return "retransmission-area-db" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) SetParent(parent types.Entity) { retransmissionAreaDb.parent = parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetParent() types.Entity { return retransmissionAreaDb.parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAreaDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetFilter() yfilter.YFilter { return retransmissionAsdb.YFilter }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) SetFilter(yf yfilter.YFilter) { retransmissionAsdb.YFilter = yf }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetSegmentPath() string {
    return "retransmission-asdb"
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAsdb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAsdb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAsdb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAsdb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAsdb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetYangName() string { return "retransmission-asdb" }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) SetParent(parent types.Entity) { retransmissionAsdb.parent = parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetParent() types.Entity { return retransmissionAsdb.parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_RetransmissionListTable_Retransmission_RetransmissionAsdb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable
// OSPF Link State Database
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information.
    LsaTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable

    // Database LSA information.
    LsaInternalTable Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetFilter() yfilter.YFilter { return databaseTable.YFilter }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) SetFilter(yf yfilter.YFilter) { databaseTable.YFilter = yf }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetGoName(yname string) string {
    if yname == "lsa-table" { return "LsaTable" }
    if yname == "lsa-internal-table" { return "LsaInternalTable" }
    return ""
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetSegmentPath() string {
    return "database-table"
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-table" {
        return &databaseTable.LsaTable
    }
    if childYangName == "lsa-internal-table" {
        return &databaseTable.LsaInternalTable
    }
    return nil
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-table"] = &databaseTable.LsaTable
    children["lsa-internal-table"] = &databaseTable.LsaInternalTable
    return children
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetYangName() string { return "database-table" }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) SetParent(parent types.Entity) { databaseTable.parent = parent }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetParent() types.Entity { return databaseTable.parent }

func (databaseTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa.
    Lsa []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetFilter() yfilter.YFilter { return lsaTable.YFilter }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) SetFilter(yf yfilter.YFilter) { lsaTable.YFilter = yf }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetSegmentPath() string {
    return "lsa-table"
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaTable.Lsa {
            if lsaTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa{}
        lsaTable.Lsa = append(lsaTable.Lsa, child)
        return &lsaTable.Lsa[len(lsaTable.Lsa)-1]
    }
    return nil
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaTable.Lsa {
        children[lsaTable.Lsa[i].GetSegmentPath()] = &lsaTable.Lsa[i]
    }
    return children
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetYangName() string { return "lsa-table" }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) SetParent(parent types.Entity) { lsaTable.parent = parent }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetParent() types.Entity { return lsaTable.parent }

func (lsaTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa) GetParentYangName() string { return "lsa-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database LSA information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa.
    Lsa []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetFilter() yfilter.YFilter { return lsaInternalTable.YFilter }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) SetFilter(yf yfilter.YFilter) { lsaInternalTable.YFilter = yf }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    return ""
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetSegmentPath() string {
    return "lsa-internal-table"
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa" {
        for _, c := range lsaInternalTable.Lsa {
            if lsaInternalTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa{}
        lsaInternalTable.Lsa = append(lsaInternalTable.Lsa, child)
        return &lsaInternalTable.Lsa[len(lsaInternalTable.Lsa)-1]
    }
    return nil
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range lsaInternalTable.Lsa {
        children[lsaInternalTable.Lsa[i].GetSegmentPath()] = &lsaInternalTable.Lsa[i]
    }
    return children
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetYangName() string { return "lsa-internal-table" }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) SetParent(parent types.Entity) { lsaInternalTable.parent = parent }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetParent() types.Entity { return lsaInternalTable.parent }

func (lsaInternalTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable) GetParentYangName() string { return "database-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa
// Database LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // LSA type. The type is Ospfv3Lsa.
    LsType interface{}

    // Advertising Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Link state ID. The type is interface{} with range: -2147483648..2147483647.
    LsId interface{}

    // InterfaceName. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Summary of all LSAs or LSA specific information .
    LsaInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "ls-type" { return "LsType" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "ls-id" { return "LsId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "lsa-info" { return "LsaInfo" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-info" {
        return &lsa.LsaInfo
    }
    return nil
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-info"] = &lsa.LsaInfo
    return children
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = lsa.AreaId
    leafs["ls-type"] = lsa.LsType
    leafs["advertising-router"] = lsa.AdvertisingRouter
    leafs["ls-id"] = lsa.LsId
    leafs["interface-name"] = lsa.InterfaceName
    return leafs
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa) GetParentYangName() string { return "lsa-internal-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo
// Summary of all LSAs or LSA specific information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSAInfoType. The type is Ospfv3LsaInfoTypes.
    LsaInfoType interface{}

    // Summary information of LSAs.
    LsaSummaryInfo Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo

    // Router LSA.
    RouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType

    // Network LSA.
    NetworkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType

    // Inter Area Prefix LSA.
    InterAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType

    // Inter Area Router LSA.
    InterAreaRouterLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType

    // External LSA.
    ExternalLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType

    // NSSA External LSA.
    NssalsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType

    // Link LSA.
    LinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType

    // Intra Area Prefix LSA.
    IntraAreaPrefixLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType

    // Grace LSA.
    GraceLsa Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa

    // Unknown Link Scope LSA.
    UnknownLinkLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType

    // Unknown-Area scope LSA.
    UnknownAreaLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType

    // Unknown-AS scope LSA.
    UnknownAslsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType

    // Unknown LSA.
    UnknownLsaType Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetFilter() yfilter.YFilter { return lsaInfo.YFilter }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetFilter(yf yfilter.YFilter) { lsaInfo.YFilter = yf }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetGoName(yname string) string {
    if yname == "lsa-info-type" { return "LsaInfoType" }
    if yname == "lsa-summary-info" { return "LsaSummaryInfo" }
    if yname == "router-lsa-type" { return "RouterLsaType" }
    if yname == "network-lsa-type" { return "NetworkLsaType" }
    if yname == "inter-area-prefix-lsa-type" { return "InterAreaPrefixLsaType" }
    if yname == "inter-area-router-lsa-type" { return "InterAreaRouterLsaType" }
    if yname == "external-lsa-type" { return "ExternalLsaType" }
    if yname == "nssalsa-type" { return "NssalsaType" }
    if yname == "link-lsa-type" { return "LinkLsaType" }
    if yname == "intra-area-prefix-lsa-type" { return "IntraAreaPrefixLsaType" }
    if yname == "grace-lsa" { return "GraceLsa" }
    if yname == "unknown-link-lsa-type" { return "UnknownLinkLsaType" }
    if yname == "unknown-area-lsa-type" { return "UnknownAreaLsaType" }
    if yname == "unknown-aslsa-type" { return "UnknownAslsaType" }
    if yname == "unknown-lsa-type" { return "UnknownLsaType" }
    return ""
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetSegmentPath() string {
    return "lsa-info"
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-summary-info" {
        return &lsaInfo.LsaSummaryInfo
    }
    if childYangName == "router-lsa-type" {
        return &lsaInfo.RouterLsaType
    }
    if childYangName == "network-lsa-type" {
        return &lsaInfo.NetworkLsaType
    }
    if childYangName == "inter-area-prefix-lsa-type" {
        return &lsaInfo.InterAreaPrefixLsaType
    }
    if childYangName == "inter-area-router-lsa-type" {
        return &lsaInfo.InterAreaRouterLsaType
    }
    if childYangName == "external-lsa-type" {
        return &lsaInfo.ExternalLsaType
    }
    if childYangName == "nssalsa-type" {
        return &lsaInfo.NssalsaType
    }
    if childYangName == "link-lsa-type" {
        return &lsaInfo.LinkLsaType
    }
    if childYangName == "intra-area-prefix-lsa-type" {
        return &lsaInfo.IntraAreaPrefixLsaType
    }
    if childYangName == "grace-lsa" {
        return &lsaInfo.GraceLsa
    }
    if childYangName == "unknown-link-lsa-type" {
        return &lsaInfo.UnknownLinkLsaType
    }
    if childYangName == "unknown-area-lsa-type" {
        return &lsaInfo.UnknownAreaLsaType
    }
    if childYangName == "unknown-aslsa-type" {
        return &lsaInfo.UnknownAslsaType
    }
    if childYangName == "unknown-lsa-type" {
        return &lsaInfo.UnknownLsaType
    }
    return nil
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-summary-info"] = &lsaInfo.LsaSummaryInfo
    children["router-lsa-type"] = &lsaInfo.RouterLsaType
    children["network-lsa-type"] = &lsaInfo.NetworkLsaType
    children["inter-area-prefix-lsa-type"] = &lsaInfo.InterAreaPrefixLsaType
    children["inter-area-router-lsa-type"] = &lsaInfo.InterAreaRouterLsaType
    children["external-lsa-type"] = &lsaInfo.ExternalLsaType
    children["nssalsa-type"] = &lsaInfo.NssalsaType
    children["link-lsa-type"] = &lsaInfo.LinkLsaType
    children["intra-area-prefix-lsa-type"] = &lsaInfo.IntraAreaPrefixLsaType
    children["grace-lsa"] = &lsaInfo.GraceLsa
    children["unknown-link-lsa-type"] = &lsaInfo.UnknownLinkLsaType
    children["unknown-area-lsa-type"] = &lsaInfo.UnknownAreaLsaType
    children["unknown-aslsa-type"] = &lsaInfo.UnknownAslsaType
    children["unknown-lsa-type"] = &lsaInfo.UnknownLsaType
    return children
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-info-type"] = lsaInfo.LsaInfoType
    return leafs
}

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetYangName() string { return "lsa-info" }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) SetParent(parent types.Entity) { lsaInfo.parent = parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParent() types.Entity { return lsaInfo.parent }

func (lsaInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo) GetParentYangName() string { return "lsa" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo
// Summary information of LSAs
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of links. The type is interface{} with range: 0..65535.
    Links interface{}

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Reference type . The type is interface{} with range: 0..65535.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // OSPFv3 address Prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetFilter() yfilter.YFilter { return lsaSummaryInfo.YFilter }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetFilter(yf yfilter.YFilter) { lsaSummaryInfo.YFilter = yf }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetGoName(yname string) string {
    if yname == "links" { return "Links" }
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetSegmentPath() string {
    return "lsa-summary-info"
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &lsaSummaryInfo.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &lsaSummaryInfo.LsaDetail
    }
    return nil
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &lsaSummaryInfo.LsaHeader
    children["lsa-detail"] = &lsaSummaryInfo.LsaDetail
    return children
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["links"] = lsaSummaryInfo.Links
    leafs["router-la-bits"] = lsaSummaryInfo.RouterLaBits
    leafs["reference-type"] = lsaSummaryInfo.ReferenceType
    leafs["reference-lsa-id"] = lsaSummaryInfo.ReferenceLsaId
    leafs["lsa-router-id"] = lsaSummaryInfo.LsaRouterId
    leafs["prefix"] = lsaSummaryInfo.Prefix
    leafs["prefix-length"] = lsaSummaryInfo.PrefixLength
    leafs["interface-name"] = lsaSummaryInfo.InterfaceName
    leafs["is-virtual-link"] = lsaSummaryInfo.IsVirtualLink
    leafs["virtual-link-id"] = lsaSummaryInfo.VirtualLinkId
    leafs["is-sham-link"] = lsaSummaryInfo.IsShamLink
    leafs["sham-link-id"] = lsaSummaryInfo.ShamLinkId
    return leafs
}

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleName() string { return "cisco_ios_xr" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetYangName() string { return "lsa-summary-info" }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) SetParent(parent types.Entity) { lsaSummaryInfo.parent = parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParent() types.Entity { return lsaSummaryInfo.parent }

func (lsaSummaryInfo *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaHeader) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LsaSummaryInfo_LsaDetail) GetParentYangName() string { return "lsa-summary-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType
// Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router LA bits . The type is interface{} with range: 0..255.
    RouterLaBits interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail

    // Router LSA Reverse-Path Forwarding information .
    RpfPath Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath

    // List of links in this LSA. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link.
    Link []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetFilter() yfilter.YFilter { return routerLsaType.YFilter }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetFilter(yf yfilter.YFilter) { routerLsaType.YFilter = yf }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetGoName(yname string) string {
    if yname == "router-la-bits" { return "RouterLaBits" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "rpf-path" { return "RpfPath" }
    if yname == "link" { return "Link" }
    return ""
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetSegmentPath() string {
    return "router-lsa-type"
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &routerLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &routerLsaType.LsaDetail
    }
    if childYangName == "rpf-path" {
        return &routerLsaType.RpfPath
    }
    if childYangName == "link" {
        for _, c := range routerLsaType.Link {
            if routerLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link{}
        routerLsaType.Link = append(routerLsaType.Link, child)
        return &routerLsaType.Link[len(routerLsaType.Link)-1]
    }
    return nil
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &routerLsaType.LsaHeader
    children["lsa-detail"] = &routerLsaType.LsaDetail
    children["rpf-path"] = &routerLsaType.RpfPath
    for i := range routerLsaType.Link {
        children[routerLsaType.Link[i].GetSegmentPath()] = &routerLsaType.Link[i]
    }
    return children
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-la-bits"] = routerLsaType.RouterLaBits
    return leafs
}

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetYangName() string { return "router-lsa-type" }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) SetParent(parent types.Entity) { routerLsaType.parent = parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParent() types.Entity { return routerLsaType.parent }

func (routerLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaHeader) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_LsaDetail) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath
// Router LSA Reverse-Path Forwarding information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPF multicast next hop . The type is interface{} with range: 0..4294967295.
    RpfMulticastNextHop interface{}

    // RPF multicast IDB . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetFilter() yfilter.YFilter { return rpfPath.YFilter }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetFilter(yf yfilter.YFilter) { rpfPath.YFilter = yf }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetGoName(yname string) string {
    if yname == "rpf-multicast-next-hop" { return "RpfMulticastNextHop" }
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetSegmentPath() string {
    return "rpf-path"
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rpf-multicast-next-hop"] = rpfPath.RpfMulticastNextHop
    leafs["interface-name"] = rpfPath.InterfaceName
    return leafs
}

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleName() string { return "cisco_ios_xr" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetYangName() string { return "rpf-path" }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) SetParent(parent types.Entity) { rpfPath.parent = parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParent() types.Entity { return rpfPath.parent }

func (rpfPath *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_RpfPath) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link
// List of links in this LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of link. The type is Ospfv3Link.
    LinkType interface{}

    // LSA link metric . The type is interface{} with range: 0..65535.
    LinkMetric interface{}

    // LSA link interface ID . The type is interface{} with range: 0..4294967295.
    LinkInterfaceId interface{}

    // LSA link neighbor interface ID . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborInterfaceId interface{}

    // LSA link neigbhor router id . The type is interface{} with range:
    // 0..4294967295.
    LinkNeighborRouterId interface{}
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetFilter() yfilter.YFilter { return link.YFilter }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetFilter(yf yfilter.YFilter) { link.YFilter = yf }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetGoName(yname string) string {
    if yname == "link-type" { return "LinkType" }
    if yname == "link-metric" { return "LinkMetric" }
    if yname == "link-interface-id" { return "LinkInterfaceId" }
    if yname == "link-neighbor-interface-id" { return "LinkNeighborInterfaceId" }
    if yname == "link-neighbor-router-id" { return "LinkNeighborRouterId" }
    return ""
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetSegmentPath() string {
    return "link"
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["link-type"] = link.LinkType
    leafs["link-metric"] = link.LinkMetric
    leafs["link-interface-id"] = link.LinkInterfaceId
    leafs["link-neighbor-interface-id"] = link.LinkNeighborInterfaceId
    leafs["link-neighbor-router-id"] = link.LinkNeighborRouterId
    return leafs
}

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleName() string { return "cisco_ios_xr" }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetYangName() string { return "link" }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) SetParent(parent types.Entity) { link.parent = parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParent() types.Entity { return link.parent }

func (link *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_RouterLsaType_Link) GetParentYangName() string { return "router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType
// Network LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor router list. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborRouter []interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetFilter() yfilter.YFilter { return networkLsaType.YFilter }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetFilter(yf yfilter.YFilter) { networkLsaType.YFilter = yf }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetGoName(yname string) string {
    if yname == "neighbor-router" { return "NeighborRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetSegmentPath() string {
    return "network-lsa-type"
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &networkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &networkLsaType.LsaDetail
    }
    return nil
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &networkLsaType.LsaHeader
    children["lsa-detail"] = &networkLsaType.LsaDetail
    return children
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-router"] = networkLsaType.NeighborRouter
    return leafs
}

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetYangName() string { return "network-lsa-type" }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) SetParent(parent types.Entity) { networkLsaType.parent = parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParent() types.Entity { return networkLsaType.parent }

func (networkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaHeader) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NetworkLsaType_LsaDetail) GetParentYangName() string { return "network-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType
// Inter Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetFilter() yfilter.YFilter { return interAreaPrefixLsaType.YFilter }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { interAreaPrefixLsaType.YFilter = yf }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetSegmentPath() string {
    return "inter-area-prefix-lsa-type"
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaPrefixLsaType.LsaDetail
    }
    return nil
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &interAreaPrefixLsaType.LsaDetail
    return children
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = interAreaPrefixLsaType.Prefix
    leafs["prefix-length"] = interAreaPrefixLsaType.PrefixLength
    leafs["priority"] = interAreaPrefixLsaType.Priority
    return leafs
}

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetYangName() string { return "inter-area-prefix-lsa-type" }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) SetParent(parent types.Entity) { interAreaPrefixLsaType.parent = parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParent() types.Entity { return interAreaPrefixLsaType.parent }

func (interAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "inter-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType
// Inter Area Router LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA router ID . The type is interface{} with range: 0..4294967295.
    LsaRouterId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetFilter() yfilter.YFilter { return interAreaRouterLsaType.YFilter }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetFilter(yf yfilter.YFilter) { interAreaRouterLsaType.YFilter = yf }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetGoName(yname string) string {
    if yname == "lsa-router-id" { return "LsaRouterId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetSegmentPath() string {
    return "inter-area-router-lsa-type"
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &interAreaRouterLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &interAreaRouterLsaType.LsaDetail
    }
    return nil
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &interAreaRouterLsaType.LsaHeader
    children["lsa-detail"] = &interAreaRouterLsaType.LsaDetail
    return children
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-router-id"] = interAreaRouterLsaType.LsaRouterId
    return leafs
}

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetYangName() string { return "inter-area-router-lsa-type" }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) SetParent(parent types.Entity) { interAreaRouterLsaType.parent = parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParent() types.Entity { return interAreaRouterLsaType.parent }

func (interAreaRouterLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaHeader) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_InterAreaRouterLsaType_LsaDetail) GetParentYangName() string { return "inter-area-router-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType
// External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetFilter() yfilter.YFilter { return externalLsaType.YFilter }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetFilter(yf yfilter.YFilter) { externalLsaType.YFilter = yf }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetSegmentPath() string {
    return "external-lsa-type"
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &externalLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &externalLsaType.LsaDetail
    }
    return nil
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &externalLsaType.LsaHeader
    children["lsa-detail"] = &externalLsaType.LsaDetail
    return children
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = externalLsaType.Prefix
    leafs["prefix-length"] = externalLsaType.PrefixLength
    leafs["metric-type"] = externalLsaType.MetricType
    leafs["tos-cost"] = externalLsaType.TosCost
    leafs["is-forwarding-address-set"] = externalLsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = externalLsaType.ForwardingAddress
    leafs["external-tag"] = externalLsaType.ExternalTag
    leafs["priority"] = externalLsaType.Priority
    return leafs
}

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetYangName() string { return "external-lsa-type" }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) SetParent(parent types.Entity) { externalLsaType.parent = parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParent() types.Entity { return externalLsaType.parent }

func (externalLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaHeader) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_ExternalLsaType_LsaDetail) GetParentYangName() string { return "external-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType
// NSSA External LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPV6 address prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length . The type is interface{} with range: 0..255.
    PrefixLength interface{}

    // Metric type . The type is Ospfv3DefaultMetric.
    MetricType interface{}

    // Type of service cost metric . The type is interface{} with range:
    // 0..4294967295.
    TosCost interface{}

    // If true, forwarding address is set . The type is bool.
    IsForwardingAddressSet interface{}

    // Forwarding Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ForwardingAddress interface{}

    // Route Tag. The type is interface{} with range: 0..4294967295.
    ExternalTag interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader

    // Detailed LSA Information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetFilter() yfilter.YFilter { return nssalsaType.YFilter }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetFilter(yf yfilter.YFilter) { nssalsaType.YFilter = yf }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "metric-type" { return "MetricType" }
    if yname == "tos-cost" { return "TosCost" }
    if yname == "is-forwarding-address-set" { return "IsForwardingAddressSet" }
    if yname == "forwarding-address" { return "ForwardingAddress" }
    if yname == "external-tag" { return "ExternalTag" }
    if yname == "priority" { return "Priority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetSegmentPath() string {
    return "nssalsa-type"
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &nssalsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &nssalsaType.LsaDetail
    }
    return nil
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &nssalsaType.LsaHeader
    children["lsa-detail"] = &nssalsaType.LsaDetail
    return children
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = nssalsaType.Prefix
    leafs["prefix-length"] = nssalsaType.PrefixLength
    leafs["metric-type"] = nssalsaType.MetricType
    leafs["tos-cost"] = nssalsaType.TosCost
    leafs["is-forwarding-address-set"] = nssalsaType.IsForwardingAddressSet
    leafs["forwarding-address"] = nssalsaType.ForwardingAddress
    leafs["external-tag"] = nssalsaType.ExternalTag
    leafs["priority"] = nssalsaType.Priority
    return leafs
}

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleName() string { return "cisco_ios_xr" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetYangName() string { return "nssalsa-type" }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) SetParent(parent types.Entity) { nssalsaType.parent = parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParent() types.Entity { return nssalsaType.parent }

func (nssalsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaHeader) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail
// Detailed LSA Information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_NssalsaType_LsaDetail) GetParentYangName() string { return "nssalsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType
// Link LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface handle. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link. The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link. The type is bool.
    IsShamLink interface{}

    // Sham link ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // LSA link local . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LsaLinkLocal interface{}

    // Router priority . The type is interface{} with range: 0..255.
    RouterPriority interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetFilter() yfilter.YFilter { return linkLsaType.YFilter }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetFilter(yf yfilter.YFilter) { linkLsaType.YFilter = yf }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-link-local" { return "LsaLinkLocal" }
    if yname == "router-priority" { return "RouterPriority" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetSegmentPath() string {
    return "link-lsa-type"
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &linkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &linkLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range linkLsaType.Prefix {
            if linkLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix{}
        linkLsaType.Prefix = append(linkLsaType.Prefix, child)
        return &linkLsaType.Prefix[len(linkLsaType.Prefix)-1]
    }
    return nil
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &linkLsaType.LsaHeader
    children["lsa-detail"] = &linkLsaType.LsaDetail
    for i := range linkLsaType.Prefix {
        children[linkLsaType.Prefix[i].GetSegmentPath()] = &linkLsaType.Prefix[i]
    }
    return children
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = linkLsaType.InterfaceName
    leafs["is-virtual-link"] = linkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = linkLsaType.VirtualLinkId
    leafs["is-sham-link"] = linkLsaType.IsShamLink
    leafs["sham-link-id"] = linkLsaType.ShamLinkId
    leafs["lsa-link-local"] = linkLsaType.LsaLinkLocal
    leafs["router-priority"] = linkLsaType.RouterPriority
    return leafs
}

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetYangName() string { return "link-lsa-type" }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) SetParent(parent types.Entity) { linkLsaType.parent = parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParent() types.Entity { return linkLsaType.parent }

func (linkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaHeader) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_LsaDetail) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_LinkLsaType_Prefix) GetParentYangName() string { return "link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType
// Intra Area Prefix LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Reference type . The type is Ospfv3Lsa1.
    ReferenceType interface{}

    // Reference LSA ID . The type is interface{} with range: 0..4294967295.
    ReferenceLsaId interface{}

    // Reference advertised router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ReferenceAdvertisedRouter interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail

    // OSPFv3 prefix . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix.
    Prefix []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetFilter() yfilter.YFilter { return intraAreaPrefixLsaType.YFilter }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetFilter(yf yfilter.YFilter) { intraAreaPrefixLsaType.YFilter = yf }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetGoName(yname string) string {
    if yname == "reference-type" { return "ReferenceType" }
    if yname == "reference-lsa-id" { return "ReferenceLsaId" }
    if yname == "reference-advertised-router" { return "ReferenceAdvertisedRouter" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    if yname == "prefix" { return "Prefix" }
    return ""
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetSegmentPath() string {
    return "intra-area-prefix-lsa-type"
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &intraAreaPrefixLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &intraAreaPrefixLsaType.LsaDetail
    }
    if childYangName == "prefix" {
        for _, c := range intraAreaPrefixLsaType.Prefix {
            if intraAreaPrefixLsaType.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix{}
        intraAreaPrefixLsaType.Prefix = append(intraAreaPrefixLsaType.Prefix, child)
        return &intraAreaPrefixLsaType.Prefix[len(intraAreaPrefixLsaType.Prefix)-1]
    }
    return nil
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &intraAreaPrefixLsaType.LsaHeader
    children["lsa-detail"] = &intraAreaPrefixLsaType.LsaDetail
    for i := range intraAreaPrefixLsaType.Prefix {
        children[intraAreaPrefixLsaType.Prefix[i].GetSegmentPath()] = &intraAreaPrefixLsaType.Prefix[i]
    }
    return children
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reference-type"] = intraAreaPrefixLsaType.ReferenceType
    leafs["reference-lsa-id"] = intraAreaPrefixLsaType.ReferenceLsaId
    leafs["reference-advertised-router"] = intraAreaPrefixLsaType.ReferenceAdvertisedRouter
    return leafs
}

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetYangName() string { return "intra-area-prefix-lsa-type" }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) SetParent(parent types.Entity) { intraAreaPrefixLsaType.parent = parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParent() types.Entity { return intraAreaPrefixLsaType.parent }

func (intraAreaPrefixLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaHeader) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_LsaDetail) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix
// OSPFv3 prefix 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 prefix . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // OSPFv3 prefix length . The type is interface{} with range: 0..255.
    Ospfv3PrefixLength interface{}

    // OSPFv3 prefix options . The type is interface{} with range: 0..255.
    Ospfv3PrefixOptions interface{}

    // OSPFv3 prefix metric . The type is interface{} with range: 0..65535.
    Ospfv3PrefixMetric interface{}

    // Prefix priority. The type is PrefixPriority.
    Priority interface{}
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetFilter() yfilter.YFilter { return prefix.YFilter }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetFilter(yf yfilter.YFilter) { prefix.YFilter = yf }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "ospfv3-prefix-length" { return "Ospfv3PrefixLength" }
    if yname == "ospfv3-prefix-options" { return "Ospfv3PrefixOptions" }
    if yname == "ospfv3-prefix-metric" { return "Ospfv3PrefixMetric" }
    if yname == "priority" { return "Priority" }
    return ""
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetSegmentPath() string {
    return "prefix"
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = prefix.Prefix
    leafs["ospfv3-prefix-length"] = prefix.Ospfv3PrefixLength
    leafs["ospfv3-prefix-options"] = prefix.Ospfv3PrefixOptions
    leafs["ospfv3-prefix-metric"] = prefix.Ospfv3PrefixMetric
    leafs["priority"] = prefix.Priority
    return leafs
}

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleName() string { return "cisco_ios_xr" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetYangName() string { return "prefix" }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) SetParent(parent types.Entity) { prefix.parent = parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParent() types.Entity { return prefix.parent }

func (prefix *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_IntraAreaPrefixLsaType_Prefix) GetParentYangName() string { return "intra-area-prefix-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa
// Grace LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The grace periord where helper routers should wait before advertising it
    // fully adjacent(s) . The type is interface{} with range: 0..4294967295.
    GracePeriod interface{}

    // Reason for router restart. The type is Ospfv3GracefulRestartReason.
    GraceReason interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetFilter() yfilter.YFilter { return graceLsa.YFilter }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetFilter(yf yfilter.YFilter) { graceLsa.YFilter = yf }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetGoName(yname string) string {
    if yname == "grace-period" { return "GracePeriod" }
    if yname == "grace-reason" { return "GraceReason" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetSegmentPath() string {
    return "grace-lsa"
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &graceLsa.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &graceLsa.LsaDetail
    }
    return nil
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &graceLsa.LsaHeader
    children["lsa-detail"] = &graceLsa.LsaDetail
    return children
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["grace-period"] = graceLsa.GracePeriod
    leafs["grace-reason"] = graceLsa.GraceReason
    return leafs
}

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleName() string { return "cisco_ios_xr" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetYangName() string { return "grace-lsa" }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) SetParent(parent types.Entity) { graceLsa.parent = parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParent() types.Entity { return graceLsa.parent }

func (graceLsa *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaHeader) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_GraceLsa_LsaDetail) GetParentYangName() string { return "grace-lsa" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType
// Unknown Link Scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetFilter() yfilter.YFilter { return unknownLinkLsaType.YFilter }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetFilter(yf yfilter.YFilter) { unknownLinkLsaType.YFilter = yf }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetSegmentPath() string {
    return "unknown-link-lsa-type"
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLinkLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLinkLsaType.LsaDetail
    }
    return nil
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLinkLsaType.LsaHeader
    children["lsa-detail"] = &unknownLinkLsaType.LsaDetail
    return children
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLinkLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLinkLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLinkLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLinkLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLinkLsaType.ShamLinkId
    return leafs
}

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetYangName() string { return "unknown-link-lsa-type" }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) SetParent(parent types.Entity) { unknownLinkLsaType.parent = parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParent() types.Entity { return unknownLinkLsaType.parent }

func (unknownLinkLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaHeader) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLinkLsaType_LsaDetail) GetParentYangName() string { return "unknown-link-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType
// Unknown-Area scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetFilter() yfilter.YFilter { return unknownAreaLsaType.YFilter }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetFilter(yf yfilter.YFilter) { unknownAreaLsaType.YFilter = yf }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetSegmentPath() string {
    return "unknown-area-lsa-type"
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAreaLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAreaLsaType.LsaDetail
    }
    return nil
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAreaLsaType.LsaHeader
    children["lsa-detail"] = &unknownAreaLsaType.LsaDetail
    return children
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAreaLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAreaLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAreaLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAreaLsaType.IsShamLink
    leafs["sham-link-id"] = unknownAreaLsaType.ShamLinkId
    return leafs
}

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetYangName() string { return "unknown-area-lsa-type" }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) SetParent(parent types.Entity) { unknownAreaLsaType.parent = parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParent() types.Entity { return unknownAreaLsaType.parent }

func (unknownAreaLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaHeader) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAreaLsaType_LsaDetail) GetParentYangName() string { return "unknown-area-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType
// Unknown-AS scope LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetFilter() yfilter.YFilter { return unknownAslsaType.YFilter }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetFilter(yf yfilter.YFilter) { unknownAslsaType.YFilter = yf }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetSegmentPath() string {
    return "unknown-aslsa-type"
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownAslsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownAslsaType.LsaDetail
    }
    return nil
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownAslsaType.LsaHeader
    children["lsa-detail"] = &unknownAslsaType.LsaDetail
    return children
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownAslsaType.InterfaceName
    leafs["is-virtual-link"] = unknownAslsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownAslsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownAslsaType.IsShamLink
    leafs["sham-link-id"] = unknownAslsaType.ShamLinkId
    return leafs
}

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetYangName() string { return "unknown-aslsa-type" }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) SetParent(parent types.Entity) { unknownAslsaType.parent = parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParent() types.Entity { return unknownAslsaType.parent }

func (unknownAslsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaHeader) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownAslsaType_LsaDetail) GetParentYangName() string { return "unknown-aslsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType
// Unknown LSA
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // If true, it is a virtual link . The type is bool.
    IsVirtualLink interface{}

    // Virtual link ID . The type is interface{} with range: 0..4294967295.
    VirtualLinkId interface{}

    // If true, it is a sham link . The type is bool.
    IsShamLink interface{}

    // Shamlink ID . The type is interface{} with range: 0..4294967295.
    ShamLinkId interface{}

    // Header information .
    LsaHeader Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader

    // Detailed LSA information.
    LsaDetail Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetFilter() yfilter.YFilter { return unknownLsaType.YFilter }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetFilter(yf yfilter.YFilter) { unknownLsaType.YFilter = yf }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "is-virtual-link" { return "IsVirtualLink" }
    if yname == "virtual-link-id" { return "VirtualLinkId" }
    if yname == "is-sham-link" { return "IsShamLink" }
    if yname == "sham-link-id" { return "ShamLinkId" }
    if yname == "lsa-header" { return "LsaHeader" }
    if yname == "lsa-detail" { return "LsaDetail" }
    return ""
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetSegmentPath() string {
    return "unknown-lsa-type"
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsa-header" {
        return &unknownLsaType.LsaHeader
    }
    if childYangName == "lsa-detail" {
        return &unknownLsaType.LsaDetail
    }
    return nil
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsa-header"] = &unknownLsaType.LsaHeader
    children["lsa-detail"] = &unknownLsaType.LsaDetail
    return children
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = unknownLsaType.InterfaceName
    leafs["is-virtual-link"] = unknownLsaType.IsVirtualLink
    leafs["virtual-link-id"] = unknownLsaType.VirtualLinkId
    leafs["is-sham-link"] = unknownLsaType.IsShamLink
    leafs["sham-link-id"] = unknownLsaType.ShamLinkId
    return leafs
}

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleName() string { return "cisco_ios_xr" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetYangName() string { return "unknown-lsa-type" }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) SetParent(parent types.Entity) { unknownLsaType.parent = parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParent() types.Entity { return unknownLsaType.parent }

func (unknownLsaType *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType) GetParentYangName() string { return "lsa-info" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader
// Header information 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is interface{} with range: 0..65535.
    LsaType interface{}

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // LSA's Age (s). The type is interface{} with range: 0..65535.
    LsaAge interface{}

    // If true, Do Not Age this LSA. The type is bool.
    IsDoNotAgeLsa interface{}

    // LS ID. The type is interface{} with range: 0..4294967295.
    LsId interface{}

    // Router ID of Advertising Router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AdvertisingRouter interface{}

    // Current Sequence number. The type is interface{} with range: 0..4294967295.
    SequenceNumber interface{}

    // Checksum value. The type is interface{} with range: 0..65535.
    Checksum interface{}

    // If true, if grace restart is active . The type is bool.
    IsGracefulRestartActive interface{}
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetFilter() yfilter.YFilter { return lsaHeader.YFilter }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetFilter(yf yfilter.YFilter) { lsaHeader.YFilter = yf }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetGoName(yname string) string {
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-age" { return "LsaAge" }
    if yname == "is-do-not-age-lsa" { return "IsDoNotAgeLsa" }
    if yname == "ls-id" { return "LsId" }
    if yname == "advertising-router" { return "AdvertisingRouter" }
    if yname == "sequence-number" { return "SequenceNumber" }
    if yname == "checksum" { return "Checksum" }
    if yname == "is-graceful-restart-active" { return "IsGracefulRestartActive" }
    return ""
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetSegmentPath() string {
    return "lsa-header"
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-type"] = lsaHeader.LsaType
    leafs["lsa-area-id"] = lsaHeader.LsaAreaId
    leafs["lsa-age"] = lsaHeader.LsaAge
    leafs["is-do-not-age-lsa"] = lsaHeader.IsDoNotAgeLsa
    leafs["ls-id"] = lsaHeader.LsId
    leafs["advertising-router"] = lsaHeader.AdvertisingRouter
    leafs["sequence-number"] = lsaHeader.SequenceNumber
    leafs["checksum"] = lsaHeader.Checksum
    leafs["is-graceful-restart-active"] = lsaHeader.IsGracefulRestartActive
    return leafs
}

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleName() string { return "cisco_ios_xr" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetYangName() string { return "lsa-header" }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) SetParent(parent types.Entity) { lsaHeader.parent = parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParent() types.Entity { return lsaHeader.parent }

func (lsaHeader *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaHeader) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail
// Detailed LSA information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Second table index. The type is interface{} with range: 0..255.
    SecondTableIndex interface{}

    // Minute table index. The type is interface{} with range: 0..255.
    MinuteTableIndex interface{}

    // The amount of time since the last check was made to free this LSA (s). The
    // type is interface{} with range: 0..4294967295.
    FreeTime interface{}

    // If true, flag is set to delete this LSA . The type is bool.
    IsDeleted interface{}

    // If true, Routing Bit set on the LSA. The type is bool.
    IsRoutingBit interface{}

    // If true, Advertising Router is reachable. The type is bool.
    IsAdvertisingRouterReachable interface{}

    // If true, the reason not to delete this LSA is because delete flag not set
    // on this LSA. The type is bool.
    IsNoDelete interface{}

    // If true, the reason  not to delete this LSA is because neighbor is in
    // exchange state. The type is bool.
    IsNeighborExchange interface{}

    // If true, the reason  not to delete this LSA is because it has a
    // contributing entry in the routing table . The type is bool.
    IsRoutingTable interface{}

    // If true, the reason not to delete this LSA is because it's Acknowledgement
    // list is not empty . The type is bool.
    IsAcknowledged interface{}

    // If true, the reason not to delete this LSA is because it is in Maxage
    // Queue. The type is bool.
    IsMaximumAged interface{}

    // If true, the reason not to delete this LSA is because it is in partial SPF
    // queue. The type is bool.
    IsPartialSpf interface{}

    // If true, the reason not to delete this LSA is because waiting for flooding
    // or retransmission. The type is bool.
    IsFloodPending interface{}

    // If true, the reason not to delete this LSA is because waiting for next
    // wait-interval to expire. The type is bool.
    RateLimit interface{}

    // If true, the reason not to delete this LSA is because NSR ACK from standby
    // is pending. The type is bool.
    IsNsrAckPending interface{}

    // If true, the reason not to delete this LSA is because it is pending
    // flooding on switchover. The type is bool.
    NsrFloodRequired interface{}

    // LSA flood required after FO. The type is bool.
    LsaFloodRequiredPostFailOver interface{}

    // Length of the LSA. The type is interface{} with range: 0..65535.
    LsaLength interface{}

    // State of LSA sync with active. The type is OspfLsaSyncState.
    LsaSyncState interface{}
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetFilter() yfilter.YFilter { return lsaDetail.YFilter }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetFilter(yf yfilter.YFilter) { lsaDetail.YFilter = yf }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetGoName(yname string) string {
    if yname == "second-table-index" { return "SecondTableIndex" }
    if yname == "minute-table-index" { return "MinuteTableIndex" }
    if yname == "free-time" { return "FreeTime" }
    if yname == "is-deleted" { return "IsDeleted" }
    if yname == "is-routing-bit" { return "IsRoutingBit" }
    if yname == "is-advertising-router-reachable" { return "IsAdvertisingRouterReachable" }
    if yname == "is-no-delete" { return "IsNoDelete" }
    if yname == "is-neighbor-exchange" { return "IsNeighborExchange" }
    if yname == "is-routing-table" { return "IsRoutingTable" }
    if yname == "is-acknowledged" { return "IsAcknowledged" }
    if yname == "is-maximum-aged" { return "IsMaximumAged" }
    if yname == "is-partial-spf" { return "IsPartialSpf" }
    if yname == "is-flood-pending" { return "IsFloodPending" }
    if yname == "rate-limit" { return "RateLimit" }
    if yname == "is-nsr-ack-pending" { return "IsNsrAckPending" }
    if yname == "nsr-flood-required" { return "NsrFloodRequired" }
    if yname == "lsa-flood-required-post-fail-over" { return "LsaFloodRequiredPostFailOver" }
    if yname == "lsa-length" { return "LsaLength" }
    if yname == "lsa-sync-state" { return "LsaSyncState" }
    return ""
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetSegmentPath() string {
    return "lsa-detail"
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second-table-index"] = lsaDetail.SecondTableIndex
    leafs["minute-table-index"] = lsaDetail.MinuteTableIndex
    leafs["free-time"] = lsaDetail.FreeTime
    leafs["is-deleted"] = lsaDetail.IsDeleted
    leafs["is-routing-bit"] = lsaDetail.IsRoutingBit
    leafs["is-advertising-router-reachable"] = lsaDetail.IsAdvertisingRouterReachable
    leafs["is-no-delete"] = lsaDetail.IsNoDelete
    leafs["is-neighbor-exchange"] = lsaDetail.IsNeighborExchange
    leafs["is-routing-table"] = lsaDetail.IsRoutingTable
    leafs["is-acknowledged"] = lsaDetail.IsAcknowledged
    leafs["is-maximum-aged"] = lsaDetail.IsMaximumAged
    leafs["is-partial-spf"] = lsaDetail.IsPartialSpf
    leafs["is-flood-pending"] = lsaDetail.IsFloodPending
    leafs["rate-limit"] = lsaDetail.RateLimit
    leafs["is-nsr-ack-pending"] = lsaDetail.IsNsrAckPending
    leafs["nsr-flood-required"] = lsaDetail.NsrFloodRequired
    leafs["lsa-flood-required-post-fail-over"] = lsaDetail.LsaFloodRequiredPostFailOver
    leafs["lsa-length"] = lsaDetail.LsaLength
    leafs["lsa-sync-state"] = lsaDetail.LsaSyncState
    return leafs
}

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleName() string { return "cisco_ios_xr" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetYangName() string { return "lsa-detail" }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) SetParent(parent types.Entity) { lsaDetail.parent = parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParent() types.Entity { return lsaDetail.parent }

func (lsaDetail *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseTable_LsaInternalTable_Lsa_LsaInfo_UnknownLsaType_LsaDetail) GetParentYangName() string { return "unknown-lsa-type" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetFilter() yfilter.YFilter { return databaseSummaryTable.YFilter }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) SetFilter(yf yfilter.YFilter) { databaseSummaryTable.YFilter = yf }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetGoName(yname string) string {
    if yname == "database-summary" { return "DatabaseSummary" }
    return ""
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetSegmentPath() string {
    return "database-summary-table"
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-summary" {
        return &databaseSummaryTable.DatabaseSummary
    }
    return nil
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-summary"] = &databaseSummaryTable.DatabaseSummary
    return children
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetYangName() string { return "database-summary-table" }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) SetParent(parent types.Entity) { databaseSummaryTable.parent = parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetParent() types.Entity { return databaseSummaryTable.parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable) GetParentYangName() string { return "area" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetFilter() yfilter.YFilter { return databaseSummary.YFilter }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) SetFilter(yf yfilter.YFilter) { databaseSummary.YFilter = yf }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetGoName(yname string) string {
    if yname == "database-router-id" { return "DatabaseRouterId" }
    if yname == "is-opaque-database-capable" { return "IsOpaqueDatabaseCapable" }
    if yname == "database-counters" { return "DatabaseCounters" }
    if yname == "area-database" { return "AreaDatabase" }
    return ""
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetSegmentPath() string {
    return "database-summary"
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-counters" {
        return &databaseSummary.DatabaseCounters
    }
    if childYangName == "area-database" {
        for _, c := range databaseSummary.AreaDatabase {
            if databaseSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase{}
        databaseSummary.AreaDatabase = append(databaseSummary.AreaDatabase, child)
        return &databaseSummary.AreaDatabase[len(databaseSummary.AreaDatabase)-1]
    }
    return nil
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-counters"] = &databaseSummary.DatabaseCounters
    for i := range databaseSummary.AreaDatabase {
        children[databaseSummary.AreaDatabase[i].GetSegmentPath()] = &databaseSummary.AreaDatabase[i]
    }
    return children
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-router-id"] = databaseSummary.DatabaseRouterId
    leafs["is-opaque-database-capable"] = databaseSummary.IsOpaqueDatabaseCapable
    return leafs
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetYangName() string { return "database-summary" }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) SetParent(parent types.Entity) { databaseSummary.parent = parent }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetParent() types.Entity { return databaseSummary.parent }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary) GetParentYangName() string { return "database-summary-table" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetFilter() yfilter.YFilter { return databaseCounters.YFilter }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetFilter(yf yfilter.YFilter) { databaseCounters.YFilter = yf }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetSegmentPath() string {
    return "database-counters"
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = databaseCounters.Lsa
    leafs["deleted-lsa"] = databaseCounters.DeletedLsa
    leafs["max-age-lsa"] = databaseCounters.MaxAgeLsa
    leafs["lsa-checksum"] = databaseCounters.LsaChecksum
    return leafs
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleName() string { return "cisco_ios_xr" }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetYangName() string { return "database-counters" }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetParent(parent types.Entity) { databaseCounters.parent = parent }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParent() types.Entity { return databaseCounters.parent }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetFilter() yfilter.YFilter { return areaDatabase.YFilter }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetFilter(yf yfilter.YFilter) { areaDatabase.YFilter = yf }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetGoName(yname string) string {
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "area-database-summary" { return "AreaDatabaseSummary" }
    return ""
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetSegmentPath() string {
    return "area-database"
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-database-summary" {
        return &areaDatabase.AreaDatabaseSummary
    }
    return nil
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["area-database-summary"] = &areaDatabase.AreaDatabaseSummary
    return children
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-area-id"] = areaDatabase.LsaAreaId
    return leafs
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetYangName() string { return "area-database" }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetParent(parent types.Entity) { areaDatabase.parent = parent }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParent() types.Entity { return areaDatabase.parent }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetFilter() yfilter.YFilter { return areaDatabaseSummary.YFilter }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetFilter(yf yfilter.YFilter) { areaDatabaseSummary.YFilter = yf }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetSegmentPath() string {
    return "area-database-summary"
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = areaDatabaseSummary.Lsa
    leafs["deleted-lsa"] = areaDatabaseSummary.DeletedLsa
    leafs["max-age-lsa"] = areaDatabaseSummary.MaxAgeLsa
    leafs["lsa-checksum"] = areaDatabaseSummary.LsaChecksum
    return leafs
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetYangName() string { return "area-database-summary" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetParent(parent types.Entity) { areaDatabaseSummary.parent = parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParent() types.Entity { return areaDatabaseSummary.parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_Areas_Area_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParentYangName() string { return "area-database" }

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes
// OSPFv3 internal route information table
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 internal route information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute.
    InternalRoute []Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute
}

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetFilter() yfilter.YFilter { return internalRoutes.YFilter }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) SetFilter(yf yfilter.YFilter) { internalRoutes.YFilter = yf }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetGoName(yname string) string {
    if yname == "internal-route" { return "InternalRoute" }
    return ""
}

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetSegmentPath() string {
    return "internal-routes"
}

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "internal-route" {
        for _, c := range internalRoutes.InternalRoute {
            if internalRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute{}
        internalRoutes.InternalRoute = append(internalRoutes.InternalRoute, child)
        return &internalRoutes.InternalRoute[len(internalRoutes.InternalRoute)-1]
    }
    return nil
}

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range internalRoutes.InternalRoute {
        children[internalRoutes.InternalRoute[i].GetSegmentPath()] = &internalRoutes.InternalRoute[i]
    }
    return children
}

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetYangName() string { return "internal-routes" }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) SetParent(parent types.Entity) { internalRoutes.parent = parent }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetParent() types.Entity { return internalRoutes.parent }

func (internalRoutes *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute
// OSPFv3 internal route information
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Route area ID . The type is interface{} with range: 0..4294967295.
    RouteAreaId interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology

    // List of topology source information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource.
    RouteSource []Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath.
    RoutePath []Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath
}

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetFilter() yfilter.YFilter { return internalRoute.YFilter }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) SetFilter(yf yfilter.YFilter) { internalRoute.YFilter = yf }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-area-id" { return "RouteAreaId" }
    if yname == "route-topology" { return "RouteTopology" }
    if yname == "route-source" { return "RouteSource" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetSegmentPath() string {
    return "internal-route"
}

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-topology" {
        return &internalRoute.RouteTopology
    }
    if childYangName == "route-source" {
        for _, c := range internalRoute.RouteSource {
            if internalRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource{}
        internalRoute.RouteSource = append(internalRoute.RouteSource, child)
        return &internalRoute.RouteSource[len(internalRoute.RouteSource)-1]
    }
    if childYangName == "route-path" {
        for _, c := range internalRoute.RoutePath {
            if internalRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath{}
        internalRoute.RoutePath = append(internalRoute.RoutePath, child)
        return &internalRoute.RoutePath[len(internalRoute.RoutePath)-1]
    }
    return nil
}

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-topology"] = &internalRoute.RouteTopology
    for i := range internalRoute.RouteSource {
        children[internalRoute.RouteSource[i].GetSegmentPath()] = &internalRoute.RouteSource[i]
    }
    for i := range internalRoute.RoutePath {
        children[internalRoute.RoutePath[i].GetSegmentPath()] = &internalRoute.RoutePath[i]
    }
    return children
}

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = internalRoute.Prefix
    leafs["prefix-length"] = internalRoute.PrefixLength
    leafs["route-area-id"] = internalRoute.RouteAreaId
    return leafs
}

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetBundleName() string { return "cisco_ios_xr" }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetYangName() string { return "internal-route" }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) SetParent(parent types.Entity) { internalRoute.parent = parent }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetParent() types.Entity { return internalRoute.parent }

func (internalRoute *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute) GetParentYangName() string { return "internal-routes" }

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetFilter() yfilter.YFilter { return routeTopology.YFilter }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) SetFilter(yf yfilter.YFilter) { routeTopology.YFilter = yf }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "route-distance" { return "RouteDistance" }
    if yname == "route-cost" { return "RouteCost" }
    if yname == "route-type" { return "RouteType" }
    return ""
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetSegmentPath() string {
    return "route-topology"
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeTopology.RouteId
    leafs["route-distance"] = routeTopology.RouteDistance
    leafs["route-cost"] = routeTopology.RouteCost
    leafs["route-type"] = routeTopology.RouteType
    return leafs
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetBundleName() string { return "cisco_ios_xr" }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetYangName() string { return "route-topology" }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) SetParent(parent types.Entity) { routeTopology.parent = parent }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetParent() types.Entity { return routeTopology.parent }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteTopology) GetParentYangName() string { return "internal-route" }

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource
// List of topology source information
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route source of the advertising router . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceAdverstingRouter interface{}

    // Route source ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteSourceId interface{}

    // Type of LSA advertising the prefix, see RFC5340. The type is interface{}
    // with range: 0..4294967295.
    RouteSourceLsaType interface{}
}

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetFilter() yfilter.YFilter { return routeSource.YFilter }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) SetFilter(yf yfilter.YFilter) { routeSource.YFilter = yf }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetGoName(yname string) string {
    if yname == "route-source-adversting-router" { return "RouteSourceAdverstingRouter" }
    if yname == "route-source-id" { return "RouteSourceId" }
    if yname == "route-source-lsa-type" { return "RouteSourceLsaType" }
    return ""
}

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetSegmentPath() string {
    return "route-source"
}

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-source-adversting-router"] = routeSource.RouteSourceAdverstingRouter
    leafs["route-source-id"] = routeSource.RouteSourceId
    leafs["route-source-lsa-type"] = routeSource.RouteSourceLsaType
    return leafs
}

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetBundleName() string { return "cisco_ios_xr" }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetYangName() string { return "route-source" }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) SetParent(parent types.Entity) { routeSource.parent = parent }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetParent() types.Entity { return routeSource.parent }

func (routeSource *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RouteSource) GetParentYangName() string { return "internal-route" }

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "route-path-next-hop" { return "RoutePathNextHop" }
    if yname == "route-path-id" { return "RoutePathId" }
    if yname == "route-backup-path" { return "RouteBackupPath" }
    return ""
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-backup-path" {
        return &routePath.RouteBackupPath
    }
    return nil
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-backup-path"] = &routePath.RouteBackupPath
    return children
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = routePath.InterfaceName
    leafs["route-path-next-hop"] = routePath.RoutePathNextHop
    leafs["route-path-id"] = routePath.RoutePathId
    return leafs
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath) GetParentYangName() string { return "internal-route" }

// Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetFilter() yfilter.YFilter { return routeBackupPath.YFilter }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) SetFilter(yf yfilter.YFilter) { routeBackupPath.YFilter = yf }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetGoName(yname string) string {
    if yname == "backup-route-interface-name" { return "BackupRouteInterfaceName" }
    if yname == "backup-route-next-hop-address" { return "BackupRouteNextHopAddress" }
    if yname == "backup-route-source" { return "BackupRouteSource" }
    if yname == "backup-metric" { return "BackupMetric" }
    if yname == "primary-path" { return "PrimaryPath" }
    if yname == "line-card-disjoint" { return "LineCardDisjoint" }
    if yname == "downstream" { return "Downstream" }
    if yname == "node-protect" { return "NodeProtect" }
    if yname == "srlg-disjoint" { return "SrlgDisjoint" }
    return ""
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetSegmentPath() string {
    return "route-backup-path"
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-route-interface-name"] = routeBackupPath.BackupRouteInterfaceName
    leafs["backup-route-next-hop-address"] = routeBackupPath.BackupRouteNextHopAddress
    leafs["backup-route-source"] = routeBackupPath.BackupRouteSource
    leafs["backup-metric"] = routeBackupPath.BackupMetric
    leafs["primary-path"] = routeBackupPath.PrimaryPath
    leafs["line-card-disjoint"] = routeBackupPath.LineCardDisjoint
    leafs["downstream"] = routeBackupPath.Downstream
    leafs["node-protect"] = routeBackupPath.NodeProtect
    leafs["srlg-disjoint"] = routeBackupPath.SrlgDisjoint
    return leafs
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetBundleName() string { return "cisco_ios_xr" }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetYangName() string { return "route-backup-path" }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) SetParent(parent types.Entity) { routeBackupPath.parent = parent }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetParent() types.Entity { return routeBackupPath.parent }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_InternalRoutes_InternalRoute_RoutePath_RouteBackupPath) GetParentYangName() string { return "route-path" }

// Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas
// Protocol area table 
type Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area information . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea.
    ProtocolArea []Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea
}

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetFilter() yfilter.YFilter { return protocolAreas.YFilter }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) SetFilter(yf yfilter.YFilter) { protocolAreas.YFilter = yf }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetGoName(yname string) string {
    if yname == "protocol-area" { return "ProtocolArea" }
    return ""
}

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetSegmentPath() string {
    return "protocol-areas"
}

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-area" {
        for _, c := range protocolAreas.ProtocolArea {
            if protocolAreas.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea{}
        protocolAreas.ProtocolArea = append(protocolAreas.ProtocolArea, child)
        return &protocolAreas.ProtocolArea[len(protocolAreas.ProtocolArea)-1]
    }
    return nil
}

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolAreas.ProtocolArea {
        children[protocolAreas.ProtocolArea[i].GetSegmentPath()] = &protocolAreas.ProtocolArea[i]
    }
    return children
}

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetBundleName() string { return "cisco_ios_xr" }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetYangName() string { return "protocol-areas" }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) SetParent(parent types.Entity) { protocolAreas.parent = parent }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetParent() types.Entity { return protocolAreas.parent }

func (protocolAreas *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea
// Area information 
type Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Area ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    AreaId interface{}

    // Area ID string in decimal and dotted-decimal format. The type is string
    // with length: 0..16.
    ProtocolAreaId interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}

    // Interface list. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface.
    ProtocolInterface []Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface
}

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetFilter() yfilter.YFilter { return protocolArea.YFilter }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) SetFilter(yf yfilter.YFilter) { protocolArea.YFilter = yf }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "protocol-area-id" { return "ProtocolAreaId" }
    if yname == "distribute-list-in" { return "DistributeListIn" }
    if yname == "protocol-interface" { return "ProtocolInterface" }
    return ""
}

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetSegmentPath() string {
    return "protocol-area" + "[area-id='" + fmt.Sprintf("%v", protocolArea.AreaId) + "']"
}

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-interface" {
        for _, c := range protocolArea.ProtocolInterface {
            if protocolArea.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface{}
        protocolArea.ProtocolInterface = append(protocolArea.ProtocolInterface, child)
        return &protocolArea.ProtocolInterface[len(protocolArea.ProtocolInterface)-1]
    }
    return nil
}

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolArea.ProtocolInterface {
        children[protocolArea.ProtocolInterface[i].GetSegmentPath()] = &protocolArea.ProtocolInterface[i]
    }
    return children
}

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = protocolArea.AreaId
    leafs["protocol-area-id"] = protocolArea.ProtocolAreaId
    leafs["distribute-list-in"] = protocolArea.DistributeListIn
    return leafs
}

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetBundleName() string { return "cisco_ios_xr" }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetYangName() string { return "protocol-area" }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) SetParent(parent types.Entity) { protocolArea.parent = parent }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetParent() types.Entity { return protocolArea.parent }

func (protocolArea *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea) GetParentYangName() string { return "protocol-areas" }

// Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface
// Interface list
type Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol interface name . The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetFilter() yfilter.YFilter { return protocolInterface.YFilter }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) SetFilter(yf yfilter.YFilter) { protocolInterface.YFilter = yf }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "distribute-list-in" { return "DistributeListIn" }
    return ""
}

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetSegmentPath() string {
    return "protocol-interface"
}

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = protocolInterface.InterfaceName
    leafs["distribute-list-in"] = protocolInterface.DistributeListIn
    return leafs
}

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetBundleName() string { return "cisco_ios_xr" }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetYangName() string { return "protocol-interface" }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) SetParent(parent types.Entity) { protocolInterface.parent = parent }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetParent() types.Entity { return protocolInterface.parent }

func (protocolInterface *Ospfv3_Processes_Process_DefaultVrf_ProtocolAreas_ProtocolArea_ProtocolInterface) GetParentYangName() string { return "protocol-area" }

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes
// OSPFv3 connected route information table
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 connected route information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute.
    ConnectedRoute []Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute
}

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetFilter() yfilter.YFilter { return connectedRoutes.YFilter }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) SetFilter(yf yfilter.YFilter) { connectedRoutes.YFilter = yf }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetGoName(yname string) string {
    if yname == "connected-route" { return "ConnectedRoute" }
    return ""
}

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetSegmentPath() string {
    return "connected-routes"
}

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "connected-route" {
        for _, c := range connectedRoutes.ConnectedRoute {
            if connectedRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute{}
        connectedRoutes.ConnectedRoute = append(connectedRoutes.ConnectedRoute, child)
        return &connectedRoutes.ConnectedRoute[len(connectedRoutes.ConnectedRoute)-1]
    }
    return nil
}

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range connectedRoutes.ConnectedRoute {
        children[connectedRoutes.ConnectedRoute[i].GetSegmentPath()] = &connectedRoutes.ConnectedRoute[i]
    }
    return children
}

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetYangName() string { return "connected-routes" }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) SetParent(parent types.Entity) { connectedRoutes.parent = parent }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetParent() types.Entity { return connectedRoutes.parent }

func (connectedRoutes *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute
// OSPFv3 connected route information
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route prefix. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Prefix interface{}

    // Prefix length. The type is interface{} with range: 0..128.
    PrefixLength interface{}

    // Common Route topology information.
    RouteTopology Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology

    // List of paths to this route. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath.
    RoutePath []Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath
}

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetFilter() yfilter.YFilter { return connectedRoute.YFilter }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) SetFilter(yf yfilter.YFilter) { connectedRoute.YFilter = yf }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetGoName(yname string) string {
    if yname == "prefix" { return "Prefix" }
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "route-topology" { return "RouteTopology" }
    if yname == "route-path" { return "RoutePath" }
    return ""
}

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetSegmentPath() string {
    return "connected-route"
}

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-topology" {
        return &connectedRoute.RouteTopology
    }
    if childYangName == "route-path" {
        for _, c := range connectedRoute.RoutePath {
            if connectedRoute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath{}
        connectedRoute.RoutePath = append(connectedRoute.RoutePath, child)
        return &connectedRoute.RoutePath[len(connectedRoute.RoutePath)-1]
    }
    return nil
}

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-topology"] = &connectedRoute.RouteTopology
    for i := range connectedRoute.RoutePath {
        children[connectedRoute.RoutePath[i].GetSegmentPath()] = &connectedRoute.RoutePath[i]
    }
    return children
}

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix"] = connectedRoute.Prefix
    leafs["prefix-length"] = connectedRoute.PrefixLength
    return leafs
}

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetBundleName() string { return "cisco_ios_xr" }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetYangName() string { return "connected-route" }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) SetParent(parent types.Entity) { connectedRoute.parent = parent }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetParent() types.Entity { return connectedRoute.parent }

func (connectedRoute *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute) GetParentYangName() string { return "connected-routes" }

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology
// Common Route topology information
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Route distance . The type is interface{} with range: 0..4294967295.
    RouteDistance interface{}

    // Route cost . The type is interface{} with range: 0..4294967295.
    RouteCost interface{}

    // Route type. The type is interface{} with range: 0..4294967295.
    RouteType interface{}
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetFilter() yfilter.YFilter { return routeTopology.YFilter }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) SetFilter(yf yfilter.YFilter) { routeTopology.YFilter = yf }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "route-distance" { return "RouteDistance" }
    if yname == "route-cost" { return "RouteCost" }
    if yname == "route-type" { return "RouteType" }
    return ""
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetSegmentPath() string {
    return "route-topology"
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = routeTopology.RouteId
    leafs["route-distance"] = routeTopology.RouteDistance
    leafs["route-cost"] = routeTopology.RouteCost
    leafs["route-type"] = routeTopology.RouteType
    return leafs
}

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetBundleName() string { return "cisco_ios_xr" }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetYangName() string { return "route-topology" }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) SetParent(parent types.Entity) { routeTopology.parent = parent }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetParent() types.Entity { return routeTopology.parent }

func (routeTopology *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RouteTopology) GetParentYangName() string { return "connected-route" }

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath
// List of paths to this route
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route path interface name . The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Route path next hop . The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RoutePathNextHop interface{}

    // Path ID of path. The type is interface{} with range: 0..65535.
    RoutePathId interface{}

    // Backup Path Info.
    RouteBackupPath Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetFilter() yfilter.YFilter { return routePath.YFilter }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) SetFilter(yf yfilter.YFilter) { routePath.YFilter = yf }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "route-path-next-hop" { return "RoutePathNextHop" }
    if yname == "route-path-id" { return "RoutePathId" }
    if yname == "route-backup-path" { return "RouteBackupPath" }
    return ""
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetSegmentPath() string {
    return "route-path"
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-backup-path" {
        return &routePath.RouteBackupPath
    }
    return nil
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-backup-path"] = &routePath.RouteBackupPath
    return children
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = routePath.InterfaceName
    leafs["route-path-next-hop"] = routePath.RoutePathNextHop
    leafs["route-path-id"] = routePath.RoutePathId
    return leafs
}

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetBundleName() string { return "cisco_ios_xr" }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetYangName() string { return "route-path" }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) SetParent(parent types.Entity) { routePath.parent = parent }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetParent() types.Entity { return routePath.parent }

func (routePath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath) GetParentYangName() string { return "connected-route" }

// Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath
// Backup Path Info
type Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Next hop Interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupRouteInterfaceName interface{}

    // Nexthop IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    BackupRouteNextHopAddress interface{}

    // IP address of source of route. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    BackupRouteSource interface{}

    // Metric. The type is interface{} with range: 0..4294967295.
    BackupMetric interface{}

    // Primary Path. The type is bool.
    PrimaryPath interface{}

    // Line Card Disjoint. The type is bool.
    LineCardDisjoint interface{}

    // Downstream. The type is bool.
    Downstream interface{}

    // Node Protect. The type is bool.
    NodeProtect interface{}

    // SRLG Disjoint. The type is bool.
    SrlgDisjoint interface{}
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetFilter() yfilter.YFilter { return routeBackupPath.YFilter }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) SetFilter(yf yfilter.YFilter) { routeBackupPath.YFilter = yf }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetGoName(yname string) string {
    if yname == "backup-route-interface-name" { return "BackupRouteInterfaceName" }
    if yname == "backup-route-next-hop-address" { return "BackupRouteNextHopAddress" }
    if yname == "backup-route-source" { return "BackupRouteSource" }
    if yname == "backup-metric" { return "BackupMetric" }
    if yname == "primary-path" { return "PrimaryPath" }
    if yname == "line-card-disjoint" { return "LineCardDisjoint" }
    if yname == "downstream" { return "Downstream" }
    if yname == "node-protect" { return "NodeProtect" }
    if yname == "srlg-disjoint" { return "SrlgDisjoint" }
    return ""
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetSegmentPath() string {
    return "route-backup-path"
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["backup-route-interface-name"] = routeBackupPath.BackupRouteInterfaceName
    leafs["backup-route-next-hop-address"] = routeBackupPath.BackupRouteNextHopAddress
    leafs["backup-route-source"] = routeBackupPath.BackupRouteSource
    leafs["backup-metric"] = routeBackupPath.BackupMetric
    leafs["primary-path"] = routeBackupPath.PrimaryPath
    leafs["line-card-disjoint"] = routeBackupPath.LineCardDisjoint
    leafs["downstream"] = routeBackupPath.Downstream
    leafs["node-protect"] = routeBackupPath.NodeProtect
    leafs["srlg-disjoint"] = routeBackupPath.SrlgDisjoint
    return leafs
}

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetBundleName() string { return "cisco_ios_xr" }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetYangName() string { return "route-backup-path" }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) SetParent(parent types.Entity) { routeBackupPath.parent = parent }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetParent() types.Entity { return routeBackupPath.parent }

func (routeBackupPath *Ospfv3_Processes_Process_DefaultVrf_ConnectedRoutes_ConnectedRoute_RoutePath_RouteBackupPath) GetParentYangName() string { return "route-path" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics
// Container for Statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol table.
    ProtocolStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats

    // OSPFv3 RIB batch statistics.
    SpfStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats

    // OSPF Prefix SPF Prioritization statistics.
    RawioStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats

    // OSPF Prefix SPF Prioritization statistics.
    PrefixPriorityStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats

    // OSPFv3 RIB batch statistics.
    VrfRibBatchStats Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats
}

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetFilter() yfilter.YFilter { return vrfStatistics.YFilter }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) SetFilter(yf yfilter.YFilter) { vrfStatistics.YFilter = yf }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetGoName(yname string) string {
    if yname == "protocol-stats" { return "ProtocolStats" }
    if yname == "spf-stats" { return "SpfStats" }
    if yname == "rawio-stats" { return "RawioStats" }
    if yname == "prefix-priority-stats" { return "PrefixPriorityStats" }
    if yname == "vrf-rib-batch-stats" { return "VrfRibBatchStats" }
    return ""
}

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetSegmentPath() string {
    return "vrf-statistics"
}

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-stats" {
        return &vrfStatistics.ProtocolStats
    }
    if childYangName == "spf-stats" {
        return &vrfStatistics.SpfStats
    }
    if childYangName == "rawio-stats" {
        return &vrfStatistics.RawioStats
    }
    if childYangName == "prefix-priority-stats" {
        return &vrfStatistics.PrefixPriorityStats
    }
    if childYangName == "vrf-rib-batch-stats" {
        return &vrfStatistics.VrfRibBatchStats
    }
    return nil
}

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol-stats"] = &vrfStatistics.ProtocolStats
    children["spf-stats"] = &vrfStatistics.SpfStats
    children["rawio-stats"] = &vrfStatistics.RawioStats
    children["prefix-priority-stats"] = &vrfStatistics.PrefixPriorityStats
    children["vrf-rib-batch-stats"] = &vrfStatistics.VrfRibBatchStats
    return children
}

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetBundleName() string { return "cisco_ios_xr" }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetYangName() string { return "vrf-statistics" }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) SetParent(parent types.Entity) { vrfStatistics.parent = parent }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetParent() types.Entity { return vrfStatistics.parent }

func (vrfStatistics *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats
// Protocol table
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol statistics for an interface. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat.
    ProtocolStat []Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat
}

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetFilter() yfilter.YFilter { return protocolStats.YFilter }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) SetFilter(yf yfilter.YFilter) { protocolStats.YFilter = yf }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetGoName(yname string) string {
    if yname == "protocol-stat" { return "ProtocolStat" }
    return ""
}

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetSegmentPath() string {
    return "protocol-stats"
}

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol-stat" {
        for _, c := range protocolStats.ProtocolStat {
            if protocolStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat{}
        protocolStats.ProtocolStat = append(protocolStats.ProtocolStat, child)
        return &protocolStats.ProtocolStat[len(protocolStats.ProtocolStat)-1]
    }
    return nil
}

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range protocolStats.ProtocolStat {
        children[protocolStats.ProtocolStat[i].GetSegmentPath()] = &protocolStats.ProtocolStat[i]
    }
    return children
}

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetBundleName() string { return "cisco_ios_xr" }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetYangName() string { return "protocol-stats" }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) SetParent(parent types.Entity) { protocolStats.parent = parent }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetParent() types.Entity { return protocolStats.parent }

func (protocolStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat
// Protocol statistics for an interface
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Total inputs packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalInPackets interface{}

    // Hello packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloInPackets interface{}

    // Database Description Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInPackets interface{}

    // Database Description LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesInLsAs interface{}

    // LSA Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInPackets interface{}

    // LS Requests in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqInLsAs interface{}

    // LS Updates Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInPackets interface{}

    // LS Updates ignored. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInIgnored interface{}

    // LS Updates LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdInLsAs interface{}

    // LS Acks Packets in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInPackets interface{}

    // LS Ack LSAs in. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckInLsAs interface{}

    // Total Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalOutPackets interface{}

    // Hello Out Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloOutPackets interface{}

    // Database Description Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutPackets interface{}

    // Database Description LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    DbdesOutLsAs interface{}

    // LS Request Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutPackets interface{}

    // LS Reuqests LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsReqOutLsAs interface{}

    // LS Update Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutPackets interface{}

    // LS Update LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsUpdOutLsAs interface{}

    // LS Ack Packets out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutPackets interface{}

    // LS Ack LSAs out. The type is interface{} with range:
    // 0..18446744073709551615.
    LsAckOutLsAs interface{}

    // Dropped in GS. The type is interface{} with range: 0..18446744073709551615.
    DroppedInGs interface{}

    // Checksum Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    ChecksumErr interface{}
}

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetFilter() yfilter.YFilter { return protocolStat.YFilter }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) SetFilter(yf yfilter.YFilter) { protocolStat.YFilter = yf }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "total-in-packets" { return "TotalInPackets" }
    if yname == "hello-in-packets" { return "HelloInPackets" }
    if yname == "dbdes-in-packets" { return "DbdesInPackets" }
    if yname == "dbdes-in-ls-as" { return "DbdesInLsAs" }
    if yname == "ls-req-in-packets" { return "LsReqInPackets" }
    if yname == "ls-req-in-ls-as" { return "LsReqInLsAs" }
    if yname == "ls-upd-in-packets" { return "LsUpdInPackets" }
    if yname == "ls-upd-in-ignored" { return "LsUpdInIgnored" }
    if yname == "ls-upd-in-ls-as" { return "LsUpdInLsAs" }
    if yname == "ls-ack-in-packets" { return "LsAckInPackets" }
    if yname == "ls-ack-in-ls-as" { return "LsAckInLsAs" }
    if yname == "total-out-packets" { return "TotalOutPackets" }
    if yname == "hello-out-packets" { return "HelloOutPackets" }
    if yname == "dbdes-out-packets" { return "DbdesOutPackets" }
    if yname == "dbdes-out-ls-as" { return "DbdesOutLsAs" }
    if yname == "ls-req-out-packets" { return "LsReqOutPackets" }
    if yname == "ls-req-out-ls-as" { return "LsReqOutLsAs" }
    if yname == "ls-upd-out-packets" { return "LsUpdOutPackets" }
    if yname == "ls-upd-out-ls-as" { return "LsUpdOutLsAs" }
    if yname == "ls-ack-out-packets" { return "LsAckOutPackets" }
    if yname == "ls-ack-out-ls-as" { return "LsAckOutLsAs" }
    if yname == "dropped-in-gs" { return "DroppedInGs" }
    if yname == "checksum-err" { return "ChecksumErr" }
    return ""
}

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetSegmentPath() string {
    return "protocol-stat" + "[interface-name='" + fmt.Sprintf("%v", protocolStat.InterfaceName) + "']"
}

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = protocolStat.InterfaceName
    leafs["total-in-packets"] = protocolStat.TotalInPackets
    leafs["hello-in-packets"] = protocolStat.HelloInPackets
    leafs["dbdes-in-packets"] = protocolStat.DbdesInPackets
    leafs["dbdes-in-ls-as"] = protocolStat.DbdesInLsAs
    leafs["ls-req-in-packets"] = protocolStat.LsReqInPackets
    leafs["ls-req-in-ls-as"] = protocolStat.LsReqInLsAs
    leafs["ls-upd-in-packets"] = protocolStat.LsUpdInPackets
    leafs["ls-upd-in-ignored"] = protocolStat.LsUpdInIgnored
    leafs["ls-upd-in-ls-as"] = protocolStat.LsUpdInLsAs
    leafs["ls-ack-in-packets"] = protocolStat.LsAckInPackets
    leafs["ls-ack-in-ls-as"] = protocolStat.LsAckInLsAs
    leafs["total-out-packets"] = protocolStat.TotalOutPackets
    leafs["hello-out-packets"] = protocolStat.HelloOutPackets
    leafs["dbdes-out-packets"] = protocolStat.DbdesOutPackets
    leafs["dbdes-out-ls-as"] = protocolStat.DbdesOutLsAs
    leafs["ls-req-out-packets"] = protocolStat.LsReqOutPackets
    leafs["ls-req-out-ls-as"] = protocolStat.LsReqOutLsAs
    leafs["ls-upd-out-packets"] = protocolStat.LsUpdOutPackets
    leafs["ls-upd-out-ls-as"] = protocolStat.LsUpdOutLsAs
    leafs["ls-ack-out-packets"] = protocolStat.LsAckOutPackets
    leafs["ls-ack-out-ls-as"] = protocolStat.LsAckOutLsAs
    leafs["dropped-in-gs"] = protocolStat.DroppedInGs
    leafs["checksum-err"] = protocolStat.ChecksumErr
    return leafs
}

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetBundleName() string { return "cisco_ios_xr" }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetYangName() string { return "protocol-stat" }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) SetParent(parent types.Entity) { protocolStat.parent = parent }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetParent() types.Entity { return protocolStat.parent }

func (protocolStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_ProtocolStats_ProtocolStat) GetParentYangName() string { return "protocol-stats" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF statistics header.
    SpfHeader Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader

    // List of SPF run-time statistics. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime.
    SpfRuntime []Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime
}

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetFilter() yfilter.YFilter { return spfStats.YFilter }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) SetFilter(yf yfilter.YFilter) { spfStats.YFilter = yf }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetGoName(yname string) string {
    if yname == "spf-header" { return "SpfHeader" }
    if yname == "spf-runtime" { return "SpfRuntime" }
    return ""
}

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetSegmentPath() string {
    return "spf-stats"
}

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-header" {
        return &spfStats.SpfHeader
    }
    if childYangName == "spf-runtime" {
        for _, c := range spfStats.SpfRuntime {
            if spfStats.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime{}
        spfStats.SpfRuntime = append(spfStats.SpfRuntime, child)
        return &spfStats.SpfRuntime[len(spfStats.SpfRuntime)-1]
    }
    return nil
}

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-header"] = &spfStats.SpfHeader
    for i := range spfStats.SpfRuntime {
        children[spfStats.SpfRuntime[i].GetSegmentPath()] = &spfStats.SpfRuntime[i]
    }
    return children
}

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetBundleName() string { return "cisco_ios_xr" }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetYangName() string { return "spf-stats" }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) SetParent(parent types.Entity) { spfStats.parent = parent }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetParent() types.Entity { return spfStats.parent }

func (spfStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader
// SPF statistics header
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderRouterId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    HeaderSpFs interface{}

    // List of Areas with SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary.
    AreaSummary []Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
}

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetFilter() yfilter.YFilter { return spfHeader.YFilter }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) SetFilter(yf yfilter.YFilter) { spfHeader.YFilter = yf }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetGoName(yname string) string {
    if yname == "header-router-id" { return "HeaderRouterId" }
    if yname == "header-sp-fs" { return "HeaderSpFs" }
    if yname == "area-summary" { return "AreaSummary" }
    return ""
}

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetSegmentPath() string {
    return "spf-header"
}

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-summary" {
        for _, c := range spfHeader.AreaSummary {
            if spfHeader.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary{}
        spfHeader.AreaSummary = append(spfHeader.AreaSummary, child)
        return &spfHeader.AreaSummary[len(spfHeader.AreaSummary)-1]
    }
    return nil
}

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range spfHeader.AreaSummary {
        children[spfHeader.AreaSummary[i].GetSegmentPath()] = &spfHeader.AreaSummary[i]
    }
    return children
}

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-router-id"] = spfHeader.HeaderRouterId
    leafs["header-sp-fs"] = spfHeader.HeaderSpFs
    return leafs
}

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetBundleName() string { return "cisco_ios_xr" }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetYangName() string { return "spf-header" }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) SetParent(parent types.Entity) { spfHeader.parent = parent }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetParent() types.Entity { return spfHeader.parent }

func (spfHeader *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader) GetParentYangName() string { return "spf-stats" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary
// List of Areas with SPF statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID of the area SPF statistics. The type is interface{} with range:
    // 0..4294967295.
    AreaId interface{}

    // Number of SPF calculations. The type is interface{} with range:
    // 0..4294967295.
    SpFs interface{}
}

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetFilter() yfilter.YFilter { return areaSummary.YFilter }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) SetFilter(yf yfilter.YFilter) { areaSummary.YFilter = yf }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetGoName(yname string) string {
    if yname == "area-id" { return "AreaId" }
    if yname == "sp-fs" { return "SpFs" }
    return ""
}

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetSegmentPath() string {
    return "area-summary"
}

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["area-id"] = areaSummary.AreaId
    leafs["sp-fs"] = areaSummary.SpFs
    return leafs
}

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetBundleName() string { return "cisco_ios_xr" }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetYangName() string { return "area-summary" }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) SetParent(parent types.Entity) { areaSummary.parent = parent }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetParent() types.Entity { return areaSummary.parent }

func (areaSummary *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfHeader_AreaSummary) GetParentYangName() string { return "spf-header" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime
// List of SPF run-time statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SPF calculation start time. The type is interface{} with range:
    // 0..4294967295.
    StartTime interface{}

    // Number of routes added to RIB. The type is interface{} with range:
    // 0..4294967295.
    RibAddRoutes interface{}

    // Number of routes deleted from RIB. The type is interface{} with range:
    // 0..4294967295.
    RibDeleteRoutes interface{}

    // Reasons for triggering an SPF calculation Bit 1 - Router LSA update Bit 2 -
    // Network LSA update Bit 3 - Inter-Area Prefix LSA update Bit 4 - Inter-Area
    // Router LSA update Bit 5 - AS External LSA update Bit 6 - MOSPF LSA update
    // Bit 7 - Type 7 AS External LSA update Bit 8 - Link LSA update Bit 9 -
    // Prefix LSA update. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReasonFlags interface{}

    // Number of LSA changes triggering an SPF calculation. The type is
    // interface{} with range: -32768..32767.
    LsaChanges interface{}

    // Global SPF times.
    GlobalTime Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime

    // List of LSAs triggering the SPF calculation. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa.
    Lsa []Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa

    // List of per-area SPF statistics. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat.
    AreaStat []Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
}

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetFilter() yfilter.YFilter { return spfRuntime.YFilter }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) SetFilter(yf yfilter.YFilter) { spfRuntime.YFilter = yf }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetGoName(yname string) string {
    if yname == "start-time" { return "StartTime" }
    if yname == "rib-add-routes" { return "RibAddRoutes" }
    if yname == "rib-delete-routes" { return "RibDeleteRoutes" }
    if yname == "reason-flags" { return "ReasonFlags" }
    if yname == "lsa-changes" { return "LsaChanges" }
    if yname == "global-time" { return "GlobalTime" }
    if yname == "lsa" { return "Lsa" }
    if yname == "area-stat" { return "AreaStat" }
    return ""
}

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetSegmentPath() string {
    return "spf-runtime"
}

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-time" {
        return &spfRuntime.GlobalTime
    }
    if childYangName == "lsa" {
        for _, c := range spfRuntime.Lsa {
            if spfRuntime.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa{}
        spfRuntime.Lsa = append(spfRuntime.Lsa, child)
        return &spfRuntime.Lsa[len(spfRuntime.Lsa)-1]
    }
    if childYangName == "area-stat" {
        for _, c := range spfRuntime.AreaStat {
            if spfRuntime.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat{}
        spfRuntime.AreaStat = append(spfRuntime.AreaStat, child)
        return &spfRuntime.AreaStat[len(spfRuntime.AreaStat)-1]
    }
    return nil
}

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-time"] = &spfRuntime.GlobalTime
    for i := range spfRuntime.Lsa {
        children[spfRuntime.Lsa[i].GetSegmentPath()] = &spfRuntime.Lsa[i]
    }
    for i := range spfRuntime.AreaStat {
        children[spfRuntime.AreaStat[i].GetSegmentPath()] = &spfRuntime.AreaStat[i]
    }
    return children
}

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["start-time"] = spfRuntime.StartTime
    leafs["rib-add-routes"] = spfRuntime.RibAddRoutes
    leafs["rib-delete-routes"] = spfRuntime.RibDeleteRoutes
    leafs["reason-flags"] = spfRuntime.ReasonFlags
    leafs["lsa-changes"] = spfRuntime.LsaChanges
    return leafs
}

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetBundleName() string { return "cisco_ios_xr" }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetYangName() string { return "spf-runtime" }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) SetParent(parent types.Entity) { spfRuntime.parent = parent }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetParent() types.Entity { return spfRuntime.parent }

func (spfRuntime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime) GetParentYangName() string { return "spf-stats" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime
// Global SPF times
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetFilter() yfilter.YFilter { return globalTime.YFilter }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) SetFilter(yf yfilter.YFilter) { globalTime.YFilter = yf }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetGoName(yname string) string {
    if yname == "dijkstra" { return "Dijkstra" }
    if yname == "intra-prefix" { return "IntraPrefix" }
    if yname == "intra-prefix-del" { return "IntraPrefixDel" }
    if yname == "inter-prefix" { return "InterPrefix" }
    if yname == "inter-prefix-del" { return "InterPrefixDel" }
    if yname == "external-prefix" { return "ExternalPrefix" }
    if yname == "external-prefix-del" { return "ExternalPrefixDel" }
    if yname == "rib-add" { return "RibAdd" }
    if yname == "rib-del" { return "RibDel" }
    return ""
}

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetSegmentPath() string {
    return "global-time"
}

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra"] = globalTime.Dijkstra
    leafs["intra-prefix"] = globalTime.IntraPrefix
    leafs["intra-prefix-del"] = globalTime.IntraPrefixDel
    leafs["inter-prefix"] = globalTime.InterPrefix
    leafs["inter-prefix-del"] = globalTime.InterPrefixDel
    leafs["external-prefix"] = globalTime.ExternalPrefix
    leafs["external-prefix-del"] = globalTime.ExternalPrefixDel
    leafs["rib-add"] = globalTime.RibAdd
    leafs["rib-del"] = globalTime.RibDel
    return leafs
}

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetBundleName() string { return "cisco_ios_xr" }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetYangName() string { return "global-time" }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) SetParent(parent types.Entity) { globalTime.parent = parent }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetParent() types.Entity { return globalTime.parent }

func (globalTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_GlobalTime) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa
// List of LSAs triggering the SPF calculation
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID. The type is interface{} with range: 0..4294967295.
    LsaAreaId interface{}

    // Advertising router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaAdvertisingRouter interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LsaId interface{}

    // LSA type. The type is interface{} with range: 0..255.
    LsaType interface{}

    // If true, the LSA change is a flush. The type is bool.
    LsaFlush interface{}
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetFilter() yfilter.YFilter { return lsa.YFilter }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) SetFilter(yf yfilter.YFilter) { lsa.YFilter = yf }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetGoName(yname string) string {
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "lsa-advertising-router" { return "LsaAdvertisingRouter" }
    if yname == "lsa-id" { return "LsaId" }
    if yname == "lsa-type" { return "LsaType" }
    if yname == "lsa-flush" { return "LsaFlush" }
    return ""
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetSegmentPath() string {
    return "lsa"
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-area-id"] = lsa.LsaAreaId
    leafs["lsa-advertising-router"] = lsa.LsaAdvertisingRouter
    leafs["lsa-id"] = lsa.LsaId
    leafs["lsa-type"] = lsa.LsaType
    leafs["lsa-flush"] = lsa.LsaFlush
    return leafs
}

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetBundleName() string { return "cisco_ios_xr" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetYangName() string { return "lsa" }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) SetParent(parent types.Entity) { lsa.parent = parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetParent() types.Entity { return lsa.parent }

func (lsa *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_Lsa) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat
// List of per-area SPF statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID for area of these SPF statistics. The type is interface{} with
    // range: 0..4294967295.
    SpfStatAreaId interface{}

    // Counts of LSA types triggering an SPF calculation. The type is slice of
    // interface{} with range: 0..4294967295.
    SpfStatLsaTypeCount []interface{}

    // SPF time calculations.
    SpfStatTime Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
}

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetFilter() yfilter.YFilter { return areaStat.YFilter }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) SetFilter(yf yfilter.YFilter) { areaStat.YFilter = yf }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetGoName(yname string) string {
    if yname == "spf-stat-area-id" { return "SpfStatAreaId" }
    if yname == "spf-stat-lsa-type-count" { return "SpfStatLsaTypeCount" }
    if yname == "spf-stat-time" { return "SpfStatTime" }
    return ""
}

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetSegmentPath() string {
    return "area-stat"
}

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "spf-stat-time" {
        return &areaStat.SpfStatTime
    }
    return nil
}

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["spf-stat-time"] = &areaStat.SpfStatTime
    return children
}

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["spf-stat-area-id"] = areaStat.SpfStatAreaId
    leafs["spf-stat-lsa-type-count"] = areaStat.SpfStatLsaTypeCount
    return leafs
}

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetBundleName() string { return "cisco_ios_xr" }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetYangName() string { return "area-stat" }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) SetParent(parent types.Entity) { areaStat.parent = parent }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetParent() types.Entity { return areaStat.parent }

func (areaStat *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat) GetParentYangName() string { return "spf-runtime" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime
// SPF time calculations
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Dijkstra time in msec. The type is interface{} with range: 0..4294967295.
    Dijkstra interface{}

    // Intra-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    IntraPrefixDel interface{}

    // Inter-prefix processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefix interface{}

    // Intra-prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    InterPrefixDel interface{}

    // External prefix processing time in msec. The type is interface{} with
    // range: 0..4294967295.
    ExternalPrefix interface{}

    // External prefix deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    ExternalPrefixDel interface{}

    // RIB add processing time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibAdd interface{}

    // RIB deletion time in msec. The type is interface{} with range:
    // 0..4294967295.
    RibDel interface{}
}

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetFilter() yfilter.YFilter { return spfStatTime.YFilter }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) SetFilter(yf yfilter.YFilter) { spfStatTime.YFilter = yf }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetGoName(yname string) string {
    if yname == "dijkstra" { return "Dijkstra" }
    if yname == "intra-prefix" { return "IntraPrefix" }
    if yname == "intra-prefix-del" { return "IntraPrefixDel" }
    if yname == "inter-prefix" { return "InterPrefix" }
    if yname == "inter-prefix-del" { return "InterPrefixDel" }
    if yname == "external-prefix" { return "ExternalPrefix" }
    if yname == "external-prefix-del" { return "ExternalPrefixDel" }
    if yname == "rib-add" { return "RibAdd" }
    if yname == "rib-del" { return "RibDel" }
    return ""
}

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetSegmentPath() string {
    return "spf-stat-time"
}

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dijkstra"] = spfStatTime.Dijkstra
    leafs["intra-prefix"] = spfStatTime.IntraPrefix
    leafs["intra-prefix-del"] = spfStatTime.IntraPrefixDel
    leafs["inter-prefix"] = spfStatTime.InterPrefix
    leafs["inter-prefix-del"] = spfStatTime.InterPrefixDel
    leafs["external-prefix"] = spfStatTime.ExternalPrefix
    leafs["external-prefix-del"] = spfStatTime.ExternalPrefixDel
    leafs["rib-add"] = spfStatTime.RibAdd
    leafs["rib-del"] = spfStatTime.RibDel
    return leafs
}

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetBundleName() string { return "cisco_ios_xr" }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetYangName() string { return "spf-stat-time" }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) SetParent(parent types.Entity) { spfStatTime.parent = parent }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetParent() types.Entity { return spfStatTime.parent }

func (spfStatTime *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_SpfStats_SpfRuntime_AreaStat_SpfStatTime) GetParentYangName() string { return "area-stat" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Raw Connections Open. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnOpen interface{}

    // Raw Connections Close. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnClose interface{}

    // Raw Connections Error. The type is interface{} with range:
    // 0..18446744073709551615.
    RawConnError interface{}

    // Received Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InPackets interface{}

    // Received Bytes. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte.
    InBytes interface{}

    // Received Long Packets. The type is interface{} with range:
    // 0..18446744073709551615.
    InLongPackets interface{}

    // In Malloc Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InMallocDrops interface{}

    // In Handle Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InHandleDrops interface{}

    // In Short Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InShortDrops interface{}

    // In Error Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InErrorDrops interface{}

    // In IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InIpsecDrops interface{}

    // In Queue Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    InQueueDrops interface{}

    // Packets Sent. The type is interface{} with range: 0..18446744073709551615.
    OutPackets interface{}

    // Sent Bytes. The type is interface{} with range: 0..18446744073709551615.
    // Units are byte.
    OutBytes interface{}

    // No FileDescriptor Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNofdDrops interface{}

    // Error Drops. The type is interface{} with range: 0..18446744073709551615.
    OutErrorDrops interface{}

    // Out IPSEC Drops. The type is interface{} with range:
    // 0..18446744073709551615.
    OutIpsecDrops interface{}

    // No Packet Buffers. The type is interface{} with range:
    // 0..18446744073709551615.
    OutNopakDrops interface{}

    // PAK API Errors. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPakapiErrors interface{}

    // Raw Connection State. The type is interface{} with range: 0..4294967295.
    RawConnState interface{}
}

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetFilter() yfilter.YFilter { return rawioStats.YFilter }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) SetFilter(yf yfilter.YFilter) { rawioStats.YFilter = yf }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetGoName(yname string) string {
    if yname == "raw-conn-open" { return "RawConnOpen" }
    if yname == "raw-conn-close" { return "RawConnClose" }
    if yname == "raw-conn-error" { return "RawConnError" }
    if yname == "in-packets" { return "InPackets" }
    if yname == "in-bytes" { return "InBytes" }
    if yname == "in-long-packets" { return "InLongPackets" }
    if yname == "in-malloc-drops" { return "InMallocDrops" }
    if yname == "in-handle-drops" { return "InHandleDrops" }
    if yname == "in-short-drops" { return "InShortDrops" }
    if yname == "in-error-drops" { return "InErrorDrops" }
    if yname == "in-ipsec-drops" { return "InIpsecDrops" }
    if yname == "in-queue-drops" { return "InQueueDrops" }
    if yname == "out-packets" { return "OutPackets" }
    if yname == "out-bytes" { return "OutBytes" }
    if yname == "out-nofd-drops" { return "OutNofdDrops" }
    if yname == "out-error-drops" { return "OutErrorDrops" }
    if yname == "out-ipsec-drops" { return "OutIpsecDrops" }
    if yname == "out-nopak-drops" { return "OutNopakDrops" }
    if yname == "out-pakapi-errors" { return "OutPakapiErrors" }
    if yname == "raw-conn-state" { return "RawConnState" }
    return ""
}

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetSegmentPath() string {
    return "rawio-stats"
}

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["raw-conn-open"] = rawioStats.RawConnOpen
    leafs["raw-conn-close"] = rawioStats.RawConnClose
    leafs["raw-conn-error"] = rawioStats.RawConnError
    leafs["in-packets"] = rawioStats.InPackets
    leafs["in-bytes"] = rawioStats.InBytes
    leafs["in-long-packets"] = rawioStats.InLongPackets
    leafs["in-malloc-drops"] = rawioStats.InMallocDrops
    leafs["in-handle-drops"] = rawioStats.InHandleDrops
    leafs["in-short-drops"] = rawioStats.InShortDrops
    leafs["in-error-drops"] = rawioStats.InErrorDrops
    leafs["in-ipsec-drops"] = rawioStats.InIpsecDrops
    leafs["in-queue-drops"] = rawioStats.InQueueDrops
    leafs["out-packets"] = rawioStats.OutPackets
    leafs["out-bytes"] = rawioStats.OutBytes
    leafs["out-nofd-drops"] = rawioStats.OutNofdDrops
    leafs["out-error-drops"] = rawioStats.OutErrorDrops
    leafs["out-ipsec-drops"] = rawioStats.OutIpsecDrops
    leafs["out-nopak-drops"] = rawioStats.OutNopakDrops
    leafs["out-pakapi-errors"] = rawioStats.OutPakapiErrors
    leafs["raw-conn-state"] = rawioStats.RawConnState
    return leafs
}

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetBundleName() string { return "cisco_ios_xr" }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetYangName() string { return "rawio-stats" }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) SetParent(parent types.Entity) { rawioStats.parent = parent }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetParent() types.Entity { return rawioStats.parent }

func (rawioStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_RawioStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats
// OSPF Prefix SPF Prioritization statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Critical priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Critical interface{}

    // High priority classifications. The type is interface{} with range:
    // 0..4294967295.
    High interface{}

    // Medium priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Medium interface{}

    // Low priority classifications. The type is interface{} with range:
    // 0..4294967295.
    Low interface{}
}

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetFilter() yfilter.YFilter { return prefixPriorityStats.YFilter }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) SetFilter(yf yfilter.YFilter) { prefixPriorityStats.YFilter = yf }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetGoName(yname string) string {
    if yname == "critical" { return "Critical" }
    if yname == "high" { return "High" }
    if yname == "medium" { return "Medium" }
    if yname == "low" { return "Low" }
    return ""
}

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetSegmentPath() string {
    return "prefix-priority-stats"
}

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["critical"] = prefixPriorityStats.Critical
    leafs["high"] = prefixPriorityStats.High
    leafs["medium"] = prefixPriorityStats.Medium
    leafs["low"] = prefixPriorityStats.Low
    return leafs
}

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetBundleName() string { return "cisco_ios_xr" }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetYangName() string { return "prefix-priority-stats" }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) SetParent(parent types.Entity) { prefixPriorityStats.parent = parent }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetParent() types.Entity { return prefixPriorityStats.parent }

func (prefixPriorityStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_PrefixPriorityStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats
// OSPFv3 RIB batch statistics
type Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // No. of RIB batches sent. The type is interface{} with range: 0..4294967295.
    BatchesSent interface{}

    // No. of Routes sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    RoutesSent interface{}

    // No of Pending Routes. The type is interface{} with range: 0..4294967295.
    RoutesPending interface{}

    // Max No. of Routes in a batch. The type is interface{} with range:
    // 0..4294967295.
    MaxRoutes interface{}

    // No. of Paths sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsSent interface{}

    // No. of paths waiting to be sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsPending interface{}

    // No. of paths added to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsAdd interface{}

    // No. of paths add errors. The type is interface{} with range: 0..4294967295.
    PathsAddErrs interface{}

    // No. of paths del sent to RIB. The type is interface{} with range:
    // 0..4294967295.
    PathsDel interface{}

    // No. of Paths del errors. The type is interface{} with range: 0..4294967295.
    PathsDelErrs interface{}
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetFilter() yfilter.YFilter { return vrfRibBatchStats.YFilter }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) SetFilter(yf yfilter.YFilter) { vrfRibBatchStats.YFilter = yf }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetGoName(yname string) string {
    if yname == "batches-sent" { return "BatchesSent" }
    if yname == "routes-sent" { return "RoutesSent" }
    if yname == "routes-pending" { return "RoutesPending" }
    if yname == "max-routes" { return "MaxRoutes" }
    if yname == "paths-sent" { return "PathsSent" }
    if yname == "paths-pending" { return "PathsPending" }
    if yname == "paths-add" { return "PathsAdd" }
    if yname == "paths-add-errs" { return "PathsAddErrs" }
    if yname == "paths-del" { return "PathsDel" }
    if yname == "paths-del-errs" { return "PathsDelErrs" }
    return ""
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetSegmentPath() string {
    return "vrf-rib-batch-stats"
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["batches-sent"] = vrfRibBatchStats.BatchesSent
    leafs["routes-sent"] = vrfRibBatchStats.RoutesSent
    leafs["routes-pending"] = vrfRibBatchStats.RoutesPending
    leafs["max-routes"] = vrfRibBatchStats.MaxRoutes
    leafs["paths-sent"] = vrfRibBatchStats.PathsSent
    leafs["paths-pending"] = vrfRibBatchStats.PathsPending
    leafs["paths-add"] = vrfRibBatchStats.PathsAdd
    leafs["paths-add-errs"] = vrfRibBatchStats.PathsAddErrs
    leafs["paths-del"] = vrfRibBatchStats.PathsDel
    leafs["paths-del-errs"] = vrfRibBatchStats.PathsDelErrs
    return leafs
}

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetBundleName() string { return "cisco_ios_xr" }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetYangName() string { return "vrf-rib-batch-stats" }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) SetParent(parent types.Entity) { vrfRibBatchStats.parent = parent }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetParent() types.Entity { return vrfRibBatchStats.parent }

func (vrfRibBatchStats *Ospfv3_Processes_Process_DefaultVrf_VrfStatistics_VrfRibBatchStats) GetParentYangName() string { return "vrf-statistics" }

// Ospfv3_Processes_Process_DefaultVrf_Summary
// OSPFv3 summary
type Ospfv3_Processes_Process_DefaultVrf_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 protocol summary.
    Protocol Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol

    // OSPFv3 summary.
    Ospfv3 Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3

    // OSPFv3 route summary.
    Route Ospfv3_Processes_Process_DefaultVrf_Summary_Route
}

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetGoName(yname string) string {
    if yname == "protocol" { return "Protocol" }
    if yname == "ospfv3" { return "Ospfv3" }
    if yname == "route" { return "Route" }
    return ""
}

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "protocol" {
        return &summary.Protocol
    }
    if childYangName == "ospfv3" {
        return &summary.Ospfv3
    }
    if childYangName == "route" {
        return &summary.Route
    }
    return nil
}

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["protocol"] = &summary.Protocol
    children["ospfv3"] = &summary.Ospfv3
    children["route"] = &summary.Route
    return children
}

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetYangName() string { return "summary" }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Ospfv3_Processes_Process_DefaultVrf_Summary) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol
// OSPFv3 protocol summary
type Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Protocol router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ProtocolRouterId interface{}

    // Administrative distance. The type is interface{} with range: 0..4294967295.
    AdministrativeDistance interface{}

    // Administrative Distance for Inter Area routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceInterArea interface{}

    // Administrative Distance for External routes. The type is interface{} with
    // range: 0..4294967295.
    AdministrativeDistanceExternal interface{}

    // If true, Graceful restart is enabled . The type is bool.
    IsGracefulRestart interface{}

    // Distribute List In. The type is string.
    DistributeListIn interface{}
}

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetFilter() yfilter.YFilter { return protocol.YFilter }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) SetFilter(yf yfilter.YFilter) { protocol.YFilter = yf }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetGoName(yname string) string {
    if yname == "protocol-router-id" { return "ProtocolRouterId" }
    if yname == "administrative-distance" { return "AdministrativeDistance" }
    if yname == "administrative-distance-inter-area" { return "AdministrativeDistanceInterArea" }
    if yname == "administrative-distance-external" { return "AdministrativeDistanceExternal" }
    if yname == "is-graceful-restart" { return "IsGracefulRestart" }
    if yname == "distribute-list-in" { return "DistributeListIn" }
    return ""
}

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetSegmentPath() string {
    return "protocol"
}

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["protocol-router-id"] = protocol.ProtocolRouterId
    leafs["administrative-distance"] = protocol.AdministrativeDistance
    leafs["administrative-distance-inter-area"] = protocol.AdministrativeDistanceInterArea
    leafs["administrative-distance-external"] = protocol.AdministrativeDistanceExternal
    leafs["is-graceful-restart"] = protocol.IsGracefulRestart
    leafs["distribute-list-in"] = protocol.DistributeListIn
    return leafs
}

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetBundleName() string { return "cisco_ios_xr" }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetYangName() string { return "protocol" }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) SetParent(parent types.Entity) { protocol.parent = parent }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetParent() types.Entity { return protocol.parent }

func (protocol *Ospfv3_Processes_Process_DefaultVrf_Summary_Protocol) GetParentYangName() string { return "summary" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3
// OSPFv3 summary
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // If true, the process is running as stanby role. The type is bool.
    IsRoleStandby interface{}

    // Role, V1/V2 Active/Standby. The type is interface{} with range:
    // 0..4294967295.
    Role interface{}

    // If true, NSR is enabled. The type is bool.
    IsNsrEnabled interface{}

    // Trigger RP Switchover on detectable process restart. The type is bool.
    IsNsrSwitchoverOnRestart interface{}

    // Stalled Router ID . The type is bool.
    IsRouterIdStalled interface{}

    // Opaque LSA capable . The type is bool.
    IsOpaqueCapable interface{}

    // If true, is an area border router. The type is bool.
    IsAreaBorderRouter interface{}

    // If true, is an AS border router. The type is bool.
    IsAsBorderRouter interface{}

    // Redistribution metric . The type is interface{} with range: 0..4294967295.
    Metric interface{}

    // If true, origin is by default . The type is bool.
    IsDefaultOriginated interface{}

    // If true, default always . The type is bool.
    IsDefaultAlways interface{}

    // Default metric . The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Default metric type . The type is Ospfv3DefaultMetric.
    DefaultMetricType interface{}

    // Default tag . The type is interface{} with range: 0..4294967295.
    DefaultTag interface{}

    // If true, is a default policy . The type is bool.
    IsDefaultPolicy interface{}

    // Default policy name . The type is string.
    DefaultPolicyName interface{}

    // Scheduling delay for SPF (ms). The type is interface{} with range:
    // 0..4294967295.
    SpfStartTime interface{}

    // Minimum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfHoldTime interface{}

    // Maximum delay time between SPF runs (ms). The type is interface{} with
    // range: 0..4294967295.
    SpfMaximumTime interface{}

    // Initial LSA throttle delay (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaStartTime interface{}

    // Second delay before generating next LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaHoldTime interface{}

    // Maximum delay before generating an LSA (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaMaximumTime interface{}

    // Minimum time between LSA regeneration (ms). The type is interface{} with
    // range: 0..4294967295.
    MinimumLsaInterval interface{}

    // LSA refresh interval (sec). The type is interface{} with range:
    // 0..4294967295.
    LsaGroupInterval interface{}

    // LSA flood pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaFloodPacingInterval interface{}

    // LSA retransmission pacing timer (ms). The type is interface{} with range:
    // 0..4294967295.
    LsaRetransmissionPacingInterval interface{}

    // Number of AS scope LSAs. The type is interface{} with range: 0..4294967295.
    AsLsAs interface{}

    // Number of opaque LSAs. The type is interface{} with range: 0..4294967295.
    OpaqueLsas interface{}

    // Sum of opaque LSA checksum. The type is interface{} with range:
    // 0..4294967295.
    OpaqueLsaChecksum interface{}

    // Number of external and AS opaque LSAs with demand circut bit not set. The
    // type is interface{} with range: 0..4294967295.
    AsDcBitlessLsAs interface{}

    // Number of external and AS opaque LSAs with do not age set . The type is
    // interface{} with range: 0..4294967295.
    AsDoNotAgeLsAs interface{}

    // Number of areas. The type is interface{} with range: 0..65535.
    Areas interface{}

    // Number of normal areas. The type is interface{} with range: 0..65535.
    NormalAreas interface{}

    // Number of stub and total stub areas. The type is interface{} with range:
    // 0..65535.
    StubAreas interface{}

    // Number of NSSA areas. The type is interface{} with range: 0..65535.
    NssaAreas interface{}

    // Length of AS LSAs flood list. The type is interface{} with range:
    // 0..4294967295.
    AsLsaFloodListLength interface{}

    // If true, grace restart is enabled . The type is bool.
    IsGraceRestartEnabled interface{}

    // Length of time since the last NSF (s). The type is interface{} with range:
    // 0..4294967295.
    LastNsfTime interface{}

    // Grace time to resync . The type is interface{} with range: 0..4294967295.
    GraceResyncTime interface{}

    // Maximum number of interfaces. The type is interface{} with range:
    // 0..4294967295.
    MaximumInterfaces interface{}

    // Maximum number of paths. The type is interface{} with range: 0..4294967295.
    MaximumPaths interface{}

    // The number of redistributed prefixes allowed. The type is interface{} with
    // range: 0..4294967295.
    RedistributionLimit interface{}

    // When the number of redistributed prefixes reaches this threshold, a warning
    // message is issued . The type is interface{} with range: 0..4294967295.
    RedistributionThreshold interface{}

    // If true, auto cost is enabled. The type is bool.
    IsAutoCost interface{}

    // Reference Bandwdith. The type is interface{} with range: 0..4294967295.
    ReferenceBandwidth interface{}

    // Context name. The type is string with length: 0..32.
    ContextName interface{}

    // If true, snmp trap is enabled. The type is bool.
    SnmpTrapEnabled interface{}

    // Graceful shutdown state. The type is Ospfv3GracefulShutdownState.
    GracefulShutdownState interface{}

    // Domain ID information.
    DomainId Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId

    // Stub Router Information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter.
    StubRouter []Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter

    // IPFRR-Tiebreakers list. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers.
    IpfrrTiebreakers []Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetFilter() yfilter.YFilter { return ospfv3.YFilter }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) SetFilter(yf yfilter.YFilter) { ospfv3.YFilter = yf }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetGoName(yname string) string {
    if yname == "router-id" { return "RouterId" }
    if yname == "is-role-standby" { return "IsRoleStandby" }
    if yname == "role" { return "Role" }
    if yname == "is-nsr-enabled" { return "IsNsrEnabled" }
    if yname == "is-nsr-switchover-on-restart" { return "IsNsrSwitchoverOnRestart" }
    if yname == "is-router-id-stalled" { return "IsRouterIdStalled" }
    if yname == "is-opaque-capable" { return "IsOpaqueCapable" }
    if yname == "is-area-border-router" { return "IsAreaBorderRouter" }
    if yname == "is-as-border-router" { return "IsAsBorderRouter" }
    if yname == "metric" { return "Metric" }
    if yname == "is-default-originated" { return "IsDefaultOriginated" }
    if yname == "is-default-always" { return "IsDefaultAlways" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "default-metric-type" { return "DefaultMetricType" }
    if yname == "default-tag" { return "DefaultTag" }
    if yname == "is-default-policy" { return "IsDefaultPolicy" }
    if yname == "default-policy-name" { return "DefaultPolicyName" }
    if yname == "spf-start-time" { return "SpfStartTime" }
    if yname == "spf-hold-time" { return "SpfHoldTime" }
    if yname == "spf-maximum-time" { return "SpfMaximumTime" }
    if yname == "lsa-start-time" { return "LsaStartTime" }
    if yname == "lsa-hold-time" { return "LsaHoldTime" }
    if yname == "lsa-maximum-time" { return "LsaMaximumTime" }
    if yname == "minimum-lsa-interval" { return "MinimumLsaInterval" }
    if yname == "lsa-group-interval" { return "LsaGroupInterval" }
    if yname == "lsa-flood-pacing-interval" { return "LsaFloodPacingInterval" }
    if yname == "lsa-retransmission-pacing-interval" { return "LsaRetransmissionPacingInterval" }
    if yname == "as-ls-as" { return "AsLsAs" }
    if yname == "opaque-lsas" { return "OpaqueLsas" }
    if yname == "opaque-lsa-checksum" { return "OpaqueLsaChecksum" }
    if yname == "as-dc-bitless-ls-as" { return "AsDcBitlessLsAs" }
    if yname == "as-do-not-age-ls-as" { return "AsDoNotAgeLsAs" }
    if yname == "areas" { return "Areas" }
    if yname == "normal-areas" { return "NormalAreas" }
    if yname == "stub-areas" { return "StubAreas" }
    if yname == "nssa-areas" { return "NssaAreas" }
    if yname == "as-lsa-flood-list-length" { return "AsLsaFloodListLength" }
    if yname == "is-grace-restart-enabled" { return "IsGraceRestartEnabled" }
    if yname == "last-nsf-time" { return "LastNsfTime" }
    if yname == "grace-resync-time" { return "GraceResyncTime" }
    if yname == "maximum-interfaces" { return "MaximumInterfaces" }
    if yname == "maximum-paths" { return "MaximumPaths" }
    if yname == "redistribution-limit" { return "RedistributionLimit" }
    if yname == "redistribution-threshold" { return "RedistributionThreshold" }
    if yname == "is-auto-cost" { return "IsAutoCost" }
    if yname == "reference-bandwidth" { return "ReferenceBandwidth" }
    if yname == "context-name" { return "ContextName" }
    if yname == "snmp-trap-enabled" { return "SnmpTrapEnabled" }
    if yname == "graceful-shutdown-state" { return "GracefulShutdownState" }
    if yname == "domain-id" { return "DomainId" }
    if yname == "stub-router" { return "StubRouter" }
    if yname == "ipfrr-tiebreakers" { return "IpfrrTiebreakers" }
    return ""
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetSegmentPath() string {
    return "ospfv3"
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "domain-id" {
        return &ospfv3.DomainId
    }
    if childYangName == "stub-router" {
        for _, c := range ospfv3.StubRouter {
            if ospfv3.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter{}
        ospfv3.StubRouter = append(ospfv3.StubRouter, child)
        return &ospfv3.StubRouter[len(ospfv3.StubRouter)-1]
    }
    if childYangName == "ipfrr-tiebreakers" {
        for _, c := range ospfv3.IpfrrTiebreakers {
            if ospfv3.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers{}
        ospfv3.IpfrrTiebreakers = append(ospfv3.IpfrrTiebreakers, child)
        return &ospfv3.IpfrrTiebreakers[len(ospfv3.IpfrrTiebreakers)-1]
    }
    return nil
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["domain-id"] = &ospfv3.DomainId
    for i := range ospfv3.StubRouter {
        children[ospfv3.StubRouter[i].GetSegmentPath()] = &ospfv3.StubRouter[i]
    }
    for i := range ospfv3.IpfrrTiebreakers {
        children[ospfv3.IpfrrTiebreakers[i].GetSegmentPath()] = &ospfv3.IpfrrTiebreakers[i]
    }
    return children
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-id"] = ospfv3.RouterId
    leafs["is-role-standby"] = ospfv3.IsRoleStandby
    leafs["role"] = ospfv3.Role
    leafs["is-nsr-enabled"] = ospfv3.IsNsrEnabled
    leafs["is-nsr-switchover-on-restart"] = ospfv3.IsNsrSwitchoverOnRestart
    leafs["is-router-id-stalled"] = ospfv3.IsRouterIdStalled
    leafs["is-opaque-capable"] = ospfv3.IsOpaqueCapable
    leafs["is-area-border-router"] = ospfv3.IsAreaBorderRouter
    leafs["is-as-border-router"] = ospfv3.IsAsBorderRouter
    leafs["metric"] = ospfv3.Metric
    leafs["is-default-originated"] = ospfv3.IsDefaultOriginated
    leafs["is-default-always"] = ospfv3.IsDefaultAlways
    leafs["default-metric"] = ospfv3.DefaultMetric
    leafs["default-metric-type"] = ospfv3.DefaultMetricType
    leafs["default-tag"] = ospfv3.DefaultTag
    leafs["is-default-policy"] = ospfv3.IsDefaultPolicy
    leafs["default-policy-name"] = ospfv3.DefaultPolicyName
    leafs["spf-start-time"] = ospfv3.SpfStartTime
    leafs["spf-hold-time"] = ospfv3.SpfHoldTime
    leafs["spf-maximum-time"] = ospfv3.SpfMaximumTime
    leafs["lsa-start-time"] = ospfv3.LsaStartTime
    leafs["lsa-hold-time"] = ospfv3.LsaHoldTime
    leafs["lsa-maximum-time"] = ospfv3.LsaMaximumTime
    leafs["minimum-lsa-interval"] = ospfv3.MinimumLsaInterval
    leafs["lsa-group-interval"] = ospfv3.LsaGroupInterval
    leafs["lsa-flood-pacing-interval"] = ospfv3.LsaFloodPacingInterval
    leafs["lsa-retransmission-pacing-interval"] = ospfv3.LsaRetransmissionPacingInterval
    leafs["as-ls-as"] = ospfv3.AsLsAs
    leafs["opaque-lsas"] = ospfv3.OpaqueLsas
    leafs["opaque-lsa-checksum"] = ospfv3.OpaqueLsaChecksum
    leafs["as-dc-bitless-ls-as"] = ospfv3.AsDcBitlessLsAs
    leafs["as-do-not-age-ls-as"] = ospfv3.AsDoNotAgeLsAs
    leafs["areas"] = ospfv3.Areas
    leafs["normal-areas"] = ospfv3.NormalAreas
    leafs["stub-areas"] = ospfv3.StubAreas
    leafs["nssa-areas"] = ospfv3.NssaAreas
    leafs["as-lsa-flood-list-length"] = ospfv3.AsLsaFloodListLength
    leafs["is-grace-restart-enabled"] = ospfv3.IsGraceRestartEnabled
    leafs["last-nsf-time"] = ospfv3.LastNsfTime
    leafs["grace-resync-time"] = ospfv3.GraceResyncTime
    leafs["maximum-interfaces"] = ospfv3.MaximumInterfaces
    leafs["maximum-paths"] = ospfv3.MaximumPaths
    leafs["redistribution-limit"] = ospfv3.RedistributionLimit
    leafs["redistribution-threshold"] = ospfv3.RedistributionThreshold
    leafs["is-auto-cost"] = ospfv3.IsAutoCost
    leafs["reference-bandwidth"] = ospfv3.ReferenceBandwidth
    leafs["context-name"] = ospfv3.ContextName
    leafs["snmp-trap-enabled"] = ospfv3.SnmpTrapEnabled
    leafs["graceful-shutdown-state"] = ospfv3.GracefulShutdownState
    return leafs
}

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetBundleName() string { return "cisco_ios_xr" }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetYangName() string { return "ospfv3" }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) SetParent(parent types.Entity) { ospfv3.parent = parent }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetParent() types.Entity { return ospfv3.parent }

func (ospfv3 *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3) GetParentYangName() string { return "summary" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId
// Domain ID information
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Primary Domain ID.
    PrimaryDomainId Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId

    // List of secondary domain IDs. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId.
    SecondaryDomainId []Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId
}

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetFilter() yfilter.YFilter { return domainId.YFilter }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) SetFilter(yf yfilter.YFilter) { domainId.YFilter = yf }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetGoName(yname string) string {
    if yname == "primary-domain-id" { return "PrimaryDomainId" }
    if yname == "secondary-domain-id" { return "SecondaryDomainId" }
    return ""
}

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetSegmentPath() string {
    return "domain-id"
}

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "primary-domain-id" {
        return &domainId.PrimaryDomainId
    }
    if childYangName == "secondary-domain-id" {
        for _, c := range domainId.SecondaryDomainId {
            if domainId.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId{}
        domainId.SecondaryDomainId = append(domainId.SecondaryDomainId, child)
        return &domainId.SecondaryDomainId[len(domainId.SecondaryDomainId)-1]
    }
    return nil
}

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["primary-domain-id"] = &domainId.PrimaryDomainId
    for i := range domainId.SecondaryDomainId {
        children[domainId.SecondaryDomainId[i].GetSegmentPath()] = &domainId.SecondaryDomainId[i]
    }
    return children
}

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetBundleName() string { return "cisco_ios_xr" }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetYangName() string { return "domain-id" }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) SetParent(parent types.Entity) { domainId.parent = parent }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetParent() types.Entity { return domainId.parent }

func (domainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId
// Primary Domain ID
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetFilter() yfilter.YFilter { return primaryDomainId.YFilter }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) SetFilter(yf yfilter.YFilter) { primaryDomainId.YFilter = yf }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-value" { return "DomainIdValue" }
    return ""
}

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetSegmentPath() string {
    return "primary-domain-id"
}

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = primaryDomainId.DomainIdType
    leafs["domain-id-value"] = primaryDomainId.DomainIdValue
    return leafs
}

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetYangName() string { return "primary-domain-id" }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) SetParent(parent types.Entity) { primaryDomainId.parent = parent }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetParent() types.Entity { return primaryDomainId.parent }

func (primaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_PrimaryDomainId) GetParentYangName() string { return "domain-id" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId
// List of secondary domain IDs
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Domain ID Type. The type is interface{} with range: 0..65535.
    DomainIdType interface{}

    // Domain ID value. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    DomainIdValue interface{}
}

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetFilter() yfilter.YFilter { return secondaryDomainId.YFilter }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) SetFilter(yf yfilter.YFilter) { secondaryDomainId.YFilter = yf }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetGoName(yname string) string {
    if yname == "domain-id-type" { return "DomainIdType" }
    if yname == "domain-id-value" { return "DomainIdValue" }
    return ""
}

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetSegmentPath() string {
    return "secondary-domain-id"
}

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["domain-id-type"] = secondaryDomainId.DomainIdType
    leafs["domain-id-value"] = secondaryDomainId.DomainIdValue
    return leafs
}

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetBundleName() string { return "cisco_ios_xr" }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetYangName() string { return "secondary-domain-id" }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) SetParent(parent types.Entity) { secondaryDomainId.parent = parent }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetParent() types.Entity { return secondaryDomainId.parent }

func (secondaryDomainId *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_DomainId_SecondaryDomainId) GetParentYangName() string { return "domain-id" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter
// Stub Router Information
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Stub router mode. The type is StubRouterMode.
    Mode interface{}

    // If true, stub router mode is active. The type is bool.
    Active interface{}

    // Remaining time (in seconds) in stub router mode. The type is interface{}
    // with range: 0..4294967295. Units are second.
    RemainingTime interface{}

    // Reason for entering stub router mode. The type is StubRouterTrigger.
    SetReason interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // If true, advertise maximum metric for stub links. The type is bool.
    IncludeStubLinks interface{}

    // Metric for summary LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    SummaryLsaMetric interface{}

    // Metric for external LSAs in max-metric mode. The type is interface{} with
    // range: 0..4294967295.
    ExternalLsaMetric interface{}

    // Reason for being in ABR off mode. The type is StubRouterAbrOffReason.
    AbrOffReason interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime

    // Timestamp (relative to 1970/1/1 00:00) when ABR duties were resumed.
    AbrResumeTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime

    // Triggers for entering stub router mode. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger.
    Trigger []Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetFilter() yfilter.YFilter { return stubRouter.YFilter }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) SetFilter(yf yfilter.YFilter) { stubRouter.YFilter = yf }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetGoName(yname string) string {
    if yname == "mode" { return "Mode" }
    if yname == "active" { return "Active" }
    if yname == "remaining-time" { return "RemainingTime" }
    if yname == "set-reason" { return "SetReason" }
    if yname == "unset-reason" { return "UnsetReason" }
    if yname == "include-stub-links" { return "IncludeStubLinks" }
    if yname == "summary-lsa-metric" { return "SummaryLsaMetric" }
    if yname == "external-lsa-metric" { return "ExternalLsaMetric" }
    if yname == "abr-off-reason" { return "AbrOffReason" }
    if yname == "unset-time" { return "UnsetTime" }
    if yname == "start-time" { return "StartTime" }
    if yname == "abr-resume-time" { return "AbrResumeTime" }
    if yname == "trigger" { return "Trigger" }
    return ""
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetSegmentPath() string {
    return "stub-router"
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unset-time" {
        return &stubRouter.UnsetTime
    }
    if childYangName == "start-time" {
        return &stubRouter.StartTime
    }
    if childYangName == "abr-resume-time" {
        return &stubRouter.AbrResumeTime
    }
    if childYangName == "trigger" {
        for _, c := range stubRouter.Trigger {
            if stubRouter.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger{}
        stubRouter.Trigger = append(stubRouter.Trigger, child)
        return &stubRouter.Trigger[len(stubRouter.Trigger)-1]
    }
    return nil
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unset-time"] = &stubRouter.UnsetTime
    children["start-time"] = &stubRouter.StartTime
    children["abr-resume-time"] = &stubRouter.AbrResumeTime
    for i := range stubRouter.Trigger {
        children[stubRouter.Trigger[i].GetSegmentPath()] = &stubRouter.Trigger[i]
    }
    return children
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["mode"] = stubRouter.Mode
    leafs["active"] = stubRouter.Active
    leafs["remaining-time"] = stubRouter.RemainingTime
    leafs["set-reason"] = stubRouter.SetReason
    leafs["unset-reason"] = stubRouter.UnsetReason
    leafs["include-stub-links"] = stubRouter.IncludeStubLinks
    leafs["summary-lsa-metric"] = stubRouter.SummaryLsaMetric
    leafs["external-lsa-metric"] = stubRouter.ExternalLsaMetric
    leafs["abr-off-reason"] = stubRouter.AbrOffReason
    return leafs
}

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetBundleName() string { return "cisco_ios_xr" }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetYangName() string { return "stub-router" }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) SetParent(parent types.Entity) { stubRouter.parent = parent }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetParent() types.Entity { return stubRouter.parent }

func (stubRouter *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetFilter() yfilter.YFilter { return unsetTime.YFilter }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) SetFilter(yf yfilter.YFilter) { unsetTime.YFilter = yf }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetSegmentPath() string {
    return "unset-time"
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = unsetTime.Second
    leafs["nanosecond"] = unsetTime.Nanosecond
    return leafs
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetBundleName() string { return "cisco_ios_xr" }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetYangName() string { return "unset-time" }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) SetParent(parent types.Entity) { unsetTime.parent = parent }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetParent() types.Entity { return unsetTime.parent }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_UnsetTime) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetFilter() yfilter.YFilter { return startTime.YFilter }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) SetFilter(yf yfilter.YFilter) { startTime.YFilter = yf }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetSegmentPath() string {
    return "start-time"
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = startTime.Second
    leafs["nanosecond"] = startTime.Nanosecond
    return leafs
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetBundleName() string { return "cisco_ios_xr" }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetYangName() string { return "start-time" }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) SetParent(parent types.Entity) { startTime.parent = parent }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetParent() types.Entity { return startTime.parent }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_StartTime) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime
// Timestamp (relative to 1970/1/1 00:00) when ABR
// duties were resumed
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetFilter() yfilter.YFilter { return abrResumeTime.YFilter }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) SetFilter(yf yfilter.YFilter) { abrResumeTime.YFilter = yf }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetSegmentPath() string {
    return "abr-resume-time"
}

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = abrResumeTime.Second
    leafs["nanosecond"] = abrResumeTime.Nanosecond
    return leafs
}

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetBundleName() string { return "cisco_ios_xr" }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetYangName() string { return "abr-resume-time" }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) SetParent(parent types.Entity) { abrResumeTime.parent = parent }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetParent() types.Entity { return abrResumeTime.parent }

func (abrResumeTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_AbrResumeTime) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger
// Triggers for entering stub router mode
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Stub Router Trigger type. The type is StubRouterTrigger.
    Trigger interface{}

    // If true, stub router is terminated when BGP converges. The type is bool.
    WaitForBgp interface{}

    // Reason for clearing stub router condition. The type is
    // StubRouterExitReason.
    UnsetReason interface{}

    // Time (in seconds) to stay in stub router mode. The type is interface{} with
    // range: 0..4294967295. Units are second.
    Time interface{}

    // Timestamp (relative to 1970/1/1 00:00) when stub router condition was
    // cleared.
    UnsetTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime

    // Timestamp (relative to 1970/1/1 00:00) when stub router mode was activated.
    StartTime Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
}

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetFilter() yfilter.YFilter { return trigger.YFilter }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) SetFilter(yf yfilter.YFilter) { trigger.YFilter = yf }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetGoName(yname string) string {
    if yname == "trigger" { return "Trigger" }
    if yname == "wait-for-bgp" { return "WaitForBgp" }
    if yname == "unset-reason" { return "UnsetReason" }
    if yname == "time" { return "Time" }
    if yname == "unset-time" { return "UnsetTime" }
    if yname == "start-time" { return "StartTime" }
    return ""
}

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetSegmentPath() string {
    return "trigger"
}

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "unset-time" {
        return &trigger.UnsetTime
    }
    if childYangName == "start-time" {
        return &trigger.StartTime
    }
    return nil
}

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["unset-time"] = &trigger.UnsetTime
    children["start-time"] = &trigger.StartTime
    return children
}

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["trigger"] = trigger.Trigger
    leafs["wait-for-bgp"] = trigger.WaitForBgp
    leafs["unset-reason"] = trigger.UnsetReason
    leafs["time"] = trigger.Time
    return leafs
}

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetBundleName() string { return "cisco_ios_xr" }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetYangName() string { return "trigger" }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) SetParent(parent types.Entity) { trigger.parent = parent }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetParent() types.Entity { return trigger.parent }

func (trigger *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger) GetParentYangName() string { return "stub-router" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router condition was cleared
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetFilter() yfilter.YFilter { return unsetTime.YFilter }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) SetFilter(yf yfilter.YFilter) { unsetTime.YFilter = yf }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetSegmentPath() string {
    return "unset-time"
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = unsetTime.Second
    leafs["nanosecond"] = unsetTime.Nanosecond
    return leafs
}

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetBundleName() string { return "cisco_ios_xr" }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetYangName() string { return "unset-time" }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) SetParent(parent types.Entity) { unsetTime.parent = parent }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetParent() types.Entity { return unsetTime.parent }

func (unsetTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_UnsetTime) GetParentYangName() string { return "trigger" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime
// Timestamp (relative to 1970/1/1 00:00) when stub
// router mode was activated
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetFilter() yfilter.YFilter { return startTime.YFilter }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) SetFilter(yf yfilter.YFilter) { startTime.YFilter = yf }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetSegmentPath() string {
    return "start-time"
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = startTime.Second
    leafs["nanosecond"] = startTime.Nanosecond
    return leafs
}

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetBundleName() string { return "cisco_ios_xr" }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetYangName() string { return "start-time" }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) SetParent(parent types.Entity) { startTime.parent = parent }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetParent() types.Entity { return startTime.parent }

func (startTime *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_StubRouter_Trigger_StartTime) GetParentYangName() string { return "trigger" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers
// IPFRR-Tiebreakers list
type Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Tiebreaker Type. The type is IpfrrTbrkr.
    TiebreakerType interface{}

    // Tiebreaker Index. The type is interface{} with range: 0..4294967295.
    TiebreakerIndex interface{}
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetFilter() yfilter.YFilter { return ipfrrTiebreakers.YFilter }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) SetFilter(yf yfilter.YFilter) { ipfrrTiebreakers.YFilter = yf }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetGoName(yname string) string {
    if yname == "tiebreaker-type" { return "TiebreakerType" }
    if yname == "tiebreaker-index" { return "TiebreakerIndex" }
    return ""
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetSegmentPath() string {
    return "ipfrr-tiebreakers"
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tiebreaker-type"] = ipfrrTiebreakers.TiebreakerType
    leafs["tiebreaker-index"] = ipfrrTiebreakers.TiebreakerIndex
    return leafs
}

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetYangName() string { return "ipfrr-tiebreakers" }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) SetParent(parent types.Entity) { ipfrrTiebreakers.parent = parent }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetParent() types.Entity { return ipfrrTiebreakers.parent }

func (ipfrrTiebreakers *Ospfv3_Processes_Process_DefaultVrf_Summary_Ospfv3_IpfrrTiebreakers) GetParentYangName() string { return "ospfv3" }

// Ospfv3_Processes_Process_DefaultVrf_Summary_Route
// OSPFv3 route summary
type Ospfv3_Processes_Process_DefaultVrf_Summary_Route struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route summary of a route ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouteId interface{}

    // Intra route summary . The type is interface{} with range: 0..4294967295.
    IntraAreaRoute interface{}

    // Inter route summary . The type is interface{} with range: 0..4294967295.
    InterAreaRoute interface{}

    // Extern 1 route summary . The type is interface{} with range: 0..4294967295.
    ExternOneRoute interface{}

    // Extern 2 route summary . The type is interface{} with range: 0..4294967295.
    ExternTwoRoute interface{}

    // NSSA 1 route summary . The type is interface{} with range: 0..4294967295.
    NssaOneRoute interface{}

    // NSSA 2 route summary . The type is interface{} with range: 0..4294967295.
    NssaTwoRoute interface{}

    // Total route summary . The type is interface{} with range: 0..4294967295.
    TotalSentRoute interface{}

    // Route connected . The type is interface{} with range: 0..4294967295.
    RouteConnected interface{}

    // Redistribution route summary . The type is interface{} with range:
    // 0..4294967295.
    RedistributionRoute interface{}

    // Total route received summary. The type is interface{} with range:
    // 0..4294967295.
    TotalReceivedRoute interface{}
}

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetFilter() yfilter.YFilter { return route.YFilter }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) SetFilter(yf yfilter.YFilter) { route.YFilter = yf }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetGoName(yname string) string {
    if yname == "route-id" { return "RouteId" }
    if yname == "intra-area-route" { return "IntraAreaRoute" }
    if yname == "inter-area-route" { return "InterAreaRoute" }
    if yname == "extern-one-route" { return "ExternOneRoute" }
    if yname == "extern-two-route" { return "ExternTwoRoute" }
    if yname == "nssa-one-route" { return "NssaOneRoute" }
    if yname == "nssa-two-route" { return "NssaTwoRoute" }
    if yname == "total-sent-route" { return "TotalSentRoute" }
    if yname == "route-connected" { return "RouteConnected" }
    if yname == "redistribution-route" { return "RedistributionRoute" }
    if yname == "total-received-route" { return "TotalReceivedRoute" }
    return ""
}

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetSegmentPath() string {
    return "route"
}

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["route-id"] = route.RouteId
    leafs["intra-area-route"] = route.IntraAreaRoute
    leafs["inter-area-route"] = route.InterAreaRoute
    leafs["extern-one-route"] = route.ExternOneRoute
    leafs["extern-two-route"] = route.ExternTwoRoute
    leafs["nssa-one-route"] = route.NssaOneRoute
    leafs["nssa-two-route"] = route.NssaTwoRoute
    leafs["total-sent-route"] = route.TotalSentRoute
    leafs["route-connected"] = route.RouteConnected
    leafs["redistribution-route"] = route.RedistributionRoute
    leafs["total-received-route"] = route.TotalReceivedRoute
    return leafs
}

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetBundleName() string { return "cisco_ios_xr" }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetYangName() string { return "route" }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) SetParent(parent types.Entity) { route.parent = parent }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetParent() types.Entity { return route.parent }

func (route *Ospfv3_Processes_Process_DefaultVrf_Summary_Route) GetParentYangName() string { return "summary" }

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable
// OSPFv3 retransmission list information table for
// all areas
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 retransmission list information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission.
    Retransmission []Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetFilter() yfilter.YFilter { return retransmissionListProcessTable.YFilter }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) SetFilter(yf yfilter.YFilter) { retransmissionListProcessTable.YFilter = yf }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetGoName(yname string) string {
    if yname == "retransmission" { return "Retransmission" }
    return ""
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetSegmentPath() string {
    return "retransmission-list-process-table"
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmission" {
        for _, c := range retransmissionListProcessTable.Retransmission {
            if retransmissionListProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission{}
        retransmissionListProcessTable.Retransmission = append(retransmissionListProcessTable.Retransmission, child)
        return &retransmissionListProcessTable.Retransmission[len(retransmissionListProcessTable.Retransmission)-1]
    }
    return nil
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmissionListProcessTable.Retransmission {
        children[retransmissionListProcessTable.Retransmission[i].GetSegmentPath()] = &retransmissionListProcessTable.Retransmission[i]
    }
    return children
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetYangName() string { return "retransmission-list-process-table" }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) SetParent(parent types.Entity) { retransmissionListProcessTable.parent = parent }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetParent() types.Entity { return retransmissionListProcessTable.parent }

func (retransmissionListProcessTable *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission
// OSPFv3 retransmission list information
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    RetransmissionNeighborAddress interface{}

    // If true, virtual link is retransmitted . The type is bool.
    IsRetransmissionvirtualLink interface{}

    // Retransmission virtual link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionvirtualLinkId interface{}

    // If true, sham link is retransmitted . The type is bool.
    IsRetransmissionShamLink interface{}

    // Retransmission sham link ID . The type is interface{} with range:
    // 0..4294967295.
    RetransmissionShamLinkId interface{}

    // Amount of time remaining on retransmission timer (ms). The type is
    // interface{} with range: 0..4294967295.
    RetransmissionTimer interface{}

    // Retransmission queue length. The type is interface{} with range:
    // 0..4294967295.
    RetransmissionLength interface{}

    // List of virtual link scope entries . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb.
    RetransmissionvirtualLinkDb []Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb

    // List of area scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb.
    RetransmissionAreaDb []Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb

    // List of AS scope entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb.
    RetransmissionAsdb []Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetFilter() yfilter.YFilter { return retransmission.YFilter }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) SetFilter(yf yfilter.YFilter) { retransmission.YFilter = yf }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "retransmission-neighbor-address" { return "RetransmissionNeighborAddress" }
    if yname == "is-retransmissionvirtual-link" { return "IsRetransmissionvirtualLink" }
    if yname == "retransmissionvirtual-link-id" { return "RetransmissionvirtualLinkId" }
    if yname == "is-retransmission-sham-link" { return "IsRetransmissionShamLink" }
    if yname == "retransmission-sham-link-id" { return "RetransmissionShamLinkId" }
    if yname == "retransmission-timer" { return "RetransmissionTimer" }
    if yname == "retransmission-length" { return "RetransmissionLength" }
    if yname == "retransmissionvirtual-link-db" { return "RetransmissionvirtualLinkDb" }
    if yname == "retransmission-area-db" { return "RetransmissionAreaDb" }
    if yname == "retransmission-asdb" { return "RetransmissionAsdb" }
    return ""
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetSegmentPath() string {
    return "retransmission"
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "retransmissionvirtual-link-db" {
        for _, c := range retransmission.RetransmissionvirtualLinkDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb{}
        retransmission.RetransmissionvirtualLinkDb = append(retransmission.RetransmissionvirtualLinkDb, child)
        return &retransmission.RetransmissionvirtualLinkDb[len(retransmission.RetransmissionvirtualLinkDb)-1]
    }
    if childYangName == "retransmission-area-db" {
        for _, c := range retransmission.RetransmissionAreaDb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb{}
        retransmission.RetransmissionAreaDb = append(retransmission.RetransmissionAreaDb, child)
        return &retransmission.RetransmissionAreaDb[len(retransmission.RetransmissionAreaDb)-1]
    }
    if childYangName == "retransmission-asdb" {
        for _, c := range retransmission.RetransmissionAsdb {
            if retransmission.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb{}
        retransmission.RetransmissionAsdb = append(retransmission.RetransmissionAsdb, child)
        return &retransmission.RetransmissionAsdb[len(retransmission.RetransmissionAsdb)-1]
    }
    return nil
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range retransmission.RetransmissionvirtualLinkDb {
        children[retransmission.RetransmissionvirtualLinkDb[i].GetSegmentPath()] = &retransmission.RetransmissionvirtualLinkDb[i]
    }
    for i := range retransmission.RetransmissionAreaDb {
        children[retransmission.RetransmissionAreaDb[i].GetSegmentPath()] = &retransmission.RetransmissionAreaDb[i]
    }
    for i := range retransmission.RetransmissionAsdb {
        children[retransmission.RetransmissionAsdb[i].GetSegmentPath()] = &retransmission.RetransmissionAsdb[i]
    }
    return children
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = retransmission.InterfaceName
    leafs["neighbor-address"] = retransmission.NeighborAddress
    leafs["retransmission-neighbor-address"] = retransmission.RetransmissionNeighborAddress
    leafs["is-retransmissionvirtual-link"] = retransmission.IsRetransmissionvirtualLink
    leafs["retransmissionvirtual-link-id"] = retransmission.RetransmissionvirtualLinkId
    leafs["is-retransmission-sham-link"] = retransmission.IsRetransmissionShamLink
    leafs["retransmission-sham-link-id"] = retransmission.RetransmissionShamLinkId
    leafs["retransmission-timer"] = retransmission.RetransmissionTimer
    leafs["retransmission-length"] = retransmission.RetransmissionLength
    return leafs
}

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetBundleName() string { return "cisco_ios_xr" }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetYangName() string { return "retransmission" }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) SetParent(parent types.Entity) { retransmission.parent = parent }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetParent() types.Entity { return retransmission.parent }

func (retransmission *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission) GetParentYangName() string { return "retransmission-list-process-table" }

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb
// List of virtual link scope entries 
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetFilter() yfilter.YFilter { return retransmissionvirtualLinkDb.YFilter }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) SetFilter(yf yfilter.YFilter) { retransmissionvirtualLinkDb.YFilter = yf }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetSegmentPath() string {
    return "retransmissionvirtual-link-db"
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionvirtualLinkDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionvirtualLinkDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionvirtualLinkDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionvirtualLinkDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionvirtualLinkDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetYangName() string { return "retransmissionvirtual-link-db" }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) SetParent(parent types.Entity) { retransmissionvirtualLinkDb.parent = parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetParent() types.Entity { return retransmissionvirtualLinkDb.parent }

func (retransmissionvirtualLinkDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionvirtualLinkDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb
// List of area scope entries
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetFilter() yfilter.YFilter { return retransmissionAreaDb.YFilter }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) SetFilter(yf yfilter.YFilter) { retransmissionAreaDb.YFilter = yf }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetSegmentPath() string {
    return "retransmission-area-db"
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAreaDb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAreaDb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAreaDb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAreaDb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAreaDb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetYangName() string { return "retransmission-area-db" }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) SetParent(parent types.Entity) { retransmissionAreaDb.parent = parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetParent() types.Entity { return retransmissionAreaDb.parent }

func (retransmissionAreaDb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAreaDb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb
// List of AS scope entries
type Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // LSA type. The type is Ospfv3Lsa1.
    HeaderLsaType interface{}

    // Age of the LSA (seconds). The type is interface{} with range: 0..65535.
    // Units are second.
    HeaderLsaAge interface{}

    // LSA ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderLsaId interface{}

    // Router ID of the advertising router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HeaderAdvertisingRouter interface{}

    // Current LSA sequence number. The type is interface{} with range:
    // -2147483648..2147483647.
    HeaderSequenceNumber interface{}
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetFilter() yfilter.YFilter { return retransmissionAsdb.YFilter }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) SetFilter(yf yfilter.YFilter) { retransmissionAsdb.YFilter = yf }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetGoName(yname string) string {
    if yname == "header-lsa-type" { return "HeaderLsaType" }
    if yname == "header-lsa-age" { return "HeaderLsaAge" }
    if yname == "header-lsa-id" { return "HeaderLsaId" }
    if yname == "header-advertising-router" { return "HeaderAdvertisingRouter" }
    if yname == "header-sequence-number" { return "HeaderSequenceNumber" }
    return ""
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetSegmentPath() string {
    return "retransmission-asdb"
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["header-lsa-type"] = retransmissionAsdb.HeaderLsaType
    leafs["header-lsa-age"] = retransmissionAsdb.HeaderLsaAge
    leafs["header-lsa-id"] = retransmissionAsdb.HeaderLsaId
    leafs["header-advertising-router"] = retransmissionAsdb.HeaderAdvertisingRouter
    leafs["header-sequence-number"] = retransmissionAsdb.HeaderSequenceNumber
    return leafs
}

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetBundleName() string { return "cisco_ios_xr" }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetYangName() string { return "retransmission-asdb" }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) SetParent(parent types.Entity) { retransmissionAsdb.parent = parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetParent() types.Entity { return retransmissionAsdb.parent }

func (retransmissionAsdb *Ospfv3_Processes_Process_DefaultVrf_RetransmissionListProcessTable_Retransmission_RetransmissionAsdb) GetParentYangName() string { return "retransmission" }

// Ospfv3_Processes_Process_DefaultVrf_BadChecksums
// Bad Checksum Packets information table
type Ospfv3_Processes_Process_DefaultVrf_BadChecksums struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bad Checksum Packet information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum.
    BadChecksum []Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum
}

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetFilter() yfilter.YFilter { return badChecksums.YFilter }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) SetFilter(yf yfilter.YFilter) { badChecksums.YFilter = yf }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetGoName(yname string) string {
    if yname == "bad-checksum" { return "BadChecksum" }
    return ""
}

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetSegmentPath() string {
    return "bad-checksums"
}

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bad-checksum" {
        for _, c := range badChecksums.BadChecksum {
            if badChecksums.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum{}
        badChecksums.BadChecksum = append(badChecksums.BadChecksum, child)
        return &badChecksums.BadChecksum[len(badChecksums.BadChecksum)-1]
    }
    return nil
}

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range badChecksums.BadChecksum {
        children[badChecksums.BadChecksum[i].GetSegmentPath()] = &badChecksums.BadChecksum[i]
    }
    return children
}

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetBundleName() string { return "cisco_ios_xr" }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetYangName() string { return "bad-checksums" }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) SetParent(parent types.Entity) { badChecksums.parent = parent }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetParent() types.Entity { return badChecksums.parent }

func (badChecksums *Ospfv3_Processes_Process_DefaultVrf_BadChecksums) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum
// Bad Checksum Packet information
type Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Bad Checksum Packets number. The type is
    // interface{} with range: 0..9.
    PacketNumber interface{}

    // Received Checksum. The type is interface{} with range: 0..65535.
    ReceivedChecksum interface{}

    // Computed Checksum. The type is interface{} with range: 0..65535.
    ComputedChecksum interface{}

    // Received Hexadecimal Data. The type is string with pattern:
    // ([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?.
    ReceivedData interface{}

    // Packet Timestamp (relative to 1970/1/1 00:00).
    Timestamp Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp
}

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetFilter() yfilter.YFilter { return badChecksum.YFilter }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) SetFilter(yf yfilter.YFilter) { badChecksum.YFilter = yf }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetGoName(yname string) string {
    if yname == "packet-number" { return "PacketNumber" }
    if yname == "received-checksum" { return "ReceivedChecksum" }
    if yname == "computed-checksum" { return "ComputedChecksum" }
    if yname == "received-data" { return "ReceivedData" }
    if yname == "timestamp" { return "Timestamp" }
    return ""
}

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetSegmentPath() string {
    return "bad-checksum" + "[packet-number='" + fmt.Sprintf("%v", badChecksum.PacketNumber) + "']"
}

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "timestamp" {
        return &badChecksum.Timestamp
    }
    return nil
}

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["timestamp"] = &badChecksum.Timestamp
    return children
}

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["packet-number"] = badChecksum.PacketNumber
    leafs["received-checksum"] = badChecksum.ReceivedChecksum
    leafs["computed-checksum"] = badChecksum.ComputedChecksum
    leafs["received-data"] = badChecksum.ReceivedData
    return leafs
}

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetBundleName() string { return "cisco_ios_xr" }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetYangName() string { return "bad-checksum" }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) SetParent(parent types.Entity) { badChecksum.parent = parent }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetParent() types.Entity { return badChecksum.parent }

func (badChecksum *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum) GetParentYangName() string { return "bad-checksums" }

// Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp
// Packet Timestamp (relative to 1970/1/1 00:00)
type Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Seconds . The type is interface{} with range: 0..4294967295. Units are
    // second.
    Second interface{}

    // Nano seconds . The type is interface{} with range: 0..4294967295. Units are
    // nanosecond.
    Nanosecond interface{}
}

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetFilter() yfilter.YFilter { return timestamp.YFilter }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) SetFilter(yf yfilter.YFilter) { timestamp.YFilter = yf }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetGoName(yname string) string {
    if yname == "second" { return "Second" }
    if yname == "nanosecond" { return "Nanosecond" }
    return ""
}

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetSegmentPath() string {
    return "timestamp"
}

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["second"] = timestamp.Second
    leafs["nanosecond"] = timestamp.Nanosecond
    return leafs
}

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetBundleName() string { return "cisco_ios_xr" }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetYangName() string { return "timestamp" }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) SetParent(parent types.Entity) { timestamp.parent = parent }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetParent() types.Entity { return timestamp.parent }

func (timestamp *Ospfv3_Processes_Process_DefaultVrf_BadChecksums_BadChecksum_Timestamp) GetParentYangName() string { return "bad-checksum" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable
// Database summary table
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database Summary information.
    DatabaseSummary Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetFilter() yfilter.YFilter { return databaseSummaryTable.YFilter }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) SetFilter(yf yfilter.YFilter) { databaseSummaryTable.YFilter = yf }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetGoName(yname string) string {
    if yname == "database-summary" { return "DatabaseSummary" }
    return ""
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetSegmentPath() string {
    return "database-summary-table"
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-summary" {
        return &databaseSummaryTable.DatabaseSummary
    }
    return nil
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-summary"] = &databaseSummaryTable.DatabaseSummary
    return children
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetYangName() string { return "database-summary-table" }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) SetParent(parent types.Entity) { databaseSummaryTable.parent = parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetParent() types.Entity { return databaseSummaryTable.parent }

func (databaseSummaryTable *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary
// Database Summary information
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Database router ID . The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DatabaseRouterId interface{}

    // If true, opaque database is capable . The type is bool.
    IsOpaqueDatabaseCapable interface{}

    // OSPFv3 database counters .
    DatabaseCounters Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters

    // OSPFv3 Area Database list . The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase.
    AreaDatabase []Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetFilter() yfilter.YFilter { return databaseSummary.YFilter }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) SetFilter(yf yfilter.YFilter) { databaseSummary.YFilter = yf }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetGoName(yname string) string {
    if yname == "database-router-id" { return "DatabaseRouterId" }
    if yname == "is-opaque-database-capable" { return "IsOpaqueDatabaseCapable" }
    if yname == "database-counters" { return "DatabaseCounters" }
    if yname == "area-database" { return "AreaDatabase" }
    return ""
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetSegmentPath() string {
    return "database-summary"
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "database-counters" {
        return &databaseSummary.DatabaseCounters
    }
    if childYangName == "area-database" {
        for _, c := range databaseSummary.AreaDatabase {
            if databaseSummary.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase{}
        databaseSummary.AreaDatabase = append(databaseSummary.AreaDatabase, child)
        return &databaseSummary.AreaDatabase[len(databaseSummary.AreaDatabase)-1]
    }
    return nil
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["database-counters"] = &databaseSummary.DatabaseCounters
    for i := range databaseSummary.AreaDatabase {
        children[databaseSummary.AreaDatabase[i].GetSegmentPath()] = &databaseSummary.AreaDatabase[i]
    }
    return children
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-router-id"] = databaseSummary.DatabaseRouterId
    leafs["is-opaque-database-capable"] = databaseSummary.IsOpaqueDatabaseCapable
    return leafs
}

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetYangName() string { return "database-summary" }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) SetParent(parent types.Entity) { databaseSummary.parent = parent }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetParent() types.Entity { return databaseSummary.parent }

func (databaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary) GetParentYangName() string { return "database-summary-table" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters
// OSPFv3 database counters 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetFilter() yfilter.YFilter { return databaseCounters.YFilter }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetFilter(yf yfilter.YFilter) { databaseCounters.YFilter = yf }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetSegmentPath() string {
    return "database-counters"
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = databaseCounters.Lsa
    leafs["deleted-lsa"] = databaseCounters.DeletedLsa
    leafs["max-age-lsa"] = databaseCounters.MaxAgeLsa
    leafs["lsa-checksum"] = databaseCounters.LsaChecksum
    return leafs
}

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleName() string { return "cisco_ios_xr" }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetYangName() string { return "database-counters" }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) SetParent(parent types.Entity) { databaseCounters.parent = parent }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParent() types.Entity { return databaseCounters.parent }

func (databaseCounters *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_DatabaseCounters) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase
// OSPFv3 Area Database list 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Area ID in decimal or dotted-decimal format. The type is string with
    // length: 0..16.
    LsaAreaId interface{}

    // Area database summary .
    AreaDatabaseSummary Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetFilter() yfilter.YFilter { return areaDatabase.YFilter }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetFilter(yf yfilter.YFilter) { areaDatabase.YFilter = yf }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetGoName(yname string) string {
    if yname == "lsa-area-id" { return "LsaAreaId" }
    if yname == "area-database-summary" { return "AreaDatabaseSummary" }
    return ""
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetSegmentPath() string {
    return "area-database"
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "area-database-summary" {
        return &areaDatabase.AreaDatabaseSummary
    }
    return nil
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["area-database-summary"] = &areaDatabase.AreaDatabaseSummary
    return children
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa-area-id"] = areaDatabase.LsaAreaId
    return leafs
}

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetYangName() string { return "area-database" }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) SetParent(parent types.Entity) { areaDatabase.parent = parent }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParent() types.Entity { return areaDatabase.parent }

func (areaDatabase *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase) GetParentYangName() string { return "database-summary" }

// Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary
// Area database summary 
type Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // lsa. The type is slice of interface{} with range: 0..4294967295.
    Lsa []interface{}

    // deleted lsa. The type is slice of interface{} with range: 0..4294967295.
    DeletedLsa []interface{}

    // max age lsa. The type is slice of interface{} with range: 0..4294967295.
    MaxAgeLsa []interface{}

    // lsa checksum. The type is slice of interface{} with range: 0..4294967295.
    LsaChecksum []interface{}
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetFilter() yfilter.YFilter { return areaDatabaseSummary.YFilter }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetFilter(yf yfilter.YFilter) { areaDatabaseSummary.YFilter = yf }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetGoName(yname string) string {
    if yname == "lsa" { return "Lsa" }
    if yname == "deleted-lsa" { return "DeletedLsa" }
    if yname == "max-age-lsa" { return "MaxAgeLsa" }
    if yname == "lsa-checksum" { return "LsaChecksum" }
    return ""
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetSegmentPath() string {
    return "area-database-summary"
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["lsa"] = areaDatabaseSummary.Lsa
    leafs["deleted-lsa"] = areaDatabaseSummary.DeletedLsa
    leafs["max-age-lsa"] = areaDatabaseSummary.MaxAgeLsa
    leafs["lsa-checksum"] = areaDatabaseSummary.LsaChecksum
    return leafs
}

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleName() string { return "cisco_ios_xr" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetYangName() string { return "area-database-summary" }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) SetParent(parent types.Entity) { areaDatabaseSummary.parent = parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParent() types.Entity { return areaDatabaseSummary.parent }

func (areaDatabaseSummary *Ospfv3_Processes_Process_DefaultVrf_DatabaseSummaryTable_DatabaseSummary_AreaDatabase_AreaDatabaseSummary) GetParentYangName() string { return "area-database" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor.
    Neighbor []Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor
}

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetFilter() yfilter.YFilter { return neighborProcessTable.YFilter }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) SetFilter(yf yfilter.YFilter) { neighborProcessTable.YFilter = yf }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    return ""
}

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetSegmentPath() string {
    return "neighbor-process-table"
}

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighborProcessTable.Neighbor {
            if neighborProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor{}
        neighborProcessTable.Neighbor = append(neighborProcessTable.Neighbor, child)
        return &neighborProcessTable.Neighbor[len(neighborProcessTable.Neighbor)-1]
    }
    return nil
}

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborProcessTable.Neighbor {
        children[neighborProcessTable.Neighbor[i].GetSegmentPath()] = &neighborProcessTable.Neighbor[i]
    }
    return children
}

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetYangName() string { return "neighbor-process-table" }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) SetParent(parent types.Entity) { neighborProcessTable.parent = parent }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetParent() types.Entity { return neighborProcessTable.parent }

func (neighborProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetSegmentPath() string {
    return "neighbor"
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighbor.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighbor.NeighborBfdInfo
    }
    return nil
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighbor.NeighborDetail
    children["neighbor-bfd-info"] = &neighbor.NeighborBfdInfo
    return children
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighbor.InterfaceName
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["neighbor-address-xr"] = neighbor.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighbor.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighbor.NeighborDrPriority
    leafs["neighbor-state"] = neighbor.NeighborState
    leafs["neighbor-designated-router"] = neighbor.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighbor.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighbor.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighbor.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighbor.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighbor.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighbor.IsNeighborShamLink
    return leafs
}

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor) GetParentYangName() string { return "neighbor-process-table" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborProcessTable_Neighbor_NeighborBfdInfo) GetParentYangName() string { return "neighbor" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroutes
// OSPFv3 fast reroute topology information table
type Ospfv3_Processes_Process_DefaultVrf_FastReroutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 fast reroute topology information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute.
    FastReroute []Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute
}

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetFilter() yfilter.YFilter { return fastReroutes.YFilter }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) SetFilter(yf yfilter.YFilter) { fastReroutes.YFilter = yf }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetGoName(yname string) string {
    if yname == "fast-reroute" { return "FastReroute" }
    return ""
}

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetSegmentPath() string {
    return "fast-reroutes"
}

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "fast-reroute" {
        for _, c := range fastReroutes.FastReroute {
            if fastReroutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute{}
        fastReroutes.FastReroute = append(fastReroutes.FastReroute, child)
        return &fastReroutes.FastReroute[len(fastReroutes.FastReroute)-1]
    }
    return nil
}

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fastReroutes.FastReroute {
        children[fastReroutes.FastReroute[i].GetSegmentPath()] = &fastReroutes.FastReroute[i]
    }
    return children
}

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetYangName() string { return "fast-reroutes" }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) SetParent(parent types.Entity) { fastReroutes.parent = parent }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetParent() types.Entity { return fastReroutes.parent }

func (fastReroutes *Ospfv3_Processes_Process_DefaultVrf_FastReroutes) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute
// OSPFv3 fast reroute topology information
type Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RouterId interface{}

    // AreaID. The type is interface{} with range: -2147483648..2147483647.
    AreaId interface{}

    // Area ID string in decimal or dotted decimal format. The type is string with
    // length: 0..16.
    IpfrrTopoAreaId interface{}

    // OSPF Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpfrrRouterId interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    IpfrrAreaRevision interface{}

    // IPFRR Topology entries. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo.
    IpfrrTopo []Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetFilter() yfilter.YFilter { return fastReroute.YFilter }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) SetFilter(yf yfilter.YFilter) { fastReroute.YFilter = yf }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetGoName(yname string) string {
    if yname == "router-id" { return "RouterId" }
    if yname == "area-id" { return "AreaId" }
    if yname == "ipfrr-topo-area-id" { return "IpfrrTopoAreaId" }
    if yname == "ipfrr-router-id" { return "IpfrrRouterId" }
    if yname == "ipfrr-area-revision" { return "IpfrrAreaRevision" }
    if yname == "ipfrr-topo" { return "IpfrrTopo" }
    return ""
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetSegmentPath() string {
    return "fast-reroute"
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipfrr-topo" {
        for _, c := range fastReroute.IpfrrTopo {
            if fastReroute.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo{}
        fastReroute.IpfrrTopo = append(fastReroute.IpfrrTopo, child)
        return &fastReroute.IpfrrTopo[len(fastReroute.IpfrrTopo)-1]
    }
    return nil
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range fastReroute.IpfrrTopo {
        children[fastReroute.IpfrrTopo[i].GetSegmentPath()] = &fastReroute.IpfrrTopo[i]
    }
    return children
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["router-id"] = fastReroute.RouterId
    leafs["area-id"] = fastReroute.AreaId
    leafs["ipfrr-topo-area-id"] = fastReroute.IpfrrTopoAreaId
    leafs["ipfrr-router-id"] = fastReroute.IpfrrRouterId
    leafs["ipfrr-area-revision"] = fastReroute.IpfrrAreaRevision
    return leafs
}

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetBundleName() string { return "cisco_ios_xr" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetYangName() string { return "fast-reroute" }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) SetParent(parent types.Entity) { fastReroute.parent = parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetParent() types.Entity { return fastReroute.parent }

func (fastReroute *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute) GetParentYangName() string { return "fast-reroutes" }

// Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo
// IPFRR Topology entries
type Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IPFRR Topology Node ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeId interface{}

    // IPFRR Topology LSA ID. The type is interface{} with range: 0..4294967295.
    Lsaid interface{}

    // IPFRR Topology Distance. The type is interface{} with range: 0..4294967295.
    Distance interface{}

    // IPFRR Topoogy Type-4 entry. The type is bool.
    Type4 interface{}

    // IPFRR Topology Revision. The type is interface{} with range: 0..4294967295.
    Revision interface{}

    // IPFRR Topology Neighbor Sourced. The type is bool.
    NeighborSourced interface{}

    // IPFRR Topology DR entry. The type is bool.
    Dr interface{}
}

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetFilter() yfilter.YFilter { return ipfrrTopo.YFilter }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) SetFilter(yf yfilter.YFilter) { ipfrrTopo.YFilter = yf }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetGoName(yname string) string {
    if yname == "node-id" { return "NodeId" }
    if yname == "lsaid" { return "Lsaid" }
    if yname == "distance" { return "Distance" }
    if yname == "type4" { return "Type4" }
    if yname == "revision" { return "Revision" }
    if yname == "neighbor-sourced" { return "NeighborSourced" }
    if yname == "dr" { return "Dr" }
    return ""
}

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetSegmentPath() string {
    return "ipfrr-topo"
}

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["node-id"] = ipfrrTopo.NodeId
    leafs["lsaid"] = ipfrrTopo.Lsaid
    leafs["distance"] = ipfrrTopo.Distance
    leafs["type4"] = ipfrrTopo.Type4
    leafs["revision"] = ipfrrTopo.Revision
    leafs["neighbor-sourced"] = ipfrrTopo.NeighborSourced
    leafs["dr"] = ipfrrTopo.Dr
    return leafs
}

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetBundleName() string { return "cisco_ios_xr" }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetYangName() string { return "ipfrr-topo" }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) SetParent(parent types.Entity) { ipfrrTopo.parent = parent }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetParent() types.Entity { return ipfrrTopo.parent }

func (ipfrrTopo *Ospfv3_Processes_Process_DefaultVrf_FastReroutes_FastReroute_IpfrrTopo) GetParentYangName() string { return "fast-reroute" }

// Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable
// OSPFv3 interface brief information table for all
// areas
type Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface brief information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief.
    InterfaceBrief []Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetFilter() yfilter.YFilter { return interfaceBriefProcessTable.YFilter }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) SetFilter(yf yfilter.YFilter) { interfaceBriefProcessTable.YFilter = yf }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetGoName(yname string) string {
    if yname == "interface-brief" { return "InterfaceBrief" }
    return ""
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetSegmentPath() string {
    return "interface-brief-process-table"
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-brief" {
        for _, c := range interfaceBriefProcessTable.InterfaceBrief {
            if interfaceBriefProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief{}
        interfaceBriefProcessTable.InterfaceBrief = append(interfaceBriefProcessTable.InterfaceBrief, child)
        return &interfaceBriefProcessTable.InterfaceBrief[len(interfaceBriefProcessTable.InterfaceBrief)-1]
    }
    return nil
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceBriefProcessTable.InterfaceBrief {
        children[interfaceBriefProcessTable.InterfaceBrief[i].GetSegmentPath()] = &interfaceBriefProcessTable.InterfaceBrief[i]
    }
    return children
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetYangName() string { return "interface-brief-process-table" }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) SetParent(parent types.Entity) { interfaceBriefProcessTable.parent = parent }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetParent() types.Entity { return interfaceBriefProcessTable.parent }

func (interfaceBriefProcessTable *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief
// Interface brief information
type Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface IP address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // Interface link cost. The type is interface{} with range: 0..65535.
    InterfaceLinkCost interface{}

    // Interface OSPF state. The type is Ospfv3InterfaceState.
    OspfInterfaceState interface{}

    // Total number of neighbors . The type is interface{} with range: 0..65535.
    InterfaceNeighbors interface{}

    // Total number of adjacent neighbors. The type is interface{} with range:
    // 0..65535.
    InterfaceAdjacentNeighbors interface{}

    // Network type. The type is Ospfv3Interface.
    NetworkType interface{}
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetFilter() yfilter.YFilter { return interfaceBrief.YFilter }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) SetFilter(yf yfilter.YFilter) { interfaceBrief.YFilter = yf }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-link-cost" { return "InterfaceLinkCost" }
    if yname == "ospf-interface-state" { return "OspfInterfaceState" }
    if yname == "interface-neighbors" { return "InterfaceNeighbors" }
    if yname == "interface-adjacent-neighbors" { return "InterfaceAdjacentNeighbors" }
    if yname == "network-type" { return "NetworkType" }
    return ""
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetSegmentPath() string {
    return "interface-brief" + "[interface-name='" + fmt.Sprintf("%v", interfaceBrief.InterfaceName) + "']"
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceBrief.InterfaceName
    leafs["interface-address"] = interfaceBrief.InterfaceAddress
    leafs["interface-link-cost"] = interfaceBrief.InterfaceLinkCost
    leafs["ospf-interface-state"] = interfaceBrief.OspfInterfaceState
    leafs["interface-neighbors"] = interfaceBrief.InterfaceNeighbors
    leafs["interface-adjacent-neighbors"] = interfaceBrief.InterfaceAdjacentNeighbors
    leafs["network-type"] = interfaceBrief.NetworkType
    return leafs
}

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetYangName() string { return "interface-brief" }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) SetParent(parent types.Entity) { interfaceBrief.parent = parent }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetParent() types.Entity { return interfaceBrief.parent }

func (interfaceBrief *Ospfv3_Processes_Process_DefaultVrf_InterfaceBriefProcessTable_InterfaceBrief) GetParentYangName() string { return "interface-brief-process-table" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable
// OSPFv3 neighbor information table for all areas
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OSPFv3 neighbor detail information. The type is slice of
    // Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail.
    NeighborDetail []Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetFilter() yfilter.YFilter { return neighborDetailProcessTable.YFilter }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) SetFilter(yf yfilter.YFilter) { neighborDetailProcessTable.YFilter = yf }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetGoName(yname string) string {
    if yname == "neighbor-detail" { return "NeighborDetail" }
    return ""
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetSegmentPath() string {
    return "neighbor-detail-process-table"
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        for _, c := range neighborDetailProcessTable.NeighborDetail {
            if neighborDetailProcessTable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail{}
        neighborDetailProcessTable.NeighborDetail = append(neighborDetailProcessTable.NeighborDetail, child)
        return &neighborDetailProcessTable.NeighborDetail[len(neighborDetailProcessTable.NeighborDetail)-1]
    }
    return nil
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborDetailProcessTable.NeighborDetail {
        children[neighborDetailProcessTable.NeighborDetail[i].GetSegmentPath()] = &neighborDetailProcessTable.NeighborDetail[i]
    }
    return children
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetYangName() string { return "neighbor-detail-process-table" }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) SetParent(parent types.Entity) { neighborDetailProcessTable.parent = parent }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetParent() types.Entity { return neighborDetailProcessTable.parent }

func (neighborDetailProcessTable *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable) GetParentYangName() string { return "default-vrf" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail
// OSPFv3 neighbor detail information
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface name. The type is string with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor IP Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddressXr interface{}

    // Neighbor interface ID. The type is interface{} with range: 0..4294967295.
    NeighborInterfaceId interface{}

    // Neighbor's DR priority. The type is interface{} with range: 0..255.
    NeighborDrPriority interface{}

    // Neighbor's state. The type is Ospfv3NeighborState.
    NeighborState interface{}

    // Designated router . The type is string with length: 0..9.
    NeighborDesignatedRouter interface{}

    // Time until neighbor's dead timer expires (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborDeadTimer interface{}

    // Amount of time since the adjacency is up (seconds). The type is interface{}
    // with range: 0..4294967295. Units are second.
    NeighborUpTime interface{}

    // Neighbor virtual link id . The type is interface{} with range:
    // 0..4294967295.
    NeighborVirtualLinkId interface{}

    // If true, neighbor is on a virtual link . The type is bool.
    IsNeighborVirtualLink interface{}

    // Neighbor sham link id . The type is interface{} with range: 0..4294967295.
    NeighborShamLinkId interface{}

    // If true, neighbor is on a sham link . The type is bool.
    IsNeighborShamLink interface{}

    // Detailed OSPFv3 neighbor information .
    NeighborDetail Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail

    // Neighbor BFD information.
    NeighborBfdInfo Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-address-xr" { return "NeighborAddressXr" }
    if yname == "neighbor-interface-id" { return "NeighborInterfaceId" }
    if yname == "neighbor-dr-priority" { return "NeighborDrPriority" }
    if yname == "neighbor-state" { return "NeighborState" }
    if yname == "neighbor-designated-router" { return "NeighborDesignatedRouter" }
    if yname == "neighbor-dead-timer" { return "NeighborDeadTimer" }
    if yname == "neighbor-up-time" { return "NeighborUpTime" }
    if yname == "neighbor-virtual-link-id" { return "NeighborVirtualLinkId" }
    if yname == "is-neighbor-virtual-link" { return "IsNeighborVirtualLink" }
    if yname == "neighbor-sham-link-id" { return "NeighborShamLinkId" }
    if yname == "is-neighbor-sham-link" { return "IsNeighborShamLink" }
    if yname == "neighbor-detail" { return "NeighborDetail" }
    if yname == "neighbor-bfd-info" { return "NeighborBfdInfo" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-detail" {
        return &neighborDetail.NeighborDetail
    }
    if childYangName == "neighbor-bfd-info" {
        return &neighborDetail.NeighborBfdInfo
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-detail"] = &neighborDetail.NeighborDetail
    children["neighbor-bfd-info"] = &neighborDetail.NeighborBfdInfo
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = neighborDetail.InterfaceName
    leafs["neighbor-address"] = neighborDetail.NeighborAddress
    leafs["neighbor-address-xr"] = neighborDetail.NeighborAddressXr
    leafs["neighbor-interface-id"] = neighborDetail.NeighborInterfaceId
    leafs["neighbor-dr-priority"] = neighborDetail.NeighborDrPriority
    leafs["neighbor-state"] = neighborDetail.NeighborState
    leafs["neighbor-designated-router"] = neighborDetail.NeighborDesignatedRouter
    leafs["neighbor-dead-timer"] = neighborDetail.NeighborDeadTimer
    leafs["neighbor-up-time"] = neighborDetail.NeighborUpTime
    leafs["neighbor-virtual-link-id"] = neighborDetail.NeighborVirtualLinkId
    leafs["is-neighbor-virtual-link"] = neighborDetail.IsNeighborVirtualLink
    leafs["neighbor-sham-link-id"] = neighborDetail.NeighborShamLinkId
    leafs["is-neighbor-sham-link"] = neighborDetail.IsNeighborShamLink
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail) GetParentYangName() string { return "neighbor-detail-process-table" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail
// Detailed OSPFv3 neighbor information 
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of state changes . The type is interface{} with range: 0..65535.
    StateChanges interface{}

    // Cost of path to this neighbor . The type is interface{} with range:
    // 0..65535.
    NeighborCost interface{}

    // If true, filter outgoing LSAs . The type is bool.
    IsNeighborFiltered interface{}

    // Address of designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborDesignatedRouterAddress interface{}

    // Address of backup designated router. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborBackupDesignatedRouterAddress interface{}

    // Interface type. The type is Ospfv3Interface.
    InterfaceType interface{}

    // Poll interval (s). The type is interface{} with range: 0..4294967295.
    PollInterval interface{}

    // For NBMA networks, amount of time remaining in seconds before the next poll
    // interval expires and Hello is sent (s). The type is interface{} with range:
    // 0..4294967295. Units are second.
    NextPollInterval interface{}

    // Remaining time when ignore timer is running . The type is interface{} with
    // range: 0..4294967295.
    NeighborIgnoreTimer interface{}

    // This is bitmask of neighbor's option field received . The type is
    // interface{} with range: 0..4294967295.
    NeighborOption interface{}

    // Number of pending events . The type is interface{} with range: 0..65535.
    PendingEvents interface{}

    // Retransmission information with this neighbor.
    NeighborRetransmission Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetFilter() yfilter.YFilter { return neighborDetail.YFilter }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) SetFilter(yf yfilter.YFilter) { neighborDetail.YFilter = yf }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetGoName(yname string) string {
    if yname == "state-changes" { return "StateChanges" }
    if yname == "neighbor-cost" { return "NeighborCost" }
    if yname == "is-neighbor-filtered" { return "IsNeighborFiltered" }
    if yname == "neighbor-designated-router-address" { return "NeighborDesignatedRouterAddress" }
    if yname == "neighbor-backup-designated-router-address" { return "NeighborBackupDesignatedRouterAddress" }
    if yname == "interface-type" { return "InterfaceType" }
    if yname == "poll-interval" { return "PollInterval" }
    if yname == "next-poll-interval" { return "NextPollInterval" }
    if yname == "neighbor-ignore-timer" { return "NeighborIgnoreTimer" }
    if yname == "neighbor-option" { return "NeighborOption" }
    if yname == "pending-events" { return "PendingEvents" }
    if yname == "neighbor-retransmission" { return "NeighborRetransmission" }
    return ""
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetSegmentPath() string {
    return "neighbor-detail"
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-retransmission" {
        return &neighborDetail.NeighborRetransmission
    }
    return nil
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-retransmission"] = &neighborDetail.NeighborRetransmission
    return children
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["state-changes"] = neighborDetail.StateChanges
    leafs["neighbor-cost"] = neighborDetail.NeighborCost
    leafs["is-neighbor-filtered"] = neighborDetail.IsNeighborFiltered
    leafs["neighbor-designated-router-address"] = neighborDetail.NeighborDesignatedRouterAddress
    leafs["neighbor-backup-designated-router-address"] = neighborDetail.NeighborBackupDesignatedRouterAddress
    leafs["interface-type"] = neighborDetail.InterfaceType
    leafs["poll-interval"] = neighborDetail.PollInterval
    leafs["next-poll-interval"] = neighborDetail.NextPollInterval
    leafs["neighbor-ignore-timer"] = neighborDetail.NeighborIgnoreTimer
    leafs["neighbor-option"] = neighborDetail.NeighborOption
    leafs["pending-events"] = neighborDetail.PendingEvents
    return leafs
}

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetYangName() string { return "neighbor-detail" }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) SetParent(parent types.Entity) { neighborDetail.parent = parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetParent() types.Entity { return neighborDetail.parent }

func (neighborDetail *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission
// Retransmission information with this neighbor
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of database descriptor retransmissions during last exchange. The
    // type is interface{} with range: 0..4294967295.
    DatabaseDescriptorRetransmissions interface{}

    // Area scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AreaFloodIndex interface{}

    // AS scope LSA's flood index. The type is interface{} with range:
    // 0..4294967295.
    AsFloodIndex interface{}

    // Link flood index. The type is interface{} with range: 0..4294967295.
    LinkFloodIndex interface{}

    // Number of neighbor retransmissions . The type is interface{} with range:
    // 0..4294967295.
    NeighborRetransmissions interface{}

    // Number of retransmissions for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    Retransmissions interface{}

    // First flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaFirstFlood interface{}

    // Index of the first flood item for area scope LSAs. The type is interface{}
    // with range: 0..4294967295.
    AreaFirstFloodIndex interface{}

    // First flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsFirstFlood interface{}

    // Index for first flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsFirstFloodIndex interface{}

    // Link first flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFlood interface{}

    // Link first flood information index. The type is interface{} with range:
    // 0..4294967295.
    LinkFirstFloodIndex interface{}

    // Next flood item for area scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AreaNextFlood interface{}

    // Index of next flood item for Area scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AreaNextFloodIndex interface{}

    // Next flood item for AS scope LSAs. The type is interface{} with range:
    // 0..4294967295.
    AsNextFlood interface{}

    // Index of next flood item for AS scope LSAs. The type is interface{} with
    // range: 0..4294967295.
    AsNextFloodIndex interface{}

    // Link next flood information . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFlood interface{}

    // Link next flood information index . The type is interface{} with range:
    // 0..4294967295.
    LinkNextFloodIndex interface{}

    // Number of LSAs sent in last retransmission. The type is interface{} with
    // range: 0..4294967295.
    LastRetransmissionLength interface{}

    // Maximum number of LSAs sent in a retransmission. The type is interface{}
    // with range: 0..4294967295.
    MaximumRetransmissionLength interface{}

    // Last retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    LastRetransmissionTime interface{}

    // Maximum retransmission scan time (ms). The type is interface{} with range:
    // 0..4294967295.
    MaximumRetransmissionTime interface{}

    // Time until next LSA retransmission (ms). The type is interface{} with
    // range: 0..4294967295.
    LsaRetransmissionTimer interface{}
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetFilter() yfilter.YFilter { return neighborRetransmission.YFilter }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetFilter(yf yfilter.YFilter) { neighborRetransmission.YFilter = yf }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetGoName(yname string) string {
    if yname == "database-descriptor-retransmissions" { return "DatabaseDescriptorRetransmissions" }
    if yname == "area-flood-index" { return "AreaFloodIndex" }
    if yname == "as-flood-index" { return "AsFloodIndex" }
    if yname == "link-flood-index" { return "LinkFloodIndex" }
    if yname == "neighbor-retransmissions" { return "NeighborRetransmissions" }
    if yname == "retransmissions" { return "Retransmissions" }
    if yname == "area-first-flood" { return "AreaFirstFlood" }
    if yname == "area-first-flood-index" { return "AreaFirstFloodIndex" }
    if yname == "as-first-flood" { return "AsFirstFlood" }
    if yname == "as-first-flood-index" { return "AsFirstFloodIndex" }
    if yname == "link-first-flood" { return "LinkFirstFlood" }
    if yname == "link-first-flood-index" { return "LinkFirstFloodIndex" }
    if yname == "area-next-flood" { return "AreaNextFlood" }
    if yname == "area-next-flood-index" { return "AreaNextFloodIndex" }
    if yname == "as-next-flood" { return "AsNextFlood" }
    if yname == "as-next-flood-index" { return "AsNextFloodIndex" }
    if yname == "link-next-flood" { return "LinkNextFlood" }
    if yname == "link-next-flood-index" { return "LinkNextFloodIndex" }
    if yname == "last-retransmission-length" { return "LastRetransmissionLength" }
    if yname == "maximum-retransmission-length" { return "MaximumRetransmissionLength" }
    if yname == "last-retransmission-time" { return "LastRetransmissionTime" }
    if yname == "maximum-retransmission-time" { return "MaximumRetransmissionTime" }
    if yname == "lsa-retransmission-timer" { return "LsaRetransmissionTimer" }
    return ""
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetSegmentPath() string {
    return "neighbor-retransmission"
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["database-descriptor-retransmissions"] = neighborRetransmission.DatabaseDescriptorRetransmissions
    leafs["area-flood-index"] = neighborRetransmission.AreaFloodIndex
    leafs["as-flood-index"] = neighborRetransmission.AsFloodIndex
    leafs["link-flood-index"] = neighborRetransmission.LinkFloodIndex
    leafs["neighbor-retransmissions"] = neighborRetransmission.NeighborRetransmissions
    leafs["retransmissions"] = neighborRetransmission.Retransmissions
    leafs["area-first-flood"] = neighborRetransmission.AreaFirstFlood
    leafs["area-first-flood-index"] = neighborRetransmission.AreaFirstFloodIndex
    leafs["as-first-flood"] = neighborRetransmission.AsFirstFlood
    leafs["as-first-flood-index"] = neighborRetransmission.AsFirstFloodIndex
    leafs["link-first-flood"] = neighborRetransmission.LinkFirstFlood
    leafs["link-first-flood-index"] = neighborRetransmission.LinkFirstFloodIndex
    leafs["area-next-flood"] = neighborRetransmission.AreaNextFlood
    leafs["area-next-flood-index"] = neighborRetransmission.AreaNextFloodIndex
    leafs["as-next-flood"] = neighborRetransmission.AsNextFlood
    leafs["as-next-flood-index"] = neighborRetransmission.AsNextFloodIndex
    leafs["link-next-flood"] = neighborRetransmission.LinkNextFlood
    leafs["link-next-flood-index"] = neighborRetransmission.LinkNextFloodIndex
    leafs["last-retransmission-length"] = neighborRetransmission.LastRetransmissionLength
    leafs["maximum-retransmission-length"] = neighborRetransmission.MaximumRetransmissionLength
    leafs["last-retransmission-time"] = neighborRetransmission.LastRetransmissionTime
    leafs["maximum-retransmission-time"] = neighborRetransmission.MaximumRetransmissionTime
    leafs["lsa-retransmission-timer"] = neighborRetransmission.LsaRetransmissionTimer
    return leafs
}

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleName() string { return "cisco_ios_xr" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetYangName() string { return "neighbor-retransmission" }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) SetParent(parent types.Entity) { neighborRetransmission.parent = parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParent() types.Entity { return neighborRetransmission.parent }

func (neighborRetransmission *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborDetail_NeighborRetransmission) GetParentYangName() string { return "neighbor-detail" }

// Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo
// Neighbor BFD information
type Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BFD enable mode - Default/Strict. The type is interface{} with range:
    // 0..4294967295.
    BfdIntfEnableMode interface{}

    // Status of the BFD Session. The type is interface{} with range: 0..255.
    BfdStatusFlag interface{}
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetFilter() yfilter.YFilter { return neighborBfdInfo.YFilter }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) SetFilter(yf yfilter.YFilter) { neighborBfdInfo.YFilter = yf }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetGoName(yname string) string {
    if yname == "bfd-intf-enable-mode" { return "BfdIntfEnableMode" }
    if yname == "bfd-status-flag" { return "BfdStatusFlag" }
    return ""
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetSegmentPath() string {
    return "neighbor-bfd-info"
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["bfd-intf-enable-mode"] = neighborBfdInfo.BfdIntfEnableMode
    leafs["bfd-status-flag"] = neighborBfdInfo.BfdStatusFlag
    return leafs
}

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetBundleName() string { return "cisco_ios_xr" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetYangName() string { return "neighbor-bfd-info" }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) SetParent(parent types.Entity) { neighborBfdInfo.parent = parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetParent() types.Entity { return neighborBfdInfo.parent }

func (neighborBfdInfo *Ospfv3_Processes_Process_DefaultVrf_NeighborDetailProcessTable_NeighborDetail_NeighborBfdInfo) GetParentYangName() string { return "neighbor-detail" }

